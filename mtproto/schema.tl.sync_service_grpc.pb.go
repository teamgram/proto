//
// WARNING! All changes made in this file will be lost!
// Created from 'scheme.tl' by 'mtprotoc'
//
// Copyright (c) 2025-present,  Teamgram Authors.
//  All rights reserved.
//
// Author: Benqi (wubenqi@gmail.com)

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: schema.tl.sync_service.proto

package mtproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RPCAccentColors_AccountUpdateColor_FullMethodName                = "/mtproto.RPCAccentColors/account_updateColor"
	RPCAccentColors_AccountGetDefaultBackgroundEmojis_FullMethodName = "/mtproto.RPCAccentColors/account_getDefaultBackgroundEmojis"
	RPCAccentColors_HelpGetPeerColors_FullMethodName                 = "/mtproto.RPCAccentColors/help_getPeerColors"
	RPCAccentColors_HelpGetPeerProfileColors_FullMethodName          = "/mtproto.RPCAccentColors/help_getPeerProfileColors"
	RPCAccentColors_ChannelsUpdateColor_FullMethodName               = "/mtproto.RPCAccentColors/channels_updateColor"
)

// RPCAccentColorsClient is the client API for RPCAccentColors service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCAccentColorsClient interface {
	AccountUpdateColor(ctx context.Context, in *TLAccountUpdateColor, opts ...grpc.CallOption) (*Bool, error)
	AccountGetDefaultBackgroundEmojis(ctx context.Context, in *TLAccountGetDefaultBackgroundEmojis, opts ...grpc.CallOption) (*EmojiList, error)
	HelpGetPeerColors(ctx context.Context, in *TLHelpGetPeerColors, opts ...grpc.CallOption) (*Help_PeerColors, error)
	HelpGetPeerProfileColors(ctx context.Context, in *TLHelpGetPeerProfileColors, opts ...grpc.CallOption) (*Help_PeerColors, error)
	ChannelsUpdateColor(ctx context.Context, in *TLChannelsUpdateColor, opts ...grpc.CallOption) (*Updates, error)
}

type rPCAccentColorsClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCAccentColorsClient(cc grpc.ClientConnInterface) RPCAccentColorsClient {
	return &rPCAccentColorsClient{cc}
}

func (c *rPCAccentColorsClient) AccountUpdateColor(ctx context.Context, in *TLAccountUpdateColor, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCAccentColors_AccountUpdateColor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccentColorsClient) AccountGetDefaultBackgroundEmojis(ctx context.Context, in *TLAccountGetDefaultBackgroundEmojis, opts ...grpc.CallOption) (*EmojiList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmojiList)
	err := c.cc.Invoke(ctx, RPCAccentColors_AccountGetDefaultBackgroundEmojis_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccentColorsClient) HelpGetPeerColors(ctx context.Context, in *TLHelpGetPeerColors, opts ...grpc.CallOption) (*Help_PeerColors, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Help_PeerColors)
	err := c.cc.Invoke(ctx, RPCAccentColors_HelpGetPeerColors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccentColorsClient) HelpGetPeerProfileColors(ctx context.Context, in *TLHelpGetPeerProfileColors, opts ...grpc.CallOption) (*Help_PeerColors, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Help_PeerColors)
	err := c.cc.Invoke(ctx, RPCAccentColors_HelpGetPeerProfileColors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccentColorsClient) ChannelsUpdateColor(ctx context.Context, in *TLChannelsUpdateColor, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCAccentColors_ChannelsUpdateColor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCAccentColorsServer is the server API for RPCAccentColors service.
// All implementations should embed UnimplementedRPCAccentColorsServer
// for forward compatibility.
type RPCAccentColorsServer interface {
	AccountUpdateColor(context.Context, *TLAccountUpdateColor) (*Bool, error)
	AccountGetDefaultBackgroundEmojis(context.Context, *TLAccountGetDefaultBackgroundEmojis) (*EmojiList, error)
	HelpGetPeerColors(context.Context, *TLHelpGetPeerColors) (*Help_PeerColors, error)
	HelpGetPeerProfileColors(context.Context, *TLHelpGetPeerProfileColors) (*Help_PeerColors, error)
	ChannelsUpdateColor(context.Context, *TLChannelsUpdateColor) (*Updates, error)
}

// UnimplementedRPCAccentColorsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCAccentColorsServer struct{}

func (UnimplementedRPCAccentColorsServer) AccountUpdateColor(context.Context, *TLAccountUpdateColor) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUpdateColor not implemented")
}
func (UnimplementedRPCAccentColorsServer) AccountGetDefaultBackgroundEmojis(context.Context, *TLAccountGetDefaultBackgroundEmojis) (*EmojiList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetDefaultBackgroundEmojis not implemented")
}
func (UnimplementedRPCAccentColorsServer) HelpGetPeerColors(context.Context, *TLHelpGetPeerColors) (*Help_PeerColors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetPeerColors not implemented")
}
func (UnimplementedRPCAccentColorsServer) HelpGetPeerProfileColors(context.Context, *TLHelpGetPeerProfileColors) (*Help_PeerColors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetPeerProfileColors not implemented")
}
func (UnimplementedRPCAccentColorsServer) ChannelsUpdateColor(context.Context, *TLChannelsUpdateColor) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsUpdateColor not implemented")
}
func (UnimplementedRPCAccentColorsServer) testEmbeddedByValue() {}

// UnsafeRPCAccentColorsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCAccentColorsServer will
// result in compilation errors.
type UnsafeRPCAccentColorsServer interface {
	mustEmbedUnimplementedRPCAccentColorsServer()
}

func RegisterRPCAccentColorsServer(s grpc.ServiceRegistrar, srv RPCAccentColorsServer) {
	// If the following call pancis, it indicates UnimplementedRPCAccentColorsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCAccentColors_ServiceDesc, srv)
}

func _RPCAccentColors_AccountUpdateColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUpdateColor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccentColorsServer).AccountUpdateColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAccentColors_AccountUpdateColor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccentColorsServer).AccountUpdateColor(ctx, req.(*TLAccountUpdateColor))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccentColors_AccountGetDefaultBackgroundEmojis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetDefaultBackgroundEmojis)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccentColorsServer).AccountGetDefaultBackgroundEmojis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAccentColors_AccountGetDefaultBackgroundEmojis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccentColorsServer).AccountGetDefaultBackgroundEmojis(ctx, req.(*TLAccountGetDefaultBackgroundEmojis))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccentColors_HelpGetPeerColors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetPeerColors)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccentColorsServer).HelpGetPeerColors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAccentColors_HelpGetPeerColors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccentColorsServer).HelpGetPeerColors(ctx, req.(*TLHelpGetPeerColors))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccentColors_HelpGetPeerProfileColors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetPeerProfileColors)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccentColorsServer).HelpGetPeerProfileColors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAccentColors_HelpGetPeerProfileColors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccentColorsServer).HelpGetPeerProfileColors(ctx, req.(*TLHelpGetPeerProfileColors))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccentColors_ChannelsUpdateColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsUpdateColor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccentColorsServer).ChannelsUpdateColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAccentColors_ChannelsUpdateColor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccentColorsServer).ChannelsUpdateColor(ctx, req.(*TLChannelsUpdateColor))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCAccentColors_ServiceDesc is the grpc.ServiceDesc for RPCAccentColors service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCAccentColors_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCAccentColors",
	HandlerType: (*RPCAccentColorsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "account_updateColor",
			Handler:    _RPCAccentColors_AccountUpdateColor_Handler,
		},
		{
			MethodName: "account_getDefaultBackgroundEmojis",
			Handler:    _RPCAccentColors_AccountGetDefaultBackgroundEmojis_Handler,
		},
		{
			MethodName: "help_getPeerColors",
			Handler:    _RPCAccentColors_HelpGetPeerColors_Handler,
		},
		{
			MethodName: "help_getPeerProfileColors",
			Handler:    _RPCAccentColors_HelpGetPeerProfileColors_Handler,
		},
		{
			MethodName: "channels_updateColor",
			Handler:    _RPCAccentColors_ChannelsUpdateColor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCAccount_AccountDeleteAccount_FullMethodName        = "/mtproto.RPCAccount/account_deleteAccount"
	RPCAccount_AccountGetAccountTTL_FullMethodName        = "/mtproto.RPCAccount/account_getAccountTTL"
	RPCAccount_AccountSetAccountTTL_FullMethodName        = "/mtproto.RPCAccount/account_setAccountTTL"
	RPCAccount_AccountSendChangePhoneCode_FullMethodName  = "/mtproto.RPCAccount/account_sendChangePhoneCode"
	RPCAccount_AccountChangePhone_FullMethodName          = "/mtproto.RPCAccount/account_changePhone"
	RPCAccount_AccountResetAuthorization_FullMethodName   = "/mtproto.RPCAccount/account_resetAuthorization"
	RPCAccount_AccountSendConfirmPhoneCode_FullMethodName = "/mtproto.RPCAccount/account_sendConfirmPhoneCode"
	RPCAccount_AccountConfirmPhone_FullMethodName         = "/mtproto.RPCAccount/account_confirmPhone"
)

// RPCAccountClient is the client API for RPCAccount service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCAccountClient interface {
	AccountDeleteAccount(ctx context.Context, in *TLAccountDeleteAccount, opts ...grpc.CallOption) (*Bool, error)
	AccountGetAccountTTL(ctx context.Context, in *TLAccountGetAccountTTL, opts ...grpc.CallOption) (*AccountDaysTTL, error)
	AccountSetAccountTTL(ctx context.Context, in *TLAccountSetAccountTTL, opts ...grpc.CallOption) (*Bool, error)
	AccountSendChangePhoneCode(ctx context.Context, in *TLAccountSendChangePhoneCode, opts ...grpc.CallOption) (*Auth_SentCode, error)
	AccountChangePhone(ctx context.Context, in *TLAccountChangePhone, opts ...grpc.CallOption) (*User, error)
	AccountResetAuthorization(ctx context.Context, in *TLAccountResetAuthorization, opts ...grpc.CallOption) (*Bool, error)
	AccountSendConfirmPhoneCode(ctx context.Context, in *TLAccountSendConfirmPhoneCode, opts ...grpc.CallOption) (*Auth_SentCode, error)
	AccountConfirmPhone(ctx context.Context, in *TLAccountConfirmPhone, opts ...grpc.CallOption) (*Bool, error)
}

type rPCAccountClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCAccountClient(cc grpc.ClientConnInterface) RPCAccountClient {
	return &rPCAccountClient{cc}
}

func (c *rPCAccountClient) AccountDeleteAccount(ctx context.Context, in *TLAccountDeleteAccount, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCAccount_AccountDeleteAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountGetAccountTTL(ctx context.Context, in *TLAccountGetAccountTTL, opts ...grpc.CallOption) (*AccountDaysTTL, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountDaysTTL)
	err := c.cc.Invoke(ctx, RPCAccount_AccountGetAccountTTL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountSetAccountTTL(ctx context.Context, in *TLAccountSetAccountTTL, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCAccount_AccountSetAccountTTL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountSendChangePhoneCode(ctx context.Context, in *TLAccountSendChangePhoneCode, opts ...grpc.CallOption) (*Auth_SentCode, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Auth_SentCode)
	err := c.cc.Invoke(ctx, RPCAccount_AccountSendChangePhoneCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountChangePhone(ctx context.Context, in *TLAccountChangePhone, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, RPCAccount_AccountChangePhone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountResetAuthorization(ctx context.Context, in *TLAccountResetAuthorization, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCAccount_AccountResetAuthorization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountSendConfirmPhoneCode(ctx context.Context, in *TLAccountSendConfirmPhoneCode, opts ...grpc.CallOption) (*Auth_SentCode, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Auth_SentCode)
	err := c.cc.Invoke(ctx, RPCAccount_AccountSendConfirmPhoneCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountConfirmPhone(ctx context.Context, in *TLAccountConfirmPhone, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCAccount_AccountConfirmPhone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCAccountServer is the server API for RPCAccount service.
// All implementations should embed UnimplementedRPCAccountServer
// for forward compatibility.
type RPCAccountServer interface {
	AccountDeleteAccount(context.Context, *TLAccountDeleteAccount) (*Bool, error)
	AccountGetAccountTTL(context.Context, *TLAccountGetAccountTTL) (*AccountDaysTTL, error)
	AccountSetAccountTTL(context.Context, *TLAccountSetAccountTTL) (*Bool, error)
	AccountSendChangePhoneCode(context.Context, *TLAccountSendChangePhoneCode) (*Auth_SentCode, error)
	AccountChangePhone(context.Context, *TLAccountChangePhone) (*User, error)
	AccountResetAuthorization(context.Context, *TLAccountResetAuthorization) (*Bool, error)
	AccountSendConfirmPhoneCode(context.Context, *TLAccountSendConfirmPhoneCode) (*Auth_SentCode, error)
	AccountConfirmPhone(context.Context, *TLAccountConfirmPhone) (*Bool, error)
}

// UnimplementedRPCAccountServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCAccountServer struct{}

func (UnimplementedRPCAccountServer) AccountDeleteAccount(context.Context, *TLAccountDeleteAccount) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountDeleteAccount not implemented")
}
func (UnimplementedRPCAccountServer) AccountGetAccountTTL(context.Context, *TLAccountGetAccountTTL) (*AccountDaysTTL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetAccountTTL not implemented")
}
func (UnimplementedRPCAccountServer) AccountSetAccountTTL(context.Context, *TLAccountSetAccountTTL) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSetAccountTTL not implemented")
}
func (UnimplementedRPCAccountServer) AccountSendChangePhoneCode(context.Context, *TLAccountSendChangePhoneCode) (*Auth_SentCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSendChangePhoneCode not implemented")
}
func (UnimplementedRPCAccountServer) AccountChangePhone(context.Context, *TLAccountChangePhone) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountChangePhone not implemented")
}
func (UnimplementedRPCAccountServer) AccountResetAuthorization(context.Context, *TLAccountResetAuthorization) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountResetAuthorization not implemented")
}
func (UnimplementedRPCAccountServer) AccountSendConfirmPhoneCode(context.Context, *TLAccountSendConfirmPhoneCode) (*Auth_SentCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSendConfirmPhoneCode not implemented")
}
func (UnimplementedRPCAccountServer) AccountConfirmPhone(context.Context, *TLAccountConfirmPhone) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountConfirmPhone not implemented")
}
func (UnimplementedRPCAccountServer) testEmbeddedByValue() {}

// UnsafeRPCAccountServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCAccountServer will
// result in compilation errors.
type UnsafeRPCAccountServer interface {
	mustEmbedUnimplementedRPCAccountServer()
}

func RegisterRPCAccountServer(s grpc.ServiceRegistrar, srv RPCAccountServer) {
	// If the following call pancis, it indicates UnimplementedRPCAccountServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCAccount_ServiceDesc, srv)
}

func _RPCAccount_AccountDeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountDeleteAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountDeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAccount_AccountDeleteAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountDeleteAccount(ctx, req.(*TLAccountDeleteAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountGetAccountTTL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetAccountTTL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountGetAccountTTL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAccount_AccountGetAccountTTL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountGetAccountTTL(ctx, req.(*TLAccountGetAccountTTL))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountSetAccountTTL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSetAccountTTL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountSetAccountTTL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAccount_AccountSetAccountTTL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountSetAccountTTL(ctx, req.(*TLAccountSetAccountTTL))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountSendChangePhoneCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSendChangePhoneCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountSendChangePhoneCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAccount_AccountSendChangePhoneCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountSendChangePhoneCode(ctx, req.(*TLAccountSendChangePhoneCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountChangePhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountChangePhone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountChangePhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAccount_AccountChangePhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountChangePhone(ctx, req.(*TLAccountChangePhone))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountResetAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountResetAuthorization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountResetAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAccount_AccountResetAuthorization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountResetAuthorization(ctx, req.(*TLAccountResetAuthorization))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountSendConfirmPhoneCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSendConfirmPhoneCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountSendConfirmPhoneCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAccount_AccountSendConfirmPhoneCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountSendConfirmPhoneCode(ctx, req.(*TLAccountSendConfirmPhoneCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountConfirmPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountConfirmPhone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountConfirmPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAccount_AccountConfirmPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountConfirmPhone(ctx, req.(*TLAccountConfirmPhone))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCAccount_ServiceDesc is the grpc.ServiceDesc for RPCAccount service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCAccount_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCAccount",
	HandlerType: (*RPCAccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "account_deleteAccount",
			Handler:    _RPCAccount_AccountDeleteAccount_Handler,
		},
		{
			MethodName: "account_getAccountTTL",
			Handler:    _RPCAccount_AccountGetAccountTTL_Handler,
		},
		{
			MethodName: "account_setAccountTTL",
			Handler:    _RPCAccount_AccountSetAccountTTL_Handler,
		},
		{
			MethodName: "account_sendChangePhoneCode",
			Handler:    _RPCAccount_AccountSendChangePhoneCode_Handler,
		},
		{
			MethodName: "account_changePhone",
			Handler:    _RPCAccount_AccountChangePhone_Handler,
		},
		{
			MethodName: "account_resetAuthorization",
			Handler:    _RPCAccount_AccountResetAuthorization_Handler,
		},
		{
			MethodName: "account_sendConfirmPhoneCode",
			Handler:    _RPCAccount_AccountSendConfirmPhoneCode_Handler,
		},
		{
			MethodName: "account_confirmPhone",
			Handler:    _RPCAccount_AccountConfirmPhone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCAffiliatePrograms_BotsUpdateStarRefProgram_FullMethodName        = "/mtproto.RPCAffiliatePrograms/bots_updateStarRefProgram"
	RPCAffiliatePrograms_PaymentsGetConnectedStarRefBots_FullMethodName = "/mtproto.RPCAffiliatePrograms/payments_getConnectedStarRefBots"
	RPCAffiliatePrograms_PaymentsGetConnectedStarRefBot_FullMethodName  = "/mtproto.RPCAffiliatePrograms/payments_getConnectedStarRefBot"
	RPCAffiliatePrograms_PaymentsGetSuggestedStarRefBots_FullMethodName = "/mtproto.RPCAffiliatePrograms/payments_getSuggestedStarRefBots"
	RPCAffiliatePrograms_PaymentsConnectStarRefBot_FullMethodName       = "/mtproto.RPCAffiliatePrograms/payments_connectStarRefBot"
	RPCAffiliatePrograms_PaymentsEditConnectedStarRefBot_FullMethodName = "/mtproto.RPCAffiliatePrograms/payments_editConnectedStarRefBot"
)

// RPCAffiliateProgramsClient is the client API for RPCAffiliatePrograms service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCAffiliateProgramsClient interface {
	BotsUpdateStarRefProgram(ctx context.Context, in *TLBotsUpdateStarRefProgram, opts ...grpc.CallOption) (*StarRefProgram, error)
	PaymentsGetConnectedStarRefBots(ctx context.Context, in *TLPaymentsGetConnectedStarRefBots, opts ...grpc.CallOption) (*Payments_ConnectedStarRefBots, error)
	PaymentsGetConnectedStarRefBot(ctx context.Context, in *TLPaymentsGetConnectedStarRefBot, opts ...grpc.CallOption) (*Payments_ConnectedStarRefBots, error)
	PaymentsGetSuggestedStarRefBots(ctx context.Context, in *TLPaymentsGetSuggestedStarRefBots, opts ...grpc.CallOption) (*Payments_SuggestedStarRefBots, error)
	PaymentsConnectStarRefBot(ctx context.Context, in *TLPaymentsConnectStarRefBot, opts ...grpc.CallOption) (*Payments_ConnectedStarRefBots, error)
	PaymentsEditConnectedStarRefBot(ctx context.Context, in *TLPaymentsEditConnectedStarRefBot, opts ...grpc.CallOption) (*Payments_ConnectedStarRefBots, error)
}

type rPCAffiliateProgramsClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCAffiliateProgramsClient(cc grpc.ClientConnInterface) RPCAffiliateProgramsClient {
	return &rPCAffiliateProgramsClient{cc}
}

func (c *rPCAffiliateProgramsClient) BotsUpdateStarRefProgram(ctx context.Context, in *TLBotsUpdateStarRefProgram, opts ...grpc.CallOption) (*StarRefProgram, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StarRefProgram)
	err := c.cc.Invoke(ctx, RPCAffiliatePrograms_BotsUpdateStarRefProgram_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAffiliateProgramsClient) PaymentsGetConnectedStarRefBots(ctx context.Context, in *TLPaymentsGetConnectedStarRefBots, opts ...grpc.CallOption) (*Payments_ConnectedStarRefBots, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payments_ConnectedStarRefBots)
	err := c.cc.Invoke(ctx, RPCAffiliatePrograms_PaymentsGetConnectedStarRefBots_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAffiliateProgramsClient) PaymentsGetConnectedStarRefBot(ctx context.Context, in *TLPaymentsGetConnectedStarRefBot, opts ...grpc.CallOption) (*Payments_ConnectedStarRefBots, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payments_ConnectedStarRefBots)
	err := c.cc.Invoke(ctx, RPCAffiliatePrograms_PaymentsGetConnectedStarRefBot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAffiliateProgramsClient) PaymentsGetSuggestedStarRefBots(ctx context.Context, in *TLPaymentsGetSuggestedStarRefBots, opts ...grpc.CallOption) (*Payments_SuggestedStarRefBots, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payments_SuggestedStarRefBots)
	err := c.cc.Invoke(ctx, RPCAffiliatePrograms_PaymentsGetSuggestedStarRefBots_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAffiliateProgramsClient) PaymentsConnectStarRefBot(ctx context.Context, in *TLPaymentsConnectStarRefBot, opts ...grpc.CallOption) (*Payments_ConnectedStarRefBots, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payments_ConnectedStarRefBots)
	err := c.cc.Invoke(ctx, RPCAffiliatePrograms_PaymentsConnectStarRefBot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAffiliateProgramsClient) PaymentsEditConnectedStarRefBot(ctx context.Context, in *TLPaymentsEditConnectedStarRefBot, opts ...grpc.CallOption) (*Payments_ConnectedStarRefBots, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payments_ConnectedStarRefBots)
	err := c.cc.Invoke(ctx, RPCAffiliatePrograms_PaymentsEditConnectedStarRefBot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCAffiliateProgramsServer is the server API for RPCAffiliatePrograms service.
// All implementations should embed UnimplementedRPCAffiliateProgramsServer
// for forward compatibility.
type RPCAffiliateProgramsServer interface {
	BotsUpdateStarRefProgram(context.Context, *TLBotsUpdateStarRefProgram) (*StarRefProgram, error)
	PaymentsGetConnectedStarRefBots(context.Context, *TLPaymentsGetConnectedStarRefBots) (*Payments_ConnectedStarRefBots, error)
	PaymentsGetConnectedStarRefBot(context.Context, *TLPaymentsGetConnectedStarRefBot) (*Payments_ConnectedStarRefBots, error)
	PaymentsGetSuggestedStarRefBots(context.Context, *TLPaymentsGetSuggestedStarRefBots) (*Payments_SuggestedStarRefBots, error)
	PaymentsConnectStarRefBot(context.Context, *TLPaymentsConnectStarRefBot) (*Payments_ConnectedStarRefBots, error)
	PaymentsEditConnectedStarRefBot(context.Context, *TLPaymentsEditConnectedStarRefBot) (*Payments_ConnectedStarRefBots, error)
}

// UnimplementedRPCAffiliateProgramsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCAffiliateProgramsServer struct{}

func (UnimplementedRPCAffiliateProgramsServer) BotsUpdateStarRefProgram(context.Context, *TLBotsUpdateStarRefProgram) (*StarRefProgram, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotsUpdateStarRefProgram not implemented")
}
func (UnimplementedRPCAffiliateProgramsServer) PaymentsGetConnectedStarRefBots(context.Context, *TLPaymentsGetConnectedStarRefBots) (*Payments_ConnectedStarRefBots, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsGetConnectedStarRefBots not implemented")
}
func (UnimplementedRPCAffiliateProgramsServer) PaymentsGetConnectedStarRefBot(context.Context, *TLPaymentsGetConnectedStarRefBot) (*Payments_ConnectedStarRefBots, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsGetConnectedStarRefBot not implemented")
}
func (UnimplementedRPCAffiliateProgramsServer) PaymentsGetSuggestedStarRefBots(context.Context, *TLPaymentsGetSuggestedStarRefBots) (*Payments_SuggestedStarRefBots, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsGetSuggestedStarRefBots not implemented")
}
func (UnimplementedRPCAffiliateProgramsServer) PaymentsConnectStarRefBot(context.Context, *TLPaymentsConnectStarRefBot) (*Payments_ConnectedStarRefBots, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsConnectStarRefBot not implemented")
}
func (UnimplementedRPCAffiliateProgramsServer) PaymentsEditConnectedStarRefBot(context.Context, *TLPaymentsEditConnectedStarRefBot) (*Payments_ConnectedStarRefBots, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsEditConnectedStarRefBot not implemented")
}
func (UnimplementedRPCAffiliateProgramsServer) testEmbeddedByValue() {}

// UnsafeRPCAffiliateProgramsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCAffiliateProgramsServer will
// result in compilation errors.
type UnsafeRPCAffiliateProgramsServer interface {
	mustEmbedUnimplementedRPCAffiliateProgramsServer()
}

func RegisterRPCAffiliateProgramsServer(s grpc.ServiceRegistrar, srv RPCAffiliateProgramsServer) {
	// If the following call pancis, it indicates UnimplementedRPCAffiliateProgramsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCAffiliatePrograms_ServiceDesc, srv)
}

func _RPCAffiliatePrograms_BotsUpdateStarRefProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLBotsUpdateStarRefProgram)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAffiliateProgramsServer).BotsUpdateStarRefProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAffiliatePrograms_BotsUpdateStarRefProgram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAffiliateProgramsServer).BotsUpdateStarRefProgram(ctx, req.(*TLBotsUpdateStarRefProgram))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAffiliatePrograms_PaymentsGetConnectedStarRefBots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsGetConnectedStarRefBots)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAffiliateProgramsServer).PaymentsGetConnectedStarRefBots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAffiliatePrograms_PaymentsGetConnectedStarRefBots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAffiliateProgramsServer).PaymentsGetConnectedStarRefBots(ctx, req.(*TLPaymentsGetConnectedStarRefBots))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAffiliatePrograms_PaymentsGetConnectedStarRefBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsGetConnectedStarRefBot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAffiliateProgramsServer).PaymentsGetConnectedStarRefBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAffiliatePrograms_PaymentsGetConnectedStarRefBot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAffiliateProgramsServer).PaymentsGetConnectedStarRefBot(ctx, req.(*TLPaymentsGetConnectedStarRefBot))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAffiliatePrograms_PaymentsGetSuggestedStarRefBots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsGetSuggestedStarRefBots)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAffiliateProgramsServer).PaymentsGetSuggestedStarRefBots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAffiliatePrograms_PaymentsGetSuggestedStarRefBots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAffiliateProgramsServer).PaymentsGetSuggestedStarRefBots(ctx, req.(*TLPaymentsGetSuggestedStarRefBots))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAffiliatePrograms_PaymentsConnectStarRefBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsConnectStarRefBot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAffiliateProgramsServer).PaymentsConnectStarRefBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAffiliatePrograms_PaymentsConnectStarRefBot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAffiliateProgramsServer).PaymentsConnectStarRefBot(ctx, req.(*TLPaymentsConnectStarRefBot))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAffiliatePrograms_PaymentsEditConnectedStarRefBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsEditConnectedStarRefBot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAffiliateProgramsServer).PaymentsEditConnectedStarRefBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAffiliatePrograms_PaymentsEditConnectedStarRefBot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAffiliateProgramsServer).PaymentsEditConnectedStarRefBot(ctx, req.(*TLPaymentsEditConnectedStarRefBot))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCAffiliatePrograms_ServiceDesc is the grpc.ServiceDesc for RPCAffiliatePrograms service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCAffiliatePrograms_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCAffiliatePrograms",
	HandlerType: (*RPCAffiliateProgramsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "bots_updateStarRefProgram",
			Handler:    _RPCAffiliatePrograms_BotsUpdateStarRefProgram_Handler,
		},
		{
			MethodName: "payments_getConnectedStarRefBots",
			Handler:    _RPCAffiliatePrograms_PaymentsGetConnectedStarRefBots_Handler,
		},
		{
			MethodName: "payments_getConnectedStarRefBot",
			Handler:    _RPCAffiliatePrograms_PaymentsGetConnectedStarRefBot_Handler,
		},
		{
			MethodName: "payments_getSuggestedStarRefBots",
			Handler:    _RPCAffiliatePrograms_PaymentsGetSuggestedStarRefBots_Handler,
		},
		{
			MethodName: "payments_connectStarRefBot",
			Handler:    _RPCAffiliatePrograms_PaymentsConnectStarRefBot_Handler,
		},
		{
			MethodName: "payments_editConnectedStarRefBot",
			Handler:    _RPCAffiliatePrograms_PaymentsEditConnectedStarRefBot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCAntiSpam_ChannelsToggleAntiSpam_FullMethodName              = "/mtproto.RPCAntiSpam/channels_toggleAntiSpam"
	RPCAntiSpam_ChannelsReportAntiSpamFalsePositive_FullMethodName = "/mtproto.RPCAntiSpam/channels_reportAntiSpamFalsePositive"
)

// RPCAntiSpamClient is the client API for RPCAntiSpam service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCAntiSpamClient interface {
	ChannelsToggleAntiSpam(ctx context.Context, in *TLChannelsToggleAntiSpam, opts ...grpc.CallOption) (*Updates, error)
	ChannelsReportAntiSpamFalsePositive(ctx context.Context, in *TLChannelsReportAntiSpamFalsePositive, opts ...grpc.CallOption) (*Bool, error)
}

type rPCAntiSpamClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCAntiSpamClient(cc grpc.ClientConnInterface) RPCAntiSpamClient {
	return &rPCAntiSpamClient{cc}
}

func (c *rPCAntiSpamClient) ChannelsToggleAntiSpam(ctx context.Context, in *TLChannelsToggleAntiSpam, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCAntiSpam_ChannelsToggleAntiSpam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAntiSpamClient) ChannelsReportAntiSpamFalsePositive(ctx context.Context, in *TLChannelsReportAntiSpamFalsePositive, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCAntiSpam_ChannelsReportAntiSpamFalsePositive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCAntiSpamServer is the server API for RPCAntiSpam service.
// All implementations should embed UnimplementedRPCAntiSpamServer
// for forward compatibility.
type RPCAntiSpamServer interface {
	ChannelsToggleAntiSpam(context.Context, *TLChannelsToggleAntiSpam) (*Updates, error)
	ChannelsReportAntiSpamFalsePositive(context.Context, *TLChannelsReportAntiSpamFalsePositive) (*Bool, error)
}

// UnimplementedRPCAntiSpamServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCAntiSpamServer struct{}

func (UnimplementedRPCAntiSpamServer) ChannelsToggleAntiSpam(context.Context, *TLChannelsToggleAntiSpam) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsToggleAntiSpam not implemented")
}
func (UnimplementedRPCAntiSpamServer) ChannelsReportAntiSpamFalsePositive(context.Context, *TLChannelsReportAntiSpamFalsePositive) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsReportAntiSpamFalsePositive not implemented")
}
func (UnimplementedRPCAntiSpamServer) testEmbeddedByValue() {}

// UnsafeRPCAntiSpamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCAntiSpamServer will
// result in compilation errors.
type UnsafeRPCAntiSpamServer interface {
	mustEmbedUnimplementedRPCAntiSpamServer()
}

func RegisterRPCAntiSpamServer(s grpc.ServiceRegistrar, srv RPCAntiSpamServer) {
	// If the following call pancis, it indicates UnimplementedRPCAntiSpamServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCAntiSpam_ServiceDesc, srv)
}

func _RPCAntiSpam_ChannelsToggleAntiSpam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsToggleAntiSpam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAntiSpamServer).ChannelsToggleAntiSpam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAntiSpam_ChannelsToggleAntiSpam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAntiSpamServer).ChannelsToggleAntiSpam(ctx, req.(*TLChannelsToggleAntiSpam))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAntiSpam_ChannelsReportAntiSpamFalsePositive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsReportAntiSpamFalsePositive)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAntiSpamServer).ChannelsReportAntiSpamFalsePositive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAntiSpam_ChannelsReportAntiSpamFalsePositive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAntiSpamServer).ChannelsReportAntiSpamFalsePositive(ctx, req.(*TLChannelsReportAntiSpamFalsePositive))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCAntiSpam_ServiceDesc is the grpc.ServiceDesc for RPCAntiSpam service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCAntiSpam_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCAntiSpam",
	HandlerType: (*RPCAntiSpamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "channels_toggleAntiSpam",
			Handler:    _RPCAntiSpam_ChannelsToggleAntiSpam_Handler,
		},
		{
			MethodName: "channels_reportAntiSpamFalsePositive",
			Handler:    _RPCAntiSpam_ChannelsReportAntiSpamFalsePositive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCAuthorization_AuthSendCode_FullMethodName                       = "/mtproto.RPCAuthorization/auth_sendCode"
	RPCAuthorization_AuthSignUp_FullMethodName                         = "/mtproto.RPCAuthorization/auth_signUp"
	RPCAuthorization_AuthSignIn_FullMethodName                         = "/mtproto.RPCAuthorization/auth_signIn"
	RPCAuthorization_AuthLogOut_FullMethodName                         = "/mtproto.RPCAuthorization/auth_logOut"
	RPCAuthorization_AuthResetAuthorizations_FullMethodName            = "/mtproto.RPCAuthorization/auth_resetAuthorizations"
	RPCAuthorization_AuthExportAuthorization_FullMethodName            = "/mtproto.RPCAuthorization/auth_exportAuthorization"
	RPCAuthorization_AuthImportAuthorization_FullMethodName            = "/mtproto.RPCAuthorization/auth_importAuthorization"
	RPCAuthorization_AuthBindTempAuthKey_FullMethodName                = "/mtproto.RPCAuthorization/auth_bindTempAuthKey"
	RPCAuthorization_AuthImportBotAuthorization_FullMethodName         = "/mtproto.RPCAuthorization/auth_importBotAuthorization"
	RPCAuthorization_AuthCheckPassword_FullMethodName                  = "/mtproto.RPCAuthorization/auth_checkPassword"
	RPCAuthorization_AuthRequestPasswordRecovery_FullMethodName        = "/mtproto.RPCAuthorization/auth_requestPasswordRecovery"
	RPCAuthorization_AuthRecoverPassword_FullMethodName                = "/mtproto.RPCAuthorization/auth_recoverPassword"
	RPCAuthorization_AuthResendCode_FullMethodName                     = "/mtproto.RPCAuthorization/auth_resendCode"
	RPCAuthorization_AuthCancelCode_FullMethodName                     = "/mtproto.RPCAuthorization/auth_cancelCode"
	RPCAuthorization_AuthDropTempAuthKeys_FullMethodName               = "/mtproto.RPCAuthorization/auth_dropTempAuthKeys"
	RPCAuthorization_AuthCheckRecoveryPassword_FullMethodName          = "/mtproto.RPCAuthorization/auth_checkRecoveryPassword"
	RPCAuthorization_AuthImportWebTokenAuthorization_FullMethodName    = "/mtproto.RPCAuthorization/auth_importWebTokenAuthorization"
	RPCAuthorization_AuthRequestFirebaseSms_FullMethodName             = "/mtproto.RPCAuthorization/auth_requestFirebaseSms"
	RPCAuthorization_AuthResetLoginEmail_FullMethodName                = "/mtproto.RPCAuthorization/auth_resetLoginEmail"
	RPCAuthorization_AuthReportMissingCode_FullMethodName              = "/mtproto.RPCAuthorization/auth_reportMissingCode"
	RPCAuthorization_AccountSendVerifyEmailCode_FullMethodName         = "/mtproto.RPCAuthorization/account_sendVerifyEmailCode"
	RPCAuthorization_AccountVerifyEmail32DA4CF_FullMethodName          = "/mtproto.RPCAuthorization/account_verifyEmail32DA4CF"
	RPCAuthorization_AccountResetPassword_FullMethodName               = "/mtproto.RPCAuthorization/account_resetPassword"
	RPCAuthorization_AccountSetAuthorizationTTL_FullMethodName         = "/mtproto.RPCAuthorization/account_setAuthorizationTTL"
	RPCAuthorization_AccountChangeAuthorizationSettings_FullMethodName = "/mtproto.RPCAuthorization/account_changeAuthorizationSettings"
	RPCAuthorization_AccountInvalidateSignInCodes_FullMethodName       = "/mtproto.RPCAuthorization/account_invalidateSignInCodes"
	RPCAuthorization_AccountVerifyEmailECBA39DB_FullMethodName         = "/mtproto.RPCAuthorization/account_verifyEmailECBA39DB"
	RPCAuthorization_AuthToggleBan_FullMethodName                      = "/mtproto.RPCAuthorization/auth_toggleBan"
)

// RPCAuthorizationClient is the client API for RPCAuthorization service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCAuthorizationClient interface {
	AuthSendCode(ctx context.Context, in *TLAuthSendCode, opts ...grpc.CallOption) (*Auth_SentCode, error)
	AuthSignUp(ctx context.Context, in *TLAuthSignUp, opts ...grpc.CallOption) (*Auth_Authorization, error)
	AuthSignIn(ctx context.Context, in *TLAuthSignIn, opts ...grpc.CallOption) (*Auth_Authorization, error)
	AuthLogOut(ctx context.Context, in *TLAuthLogOut, opts ...grpc.CallOption) (*Auth_LoggedOut, error)
	AuthResetAuthorizations(ctx context.Context, in *TLAuthResetAuthorizations, opts ...grpc.CallOption) (*Bool, error)
	AuthExportAuthorization(ctx context.Context, in *TLAuthExportAuthorization, opts ...grpc.CallOption) (*Auth_ExportedAuthorization, error)
	AuthImportAuthorization(ctx context.Context, in *TLAuthImportAuthorization, opts ...grpc.CallOption) (*Auth_Authorization, error)
	AuthBindTempAuthKey(ctx context.Context, in *TLAuthBindTempAuthKey, opts ...grpc.CallOption) (*Bool, error)
	AuthImportBotAuthorization(ctx context.Context, in *TLAuthImportBotAuthorization, opts ...grpc.CallOption) (*Auth_Authorization, error)
	AuthCheckPassword(ctx context.Context, in *TLAuthCheckPassword, opts ...grpc.CallOption) (*Auth_Authorization, error)
	AuthRequestPasswordRecovery(ctx context.Context, in *TLAuthRequestPasswordRecovery, opts ...grpc.CallOption) (*Auth_PasswordRecovery, error)
	AuthRecoverPassword(ctx context.Context, in *TLAuthRecoverPassword, opts ...grpc.CallOption) (*Auth_Authorization, error)
	AuthResendCode(ctx context.Context, in *TLAuthResendCode, opts ...grpc.CallOption) (*Auth_SentCode, error)
	AuthCancelCode(ctx context.Context, in *TLAuthCancelCode, opts ...grpc.CallOption) (*Bool, error)
	AuthDropTempAuthKeys(ctx context.Context, in *TLAuthDropTempAuthKeys, opts ...grpc.CallOption) (*Bool, error)
	AuthCheckRecoveryPassword(ctx context.Context, in *TLAuthCheckRecoveryPassword, opts ...grpc.CallOption) (*Bool, error)
	AuthImportWebTokenAuthorization(ctx context.Context, in *TLAuthImportWebTokenAuthorization, opts ...grpc.CallOption) (*Auth_Authorization, error)
	AuthRequestFirebaseSms(ctx context.Context, in *TLAuthRequestFirebaseSms, opts ...grpc.CallOption) (*Bool, error)
	AuthResetLoginEmail(ctx context.Context, in *TLAuthResetLoginEmail, opts ...grpc.CallOption) (*Auth_SentCode, error)
	AuthReportMissingCode(ctx context.Context, in *TLAuthReportMissingCode, opts ...grpc.CallOption) (*Bool, error)
	AccountSendVerifyEmailCode(ctx context.Context, in *TLAccountSendVerifyEmailCode, opts ...grpc.CallOption) (*Account_SentEmailCode, error)
	AccountVerifyEmail32DA4CF(ctx context.Context, in *TLAccountVerifyEmail32DA4CF, opts ...grpc.CallOption) (*Account_EmailVerified, error)
	AccountResetPassword(ctx context.Context, in *TLAccountResetPassword, opts ...grpc.CallOption) (*Account_ResetPasswordResult, error)
	AccountSetAuthorizationTTL(ctx context.Context, in *TLAccountSetAuthorizationTTL, opts ...grpc.CallOption) (*Bool, error)
	AccountChangeAuthorizationSettings(ctx context.Context, in *TLAccountChangeAuthorizationSettings, opts ...grpc.CallOption) (*Bool, error)
	AccountInvalidateSignInCodes(ctx context.Context, in *TLAccountInvalidateSignInCodes, opts ...grpc.CallOption) (*Bool, error)
	AccountVerifyEmailECBA39DB(ctx context.Context, in *TLAccountVerifyEmailECBA39DB, opts ...grpc.CallOption) (*Bool, error)
	AuthToggleBan(ctx context.Context, in *TLAuthToggleBan, opts ...grpc.CallOption) (*PredefinedUser, error)
}

type rPCAuthorizationClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCAuthorizationClient(cc grpc.ClientConnInterface) RPCAuthorizationClient {
	return &rPCAuthorizationClient{cc}
}

func (c *rPCAuthorizationClient) AuthSendCode(ctx context.Context, in *TLAuthSendCode, opts ...grpc.CallOption) (*Auth_SentCode, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Auth_SentCode)
	err := c.cc.Invoke(ctx, RPCAuthorization_AuthSendCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthorizationClient) AuthSignUp(ctx context.Context, in *TLAuthSignUp, opts ...grpc.CallOption) (*Auth_Authorization, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Auth_Authorization)
	err := c.cc.Invoke(ctx, RPCAuthorization_AuthSignUp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthorizationClient) AuthSignIn(ctx context.Context, in *TLAuthSignIn, opts ...grpc.CallOption) (*Auth_Authorization, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Auth_Authorization)
	err := c.cc.Invoke(ctx, RPCAuthorization_AuthSignIn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthorizationClient) AuthLogOut(ctx context.Context, in *TLAuthLogOut, opts ...grpc.CallOption) (*Auth_LoggedOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Auth_LoggedOut)
	err := c.cc.Invoke(ctx, RPCAuthorization_AuthLogOut_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthorizationClient) AuthResetAuthorizations(ctx context.Context, in *TLAuthResetAuthorizations, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCAuthorization_AuthResetAuthorizations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthorizationClient) AuthExportAuthorization(ctx context.Context, in *TLAuthExportAuthorization, opts ...grpc.CallOption) (*Auth_ExportedAuthorization, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Auth_ExportedAuthorization)
	err := c.cc.Invoke(ctx, RPCAuthorization_AuthExportAuthorization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthorizationClient) AuthImportAuthorization(ctx context.Context, in *TLAuthImportAuthorization, opts ...grpc.CallOption) (*Auth_Authorization, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Auth_Authorization)
	err := c.cc.Invoke(ctx, RPCAuthorization_AuthImportAuthorization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthorizationClient) AuthBindTempAuthKey(ctx context.Context, in *TLAuthBindTempAuthKey, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCAuthorization_AuthBindTempAuthKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthorizationClient) AuthImportBotAuthorization(ctx context.Context, in *TLAuthImportBotAuthorization, opts ...grpc.CallOption) (*Auth_Authorization, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Auth_Authorization)
	err := c.cc.Invoke(ctx, RPCAuthorization_AuthImportBotAuthorization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthorizationClient) AuthCheckPassword(ctx context.Context, in *TLAuthCheckPassword, opts ...grpc.CallOption) (*Auth_Authorization, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Auth_Authorization)
	err := c.cc.Invoke(ctx, RPCAuthorization_AuthCheckPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthorizationClient) AuthRequestPasswordRecovery(ctx context.Context, in *TLAuthRequestPasswordRecovery, opts ...grpc.CallOption) (*Auth_PasswordRecovery, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Auth_PasswordRecovery)
	err := c.cc.Invoke(ctx, RPCAuthorization_AuthRequestPasswordRecovery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthorizationClient) AuthRecoverPassword(ctx context.Context, in *TLAuthRecoverPassword, opts ...grpc.CallOption) (*Auth_Authorization, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Auth_Authorization)
	err := c.cc.Invoke(ctx, RPCAuthorization_AuthRecoverPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthorizationClient) AuthResendCode(ctx context.Context, in *TLAuthResendCode, opts ...grpc.CallOption) (*Auth_SentCode, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Auth_SentCode)
	err := c.cc.Invoke(ctx, RPCAuthorization_AuthResendCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthorizationClient) AuthCancelCode(ctx context.Context, in *TLAuthCancelCode, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCAuthorization_AuthCancelCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthorizationClient) AuthDropTempAuthKeys(ctx context.Context, in *TLAuthDropTempAuthKeys, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCAuthorization_AuthDropTempAuthKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthorizationClient) AuthCheckRecoveryPassword(ctx context.Context, in *TLAuthCheckRecoveryPassword, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCAuthorization_AuthCheckRecoveryPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthorizationClient) AuthImportWebTokenAuthorization(ctx context.Context, in *TLAuthImportWebTokenAuthorization, opts ...grpc.CallOption) (*Auth_Authorization, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Auth_Authorization)
	err := c.cc.Invoke(ctx, RPCAuthorization_AuthImportWebTokenAuthorization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthorizationClient) AuthRequestFirebaseSms(ctx context.Context, in *TLAuthRequestFirebaseSms, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCAuthorization_AuthRequestFirebaseSms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthorizationClient) AuthResetLoginEmail(ctx context.Context, in *TLAuthResetLoginEmail, opts ...grpc.CallOption) (*Auth_SentCode, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Auth_SentCode)
	err := c.cc.Invoke(ctx, RPCAuthorization_AuthResetLoginEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthorizationClient) AuthReportMissingCode(ctx context.Context, in *TLAuthReportMissingCode, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCAuthorization_AuthReportMissingCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthorizationClient) AccountSendVerifyEmailCode(ctx context.Context, in *TLAccountSendVerifyEmailCode, opts ...grpc.CallOption) (*Account_SentEmailCode, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account_SentEmailCode)
	err := c.cc.Invoke(ctx, RPCAuthorization_AccountSendVerifyEmailCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthorizationClient) AccountVerifyEmail32DA4CF(ctx context.Context, in *TLAccountVerifyEmail32DA4CF, opts ...grpc.CallOption) (*Account_EmailVerified, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account_EmailVerified)
	err := c.cc.Invoke(ctx, RPCAuthorization_AccountVerifyEmail32DA4CF_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthorizationClient) AccountResetPassword(ctx context.Context, in *TLAccountResetPassword, opts ...grpc.CallOption) (*Account_ResetPasswordResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account_ResetPasswordResult)
	err := c.cc.Invoke(ctx, RPCAuthorization_AccountResetPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthorizationClient) AccountSetAuthorizationTTL(ctx context.Context, in *TLAccountSetAuthorizationTTL, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCAuthorization_AccountSetAuthorizationTTL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthorizationClient) AccountChangeAuthorizationSettings(ctx context.Context, in *TLAccountChangeAuthorizationSettings, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCAuthorization_AccountChangeAuthorizationSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthorizationClient) AccountInvalidateSignInCodes(ctx context.Context, in *TLAccountInvalidateSignInCodes, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCAuthorization_AccountInvalidateSignInCodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthorizationClient) AccountVerifyEmailECBA39DB(ctx context.Context, in *TLAccountVerifyEmailECBA39DB, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCAuthorization_AccountVerifyEmailECBA39DB_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthorizationClient) AuthToggleBan(ctx context.Context, in *TLAuthToggleBan, opts ...grpc.CallOption) (*PredefinedUser, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PredefinedUser)
	err := c.cc.Invoke(ctx, RPCAuthorization_AuthToggleBan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCAuthorizationServer is the server API for RPCAuthorization service.
// All implementations should embed UnimplementedRPCAuthorizationServer
// for forward compatibility.
type RPCAuthorizationServer interface {
	AuthSendCode(context.Context, *TLAuthSendCode) (*Auth_SentCode, error)
	AuthSignUp(context.Context, *TLAuthSignUp) (*Auth_Authorization, error)
	AuthSignIn(context.Context, *TLAuthSignIn) (*Auth_Authorization, error)
	AuthLogOut(context.Context, *TLAuthLogOut) (*Auth_LoggedOut, error)
	AuthResetAuthorizations(context.Context, *TLAuthResetAuthorizations) (*Bool, error)
	AuthExportAuthorization(context.Context, *TLAuthExportAuthorization) (*Auth_ExportedAuthorization, error)
	AuthImportAuthorization(context.Context, *TLAuthImportAuthorization) (*Auth_Authorization, error)
	AuthBindTempAuthKey(context.Context, *TLAuthBindTempAuthKey) (*Bool, error)
	AuthImportBotAuthorization(context.Context, *TLAuthImportBotAuthorization) (*Auth_Authorization, error)
	AuthCheckPassword(context.Context, *TLAuthCheckPassword) (*Auth_Authorization, error)
	AuthRequestPasswordRecovery(context.Context, *TLAuthRequestPasswordRecovery) (*Auth_PasswordRecovery, error)
	AuthRecoverPassword(context.Context, *TLAuthRecoverPassword) (*Auth_Authorization, error)
	AuthResendCode(context.Context, *TLAuthResendCode) (*Auth_SentCode, error)
	AuthCancelCode(context.Context, *TLAuthCancelCode) (*Bool, error)
	AuthDropTempAuthKeys(context.Context, *TLAuthDropTempAuthKeys) (*Bool, error)
	AuthCheckRecoveryPassword(context.Context, *TLAuthCheckRecoveryPassword) (*Bool, error)
	AuthImportWebTokenAuthorization(context.Context, *TLAuthImportWebTokenAuthorization) (*Auth_Authorization, error)
	AuthRequestFirebaseSms(context.Context, *TLAuthRequestFirebaseSms) (*Bool, error)
	AuthResetLoginEmail(context.Context, *TLAuthResetLoginEmail) (*Auth_SentCode, error)
	AuthReportMissingCode(context.Context, *TLAuthReportMissingCode) (*Bool, error)
	AccountSendVerifyEmailCode(context.Context, *TLAccountSendVerifyEmailCode) (*Account_SentEmailCode, error)
	AccountVerifyEmail32DA4CF(context.Context, *TLAccountVerifyEmail32DA4CF) (*Account_EmailVerified, error)
	AccountResetPassword(context.Context, *TLAccountResetPassword) (*Account_ResetPasswordResult, error)
	AccountSetAuthorizationTTL(context.Context, *TLAccountSetAuthorizationTTL) (*Bool, error)
	AccountChangeAuthorizationSettings(context.Context, *TLAccountChangeAuthorizationSettings) (*Bool, error)
	AccountInvalidateSignInCodes(context.Context, *TLAccountInvalidateSignInCodes) (*Bool, error)
	AccountVerifyEmailECBA39DB(context.Context, *TLAccountVerifyEmailECBA39DB) (*Bool, error)
	AuthToggleBan(context.Context, *TLAuthToggleBan) (*PredefinedUser, error)
}

// UnimplementedRPCAuthorizationServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCAuthorizationServer struct{}

func (UnimplementedRPCAuthorizationServer) AuthSendCode(context.Context, *TLAuthSendCode) (*Auth_SentCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthSendCode not implemented")
}
func (UnimplementedRPCAuthorizationServer) AuthSignUp(context.Context, *TLAuthSignUp) (*Auth_Authorization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthSignUp not implemented")
}
func (UnimplementedRPCAuthorizationServer) AuthSignIn(context.Context, *TLAuthSignIn) (*Auth_Authorization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthSignIn not implemented")
}
func (UnimplementedRPCAuthorizationServer) AuthLogOut(context.Context, *TLAuthLogOut) (*Auth_LoggedOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthLogOut not implemented")
}
func (UnimplementedRPCAuthorizationServer) AuthResetAuthorizations(context.Context, *TLAuthResetAuthorizations) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthResetAuthorizations not implemented")
}
func (UnimplementedRPCAuthorizationServer) AuthExportAuthorization(context.Context, *TLAuthExportAuthorization) (*Auth_ExportedAuthorization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthExportAuthorization not implemented")
}
func (UnimplementedRPCAuthorizationServer) AuthImportAuthorization(context.Context, *TLAuthImportAuthorization) (*Auth_Authorization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthImportAuthorization not implemented")
}
func (UnimplementedRPCAuthorizationServer) AuthBindTempAuthKey(context.Context, *TLAuthBindTempAuthKey) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthBindTempAuthKey not implemented")
}
func (UnimplementedRPCAuthorizationServer) AuthImportBotAuthorization(context.Context, *TLAuthImportBotAuthorization) (*Auth_Authorization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthImportBotAuthorization not implemented")
}
func (UnimplementedRPCAuthorizationServer) AuthCheckPassword(context.Context, *TLAuthCheckPassword) (*Auth_Authorization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthCheckPassword not implemented")
}
func (UnimplementedRPCAuthorizationServer) AuthRequestPasswordRecovery(context.Context, *TLAuthRequestPasswordRecovery) (*Auth_PasswordRecovery, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthRequestPasswordRecovery not implemented")
}
func (UnimplementedRPCAuthorizationServer) AuthRecoverPassword(context.Context, *TLAuthRecoverPassword) (*Auth_Authorization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthRecoverPassword not implemented")
}
func (UnimplementedRPCAuthorizationServer) AuthResendCode(context.Context, *TLAuthResendCode) (*Auth_SentCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthResendCode not implemented")
}
func (UnimplementedRPCAuthorizationServer) AuthCancelCode(context.Context, *TLAuthCancelCode) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthCancelCode not implemented")
}
func (UnimplementedRPCAuthorizationServer) AuthDropTempAuthKeys(context.Context, *TLAuthDropTempAuthKeys) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthDropTempAuthKeys not implemented")
}
func (UnimplementedRPCAuthorizationServer) AuthCheckRecoveryPassword(context.Context, *TLAuthCheckRecoveryPassword) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthCheckRecoveryPassword not implemented")
}
func (UnimplementedRPCAuthorizationServer) AuthImportWebTokenAuthorization(context.Context, *TLAuthImportWebTokenAuthorization) (*Auth_Authorization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthImportWebTokenAuthorization not implemented")
}
func (UnimplementedRPCAuthorizationServer) AuthRequestFirebaseSms(context.Context, *TLAuthRequestFirebaseSms) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthRequestFirebaseSms not implemented")
}
func (UnimplementedRPCAuthorizationServer) AuthResetLoginEmail(context.Context, *TLAuthResetLoginEmail) (*Auth_SentCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthResetLoginEmail not implemented")
}
func (UnimplementedRPCAuthorizationServer) AuthReportMissingCode(context.Context, *TLAuthReportMissingCode) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthReportMissingCode not implemented")
}
func (UnimplementedRPCAuthorizationServer) AccountSendVerifyEmailCode(context.Context, *TLAccountSendVerifyEmailCode) (*Account_SentEmailCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSendVerifyEmailCode not implemented")
}
func (UnimplementedRPCAuthorizationServer) AccountVerifyEmail32DA4CF(context.Context, *TLAccountVerifyEmail32DA4CF) (*Account_EmailVerified, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountVerifyEmail32DA4CF not implemented")
}
func (UnimplementedRPCAuthorizationServer) AccountResetPassword(context.Context, *TLAccountResetPassword) (*Account_ResetPasswordResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountResetPassword not implemented")
}
func (UnimplementedRPCAuthorizationServer) AccountSetAuthorizationTTL(context.Context, *TLAccountSetAuthorizationTTL) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSetAuthorizationTTL not implemented")
}
func (UnimplementedRPCAuthorizationServer) AccountChangeAuthorizationSettings(context.Context, *TLAccountChangeAuthorizationSettings) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountChangeAuthorizationSettings not implemented")
}
func (UnimplementedRPCAuthorizationServer) AccountInvalidateSignInCodes(context.Context, *TLAccountInvalidateSignInCodes) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountInvalidateSignInCodes not implemented")
}
func (UnimplementedRPCAuthorizationServer) AccountVerifyEmailECBA39DB(context.Context, *TLAccountVerifyEmailECBA39DB) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountVerifyEmailECBA39DB not implemented")
}
func (UnimplementedRPCAuthorizationServer) AuthToggleBan(context.Context, *TLAuthToggleBan) (*PredefinedUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthToggleBan not implemented")
}
func (UnimplementedRPCAuthorizationServer) testEmbeddedByValue() {}

// UnsafeRPCAuthorizationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCAuthorizationServer will
// result in compilation errors.
type UnsafeRPCAuthorizationServer interface {
	mustEmbedUnimplementedRPCAuthorizationServer()
}

func RegisterRPCAuthorizationServer(s grpc.ServiceRegistrar, srv RPCAuthorizationServer) {
	// If the following call pancis, it indicates UnimplementedRPCAuthorizationServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCAuthorization_ServiceDesc, srv)
}

func _RPCAuthorization_AuthSendCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthSendCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthorizationServer).AuthSendCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuthorization_AuthSendCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthorizationServer).AuthSendCode(ctx, req.(*TLAuthSendCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthorization_AuthSignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthSignUp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthorizationServer).AuthSignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuthorization_AuthSignUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthorizationServer).AuthSignUp(ctx, req.(*TLAuthSignUp))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthorization_AuthSignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthSignIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthorizationServer).AuthSignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuthorization_AuthSignIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthorizationServer).AuthSignIn(ctx, req.(*TLAuthSignIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthorization_AuthLogOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthLogOut)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthorizationServer).AuthLogOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuthorization_AuthLogOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthorizationServer).AuthLogOut(ctx, req.(*TLAuthLogOut))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthorization_AuthResetAuthorizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthResetAuthorizations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthorizationServer).AuthResetAuthorizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuthorization_AuthResetAuthorizations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthorizationServer).AuthResetAuthorizations(ctx, req.(*TLAuthResetAuthorizations))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthorization_AuthExportAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthExportAuthorization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthorizationServer).AuthExportAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuthorization_AuthExportAuthorization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthorizationServer).AuthExportAuthorization(ctx, req.(*TLAuthExportAuthorization))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthorization_AuthImportAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthImportAuthorization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthorizationServer).AuthImportAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuthorization_AuthImportAuthorization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthorizationServer).AuthImportAuthorization(ctx, req.(*TLAuthImportAuthorization))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthorization_AuthBindTempAuthKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthBindTempAuthKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthorizationServer).AuthBindTempAuthKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuthorization_AuthBindTempAuthKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthorizationServer).AuthBindTempAuthKey(ctx, req.(*TLAuthBindTempAuthKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthorization_AuthImportBotAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthImportBotAuthorization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthorizationServer).AuthImportBotAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuthorization_AuthImportBotAuthorization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthorizationServer).AuthImportBotAuthorization(ctx, req.(*TLAuthImportBotAuthorization))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthorization_AuthCheckPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthCheckPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthorizationServer).AuthCheckPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuthorization_AuthCheckPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthorizationServer).AuthCheckPassword(ctx, req.(*TLAuthCheckPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthorization_AuthRequestPasswordRecovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthRequestPasswordRecovery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthorizationServer).AuthRequestPasswordRecovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuthorization_AuthRequestPasswordRecovery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthorizationServer).AuthRequestPasswordRecovery(ctx, req.(*TLAuthRequestPasswordRecovery))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthorization_AuthRecoverPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthRecoverPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthorizationServer).AuthRecoverPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuthorization_AuthRecoverPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthorizationServer).AuthRecoverPassword(ctx, req.(*TLAuthRecoverPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthorization_AuthResendCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthResendCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthorizationServer).AuthResendCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuthorization_AuthResendCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthorizationServer).AuthResendCode(ctx, req.(*TLAuthResendCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthorization_AuthCancelCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthCancelCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthorizationServer).AuthCancelCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuthorization_AuthCancelCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthorizationServer).AuthCancelCode(ctx, req.(*TLAuthCancelCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthorization_AuthDropTempAuthKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthDropTempAuthKeys)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthorizationServer).AuthDropTempAuthKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuthorization_AuthDropTempAuthKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthorizationServer).AuthDropTempAuthKeys(ctx, req.(*TLAuthDropTempAuthKeys))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthorization_AuthCheckRecoveryPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthCheckRecoveryPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthorizationServer).AuthCheckRecoveryPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuthorization_AuthCheckRecoveryPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthorizationServer).AuthCheckRecoveryPassword(ctx, req.(*TLAuthCheckRecoveryPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthorization_AuthImportWebTokenAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthImportWebTokenAuthorization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthorizationServer).AuthImportWebTokenAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuthorization_AuthImportWebTokenAuthorization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthorizationServer).AuthImportWebTokenAuthorization(ctx, req.(*TLAuthImportWebTokenAuthorization))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthorization_AuthRequestFirebaseSms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthRequestFirebaseSms)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthorizationServer).AuthRequestFirebaseSms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuthorization_AuthRequestFirebaseSms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthorizationServer).AuthRequestFirebaseSms(ctx, req.(*TLAuthRequestFirebaseSms))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthorization_AuthResetLoginEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthResetLoginEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthorizationServer).AuthResetLoginEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuthorization_AuthResetLoginEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthorizationServer).AuthResetLoginEmail(ctx, req.(*TLAuthResetLoginEmail))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthorization_AuthReportMissingCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthReportMissingCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthorizationServer).AuthReportMissingCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuthorization_AuthReportMissingCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthorizationServer).AuthReportMissingCode(ctx, req.(*TLAuthReportMissingCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthorization_AccountSendVerifyEmailCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSendVerifyEmailCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthorizationServer).AccountSendVerifyEmailCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuthorization_AccountSendVerifyEmailCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthorizationServer).AccountSendVerifyEmailCode(ctx, req.(*TLAccountSendVerifyEmailCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthorization_AccountVerifyEmail32DA4CF_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountVerifyEmail32DA4CF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthorizationServer).AccountVerifyEmail32DA4CF(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuthorization_AccountVerifyEmail32DA4CF_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthorizationServer).AccountVerifyEmail32DA4CF(ctx, req.(*TLAccountVerifyEmail32DA4CF))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthorization_AccountResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountResetPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthorizationServer).AccountResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuthorization_AccountResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthorizationServer).AccountResetPassword(ctx, req.(*TLAccountResetPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthorization_AccountSetAuthorizationTTL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSetAuthorizationTTL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthorizationServer).AccountSetAuthorizationTTL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuthorization_AccountSetAuthorizationTTL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthorizationServer).AccountSetAuthorizationTTL(ctx, req.(*TLAccountSetAuthorizationTTL))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthorization_AccountChangeAuthorizationSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountChangeAuthorizationSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthorizationServer).AccountChangeAuthorizationSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuthorization_AccountChangeAuthorizationSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthorizationServer).AccountChangeAuthorizationSettings(ctx, req.(*TLAccountChangeAuthorizationSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthorization_AccountInvalidateSignInCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountInvalidateSignInCodes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthorizationServer).AccountInvalidateSignInCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuthorization_AccountInvalidateSignInCodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthorizationServer).AccountInvalidateSignInCodes(ctx, req.(*TLAccountInvalidateSignInCodes))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthorization_AccountVerifyEmailECBA39DB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountVerifyEmailECBA39DB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthorizationServer).AccountVerifyEmailECBA39DB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuthorization_AccountVerifyEmailECBA39DB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthorizationServer).AccountVerifyEmailECBA39DB(ctx, req.(*TLAccountVerifyEmailECBA39DB))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthorization_AuthToggleBan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthToggleBan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthorizationServer).AuthToggleBan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuthorization_AuthToggleBan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthorizationServer).AuthToggleBan(ctx, req.(*TLAuthToggleBan))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCAuthorization_ServiceDesc is the grpc.ServiceDesc for RPCAuthorization service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCAuthorization_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCAuthorization",
	HandlerType: (*RPCAuthorizationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "auth_sendCode",
			Handler:    _RPCAuthorization_AuthSendCode_Handler,
		},
		{
			MethodName: "auth_signUp",
			Handler:    _RPCAuthorization_AuthSignUp_Handler,
		},
		{
			MethodName: "auth_signIn",
			Handler:    _RPCAuthorization_AuthSignIn_Handler,
		},
		{
			MethodName: "auth_logOut",
			Handler:    _RPCAuthorization_AuthLogOut_Handler,
		},
		{
			MethodName: "auth_resetAuthorizations",
			Handler:    _RPCAuthorization_AuthResetAuthorizations_Handler,
		},
		{
			MethodName: "auth_exportAuthorization",
			Handler:    _RPCAuthorization_AuthExportAuthorization_Handler,
		},
		{
			MethodName: "auth_importAuthorization",
			Handler:    _RPCAuthorization_AuthImportAuthorization_Handler,
		},
		{
			MethodName: "auth_bindTempAuthKey",
			Handler:    _RPCAuthorization_AuthBindTempAuthKey_Handler,
		},
		{
			MethodName: "auth_importBotAuthorization",
			Handler:    _RPCAuthorization_AuthImportBotAuthorization_Handler,
		},
		{
			MethodName: "auth_checkPassword",
			Handler:    _RPCAuthorization_AuthCheckPassword_Handler,
		},
		{
			MethodName: "auth_requestPasswordRecovery",
			Handler:    _RPCAuthorization_AuthRequestPasswordRecovery_Handler,
		},
		{
			MethodName: "auth_recoverPassword",
			Handler:    _RPCAuthorization_AuthRecoverPassword_Handler,
		},
		{
			MethodName: "auth_resendCode",
			Handler:    _RPCAuthorization_AuthResendCode_Handler,
		},
		{
			MethodName: "auth_cancelCode",
			Handler:    _RPCAuthorization_AuthCancelCode_Handler,
		},
		{
			MethodName: "auth_dropTempAuthKeys",
			Handler:    _RPCAuthorization_AuthDropTempAuthKeys_Handler,
		},
		{
			MethodName: "auth_checkRecoveryPassword",
			Handler:    _RPCAuthorization_AuthCheckRecoveryPassword_Handler,
		},
		{
			MethodName: "auth_importWebTokenAuthorization",
			Handler:    _RPCAuthorization_AuthImportWebTokenAuthorization_Handler,
		},
		{
			MethodName: "auth_requestFirebaseSms",
			Handler:    _RPCAuthorization_AuthRequestFirebaseSms_Handler,
		},
		{
			MethodName: "auth_resetLoginEmail",
			Handler:    _RPCAuthorization_AuthResetLoginEmail_Handler,
		},
		{
			MethodName: "auth_reportMissingCode",
			Handler:    _RPCAuthorization_AuthReportMissingCode_Handler,
		},
		{
			MethodName: "account_sendVerifyEmailCode",
			Handler:    _RPCAuthorization_AccountSendVerifyEmailCode_Handler,
		},
		{
			MethodName: "account_verifyEmail32DA4CF",
			Handler:    _RPCAuthorization_AccountVerifyEmail32DA4CF_Handler,
		},
		{
			MethodName: "account_resetPassword",
			Handler:    _RPCAuthorization_AccountResetPassword_Handler,
		},
		{
			MethodName: "account_setAuthorizationTTL",
			Handler:    _RPCAuthorization_AccountSetAuthorizationTTL_Handler,
		},
		{
			MethodName: "account_changeAuthorizationSettings",
			Handler:    _RPCAuthorization_AccountChangeAuthorizationSettings_Handler,
		},
		{
			MethodName: "account_invalidateSignInCodes",
			Handler:    _RPCAuthorization_AccountInvalidateSignInCodes_Handler,
		},
		{
			MethodName: "account_verifyEmailECBA39DB",
			Handler:    _RPCAuthorization_AccountVerifyEmailECBA39DB_Handler,
		},
		{
			MethodName: "auth_toggleBan",
			Handler:    _RPCAuthorization_AuthToggleBan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCAutoDownload_AccountGetAutoDownloadSettings_FullMethodName  = "/mtproto.RPCAutoDownload/account_getAutoDownloadSettings"
	RPCAutoDownload_AccountSaveAutoDownloadSettings_FullMethodName = "/mtproto.RPCAutoDownload/account_saveAutoDownloadSettings"
)

// RPCAutoDownloadClient is the client API for RPCAutoDownload service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCAutoDownloadClient interface {
	AccountGetAutoDownloadSettings(ctx context.Context, in *TLAccountGetAutoDownloadSettings, opts ...grpc.CallOption) (*Account_AutoDownloadSettings, error)
	AccountSaveAutoDownloadSettings(ctx context.Context, in *TLAccountSaveAutoDownloadSettings, opts ...grpc.CallOption) (*Bool, error)
}

type rPCAutoDownloadClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCAutoDownloadClient(cc grpc.ClientConnInterface) RPCAutoDownloadClient {
	return &rPCAutoDownloadClient{cc}
}

func (c *rPCAutoDownloadClient) AccountGetAutoDownloadSettings(ctx context.Context, in *TLAccountGetAutoDownloadSettings, opts ...grpc.CallOption) (*Account_AutoDownloadSettings, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account_AutoDownloadSettings)
	err := c.cc.Invoke(ctx, RPCAutoDownload_AccountGetAutoDownloadSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAutoDownloadClient) AccountSaveAutoDownloadSettings(ctx context.Context, in *TLAccountSaveAutoDownloadSettings, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCAutoDownload_AccountSaveAutoDownloadSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCAutoDownloadServer is the server API for RPCAutoDownload service.
// All implementations should embed UnimplementedRPCAutoDownloadServer
// for forward compatibility.
type RPCAutoDownloadServer interface {
	AccountGetAutoDownloadSettings(context.Context, *TLAccountGetAutoDownloadSettings) (*Account_AutoDownloadSettings, error)
	AccountSaveAutoDownloadSettings(context.Context, *TLAccountSaveAutoDownloadSettings) (*Bool, error)
}

// UnimplementedRPCAutoDownloadServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCAutoDownloadServer struct{}

func (UnimplementedRPCAutoDownloadServer) AccountGetAutoDownloadSettings(context.Context, *TLAccountGetAutoDownloadSettings) (*Account_AutoDownloadSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetAutoDownloadSettings not implemented")
}
func (UnimplementedRPCAutoDownloadServer) AccountSaveAutoDownloadSettings(context.Context, *TLAccountSaveAutoDownloadSettings) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSaveAutoDownloadSettings not implemented")
}
func (UnimplementedRPCAutoDownloadServer) testEmbeddedByValue() {}

// UnsafeRPCAutoDownloadServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCAutoDownloadServer will
// result in compilation errors.
type UnsafeRPCAutoDownloadServer interface {
	mustEmbedUnimplementedRPCAutoDownloadServer()
}

func RegisterRPCAutoDownloadServer(s grpc.ServiceRegistrar, srv RPCAutoDownloadServer) {
	// If the following call pancis, it indicates UnimplementedRPCAutoDownloadServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCAutoDownload_ServiceDesc, srv)
}

func _RPCAutoDownload_AccountGetAutoDownloadSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetAutoDownloadSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAutoDownloadServer).AccountGetAutoDownloadSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAutoDownload_AccountGetAutoDownloadSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAutoDownloadServer).AccountGetAutoDownloadSettings(ctx, req.(*TLAccountGetAutoDownloadSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAutoDownload_AccountSaveAutoDownloadSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSaveAutoDownloadSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAutoDownloadServer).AccountSaveAutoDownloadSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAutoDownload_AccountSaveAutoDownloadSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAutoDownloadServer).AccountSaveAutoDownloadSettings(ctx, req.(*TLAccountSaveAutoDownloadSettings))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCAutoDownload_ServiceDesc is the grpc.ServiceDesc for RPCAutoDownload service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCAutoDownload_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCAutoDownload",
	HandlerType: (*RPCAutoDownloadServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "account_getAutoDownloadSettings",
			Handler:    _RPCAutoDownload_AccountGetAutoDownloadSettings_Handler,
		},
		{
			MethodName: "account_saveAutoDownloadSettings",
			Handler:    _RPCAutoDownload_AccountSaveAutoDownloadSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCAutosave_AccountGetAutoSaveSettings_FullMethodName      = "/mtproto.RPCAutosave/account_getAutoSaveSettings"
	RPCAutosave_AccountSaveAutoSaveSettings_FullMethodName     = "/mtproto.RPCAutosave/account_saveAutoSaveSettings"
	RPCAutosave_AccountDeleteAutoSaveExceptions_FullMethodName = "/mtproto.RPCAutosave/account_deleteAutoSaveExceptions"
)

// RPCAutosaveClient is the client API for RPCAutosave service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCAutosaveClient interface {
	AccountGetAutoSaveSettings(ctx context.Context, in *TLAccountGetAutoSaveSettings, opts ...grpc.CallOption) (*Account_AutoSaveSettings, error)
	AccountSaveAutoSaveSettings(ctx context.Context, in *TLAccountSaveAutoSaveSettings, opts ...grpc.CallOption) (*Bool, error)
	AccountDeleteAutoSaveExceptions(ctx context.Context, in *TLAccountDeleteAutoSaveExceptions, opts ...grpc.CallOption) (*Bool, error)
}

type rPCAutosaveClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCAutosaveClient(cc grpc.ClientConnInterface) RPCAutosaveClient {
	return &rPCAutosaveClient{cc}
}

func (c *rPCAutosaveClient) AccountGetAutoSaveSettings(ctx context.Context, in *TLAccountGetAutoSaveSettings, opts ...grpc.CallOption) (*Account_AutoSaveSettings, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account_AutoSaveSettings)
	err := c.cc.Invoke(ctx, RPCAutosave_AccountGetAutoSaveSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAutosaveClient) AccountSaveAutoSaveSettings(ctx context.Context, in *TLAccountSaveAutoSaveSettings, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCAutosave_AccountSaveAutoSaveSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAutosaveClient) AccountDeleteAutoSaveExceptions(ctx context.Context, in *TLAccountDeleteAutoSaveExceptions, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCAutosave_AccountDeleteAutoSaveExceptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCAutosaveServer is the server API for RPCAutosave service.
// All implementations should embed UnimplementedRPCAutosaveServer
// for forward compatibility.
type RPCAutosaveServer interface {
	AccountGetAutoSaveSettings(context.Context, *TLAccountGetAutoSaveSettings) (*Account_AutoSaveSettings, error)
	AccountSaveAutoSaveSettings(context.Context, *TLAccountSaveAutoSaveSettings) (*Bool, error)
	AccountDeleteAutoSaveExceptions(context.Context, *TLAccountDeleteAutoSaveExceptions) (*Bool, error)
}

// UnimplementedRPCAutosaveServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCAutosaveServer struct{}

func (UnimplementedRPCAutosaveServer) AccountGetAutoSaveSettings(context.Context, *TLAccountGetAutoSaveSettings) (*Account_AutoSaveSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetAutoSaveSettings not implemented")
}
func (UnimplementedRPCAutosaveServer) AccountSaveAutoSaveSettings(context.Context, *TLAccountSaveAutoSaveSettings) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSaveAutoSaveSettings not implemented")
}
func (UnimplementedRPCAutosaveServer) AccountDeleteAutoSaveExceptions(context.Context, *TLAccountDeleteAutoSaveExceptions) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountDeleteAutoSaveExceptions not implemented")
}
func (UnimplementedRPCAutosaveServer) testEmbeddedByValue() {}

// UnsafeRPCAutosaveServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCAutosaveServer will
// result in compilation errors.
type UnsafeRPCAutosaveServer interface {
	mustEmbedUnimplementedRPCAutosaveServer()
}

func RegisterRPCAutosaveServer(s grpc.ServiceRegistrar, srv RPCAutosaveServer) {
	// If the following call pancis, it indicates UnimplementedRPCAutosaveServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCAutosave_ServiceDesc, srv)
}

func _RPCAutosave_AccountGetAutoSaveSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetAutoSaveSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAutosaveServer).AccountGetAutoSaveSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAutosave_AccountGetAutoSaveSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAutosaveServer).AccountGetAutoSaveSettings(ctx, req.(*TLAccountGetAutoSaveSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAutosave_AccountSaveAutoSaveSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSaveAutoSaveSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAutosaveServer).AccountSaveAutoSaveSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAutosave_AccountSaveAutoSaveSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAutosaveServer).AccountSaveAutoSaveSettings(ctx, req.(*TLAccountSaveAutoSaveSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAutosave_AccountDeleteAutoSaveExceptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountDeleteAutoSaveExceptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAutosaveServer).AccountDeleteAutoSaveExceptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAutosave_AccountDeleteAutoSaveExceptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAutosaveServer).AccountDeleteAutoSaveExceptions(ctx, req.(*TLAccountDeleteAutoSaveExceptions))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCAutosave_ServiceDesc is the grpc.ServiceDesc for RPCAutosave service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCAutosave_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCAutosave",
	HandlerType: (*RPCAutosaveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "account_getAutoSaveSettings",
			Handler:    _RPCAutosave_AccountGetAutoSaveSettings_Handler,
		},
		{
			MethodName: "account_saveAutoSaveSettings",
			Handler:    _RPCAutosave_AccountSaveAutoSaveSettings_Handler,
		},
		{
			MethodName: "account_deleteAutoSaveExceptions",
			Handler:    _RPCAutosave_AccountDeleteAutoSaveExceptions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCBoosts_ChannelsSetBoostsToUnblockRestrictions_FullMethodName = "/mtproto.RPCBoosts/channels_setBoostsToUnblockRestrictions"
	RPCBoosts_PremiumGetBoostsList_FullMethodName                   = "/mtproto.RPCBoosts/premium_getBoostsList"
	RPCBoosts_PremiumGetMyBoosts_FullMethodName                     = "/mtproto.RPCBoosts/premium_getMyBoosts"
	RPCBoosts_PremiumApplyBoost_FullMethodName                      = "/mtproto.RPCBoosts/premium_applyBoost"
	RPCBoosts_PremiumGetBoostsStatus_FullMethodName                 = "/mtproto.RPCBoosts/premium_getBoostsStatus"
	RPCBoosts_PremiumGetUserBoosts_FullMethodName                   = "/mtproto.RPCBoosts/premium_getUserBoosts"
	RPCBoosts_StoriesGetBoostsStatus_FullMethodName                 = "/mtproto.RPCBoosts/stories_getBoostsStatus"
	RPCBoosts_StoriesGetBoostersList_FullMethodName                 = "/mtproto.RPCBoosts/stories_getBoostersList"
	RPCBoosts_StoriesCanApplyBoost_FullMethodName                   = "/mtproto.RPCBoosts/stories_canApplyBoost"
	RPCBoosts_StoriesApplyBoost_FullMethodName                      = "/mtproto.RPCBoosts/stories_applyBoost"
)

// RPCBoostsClient is the client API for RPCBoosts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCBoostsClient interface {
	ChannelsSetBoostsToUnblockRestrictions(ctx context.Context, in *TLChannelsSetBoostsToUnblockRestrictions, opts ...grpc.CallOption) (*Updates, error)
	PremiumGetBoostsList(ctx context.Context, in *TLPremiumGetBoostsList, opts ...grpc.CallOption) (*Premium_BoostsList, error)
	PremiumGetMyBoosts(ctx context.Context, in *TLPremiumGetMyBoosts, opts ...grpc.CallOption) (*Premium_MyBoosts, error)
	PremiumApplyBoost(ctx context.Context, in *TLPremiumApplyBoost, opts ...grpc.CallOption) (*Premium_MyBoosts, error)
	PremiumGetBoostsStatus(ctx context.Context, in *TLPremiumGetBoostsStatus, opts ...grpc.CallOption) (*Premium_BoostsStatus, error)
	PremiumGetUserBoosts(ctx context.Context, in *TLPremiumGetUserBoosts, opts ...grpc.CallOption) (*Premium_BoostsList, error)
	StoriesGetBoostsStatus(ctx context.Context, in *TLStoriesGetBoostsStatus, opts ...grpc.CallOption) (*Stories_BoostsStatus, error)
	StoriesGetBoostersList(ctx context.Context, in *TLStoriesGetBoostersList, opts ...grpc.CallOption) (*Stories_BoostersList, error)
	StoriesCanApplyBoost(ctx context.Context, in *TLStoriesCanApplyBoost, opts ...grpc.CallOption) (*Stories_CanApplyBoostResult, error)
	StoriesApplyBoost(ctx context.Context, in *TLStoriesApplyBoost, opts ...grpc.CallOption) (*Bool, error)
}

type rPCBoostsClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCBoostsClient(cc grpc.ClientConnInterface) RPCBoostsClient {
	return &rPCBoostsClient{cc}
}

func (c *rPCBoostsClient) ChannelsSetBoostsToUnblockRestrictions(ctx context.Context, in *TLChannelsSetBoostsToUnblockRestrictions, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCBoosts_ChannelsSetBoostsToUnblockRestrictions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCBoostsClient) PremiumGetBoostsList(ctx context.Context, in *TLPremiumGetBoostsList, opts ...grpc.CallOption) (*Premium_BoostsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Premium_BoostsList)
	err := c.cc.Invoke(ctx, RPCBoosts_PremiumGetBoostsList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCBoostsClient) PremiumGetMyBoosts(ctx context.Context, in *TLPremiumGetMyBoosts, opts ...grpc.CallOption) (*Premium_MyBoosts, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Premium_MyBoosts)
	err := c.cc.Invoke(ctx, RPCBoosts_PremiumGetMyBoosts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCBoostsClient) PremiumApplyBoost(ctx context.Context, in *TLPremiumApplyBoost, opts ...grpc.CallOption) (*Premium_MyBoosts, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Premium_MyBoosts)
	err := c.cc.Invoke(ctx, RPCBoosts_PremiumApplyBoost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCBoostsClient) PremiumGetBoostsStatus(ctx context.Context, in *TLPremiumGetBoostsStatus, opts ...grpc.CallOption) (*Premium_BoostsStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Premium_BoostsStatus)
	err := c.cc.Invoke(ctx, RPCBoosts_PremiumGetBoostsStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCBoostsClient) PremiumGetUserBoosts(ctx context.Context, in *TLPremiumGetUserBoosts, opts ...grpc.CallOption) (*Premium_BoostsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Premium_BoostsList)
	err := c.cc.Invoke(ctx, RPCBoosts_PremiumGetUserBoosts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCBoostsClient) StoriesGetBoostsStatus(ctx context.Context, in *TLStoriesGetBoostsStatus, opts ...grpc.CallOption) (*Stories_BoostsStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Stories_BoostsStatus)
	err := c.cc.Invoke(ctx, RPCBoosts_StoriesGetBoostsStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCBoostsClient) StoriesGetBoostersList(ctx context.Context, in *TLStoriesGetBoostersList, opts ...grpc.CallOption) (*Stories_BoostersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Stories_BoostersList)
	err := c.cc.Invoke(ctx, RPCBoosts_StoriesGetBoostersList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCBoostsClient) StoriesCanApplyBoost(ctx context.Context, in *TLStoriesCanApplyBoost, opts ...grpc.CallOption) (*Stories_CanApplyBoostResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Stories_CanApplyBoostResult)
	err := c.cc.Invoke(ctx, RPCBoosts_StoriesCanApplyBoost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCBoostsClient) StoriesApplyBoost(ctx context.Context, in *TLStoriesApplyBoost, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCBoosts_StoriesApplyBoost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCBoostsServer is the server API for RPCBoosts service.
// All implementations should embed UnimplementedRPCBoostsServer
// for forward compatibility.
type RPCBoostsServer interface {
	ChannelsSetBoostsToUnblockRestrictions(context.Context, *TLChannelsSetBoostsToUnblockRestrictions) (*Updates, error)
	PremiumGetBoostsList(context.Context, *TLPremiumGetBoostsList) (*Premium_BoostsList, error)
	PremiumGetMyBoosts(context.Context, *TLPremiumGetMyBoosts) (*Premium_MyBoosts, error)
	PremiumApplyBoost(context.Context, *TLPremiumApplyBoost) (*Premium_MyBoosts, error)
	PremiumGetBoostsStatus(context.Context, *TLPremiumGetBoostsStatus) (*Premium_BoostsStatus, error)
	PremiumGetUserBoosts(context.Context, *TLPremiumGetUserBoosts) (*Premium_BoostsList, error)
	StoriesGetBoostsStatus(context.Context, *TLStoriesGetBoostsStatus) (*Stories_BoostsStatus, error)
	StoriesGetBoostersList(context.Context, *TLStoriesGetBoostersList) (*Stories_BoostersList, error)
	StoriesCanApplyBoost(context.Context, *TLStoriesCanApplyBoost) (*Stories_CanApplyBoostResult, error)
	StoriesApplyBoost(context.Context, *TLStoriesApplyBoost) (*Bool, error)
}

// UnimplementedRPCBoostsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCBoostsServer struct{}

func (UnimplementedRPCBoostsServer) ChannelsSetBoostsToUnblockRestrictions(context.Context, *TLChannelsSetBoostsToUnblockRestrictions) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsSetBoostsToUnblockRestrictions not implemented")
}
func (UnimplementedRPCBoostsServer) PremiumGetBoostsList(context.Context, *TLPremiumGetBoostsList) (*Premium_BoostsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PremiumGetBoostsList not implemented")
}
func (UnimplementedRPCBoostsServer) PremiumGetMyBoosts(context.Context, *TLPremiumGetMyBoosts) (*Premium_MyBoosts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PremiumGetMyBoosts not implemented")
}
func (UnimplementedRPCBoostsServer) PremiumApplyBoost(context.Context, *TLPremiumApplyBoost) (*Premium_MyBoosts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PremiumApplyBoost not implemented")
}
func (UnimplementedRPCBoostsServer) PremiumGetBoostsStatus(context.Context, *TLPremiumGetBoostsStatus) (*Premium_BoostsStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PremiumGetBoostsStatus not implemented")
}
func (UnimplementedRPCBoostsServer) PremiumGetUserBoosts(context.Context, *TLPremiumGetUserBoosts) (*Premium_BoostsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PremiumGetUserBoosts not implemented")
}
func (UnimplementedRPCBoostsServer) StoriesGetBoostsStatus(context.Context, *TLStoriesGetBoostsStatus) (*Stories_BoostsStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoriesGetBoostsStatus not implemented")
}
func (UnimplementedRPCBoostsServer) StoriesGetBoostersList(context.Context, *TLStoriesGetBoostersList) (*Stories_BoostersList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoriesGetBoostersList not implemented")
}
func (UnimplementedRPCBoostsServer) StoriesCanApplyBoost(context.Context, *TLStoriesCanApplyBoost) (*Stories_CanApplyBoostResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoriesCanApplyBoost not implemented")
}
func (UnimplementedRPCBoostsServer) StoriesApplyBoost(context.Context, *TLStoriesApplyBoost) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoriesApplyBoost not implemented")
}
func (UnimplementedRPCBoostsServer) testEmbeddedByValue() {}

// UnsafeRPCBoostsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCBoostsServer will
// result in compilation errors.
type UnsafeRPCBoostsServer interface {
	mustEmbedUnimplementedRPCBoostsServer()
}

func RegisterRPCBoostsServer(s grpc.ServiceRegistrar, srv RPCBoostsServer) {
	// If the following call pancis, it indicates UnimplementedRPCBoostsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCBoosts_ServiceDesc, srv)
}

func _RPCBoosts_ChannelsSetBoostsToUnblockRestrictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsSetBoostsToUnblockRestrictions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBoostsServer).ChannelsSetBoostsToUnblockRestrictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBoosts_ChannelsSetBoostsToUnblockRestrictions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBoostsServer).ChannelsSetBoostsToUnblockRestrictions(ctx, req.(*TLChannelsSetBoostsToUnblockRestrictions))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCBoosts_PremiumGetBoostsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPremiumGetBoostsList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBoostsServer).PremiumGetBoostsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBoosts_PremiumGetBoostsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBoostsServer).PremiumGetBoostsList(ctx, req.(*TLPremiumGetBoostsList))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCBoosts_PremiumGetMyBoosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPremiumGetMyBoosts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBoostsServer).PremiumGetMyBoosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBoosts_PremiumGetMyBoosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBoostsServer).PremiumGetMyBoosts(ctx, req.(*TLPremiumGetMyBoosts))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCBoosts_PremiumApplyBoost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPremiumApplyBoost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBoostsServer).PremiumApplyBoost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBoosts_PremiumApplyBoost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBoostsServer).PremiumApplyBoost(ctx, req.(*TLPremiumApplyBoost))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCBoosts_PremiumGetBoostsStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPremiumGetBoostsStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBoostsServer).PremiumGetBoostsStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBoosts_PremiumGetBoostsStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBoostsServer).PremiumGetBoostsStatus(ctx, req.(*TLPremiumGetBoostsStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCBoosts_PremiumGetUserBoosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPremiumGetUserBoosts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBoostsServer).PremiumGetUserBoosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBoosts_PremiumGetUserBoosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBoostsServer).PremiumGetUserBoosts(ctx, req.(*TLPremiumGetUserBoosts))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCBoosts_StoriesGetBoostsStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStoriesGetBoostsStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBoostsServer).StoriesGetBoostsStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBoosts_StoriesGetBoostsStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBoostsServer).StoriesGetBoostsStatus(ctx, req.(*TLStoriesGetBoostsStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCBoosts_StoriesGetBoostersList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStoriesGetBoostersList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBoostsServer).StoriesGetBoostersList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBoosts_StoriesGetBoostersList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBoostsServer).StoriesGetBoostersList(ctx, req.(*TLStoriesGetBoostersList))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCBoosts_StoriesCanApplyBoost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStoriesCanApplyBoost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBoostsServer).StoriesCanApplyBoost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBoosts_StoriesCanApplyBoost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBoostsServer).StoriesCanApplyBoost(ctx, req.(*TLStoriesCanApplyBoost))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCBoosts_StoriesApplyBoost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStoriesApplyBoost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBoostsServer).StoriesApplyBoost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBoosts_StoriesApplyBoost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBoostsServer).StoriesApplyBoost(ctx, req.(*TLStoriesApplyBoost))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCBoosts_ServiceDesc is the grpc.ServiceDesc for RPCBoosts service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCBoosts_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCBoosts",
	HandlerType: (*RPCBoostsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "channels_setBoostsToUnblockRestrictions",
			Handler:    _RPCBoosts_ChannelsSetBoostsToUnblockRestrictions_Handler,
		},
		{
			MethodName: "premium_getBoostsList",
			Handler:    _RPCBoosts_PremiumGetBoostsList_Handler,
		},
		{
			MethodName: "premium_getMyBoosts",
			Handler:    _RPCBoosts_PremiumGetMyBoosts_Handler,
		},
		{
			MethodName: "premium_applyBoost",
			Handler:    _RPCBoosts_PremiumApplyBoost_Handler,
		},
		{
			MethodName: "premium_getBoostsStatus",
			Handler:    _RPCBoosts_PremiumGetBoostsStatus_Handler,
		},
		{
			MethodName: "premium_getUserBoosts",
			Handler:    _RPCBoosts_PremiumGetUserBoosts_Handler,
		},
		{
			MethodName: "stories_getBoostsStatus",
			Handler:    _RPCBoosts_StoriesGetBoostsStatus_Handler,
		},
		{
			MethodName: "stories_getBoostersList",
			Handler:    _RPCBoosts_StoriesGetBoostersList_Handler,
		},
		{
			MethodName: "stories_canApplyBoost",
			Handler:    _RPCBoosts_StoriesCanApplyBoost_Handler,
		},
		{
			MethodName: "stories_applyBoost",
			Handler:    _RPCBoosts_StoriesApplyBoost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCBotAdminRight_BotsSetBotBroadcastDefaultAdminRights_FullMethodName = "/mtproto.RPCBotAdminRight/bots_setBotBroadcastDefaultAdminRights"
	RPCBotAdminRight_BotsSetBotGroupDefaultAdminRights_FullMethodName     = "/mtproto.RPCBotAdminRight/bots_setBotGroupDefaultAdminRights"
)

// RPCBotAdminRightClient is the client API for RPCBotAdminRight service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCBotAdminRightClient interface {
	BotsSetBotBroadcastDefaultAdminRights(ctx context.Context, in *TLBotsSetBotBroadcastDefaultAdminRights, opts ...grpc.CallOption) (*Bool, error)
	BotsSetBotGroupDefaultAdminRights(ctx context.Context, in *TLBotsSetBotGroupDefaultAdminRights, opts ...grpc.CallOption) (*Bool, error)
}

type rPCBotAdminRightClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCBotAdminRightClient(cc grpc.ClientConnInterface) RPCBotAdminRightClient {
	return &rPCBotAdminRightClient{cc}
}

func (c *rPCBotAdminRightClient) BotsSetBotBroadcastDefaultAdminRights(ctx context.Context, in *TLBotsSetBotBroadcastDefaultAdminRights, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCBotAdminRight_BotsSetBotBroadcastDefaultAdminRights_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCBotAdminRightClient) BotsSetBotGroupDefaultAdminRights(ctx context.Context, in *TLBotsSetBotGroupDefaultAdminRights, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCBotAdminRight_BotsSetBotGroupDefaultAdminRights_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCBotAdminRightServer is the server API for RPCBotAdminRight service.
// All implementations should embed UnimplementedRPCBotAdminRightServer
// for forward compatibility.
type RPCBotAdminRightServer interface {
	BotsSetBotBroadcastDefaultAdminRights(context.Context, *TLBotsSetBotBroadcastDefaultAdminRights) (*Bool, error)
	BotsSetBotGroupDefaultAdminRights(context.Context, *TLBotsSetBotGroupDefaultAdminRights) (*Bool, error)
}

// UnimplementedRPCBotAdminRightServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCBotAdminRightServer struct{}

func (UnimplementedRPCBotAdminRightServer) BotsSetBotBroadcastDefaultAdminRights(context.Context, *TLBotsSetBotBroadcastDefaultAdminRights) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotsSetBotBroadcastDefaultAdminRights not implemented")
}
func (UnimplementedRPCBotAdminRightServer) BotsSetBotGroupDefaultAdminRights(context.Context, *TLBotsSetBotGroupDefaultAdminRights) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotsSetBotGroupDefaultAdminRights not implemented")
}
func (UnimplementedRPCBotAdminRightServer) testEmbeddedByValue() {}

// UnsafeRPCBotAdminRightServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCBotAdminRightServer will
// result in compilation errors.
type UnsafeRPCBotAdminRightServer interface {
	mustEmbedUnimplementedRPCBotAdminRightServer()
}

func RegisterRPCBotAdminRightServer(s grpc.ServiceRegistrar, srv RPCBotAdminRightServer) {
	// If the following call pancis, it indicates UnimplementedRPCBotAdminRightServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCBotAdminRight_ServiceDesc, srv)
}

func _RPCBotAdminRight_BotsSetBotBroadcastDefaultAdminRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLBotsSetBotBroadcastDefaultAdminRights)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBotAdminRightServer).BotsSetBotBroadcastDefaultAdminRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBotAdminRight_BotsSetBotBroadcastDefaultAdminRights_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBotAdminRightServer).BotsSetBotBroadcastDefaultAdminRights(ctx, req.(*TLBotsSetBotBroadcastDefaultAdminRights))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCBotAdminRight_BotsSetBotGroupDefaultAdminRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLBotsSetBotGroupDefaultAdminRights)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBotAdminRightServer).BotsSetBotGroupDefaultAdminRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBotAdminRight_BotsSetBotGroupDefaultAdminRights_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBotAdminRightServer).BotsSetBotGroupDefaultAdminRights(ctx, req.(*TLBotsSetBotGroupDefaultAdminRights))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCBotAdminRight_ServiceDesc is the grpc.ServiceDesc for RPCBotAdminRight service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCBotAdminRight_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCBotAdminRight",
	HandlerType: (*RPCBotAdminRightServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "bots_setBotBroadcastDefaultAdminRights",
			Handler:    _RPCBotAdminRight_BotsSetBotBroadcastDefaultAdminRights_Handler,
		},
		{
			MethodName: "bots_setBotGroupDefaultAdminRights",
			Handler:    _RPCBotAdminRight_BotsSetBotGroupDefaultAdminRights_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCBotMenu_MessagesGetAttachMenuBots_FullMethodName     = "/mtproto.RPCBotMenu/messages_getAttachMenuBots"
	RPCBotMenu_MessagesGetAttachMenuBot_FullMethodName      = "/mtproto.RPCBotMenu/messages_getAttachMenuBot"
	RPCBotMenu_MessagesToggleBotInAttachMenu_FullMethodName = "/mtproto.RPCBotMenu/messages_toggleBotInAttachMenu"
)

// RPCBotMenuClient is the client API for RPCBotMenu service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCBotMenuClient interface {
	MessagesGetAttachMenuBots(ctx context.Context, in *TLMessagesGetAttachMenuBots, opts ...grpc.CallOption) (*AttachMenuBots, error)
	MessagesGetAttachMenuBot(ctx context.Context, in *TLMessagesGetAttachMenuBot, opts ...grpc.CallOption) (*AttachMenuBotsBot, error)
	MessagesToggleBotInAttachMenu(ctx context.Context, in *TLMessagesToggleBotInAttachMenu, opts ...grpc.CallOption) (*Bool, error)
}

type rPCBotMenuClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCBotMenuClient(cc grpc.ClientConnInterface) RPCBotMenuClient {
	return &rPCBotMenuClient{cc}
}

func (c *rPCBotMenuClient) MessagesGetAttachMenuBots(ctx context.Context, in *TLMessagesGetAttachMenuBots, opts ...grpc.CallOption) (*AttachMenuBots, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttachMenuBots)
	err := c.cc.Invoke(ctx, RPCBotMenu_MessagesGetAttachMenuBots_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCBotMenuClient) MessagesGetAttachMenuBot(ctx context.Context, in *TLMessagesGetAttachMenuBot, opts ...grpc.CallOption) (*AttachMenuBotsBot, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttachMenuBotsBot)
	err := c.cc.Invoke(ctx, RPCBotMenu_MessagesGetAttachMenuBot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCBotMenuClient) MessagesToggleBotInAttachMenu(ctx context.Context, in *TLMessagesToggleBotInAttachMenu, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCBotMenu_MessagesToggleBotInAttachMenu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCBotMenuServer is the server API for RPCBotMenu service.
// All implementations should embed UnimplementedRPCBotMenuServer
// for forward compatibility.
type RPCBotMenuServer interface {
	MessagesGetAttachMenuBots(context.Context, *TLMessagesGetAttachMenuBots) (*AttachMenuBots, error)
	MessagesGetAttachMenuBot(context.Context, *TLMessagesGetAttachMenuBot) (*AttachMenuBotsBot, error)
	MessagesToggleBotInAttachMenu(context.Context, *TLMessagesToggleBotInAttachMenu) (*Bool, error)
}

// UnimplementedRPCBotMenuServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCBotMenuServer struct{}

func (UnimplementedRPCBotMenuServer) MessagesGetAttachMenuBots(context.Context, *TLMessagesGetAttachMenuBots) (*AttachMenuBots, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetAttachMenuBots not implemented")
}
func (UnimplementedRPCBotMenuServer) MessagesGetAttachMenuBot(context.Context, *TLMessagesGetAttachMenuBot) (*AttachMenuBotsBot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetAttachMenuBot not implemented")
}
func (UnimplementedRPCBotMenuServer) MessagesToggleBotInAttachMenu(context.Context, *TLMessagesToggleBotInAttachMenu) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesToggleBotInAttachMenu not implemented")
}
func (UnimplementedRPCBotMenuServer) testEmbeddedByValue() {}

// UnsafeRPCBotMenuServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCBotMenuServer will
// result in compilation errors.
type UnsafeRPCBotMenuServer interface {
	mustEmbedUnimplementedRPCBotMenuServer()
}

func RegisterRPCBotMenuServer(s grpc.ServiceRegistrar, srv RPCBotMenuServer) {
	// If the following call pancis, it indicates UnimplementedRPCBotMenuServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCBotMenu_ServiceDesc, srv)
}

func _RPCBotMenu_MessagesGetAttachMenuBots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetAttachMenuBots)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBotMenuServer).MessagesGetAttachMenuBots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBotMenu_MessagesGetAttachMenuBots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBotMenuServer).MessagesGetAttachMenuBots(ctx, req.(*TLMessagesGetAttachMenuBots))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCBotMenu_MessagesGetAttachMenuBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetAttachMenuBot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBotMenuServer).MessagesGetAttachMenuBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBotMenu_MessagesGetAttachMenuBot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBotMenuServer).MessagesGetAttachMenuBot(ctx, req.(*TLMessagesGetAttachMenuBot))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCBotMenu_MessagesToggleBotInAttachMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesToggleBotInAttachMenu)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBotMenuServer).MessagesToggleBotInAttachMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBotMenu_MessagesToggleBotInAttachMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBotMenuServer).MessagesToggleBotInAttachMenu(ctx, req.(*TLMessagesToggleBotInAttachMenu))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCBotMenu_ServiceDesc is the grpc.ServiceDesc for RPCBotMenu service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCBotMenu_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCBotMenu",
	HandlerType: (*RPCBotMenuServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "messages_getAttachMenuBots",
			Handler:    _RPCBotMenu_MessagesGetAttachMenuBots_Handler,
		},
		{
			MethodName: "messages_getAttachMenuBot",
			Handler:    _RPCBotMenu_MessagesGetAttachMenuBot_Handler,
		},
		{
			MethodName: "messages_toggleBotInAttachMenu",
			Handler:    _RPCBotMenu_MessagesToggleBotInAttachMenu_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCBotMenuButton_BotsSetBotMenuButton_FullMethodName = "/mtproto.RPCBotMenuButton/bots_setBotMenuButton"
	RPCBotMenuButton_BotsGetBotMenuButton_FullMethodName = "/mtproto.RPCBotMenuButton/bots_getBotMenuButton"
)

// RPCBotMenuButtonClient is the client API for RPCBotMenuButton service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCBotMenuButtonClient interface {
	BotsSetBotMenuButton(ctx context.Context, in *TLBotsSetBotMenuButton, opts ...grpc.CallOption) (*Bool, error)
	BotsGetBotMenuButton(ctx context.Context, in *TLBotsGetBotMenuButton, opts ...grpc.CallOption) (*BotMenuButton, error)
}

type rPCBotMenuButtonClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCBotMenuButtonClient(cc grpc.ClientConnInterface) RPCBotMenuButtonClient {
	return &rPCBotMenuButtonClient{cc}
}

func (c *rPCBotMenuButtonClient) BotsSetBotMenuButton(ctx context.Context, in *TLBotsSetBotMenuButton, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCBotMenuButton_BotsSetBotMenuButton_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCBotMenuButtonClient) BotsGetBotMenuButton(ctx context.Context, in *TLBotsGetBotMenuButton, opts ...grpc.CallOption) (*BotMenuButton, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BotMenuButton)
	err := c.cc.Invoke(ctx, RPCBotMenuButton_BotsGetBotMenuButton_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCBotMenuButtonServer is the server API for RPCBotMenuButton service.
// All implementations should embed UnimplementedRPCBotMenuButtonServer
// for forward compatibility.
type RPCBotMenuButtonServer interface {
	BotsSetBotMenuButton(context.Context, *TLBotsSetBotMenuButton) (*Bool, error)
	BotsGetBotMenuButton(context.Context, *TLBotsGetBotMenuButton) (*BotMenuButton, error)
}

// UnimplementedRPCBotMenuButtonServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCBotMenuButtonServer struct{}

func (UnimplementedRPCBotMenuButtonServer) BotsSetBotMenuButton(context.Context, *TLBotsSetBotMenuButton) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotsSetBotMenuButton not implemented")
}
func (UnimplementedRPCBotMenuButtonServer) BotsGetBotMenuButton(context.Context, *TLBotsGetBotMenuButton) (*BotMenuButton, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotsGetBotMenuButton not implemented")
}
func (UnimplementedRPCBotMenuButtonServer) testEmbeddedByValue() {}

// UnsafeRPCBotMenuButtonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCBotMenuButtonServer will
// result in compilation errors.
type UnsafeRPCBotMenuButtonServer interface {
	mustEmbedUnimplementedRPCBotMenuButtonServer()
}

func RegisterRPCBotMenuButtonServer(s grpc.ServiceRegistrar, srv RPCBotMenuButtonServer) {
	// If the following call pancis, it indicates UnimplementedRPCBotMenuButtonServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCBotMenuButton_ServiceDesc, srv)
}

func _RPCBotMenuButton_BotsSetBotMenuButton_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLBotsSetBotMenuButton)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBotMenuButtonServer).BotsSetBotMenuButton(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBotMenuButton_BotsSetBotMenuButton_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBotMenuButtonServer).BotsSetBotMenuButton(ctx, req.(*TLBotsSetBotMenuButton))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCBotMenuButton_BotsGetBotMenuButton_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLBotsGetBotMenuButton)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBotMenuButtonServer).BotsGetBotMenuButton(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBotMenuButton_BotsGetBotMenuButton_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBotMenuButtonServer).BotsGetBotMenuButton(ctx, req.(*TLBotsGetBotMenuButton))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCBotMenuButton_ServiceDesc is the grpc.ServiceDesc for RPCBotMenuButton service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCBotMenuButton_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCBotMenuButton",
	HandlerType: (*RPCBotMenuButtonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "bots_setBotMenuButton",
			Handler:    _RPCBotMenuButton_BotsSetBotMenuButton_Handler,
		},
		{
			MethodName: "bots_getBotMenuButton",
			Handler:    _RPCBotMenuButton_BotsGetBotMenuButton_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCBots_BotsSetBotCommands_FullMethodName        = "/mtproto.RPCBots/bots_setBotCommands"
	RPCBots_BotsResetBotCommands_FullMethodName      = "/mtproto.RPCBots/bots_resetBotCommands"
	RPCBots_BotsGetBotCommands_FullMethodName        = "/mtproto.RPCBots/bots_getBotCommands"
	RPCBots_BotsSetBotInfo_FullMethodName            = "/mtproto.RPCBots/bots_setBotInfo"
	RPCBots_BotsGetBotInfoDCD914FD_FullMethodName    = "/mtproto.RPCBots/bots_getBotInfoDCD914FD"
	RPCBots_BotsGetAdminedBots_FullMethodName        = "/mtproto.RPCBots/bots_getAdminedBots"
	RPCBots_BotsSetCustomVerification_FullMethodName = "/mtproto.RPCBots/bots_setCustomVerification"
	RPCBots_BotsGetBotRecommendations_FullMethodName = "/mtproto.RPCBots/bots_getBotRecommendations"
	RPCBots_BotsGetBotInfo75EC12E6_FullMethodName    = "/mtproto.RPCBots/bots_getBotInfo75EC12E6"
)

// RPCBotsClient is the client API for RPCBots service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCBotsClient interface {
	BotsSetBotCommands(ctx context.Context, in *TLBotsSetBotCommands, opts ...grpc.CallOption) (*Bool, error)
	BotsResetBotCommands(ctx context.Context, in *TLBotsResetBotCommands, opts ...grpc.CallOption) (*Bool, error)
	BotsGetBotCommands(ctx context.Context, in *TLBotsGetBotCommands, opts ...grpc.CallOption) (*Vector_BotCommand, error)
	BotsSetBotInfo(ctx context.Context, in *TLBotsSetBotInfo, opts ...grpc.CallOption) (*Bool, error)
	BotsGetBotInfoDCD914FD(ctx context.Context, in *TLBotsGetBotInfoDCD914FD, opts ...grpc.CallOption) (*Bots_BotInfo, error)
	BotsGetAdminedBots(ctx context.Context, in *TLBotsGetAdminedBots, opts ...grpc.CallOption) (*Vector_User, error)
	BotsSetCustomVerification(ctx context.Context, in *TLBotsSetCustomVerification, opts ...grpc.CallOption) (*Bool, error)
	BotsGetBotRecommendations(ctx context.Context, in *TLBotsGetBotRecommendations, opts ...grpc.CallOption) (*Users_Users, error)
	BotsGetBotInfo75EC12E6(ctx context.Context, in *TLBotsGetBotInfo75EC12E6, opts ...grpc.CallOption) (*Vector_String, error)
}

type rPCBotsClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCBotsClient(cc grpc.ClientConnInterface) RPCBotsClient {
	return &rPCBotsClient{cc}
}

func (c *rPCBotsClient) BotsSetBotCommands(ctx context.Context, in *TLBotsSetBotCommands, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCBots_BotsSetBotCommands_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCBotsClient) BotsResetBotCommands(ctx context.Context, in *TLBotsResetBotCommands, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCBots_BotsResetBotCommands_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCBotsClient) BotsGetBotCommands(ctx context.Context, in *TLBotsGetBotCommands, opts ...grpc.CallOption) (*Vector_BotCommand, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_BotCommand)
	err := c.cc.Invoke(ctx, RPCBots_BotsGetBotCommands_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCBotsClient) BotsSetBotInfo(ctx context.Context, in *TLBotsSetBotInfo, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCBots_BotsSetBotInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCBotsClient) BotsGetBotInfoDCD914FD(ctx context.Context, in *TLBotsGetBotInfoDCD914FD, opts ...grpc.CallOption) (*Bots_BotInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bots_BotInfo)
	err := c.cc.Invoke(ctx, RPCBots_BotsGetBotInfoDCD914FD_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCBotsClient) BotsGetAdminedBots(ctx context.Context, in *TLBotsGetAdminedBots, opts ...grpc.CallOption) (*Vector_User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_User)
	err := c.cc.Invoke(ctx, RPCBots_BotsGetAdminedBots_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCBotsClient) BotsSetCustomVerification(ctx context.Context, in *TLBotsSetCustomVerification, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCBots_BotsSetCustomVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCBotsClient) BotsGetBotRecommendations(ctx context.Context, in *TLBotsGetBotRecommendations, opts ...grpc.CallOption) (*Users_Users, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Users_Users)
	err := c.cc.Invoke(ctx, RPCBots_BotsGetBotRecommendations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCBotsClient) BotsGetBotInfo75EC12E6(ctx context.Context, in *TLBotsGetBotInfo75EC12E6, opts ...grpc.CallOption) (*Vector_String, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_String)
	err := c.cc.Invoke(ctx, RPCBots_BotsGetBotInfo75EC12E6_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCBotsServer is the server API for RPCBots service.
// All implementations should embed UnimplementedRPCBotsServer
// for forward compatibility.
type RPCBotsServer interface {
	BotsSetBotCommands(context.Context, *TLBotsSetBotCommands) (*Bool, error)
	BotsResetBotCommands(context.Context, *TLBotsResetBotCommands) (*Bool, error)
	BotsGetBotCommands(context.Context, *TLBotsGetBotCommands) (*Vector_BotCommand, error)
	BotsSetBotInfo(context.Context, *TLBotsSetBotInfo) (*Bool, error)
	BotsGetBotInfoDCD914FD(context.Context, *TLBotsGetBotInfoDCD914FD) (*Bots_BotInfo, error)
	BotsGetAdminedBots(context.Context, *TLBotsGetAdminedBots) (*Vector_User, error)
	BotsSetCustomVerification(context.Context, *TLBotsSetCustomVerification) (*Bool, error)
	BotsGetBotRecommendations(context.Context, *TLBotsGetBotRecommendations) (*Users_Users, error)
	BotsGetBotInfo75EC12E6(context.Context, *TLBotsGetBotInfo75EC12E6) (*Vector_String, error)
}

// UnimplementedRPCBotsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCBotsServer struct{}

func (UnimplementedRPCBotsServer) BotsSetBotCommands(context.Context, *TLBotsSetBotCommands) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotsSetBotCommands not implemented")
}
func (UnimplementedRPCBotsServer) BotsResetBotCommands(context.Context, *TLBotsResetBotCommands) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotsResetBotCommands not implemented")
}
func (UnimplementedRPCBotsServer) BotsGetBotCommands(context.Context, *TLBotsGetBotCommands) (*Vector_BotCommand, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotsGetBotCommands not implemented")
}
func (UnimplementedRPCBotsServer) BotsSetBotInfo(context.Context, *TLBotsSetBotInfo) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotsSetBotInfo not implemented")
}
func (UnimplementedRPCBotsServer) BotsGetBotInfoDCD914FD(context.Context, *TLBotsGetBotInfoDCD914FD) (*Bots_BotInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotsGetBotInfoDCD914FD not implemented")
}
func (UnimplementedRPCBotsServer) BotsGetAdminedBots(context.Context, *TLBotsGetAdminedBots) (*Vector_User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotsGetAdminedBots not implemented")
}
func (UnimplementedRPCBotsServer) BotsSetCustomVerification(context.Context, *TLBotsSetCustomVerification) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotsSetCustomVerification not implemented")
}
func (UnimplementedRPCBotsServer) BotsGetBotRecommendations(context.Context, *TLBotsGetBotRecommendations) (*Users_Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotsGetBotRecommendations not implemented")
}
func (UnimplementedRPCBotsServer) BotsGetBotInfo75EC12E6(context.Context, *TLBotsGetBotInfo75EC12E6) (*Vector_String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotsGetBotInfo75EC12E6 not implemented")
}
func (UnimplementedRPCBotsServer) testEmbeddedByValue() {}

// UnsafeRPCBotsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCBotsServer will
// result in compilation errors.
type UnsafeRPCBotsServer interface {
	mustEmbedUnimplementedRPCBotsServer()
}

func RegisterRPCBotsServer(s grpc.ServiceRegistrar, srv RPCBotsServer) {
	// If the following call pancis, it indicates UnimplementedRPCBotsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCBots_ServiceDesc, srv)
}

func _RPCBots_BotsSetBotCommands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLBotsSetBotCommands)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBotsServer).BotsSetBotCommands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBots_BotsSetBotCommands_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBotsServer).BotsSetBotCommands(ctx, req.(*TLBotsSetBotCommands))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCBots_BotsResetBotCommands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLBotsResetBotCommands)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBotsServer).BotsResetBotCommands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBots_BotsResetBotCommands_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBotsServer).BotsResetBotCommands(ctx, req.(*TLBotsResetBotCommands))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCBots_BotsGetBotCommands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLBotsGetBotCommands)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBotsServer).BotsGetBotCommands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBots_BotsGetBotCommands_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBotsServer).BotsGetBotCommands(ctx, req.(*TLBotsGetBotCommands))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCBots_BotsSetBotInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLBotsSetBotInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBotsServer).BotsSetBotInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBots_BotsSetBotInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBotsServer).BotsSetBotInfo(ctx, req.(*TLBotsSetBotInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCBots_BotsGetBotInfoDCD914FD_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLBotsGetBotInfoDCD914FD)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBotsServer).BotsGetBotInfoDCD914FD(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBots_BotsGetBotInfoDCD914FD_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBotsServer).BotsGetBotInfoDCD914FD(ctx, req.(*TLBotsGetBotInfoDCD914FD))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCBots_BotsGetAdminedBots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLBotsGetAdminedBots)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBotsServer).BotsGetAdminedBots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBots_BotsGetAdminedBots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBotsServer).BotsGetAdminedBots(ctx, req.(*TLBotsGetAdminedBots))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCBots_BotsSetCustomVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLBotsSetCustomVerification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBotsServer).BotsSetCustomVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBots_BotsSetCustomVerification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBotsServer).BotsSetCustomVerification(ctx, req.(*TLBotsSetCustomVerification))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCBots_BotsGetBotRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLBotsGetBotRecommendations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBotsServer).BotsGetBotRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBots_BotsGetBotRecommendations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBotsServer).BotsGetBotRecommendations(ctx, req.(*TLBotsGetBotRecommendations))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCBots_BotsGetBotInfo75EC12E6_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLBotsGetBotInfo75EC12E6)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBotsServer).BotsGetBotInfo75EC12E6(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBots_BotsGetBotInfo75EC12E6_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBotsServer).BotsGetBotInfo75EC12E6(ctx, req.(*TLBotsGetBotInfo75EC12E6))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCBots_ServiceDesc is the grpc.ServiceDesc for RPCBots service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCBots_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCBots",
	HandlerType: (*RPCBotsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "bots_setBotCommands",
			Handler:    _RPCBots_BotsSetBotCommands_Handler,
		},
		{
			MethodName: "bots_resetBotCommands",
			Handler:    _RPCBots_BotsResetBotCommands_Handler,
		},
		{
			MethodName: "bots_getBotCommands",
			Handler:    _RPCBots_BotsGetBotCommands_Handler,
		},
		{
			MethodName: "bots_setBotInfo",
			Handler:    _RPCBots_BotsSetBotInfo_Handler,
		},
		{
			MethodName: "bots_getBotInfoDCD914FD",
			Handler:    _RPCBots_BotsGetBotInfoDCD914FD_Handler,
		},
		{
			MethodName: "bots_getAdminedBots",
			Handler:    _RPCBots_BotsGetAdminedBots_Handler,
		},
		{
			MethodName: "bots_setCustomVerification",
			Handler:    _RPCBots_BotsSetCustomVerification_Handler,
		},
		{
			MethodName: "bots_getBotRecommendations",
			Handler:    _RPCBots_BotsGetBotRecommendations_Handler,
		},
		{
			MethodName: "bots_getBotInfo75EC12E6",
			Handler:    _RPCBots_BotsGetBotInfo75EC12E6_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCBusinessChatLinks_AccountCreateBusinessChatLink_FullMethodName  = "/mtproto.RPCBusinessChatLinks/account_createBusinessChatLink"
	RPCBusinessChatLinks_AccountEditBusinessChatLink_FullMethodName    = "/mtproto.RPCBusinessChatLinks/account_editBusinessChatLink"
	RPCBusinessChatLinks_AccountDeleteBusinessChatLink_FullMethodName  = "/mtproto.RPCBusinessChatLinks/account_deleteBusinessChatLink"
	RPCBusinessChatLinks_AccountGetBusinessChatLinks_FullMethodName    = "/mtproto.RPCBusinessChatLinks/account_getBusinessChatLinks"
	RPCBusinessChatLinks_AccountResolveBusinessChatLink_FullMethodName = "/mtproto.RPCBusinessChatLinks/account_resolveBusinessChatLink"
)

// RPCBusinessChatLinksClient is the client API for RPCBusinessChatLinks service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCBusinessChatLinksClient interface {
	AccountCreateBusinessChatLink(ctx context.Context, in *TLAccountCreateBusinessChatLink, opts ...grpc.CallOption) (*BusinessChatLink, error)
	AccountEditBusinessChatLink(ctx context.Context, in *TLAccountEditBusinessChatLink, opts ...grpc.CallOption) (*BusinessChatLink, error)
	AccountDeleteBusinessChatLink(ctx context.Context, in *TLAccountDeleteBusinessChatLink, opts ...grpc.CallOption) (*Bool, error)
	AccountGetBusinessChatLinks(ctx context.Context, in *TLAccountGetBusinessChatLinks, opts ...grpc.CallOption) (*Account_BusinessChatLinks, error)
	AccountResolveBusinessChatLink(ctx context.Context, in *TLAccountResolveBusinessChatLink, opts ...grpc.CallOption) (*Account_ResolvedBusinessChatLinks, error)
}

type rPCBusinessChatLinksClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCBusinessChatLinksClient(cc grpc.ClientConnInterface) RPCBusinessChatLinksClient {
	return &rPCBusinessChatLinksClient{cc}
}

func (c *rPCBusinessChatLinksClient) AccountCreateBusinessChatLink(ctx context.Context, in *TLAccountCreateBusinessChatLink, opts ...grpc.CallOption) (*BusinessChatLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BusinessChatLink)
	err := c.cc.Invoke(ctx, RPCBusinessChatLinks_AccountCreateBusinessChatLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCBusinessChatLinksClient) AccountEditBusinessChatLink(ctx context.Context, in *TLAccountEditBusinessChatLink, opts ...grpc.CallOption) (*BusinessChatLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BusinessChatLink)
	err := c.cc.Invoke(ctx, RPCBusinessChatLinks_AccountEditBusinessChatLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCBusinessChatLinksClient) AccountDeleteBusinessChatLink(ctx context.Context, in *TLAccountDeleteBusinessChatLink, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCBusinessChatLinks_AccountDeleteBusinessChatLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCBusinessChatLinksClient) AccountGetBusinessChatLinks(ctx context.Context, in *TLAccountGetBusinessChatLinks, opts ...grpc.CallOption) (*Account_BusinessChatLinks, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account_BusinessChatLinks)
	err := c.cc.Invoke(ctx, RPCBusinessChatLinks_AccountGetBusinessChatLinks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCBusinessChatLinksClient) AccountResolveBusinessChatLink(ctx context.Context, in *TLAccountResolveBusinessChatLink, opts ...grpc.CallOption) (*Account_ResolvedBusinessChatLinks, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account_ResolvedBusinessChatLinks)
	err := c.cc.Invoke(ctx, RPCBusinessChatLinks_AccountResolveBusinessChatLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCBusinessChatLinksServer is the server API for RPCBusinessChatLinks service.
// All implementations should embed UnimplementedRPCBusinessChatLinksServer
// for forward compatibility.
type RPCBusinessChatLinksServer interface {
	AccountCreateBusinessChatLink(context.Context, *TLAccountCreateBusinessChatLink) (*BusinessChatLink, error)
	AccountEditBusinessChatLink(context.Context, *TLAccountEditBusinessChatLink) (*BusinessChatLink, error)
	AccountDeleteBusinessChatLink(context.Context, *TLAccountDeleteBusinessChatLink) (*Bool, error)
	AccountGetBusinessChatLinks(context.Context, *TLAccountGetBusinessChatLinks) (*Account_BusinessChatLinks, error)
	AccountResolveBusinessChatLink(context.Context, *TLAccountResolveBusinessChatLink) (*Account_ResolvedBusinessChatLinks, error)
}

// UnimplementedRPCBusinessChatLinksServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCBusinessChatLinksServer struct{}

func (UnimplementedRPCBusinessChatLinksServer) AccountCreateBusinessChatLink(context.Context, *TLAccountCreateBusinessChatLink) (*BusinessChatLink, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountCreateBusinessChatLink not implemented")
}
func (UnimplementedRPCBusinessChatLinksServer) AccountEditBusinessChatLink(context.Context, *TLAccountEditBusinessChatLink) (*BusinessChatLink, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountEditBusinessChatLink not implemented")
}
func (UnimplementedRPCBusinessChatLinksServer) AccountDeleteBusinessChatLink(context.Context, *TLAccountDeleteBusinessChatLink) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountDeleteBusinessChatLink not implemented")
}
func (UnimplementedRPCBusinessChatLinksServer) AccountGetBusinessChatLinks(context.Context, *TLAccountGetBusinessChatLinks) (*Account_BusinessChatLinks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetBusinessChatLinks not implemented")
}
func (UnimplementedRPCBusinessChatLinksServer) AccountResolveBusinessChatLink(context.Context, *TLAccountResolveBusinessChatLink) (*Account_ResolvedBusinessChatLinks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountResolveBusinessChatLink not implemented")
}
func (UnimplementedRPCBusinessChatLinksServer) testEmbeddedByValue() {}

// UnsafeRPCBusinessChatLinksServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCBusinessChatLinksServer will
// result in compilation errors.
type UnsafeRPCBusinessChatLinksServer interface {
	mustEmbedUnimplementedRPCBusinessChatLinksServer()
}

func RegisterRPCBusinessChatLinksServer(s grpc.ServiceRegistrar, srv RPCBusinessChatLinksServer) {
	// If the following call pancis, it indicates UnimplementedRPCBusinessChatLinksServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCBusinessChatLinks_ServiceDesc, srv)
}

func _RPCBusinessChatLinks_AccountCreateBusinessChatLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountCreateBusinessChatLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBusinessChatLinksServer).AccountCreateBusinessChatLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBusinessChatLinks_AccountCreateBusinessChatLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBusinessChatLinksServer).AccountCreateBusinessChatLink(ctx, req.(*TLAccountCreateBusinessChatLink))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCBusinessChatLinks_AccountEditBusinessChatLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountEditBusinessChatLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBusinessChatLinksServer).AccountEditBusinessChatLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBusinessChatLinks_AccountEditBusinessChatLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBusinessChatLinksServer).AccountEditBusinessChatLink(ctx, req.(*TLAccountEditBusinessChatLink))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCBusinessChatLinks_AccountDeleteBusinessChatLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountDeleteBusinessChatLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBusinessChatLinksServer).AccountDeleteBusinessChatLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBusinessChatLinks_AccountDeleteBusinessChatLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBusinessChatLinksServer).AccountDeleteBusinessChatLink(ctx, req.(*TLAccountDeleteBusinessChatLink))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCBusinessChatLinks_AccountGetBusinessChatLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetBusinessChatLinks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBusinessChatLinksServer).AccountGetBusinessChatLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBusinessChatLinks_AccountGetBusinessChatLinks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBusinessChatLinksServer).AccountGetBusinessChatLinks(ctx, req.(*TLAccountGetBusinessChatLinks))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCBusinessChatLinks_AccountResolveBusinessChatLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountResolveBusinessChatLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBusinessChatLinksServer).AccountResolveBusinessChatLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBusinessChatLinks_AccountResolveBusinessChatLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBusinessChatLinksServer).AccountResolveBusinessChatLink(ctx, req.(*TLAccountResolveBusinessChatLink))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCBusinessChatLinks_ServiceDesc is the grpc.ServiceDesc for RPCBusinessChatLinks service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCBusinessChatLinks_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCBusinessChatLinks",
	HandlerType: (*RPCBusinessChatLinksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "account_createBusinessChatLink",
			Handler:    _RPCBusinessChatLinks_AccountCreateBusinessChatLink_Handler,
		},
		{
			MethodName: "account_editBusinessChatLink",
			Handler:    _RPCBusinessChatLinks_AccountEditBusinessChatLink_Handler,
		},
		{
			MethodName: "account_deleteBusinessChatLink",
			Handler:    _RPCBusinessChatLinks_AccountDeleteBusinessChatLink_Handler,
		},
		{
			MethodName: "account_getBusinessChatLinks",
			Handler:    _RPCBusinessChatLinks_AccountGetBusinessChatLinks_Handler,
		},
		{
			MethodName: "account_resolveBusinessChatLink",
			Handler:    _RPCBusinessChatLinks_AccountResolveBusinessChatLink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCBusinessConnectedBots_AccountUpdateConnectedBot_FullMethodName       = "/mtproto.RPCBusinessConnectedBots/account_updateConnectedBot"
	RPCBusinessConnectedBots_AccountGetConnectedBots_FullMethodName         = "/mtproto.RPCBusinessConnectedBots/account_getConnectedBots"
	RPCBusinessConnectedBots_AccountGetBotBusinessConnection_FullMethodName = "/mtproto.RPCBusinessConnectedBots/account_getBotBusinessConnection"
	RPCBusinessConnectedBots_AccountToggleConnectedBotPaused_FullMethodName = "/mtproto.RPCBusinessConnectedBots/account_toggleConnectedBotPaused"
	RPCBusinessConnectedBots_AccountDisablePeerConnectedBot_FullMethodName  = "/mtproto.RPCBusinessConnectedBots/account_disablePeerConnectedBot"
)

// RPCBusinessConnectedBotsClient is the client API for RPCBusinessConnectedBots service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCBusinessConnectedBotsClient interface {
	AccountUpdateConnectedBot(ctx context.Context, in *TLAccountUpdateConnectedBot, opts ...grpc.CallOption) (*Updates, error)
	AccountGetConnectedBots(ctx context.Context, in *TLAccountGetConnectedBots, opts ...grpc.CallOption) (*Account_ConnectedBots, error)
	AccountGetBotBusinessConnection(ctx context.Context, in *TLAccountGetBotBusinessConnection, opts ...grpc.CallOption) (*Updates, error)
	AccountToggleConnectedBotPaused(ctx context.Context, in *TLAccountToggleConnectedBotPaused, opts ...grpc.CallOption) (*Bool, error)
	AccountDisablePeerConnectedBot(ctx context.Context, in *TLAccountDisablePeerConnectedBot, opts ...grpc.CallOption) (*Bool, error)
}

type rPCBusinessConnectedBotsClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCBusinessConnectedBotsClient(cc grpc.ClientConnInterface) RPCBusinessConnectedBotsClient {
	return &rPCBusinessConnectedBotsClient{cc}
}

func (c *rPCBusinessConnectedBotsClient) AccountUpdateConnectedBot(ctx context.Context, in *TLAccountUpdateConnectedBot, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCBusinessConnectedBots_AccountUpdateConnectedBot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCBusinessConnectedBotsClient) AccountGetConnectedBots(ctx context.Context, in *TLAccountGetConnectedBots, opts ...grpc.CallOption) (*Account_ConnectedBots, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account_ConnectedBots)
	err := c.cc.Invoke(ctx, RPCBusinessConnectedBots_AccountGetConnectedBots_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCBusinessConnectedBotsClient) AccountGetBotBusinessConnection(ctx context.Context, in *TLAccountGetBotBusinessConnection, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCBusinessConnectedBots_AccountGetBotBusinessConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCBusinessConnectedBotsClient) AccountToggleConnectedBotPaused(ctx context.Context, in *TLAccountToggleConnectedBotPaused, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCBusinessConnectedBots_AccountToggleConnectedBotPaused_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCBusinessConnectedBotsClient) AccountDisablePeerConnectedBot(ctx context.Context, in *TLAccountDisablePeerConnectedBot, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCBusinessConnectedBots_AccountDisablePeerConnectedBot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCBusinessConnectedBotsServer is the server API for RPCBusinessConnectedBots service.
// All implementations should embed UnimplementedRPCBusinessConnectedBotsServer
// for forward compatibility.
type RPCBusinessConnectedBotsServer interface {
	AccountUpdateConnectedBot(context.Context, *TLAccountUpdateConnectedBot) (*Updates, error)
	AccountGetConnectedBots(context.Context, *TLAccountGetConnectedBots) (*Account_ConnectedBots, error)
	AccountGetBotBusinessConnection(context.Context, *TLAccountGetBotBusinessConnection) (*Updates, error)
	AccountToggleConnectedBotPaused(context.Context, *TLAccountToggleConnectedBotPaused) (*Bool, error)
	AccountDisablePeerConnectedBot(context.Context, *TLAccountDisablePeerConnectedBot) (*Bool, error)
}

// UnimplementedRPCBusinessConnectedBotsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCBusinessConnectedBotsServer struct{}

func (UnimplementedRPCBusinessConnectedBotsServer) AccountUpdateConnectedBot(context.Context, *TLAccountUpdateConnectedBot) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUpdateConnectedBot not implemented")
}
func (UnimplementedRPCBusinessConnectedBotsServer) AccountGetConnectedBots(context.Context, *TLAccountGetConnectedBots) (*Account_ConnectedBots, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetConnectedBots not implemented")
}
func (UnimplementedRPCBusinessConnectedBotsServer) AccountGetBotBusinessConnection(context.Context, *TLAccountGetBotBusinessConnection) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetBotBusinessConnection not implemented")
}
func (UnimplementedRPCBusinessConnectedBotsServer) AccountToggleConnectedBotPaused(context.Context, *TLAccountToggleConnectedBotPaused) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountToggleConnectedBotPaused not implemented")
}
func (UnimplementedRPCBusinessConnectedBotsServer) AccountDisablePeerConnectedBot(context.Context, *TLAccountDisablePeerConnectedBot) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountDisablePeerConnectedBot not implemented")
}
func (UnimplementedRPCBusinessConnectedBotsServer) testEmbeddedByValue() {}

// UnsafeRPCBusinessConnectedBotsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCBusinessConnectedBotsServer will
// result in compilation errors.
type UnsafeRPCBusinessConnectedBotsServer interface {
	mustEmbedUnimplementedRPCBusinessConnectedBotsServer()
}

func RegisterRPCBusinessConnectedBotsServer(s grpc.ServiceRegistrar, srv RPCBusinessConnectedBotsServer) {
	// If the following call pancis, it indicates UnimplementedRPCBusinessConnectedBotsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCBusinessConnectedBots_ServiceDesc, srv)
}

func _RPCBusinessConnectedBots_AccountUpdateConnectedBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUpdateConnectedBot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBusinessConnectedBotsServer).AccountUpdateConnectedBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBusinessConnectedBots_AccountUpdateConnectedBot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBusinessConnectedBotsServer).AccountUpdateConnectedBot(ctx, req.(*TLAccountUpdateConnectedBot))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCBusinessConnectedBots_AccountGetConnectedBots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetConnectedBots)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBusinessConnectedBotsServer).AccountGetConnectedBots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBusinessConnectedBots_AccountGetConnectedBots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBusinessConnectedBotsServer).AccountGetConnectedBots(ctx, req.(*TLAccountGetConnectedBots))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCBusinessConnectedBots_AccountGetBotBusinessConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetBotBusinessConnection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBusinessConnectedBotsServer).AccountGetBotBusinessConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBusinessConnectedBots_AccountGetBotBusinessConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBusinessConnectedBotsServer).AccountGetBotBusinessConnection(ctx, req.(*TLAccountGetBotBusinessConnection))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCBusinessConnectedBots_AccountToggleConnectedBotPaused_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountToggleConnectedBotPaused)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBusinessConnectedBotsServer).AccountToggleConnectedBotPaused(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBusinessConnectedBots_AccountToggleConnectedBotPaused_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBusinessConnectedBotsServer).AccountToggleConnectedBotPaused(ctx, req.(*TLAccountToggleConnectedBotPaused))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCBusinessConnectedBots_AccountDisablePeerConnectedBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountDisablePeerConnectedBot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBusinessConnectedBotsServer).AccountDisablePeerConnectedBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBusinessConnectedBots_AccountDisablePeerConnectedBot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBusinessConnectedBotsServer).AccountDisablePeerConnectedBot(ctx, req.(*TLAccountDisablePeerConnectedBot))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCBusinessConnectedBots_ServiceDesc is the grpc.ServiceDesc for RPCBusinessConnectedBots service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCBusinessConnectedBots_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCBusinessConnectedBots",
	HandlerType: (*RPCBusinessConnectedBotsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "account_updateConnectedBot",
			Handler:    _RPCBusinessConnectedBots_AccountUpdateConnectedBot_Handler,
		},
		{
			MethodName: "account_getConnectedBots",
			Handler:    _RPCBusinessConnectedBots_AccountGetConnectedBots_Handler,
		},
		{
			MethodName: "account_getBotBusinessConnection",
			Handler:    _RPCBusinessConnectedBots_AccountGetBotBusinessConnection_Handler,
		},
		{
			MethodName: "account_toggleConnectedBotPaused",
			Handler:    _RPCBusinessConnectedBots_AccountToggleConnectedBotPaused_Handler,
		},
		{
			MethodName: "account_disablePeerConnectedBot",
			Handler:    _RPCBusinessConnectedBots_AccountDisablePeerConnectedBot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCBusinessGreeting_AccountUpdateBusinessGreetingMessage_FullMethodName = "/mtproto.RPCBusinessGreeting/account_updateBusinessGreetingMessage"
	RPCBusinessGreeting_AccountUpdateBusinessAwayMessage_FullMethodName     = "/mtproto.RPCBusinessGreeting/account_updateBusinessAwayMessage"
)

// RPCBusinessGreetingClient is the client API for RPCBusinessGreeting service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCBusinessGreetingClient interface {
	AccountUpdateBusinessGreetingMessage(ctx context.Context, in *TLAccountUpdateBusinessGreetingMessage, opts ...grpc.CallOption) (*Bool, error)
	AccountUpdateBusinessAwayMessage(ctx context.Context, in *TLAccountUpdateBusinessAwayMessage, opts ...grpc.CallOption) (*Bool, error)
}

type rPCBusinessGreetingClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCBusinessGreetingClient(cc grpc.ClientConnInterface) RPCBusinessGreetingClient {
	return &rPCBusinessGreetingClient{cc}
}

func (c *rPCBusinessGreetingClient) AccountUpdateBusinessGreetingMessage(ctx context.Context, in *TLAccountUpdateBusinessGreetingMessage, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCBusinessGreeting_AccountUpdateBusinessGreetingMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCBusinessGreetingClient) AccountUpdateBusinessAwayMessage(ctx context.Context, in *TLAccountUpdateBusinessAwayMessage, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCBusinessGreeting_AccountUpdateBusinessAwayMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCBusinessGreetingServer is the server API for RPCBusinessGreeting service.
// All implementations should embed UnimplementedRPCBusinessGreetingServer
// for forward compatibility.
type RPCBusinessGreetingServer interface {
	AccountUpdateBusinessGreetingMessage(context.Context, *TLAccountUpdateBusinessGreetingMessage) (*Bool, error)
	AccountUpdateBusinessAwayMessage(context.Context, *TLAccountUpdateBusinessAwayMessage) (*Bool, error)
}

// UnimplementedRPCBusinessGreetingServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCBusinessGreetingServer struct{}

func (UnimplementedRPCBusinessGreetingServer) AccountUpdateBusinessGreetingMessage(context.Context, *TLAccountUpdateBusinessGreetingMessage) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUpdateBusinessGreetingMessage not implemented")
}
func (UnimplementedRPCBusinessGreetingServer) AccountUpdateBusinessAwayMessage(context.Context, *TLAccountUpdateBusinessAwayMessage) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUpdateBusinessAwayMessage not implemented")
}
func (UnimplementedRPCBusinessGreetingServer) testEmbeddedByValue() {}

// UnsafeRPCBusinessGreetingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCBusinessGreetingServer will
// result in compilation errors.
type UnsafeRPCBusinessGreetingServer interface {
	mustEmbedUnimplementedRPCBusinessGreetingServer()
}

func RegisterRPCBusinessGreetingServer(s grpc.ServiceRegistrar, srv RPCBusinessGreetingServer) {
	// If the following call pancis, it indicates UnimplementedRPCBusinessGreetingServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCBusinessGreeting_ServiceDesc, srv)
}

func _RPCBusinessGreeting_AccountUpdateBusinessGreetingMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUpdateBusinessGreetingMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBusinessGreetingServer).AccountUpdateBusinessGreetingMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBusinessGreeting_AccountUpdateBusinessGreetingMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBusinessGreetingServer).AccountUpdateBusinessGreetingMessage(ctx, req.(*TLAccountUpdateBusinessGreetingMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCBusinessGreeting_AccountUpdateBusinessAwayMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUpdateBusinessAwayMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBusinessGreetingServer).AccountUpdateBusinessAwayMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBusinessGreeting_AccountUpdateBusinessAwayMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBusinessGreetingServer).AccountUpdateBusinessAwayMessage(ctx, req.(*TLAccountUpdateBusinessAwayMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCBusinessGreeting_ServiceDesc is the grpc.ServiceDesc for RPCBusinessGreeting service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCBusinessGreeting_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCBusinessGreeting",
	HandlerType: (*RPCBusinessGreetingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "account_updateBusinessGreetingMessage",
			Handler:    _RPCBusinessGreeting_AccountUpdateBusinessGreetingMessage_Handler,
		},
		{
			MethodName: "account_updateBusinessAwayMessage",
			Handler:    _RPCBusinessGreeting_AccountUpdateBusinessAwayMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCBusinessIntro_AccountUpdateBusinessIntro_FullMethodName = "/mtproto.RPCBusinessIntro/account_updateBusinessIntro"
)

// RPCBusinessIntroClient is the client API for RPCBusinessIntro service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCBusinessIntroClient interface {
	AccountUpdateBusinessIntro(ctx context.Context, in *TLAccountUpdateBusinessIntro, opts ...grpc.CallOption) (*Bool, error)
}

type rPCBusinessIntroClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCBusinessIntroClient(cc grpc.ClientConnInterface) RPCBusinessIntroClient {
	return &rPCBusinessIntroClient{cc}
}

func (c *rPCBusinessIntroClient) AccountUpdateBusinessIntro(ctx context.Context, in *TLAccountUpdateBusinessIntro, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCBusinessIntro_AccountUpdateBusinessIntro_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCBusinessIntroServer is the server API for RPCBusinessIntro service.
// All implementations should embed UnimplementedRPCBusinessIntroServer
// for forward compatibility.
type RPCBusinessIntroServer interface {
	AccountUpdateBusinessIntro(context.Context, *TLAccountUpdateBusinessIntro) (*Bool, error)
}

// UnimplementedRPCBusinessIntroServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCBusinessIntroServer struct{}

func (UnimplementedRPCBusinessIntroServer) AccountUpdateBusinessIntro(context.Context, *TLAccountUpdateBusinessIntro) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUpdateBusinessIntro not implemented")
}
func (UnimplementedRPCBusinessIntroServer) testEmbeddedByValue() {}

// UnsafeRPCBusinessIntroServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCBusinessIntroServer will
// result in compilation errors.
type UnsafeRPCBusinessIntroServer interface {
	mustEmbedUnimplementedRPCBusinessIntroServer()
}

func RegisterRPCBusinessIntroServer(s grpc.ServiceRegistrar, srv RPCBusinessIntroServer) {
	// If the following call pancis, it indicates UnimplementedRPCBusinessIntroServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCBusinessIntro_ServiceDesc, srv)
}

func _RPCBusinessIntro_AccountUpdateBusinessIntro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUpdateBusinessIntro)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBusinessIntroServer).AccountUpdateBusinessIntro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBusinessIntro_AccountUpdateBusinessIntro_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBusinessIntroServer).AccountUpdateBusinessIntro(ctx, req.(*TLAccountUpdateBusinessIntro))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCBusinessIntro_ServiceDesc is the grpc.ServiceDesc for RPCBusinessIntro service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCBusinessIntro_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCBusinessIntro",
	HandlerType: (*RPCBusinessIntroServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "account_updateBusinessIntro",
			Handler:    _RPCBusinessIntro_AccountUpdateBusinessIntro_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCBusinessLocation_AccountUpdateBusinessLocation_FullMethodName = "/mtproto.RPCBusinessLocation/account_updateBusinessLocation"
)

// RPCBusinessLocationClient is the client API for RPCBusinessLocation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCBusinessLocationClient interface {
	AccountUpdateBusinessLocation(ctx context.Context, in *TLAccountUpdateBusinessLocation, opts ...grpc.CallOption) (*Bool, error)
}

type rPCBusinessLocationClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCBusinessLocationClient(cc grpc.ClientConnInterface) RPCBusinessLocationClient {
	return &rPCBusinessLocationClient{cc}
}

func (c *rPCBusinessLocationClient) AccountUpdateBusinessLocation(ctx context.Context, in *TLAccountUpdateBusinessLocation, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCBusinessLocation_AccountUpdateBusinessLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCBusinessLocationServer is the server API for RPCBusinessLocation service.
// All implementations should embed UnimplementedRPCBusinessLocationServer
// for forward compatibility.
type RPCBusinessLocationServer interface {
	AccountUpdateBusinessLocation(context.Context, *TLAccountUpdateBusinessLocation) (*Bool, error)
}

// UnimplementedRPCBusinessLocationServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCBusinessLocationServer struct{}

func (UnimplementedRPCBusinessLocationServer) AccountUpdateBusinessLocation(context.Context, *TLAccountUpdateBusinessLocation) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUpdateBusinessLocation not implemented")
}
func (UnimplementedRPCBusinessLocationServer) testEmbeddedByValue() {}

// UnsafeRPCBusinessLocationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCBusinessLocationServer will
// result in compilation errors.
type UnsafeRPCBusinessLocationServer interface {
	mustEmbedUnimplementedRPCBusinessLocationServer()
}

func RegisterRPCBusinessLocationServer(s grpc.ServiceRegistrar, srv RPCBusinessLocationServer) {
	// If the following call pancis, it indicates UnimplementedRPCBusinessLocationServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCBusinessLocation_ServiceDesc, srv)
}

func _RPCBusinessLocation_AccountUpdateBusinessLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUpdateBusinessLocation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBusinessLocationServer).AccountUpdateBusinessLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBusinessLocation_AccountUpdateBusinessLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBusinessLocationServer).AccountUpdateBusinessLocation(ctx, req.(*TLAccountUpdateBusinessLocation))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCBusinessLocation_ServiceDesc is the grpc.ServiceDesc for RPCBusinessLocation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCBusinessLocation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCBusinessLocation",
	HandlerType: (*RPCBusinessLocationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "account_updateBusinessLocation",
			Handler:    _RPCBusinessLocation_AccountUpdateBusinessLocation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCBusinessOpeningHours_AccountUpdateBusinessWorkHours_FullMethodName = "/mtproto.RPCBusinessOpeningHours/account_updateBusinessWorkHours"
)

// RPCBusinessOpeningHoursClient is the client API for RPCBusinessOpeningHours service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCBusinessOpeningHoursClient interface {
	AccountUpdateBusinessWorkHours(ctx context.Context, in *TLAccountUpdateBusinessWorkHours, opts ...grpc.CallOption) (*Bool, error)
}

type rPCBusinessOpeningHoursClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCBusinessOpeningHoursClient(cc grpc.ClientConnInterface) RPCBusinessOpeningHoursClient {
	return &rPCBusinessOpeningHoursClient{cc}
}

func (c *rPCBusinessOpeningHoursClient) AccountUpdateBusinessWorkHours(ctx context.Context, in *TLAccountUpdateBusinessWorkHours, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCBusinessOpeningHours_AccountUpdateBusinessWorkHours_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCBusinessOpeningHoursServer is the server API for RPCBusinessOpeningHours service.
// All implementations should embed UnimplementedRPCBusinessOpeningHoursServer
// for forward compatibility.
type RPCBusinessOpeningHoursServer interface {
	AccountUpdateBusinessWorkHours(context.Context, *TLAccountUpdateBusinessWorkHours) (*Bool, error)
}

// UnimplementedRPCBusinessOpeningHoursServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCBusinessOpeningHoursServer struct{}

func (UnimplementedRPCBusinessOpeningHoursServer) AccountUpdateBusinessWorkHours(context.Context, *TLAccountUpdateBusinessWorkHours) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUpdateBusinessWorkHours not implemented")
}
func (UnimplementedRPCBusinessOpeningHoursServer) testEmbeddedByValue() {}

// UnsafeRPCBusinessOpeningHoursServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCBusinessOpeningHoursServer will
// result in compilation errors.
type UnsafeRPCBusinessOpeningHoursServer interface {
	mustEmbedUnimplementedRPCBusinessOpeningHoursServer()
}

func RegisterRPCBusinessOpeningHoursServer(s grpc.ServiceRegistrar, srv RPCBusinessOpeningHoursServer) {
	// If the following call pancis, it indicates UnimplementedRPCBusinessOpeningHoursServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCBusinessOpeningHours_ServiceDesc, srv)
}

func _RPCBusinessOpeningHours_AccountUpdateBusinessWorkHours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUpdateBusinessWorkHours)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBusinessOpeningHoursServer).AccountUpdateBusinessWorkHours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBusinessOpeningHours_AccountUpdateBusinessWorkHours_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBusinessOpeningHoursServer).AccountUpdateBusinessWorkHours(ctx, req.(*TLAccountUpdateBusinessWorkHours))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCBusinessOpeningHours_ServiceDesc is the grpc.ServiceDesc for RPCBusinessOpeningHours service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCBusinessOpeningHours_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCBusinessOpeningHours",
	HandlerType: (*RPCBusinessOpeningHoursServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "account_updateBusinessWorkHours",
			Handler:    _RPCBusinessOpeningHours_AccountUpdateBusinessWorkHours_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCBusinessQuickReply_MessagesGetQuickReplies_FullMethodName          = "/mtproto.RPCBusinessQuickReply/messages_getQuickReplies"
	RPCBusinessQuickReply_MessagesReorderQuickReplies_FullMethodName      = "/mtproto.RPCBusinessQuickReply/messages_reorderQuickReplies"
	RPCBusinessQuickReply_MessagesCheckQuickReplyShortcut_FullMethodName  = "/mtproto.RPCBusinessQuickReply/messages_checkQuickReplyShortcut"
	RPCBusinessQuickReply_MessagesEditQuickReplyShortcut_FullMethodName   = "/mtproto.RPCBusinessQuickReply/messages_editQuickReplyShortcut"
	RPCBusinessQuickReply_MessagesDeleteQuickReplyShortcut_FullMethodName = "/mtproto.RPCBusinessQuickReply/messages_deleteQuickReplyShortcut"
	RPCBusinessQuickReply_MessagesGetQuickReplyMessages_FullMethodName    = "/mtproto.RPCBusinessQuickReply/messages_getQuickReplyMessages"
	RPCBusinessQuickReply_MessagesSendQuickReplyMessages_FullMethodName   = "/mtproto.RPCBusinessQuickReply/messages_sendQuickReplyMessages"
	RPCBusinessQuickReply_MessagesDeleteQuickReplyMessages_FullMethodName = "/mtproto.RPCBusinessQuickReply/messages_deleteQuickReplyMessages"
)

// RPCBusinessQuickReplyClient is the client API for RPCBusinessQuickReply service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCBusinessQuickReplyClient interface {
	MessagesGetQuickReplies(ctx context.Context, in *TLMessagesGetQuickReplies, opts ...grpc.CallOption) (*Messages_QuickReplies, error)
	MessagesReorderQuickReplies(ctx context.Context, in *TLMessagesReorderQuickReplies, opts ...grpc.CallOption) (*Bool, error)
	MessagesCheckQuickReplyShortcut(ctx context.Context, in *TLMessagesCheckQuickReplyShortcut, opts ...grpc.CallOption) (*Bool, error)
	MessagesEditQuickReplyShortcut(ctx context.Context, in *TLMessagesEditQuickReplyShortcut, opts ...grpc.CallOption) (*Bool, error)
	MessagesDeleteQuickReplyShortcut(ctx context.Context, in *TLMessagesDeleteQuickReplyShortcut, opts ...grpc.CallOption) (*Bool, error)
	MessagesGetQuickReplyMessages(ctx context.Context, in *TLMessagesGetQuickReplyMessages, opts ...grpc.CallOption) (*Messages_Messages, error)
	MessagesSendQuickReplyMessages(ctx context.Context, in *TLMessagesSendQuickReplyMessages, opts ...grpc.CallOption) (*Updates, error)
	MessagesDeleteQuickReplyMessages(ctx context.Context, in *TLMessagesDeleteQuickReplyMessages, opts ...grpc.CallOption) (*Updates, error)
}

type rPCBusinessQuickReplyClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCBusinessQuickReplyClient(cc grpc.ClientConnInterface) RPCBusinessQuickReplyClient {
	return &rPCBusinessQuickReplyClient{cc}
}

func (c *rPCBusinessQuickReplyClient) MessagesGetQuickReplies(ctx context.Context, in *TLMessagesGetQuickReplies, opts ...grpc.CallOption) (*Messages_QuickReplies, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_QuickReplies)
	err := c.cc.Invoke(ctx, RPCBusinessQuickReply_MessagesGetQuickReplies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCBusinessQuickReplyClient) MessagesReorderQuickReplies(ctx context.Context, in *TLMessagesReorderQuickReplies, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCBusinessQuickReply_MessagesReorderQuickReplies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCBusinessQuickReplyClient) MessagesCheckQuickReplyShortcut(ctx context.Context, in *TLMessagesCheckQuickReplyShortcut, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCBusinessQuickReply_MessagesCheckQuickReplyShortcut_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCBusinessQuickReplyClient) MessagesEditQuickReplyShortcut(ctx context.Context, in *TLMessagesEditQuickReplyShortcut, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCBusinessQuickReply_MessagesEditQuickReplyShortcut_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCBusinessQuickReplyClient) MessagesDeleteQuickReplyShortcut(ctx context.Context, in *TLMessagesDeleteQuickReplyShortcut, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCBusinessQuickReply_MessagesDeleteQuickReplyShortcut_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCBusinessQuickReplyClient) MessagesGetQuickReplyMessages(ctx context.Context, in *TLMessagesGetQuickReplyMessages, opts ...grpc.CallOption) (*Messages_Messages, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, RPCBusinessQuickReply_MessagesGetQuickReplyMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCBusinessQuickReplyClient) MessagesSendQuickReplyMessages(ctx context.Context, in *TLMessagesSendQuickReplyMessages, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCBusinessQuickReply_MessagesSendQuickReplyMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCBusinessQuickReplyClient) MessagesDeleteQuickReplyMessages(ctx context.Context, in *TLMessagesDeleteQuickReplyMessages, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCBusinessQuickReply_MessagesDeleteQuickReplyMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCBusinessQuickReplyServer is the server API for RPCBusinessQuickReply service.
// All implementations should embed UnimplementedRPCBusinessQuickReplyServer
// for forward compatibility.
type RPCBusinessQuickReplyServer interface {
	MessagesGetQuickReplies(context.Context, *TLMessagesGetQuickReplies) (*Messages_QuickReplies, error)
	MessagesReorderQuickReplies(context.Context, *TLMessagesReorderQuickReplies) (*Bool, error)
	MessagesCheckQuickReplyShortcut(context.Context, *TLMessagesCheckQuickReplyShortcut) (*Bool, error)
	MessagesEditQuickReplyShortcut(context.Context, *TLMessagesEditQuickReplyShortcut) (*Bool, error)
	MessagesDeleteQuickReplyShortcut(context.Context, *TLMessagesDeleteQuickReplyShortcut) (*Bool, error)
	MessagesGetQuickReplyMessages(context.Context, *TLMessagesGetQuickReplyMessages) (*Messages_Messages, error)
	MessagesSendQuickReplyMessages(context.Context, *TLMessagesSendQuickReplyMessages) (*Updates, error)
	MessagesDeleteQuickReplyMessages(context.Context, *TLMessagesDeleteQuickReplyMessages) (*Updates, error)
}

// UnimplementedRPCBusinessQuickReplyServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCBusinessQuickReplyServer struct{}

func (UnimplementedRPCBusinessQuickReplyServer) MessagesGetQuickReplies(context.Context, *TLMessagesGetQuickReplies) (*Messages_QuickReplies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetQuickReplies not implemented")
}
func (UnimplementedRPCBusinessQuickReplyServer) MessagesReorderQuickReplies(context.Context, *TLMessagesReorderQuickReplies) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReorderQuickReplies not implemented")
}
func (UnimplementedRPCBusinessQuickReplyServer) MessagesCheckQuickReplyShortcut(context.Context, *TLMessagesCheckQuickReplyShortcut) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesCheckQuickReplyShortcut not implemented")
}
func (UnimplementedRPCBusinessQuickReplyServer) MessagesEditQuickReplyShortcut(context.Context, *TLMessagesEditQuickReplyShortcut) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesEditQuickReplyShortcut not implemented")
}
func (UnimplementedRPCBusinessQuickReplyServer) MessagesDeleteQuickReplyShortcut(context.Context, *TLMessagesDeleteQuickReplyShortcut) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesDeleteQuickReplyShortcut not implemented")
}
func (UnimplementedRPCBusinessQuickReplyServer) MessagesGetQuickReplyMessages(context.Context, *TLMessagesGetQuickReplyMessages) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetQuickReplyMessages not implemented")
}
func (UnimplementedRPCBusinessQuickReplyServer) MessagesSendQuickReplyMessages(context.Context, *TLMessagesSendQuickReplyMessages) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendQuickReplyMessages not implemented")
}
func (UnimplementedRPCBusinessQuickReplyServer) MessagesDeleteQuickReplyMessages(context.Context, *TLMessagesDeleteQuickReplyMessages) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesDeleteQuickReplyMessages not implemented")
}
func (UnimplementedRPCBusinessQuickReplyServer) testEmbeddedByValue() {}

// UnsafeRPCBusinessQuickReplyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCBusinessQuickReplyServer will
// result in compilation errors.
type UnsafeRPCBusinessQuickReplyServer interface {
	mustEmbedUnimplementedRPCBusinessQuickReplyServer()
}

func RegisterRPCBusinessQuickReplyServer(s grpc.ServiceRegistrar, srv RPCBusinessQuickReplyServer) {
	// If the following call pancis, it indicates UnimplementedRPCBusinessQuickReplyServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCBusinessQuickReply_ServiceDesc, srv)
}

func _RPCBusinessQuickReply_MessagesGetQuickReplies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetQuickReplies)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBusinessQuickReplyServer).MessagesGetQuickReplies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBusinessQuickReply_MessagesGetQuickReplies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBusinessQuickReplyServer).MessagesGetQuickReplies(ctx, req.(*TLMessagesGetQuickReplies))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCBusinessQuickReply_MessagesReorderQuickReplies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReorderQuickReplies)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBusinessQuickReplyServer).MessagesReorderQuickReplies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBusinessQuickReply_MessagesReorderQuickReplies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBusinessQuickReplyServer).MessagesReorderQuickReplies(ctx, req.(*TLMessagesReorderQuickReplies))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCBusinessQuickReply_MessagesCheckQuickReplyShortcut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesCheckQuickReplyShortcut)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBusinessQuickReplyServer).MessagesCheckQuickReplyShortcut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBusinessQuickReply_MessagesCheckQuickReplyShortcut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBusinessQuickReplyServer).MessagesCheckQuickReplyShortcut(ctx, req.(*TLMessagesCheckQuickReplyShortcut))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCBusinessQuickReply_MessagesEditQuickReplyShortcut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesEditQuickReplyShortcut)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBusinessQuickReplyServer).MessagesEditQuickReplyShortcut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBusinessQuickReply_MessagesEditQuickReplyShortcut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBusinessQuickReplyServer).MessagesEditQuickReplyShortcut(ctx, req.(*TLMessagesEditQuickReplyShortcut))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCBusinessQuickReply_MessagesDeleteQuickReplyShortcut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesDeleteQuickReplyShortcut)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBusinessQuickReplyServer).MessagesDeleteQuickReplyShortcut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBusinessQuickReply_MessagesDeleteQuickReplyShortcut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBusinessQuickReplyServer).MessagesDeleteQuickReplyShortcut(ctx, req.(*TLMessagesDeleteQuickReplyShortcut))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCBusinessQuickReply_MessagesGetQuickReplyMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetQuickReplyMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBusinessQuickReplyServer).MessagesGetQuickReplyMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBusinessQuickReply_MessagesGetQuickReplyMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBusinessQuickReplyServer).MessagesGetQuickReplyMessages(ctx, req.(*TLMessagesGetQuickReplyMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCBusinessQuickReply_MessagesSendQuickReplyMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendQuickReplyMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBusinessQuickReplyServer).MessagesSendQuickReplyMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBusinessQuickReply_MessagesSendQuickReplyMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBusinessQuickReplyServer).MessagesSendQuickReplyMessages(ctx, req.(*TLMessagesSendQuickReplyMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCBusinessQuickReply_MessagesDeleteQuickReplyMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesDeleteQuickReplyMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBusinessQuickReplyServer).MessagesDeleteQuickReplyMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBusinessQuickReply_MessagesDeleteQuickReplyMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBusinessQuickReplyServer).MessagesDeleteQuickReplyMessages(ctx, req.(*TLMessagesDeleteQuickReplyMessages))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCBusinessQuickReply_ServiceDesc is the grpc.ServiceDesc for RPCBusinessQuickReply service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCBusinessQuickReply_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCBusinessQuickReply",
	HandlerType: (*RPCBusinessQuickReplyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "messages_getQuickReplies",
			Handler:    _RPCBusinessQuickReply_MessagesGetQuickReplies_Handler,
		},
		{
			MethodName: "messages_reorderQuickReplies",
			Handler:    _RPCBusinessQuickReply_MessagesReorderQuickReplies_Handler,
		},
		{
			MethodName: "messages_checkQuickReplyShortcut",
			Handler:    _RPCBusinessQuickReply_MessagesCheckQuickReplyShortcut_Handler,
		},
		{
			MethodName: "messages_editQuickReplyShortcut",
			Handler:    _RPCBusinessQuickReply_MessagesEditQuickReplyShortcut_Handler,
		},
		{
			MethodName: "messages_deleteQuickReplyShortcut",
			Handler:    _RPCBusinessQuickReply_MessagesDeleteQuickReplyShortcut_Handler,
		},
		{
			MethodName: "messages_getQuickReplyMessages",
			Handler:    _RPCBusinessQuickReply_MessagesGetQuickReplyMessages_Handler,
		},
		{
			MethodName: "messages_sendQuickReplyMessages",
			Handler:    _RPCBusinessQuickReply_MessagesSendQuickReplyMessages_Handler,
		},
		{
			MethodName: "messages_deleteQuickReplyMessages",
			Handler:    _RPCBusinessQuickReply_MessagesDeleteQuickReplyMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCChannelAdRevenue_StatsGetBroadcastRevenueStats_FullMethodName         = "/mtproto.RPCChannelAdRevenue/stats_getBroadcastRevenueStats"
	RPCChannelAdRevenue_StatsGetBroadcastRevenueWithdrawalUrl_FullMethodName = "/mtproto.RPCChannelAdRevenue/stats_getBroadcastRevenueWithdrawalUrl"
	RPCChannelAdRevenue_StatsGetBroadcastRevenueTransactions_FullMethodName  = "/mtproto.RPCChannelAdRevenue/stats_getBroadcastRevenueTransactions"
)

// RPCChannelAdRevenueClient is the client API for RPCChannelAdRevenue service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCChannelAdRevenueClient interface {
	StatsGetBroadcastRevenueStats(ctx context.Context, in *TLStatsGetBroadcastRevenueStats, opts ...grpc.CallOption) (*Stats_BroadcastRevenueStats, error)
	StatsGetBroadcastRevenueWithdrawalUrl(ctx context.Context, in *TLStatsGetBroadcastRevenueWithdrawalUrl, opts ...grpc.CallOption) (*Stats_BroadcastRevenueWithdrawalUrl, error)
	StatsGetBroadcastRevenueTransactions(ctx context.Context, in *TLStatsGetBroadcastRevenueTransactions, opts ...grpc.CallOption) (*Stats_BroadcastRevenueTransactions, error)
}

type rPCChannelAdRevenueClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCChannelAdRevenueClient(cc grpc.ClientConnInterface) RPCChannelAdRevenueClient {
	return &rPCChannelAdRevenueClient{cc}
}

func (c *rPCChannelAdRevenueClient) StatsGetBroadcastRevenueStats(ctx context.Context, in *TLStatsGetBroadcastRevenueStats, opts ...grpc.CallOption) (*Stats_BroadcastRevenueStats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Stats_BroadcastRevenueStats)
	err := c.cc.Invoke(ctx, RPCChannelAdRevenue_StatsGetBroadcastRevenueStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelAdRevenueClient) StatsGetBroadcastRevenueWithdrawalUrl(ctx context.Context, in *TLStatsGetBroadcastRevenueWithdrawalUrl, opts ...grpc.CallOption) (*Stats_BroadcastRevenueWithdrawalUrl, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Stats_BroadcastRevenueWithdrawalUrl)
	err := c.cc.Invoke(ctx, RPCChannelAdRevenue_StatsGetBroadcastRevenueWithdrawalUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelAdRevenueClient) StatsGetBroadcastRevenueTransactions(ctx context.Context, in *TLStatsGetBroadcastRevenueTransactions, opts ...grpc.CallOption) (*Stats_BroadcastRevenueTransactions, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Stats_BroadcastRevenueTransactions)
	err := c.cc.Invoke(ctx, RPCChannelAdRevenue_StatsGetBroadcastRevenueTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCChannelAdRevenueServer is the server API for RPCChannelAdRevenue service.
// All implementations should embed UnimplementedRPCChannelAdRevenueServer
// for forward compatibility.
type RPCChannelAdRevenueServer interface {
	StatsGetBroadcastRevenueStats(context.Context, *TLStatsGetBroadcastRevenueStats) (*Stats_BroadcastRevenueStats, error)
	StatsGetBroadcastRevenueWithdrawalUrl(context.Context, *TLStatsGetBroadcastRevenueWithdrawalUrl) (*Stats_BroadcastRevenueWithdrawalUrl, error)
	StatsGetBroadcastRevenueTransactions(context.Context, *TLStatsGetBroadcastRevenueTransactions) (*Stats_BroadcastRevenueTransactions, error)
}

// UnimplementedRPCChannelAdRevenueServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCChannelAdRevenueServer struct{}

func (UnimplementedRPCChannelAdRevenueServer) StatsGetBroadcastRevenueStats(context.Context, *TLStatsGetBroadcastRevenueStats) (*Stats_BroadcastRevenueStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatsGetBroadcastRevenueStats not implemented")
}
func (UnimplementedRPCChannelAdRevenueServer) StatsGetBroadcastRevenueWithdrawalUrl(context.Context, *TLStatsGetBroadcastRevenueWithdrawalUrl) (*Stats_BroadcastRevenueWithdrawalUrl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatsGetBroadcastRevenueWithdrawalUrl not implemented")
}
func (UnimplementedRPCChannelAdRevenueServer) StatsGetBroadcastRevenueTransactions(context.Context, *TLStatsGetBroadcastRevenueTransactions) (*Stats_BroadcastRevenueTransactions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatsGetBroadcastRevenueTransactions not implemented")
}
func (UnimplementedRPCChannelAdRevenueServer) testEmbeddedByValue() {}

// UnsafeRPCChannelAdRevenueServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCChannelAdRevenueServer will
// result in compilation errors.
type UnsafeRPCChannelAdRevenueServer interface {
	mustEmbedUnimplementedRPCChannelAdRevenueServer()
}

func RegisterRPCChannelAdRevenueServer(s grpc.ServiceRegistrar, srv RPCChannelAdRevenueServer) {
	// If the following call pancis, it indicates UnimplementedRPCChannelAdRevenueServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCChannelAdRevenue_ServiceDesc, srv)
}

func _RPCChannelAdRevenue_StatsGetBroadcastRevenueStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStatsGetBroadcastRevenueStats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelAdRevenueServer).StatsGetBroadcastRevenueStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannelAdRevenue_StatsGetBroadcastRevenueStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelAdRevenueServer).StatsGetBroadcastRevenueStats(ctx, req.(*TLStatsGetBroadcastRevenueStats))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannelAdRevenue_StatsGetBroadcastRevenueWithdrawalUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStatsGetBroadcastRevenueWithdrawalUrl)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelAdRevenueServer).StatsGetBroadcastRevenueWithdrawalUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannelAdRevenue_StatsGetBroadcastRevenueWithdrawalUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelAdRevenueServer).StatsGetBroadcastRevenueWithdrawalUrl(ctx, req.(*TLStatsGetBroadcastRevenueWithdrawalUrl))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannelAdRevenue_StatsGetBroadcastRevenueTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStatsGetBroadcastRevenueTransactions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelAdRevenueServer).StatsGetBroadcastRevenueTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannelAdRevenue_StatsGetBroadcastRevenueTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelAdRevenueServer).StatsGetBroadcastRevenueTransactions(ctx, req.(*TLStatsGetBroadcastRevenueTransactions))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCChannelAdRevenue_ServiceDesc is the grpc.ServiceDesc for RPCChannelAdRevenue service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCChannelAdRevenue_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCChannelAdRevenue",
	HandlerType: (*RPCChannelAdRevenueServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "stats_getBroadcastRevenueStats",
			Handler:    _RPCChannelAdRevenue_StatsGetBroadcastRevenueStats_Handler,
		},
		{
			MethodName: "stats_getBroadcastRevenueWithdrawalUrl",
			Handler:    _RPCChannelAdRevenue_StatsGetBroadcastRevenueWithdrawalUrl_Handler,
		},
		{
			MethodName: "stats_getBroadcastRevenueTransactions",
			Handler:    _RPCChannelAdRevenue_StatsGetBroadcastRevenueTransactions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCChannelRecommendations_ChannelsGetChannelRecommendations_FullMethodName = "/mtproto.RPCChannelRecommendations/channels_getChannelRecommendations"
)

// RPCChannelRecommendationsClient is the client API for RPCChannelRecommendations service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCChannelRecommendationsClient interface {
	ChannelsGetChannelRecommendations(ctx context.Context, in *TLChannelsGetChannelRecommendations, opts ...grpc.CallOption) (*Messages_Chats, error)
}

type rPCChannelRecommendationsClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCChannelRecommendationsClient(cc grpc.ClientConnInterface) RPCChannelRecommendationsClient {
	return &rPCChannelRecommendationsClient{cc}
}

func (c *rPCChannelRecommendationsClient) ChannelsGetChannelRecommendations(ctx context.Context, in *TLChannelsGetChannelRecommendations, opts ...grpc.CallOption) (*Messages_Chats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_Chats)
	err := c.cc.Invoke(ctx, RPCChannelRecommendations_ChannelsGetChannelRecommendations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCChannelRecommendationsServer is the server API for RPCChannelRecommendations service.
// All implementations should embed UnimplementedRPCChannelRecommendationsServer
// for forward compatibility.
type RPCChannelRecommendationsServer interface {
	ChannelsGetChannelRecommendations(context.Context, *TLChannelsGetChannelRecommendations) (*Messages_Chats, error)
}

// UnimplementedRPCChannelRecommendationsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCChannelRecommendationsServer struct{}

func (UnimplementedRPCChannelRecommendationsServer) ChannelsGetChannelRecommendations(context.Context, *TLChannelsGetChannelRecommendations) (*Messages_Chats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetChannelRecommendations not implemented")
}
func (UnimplementedRPCChannelRecommendationsServer) testEmbeddedByValue() {}

// UnsafeRPCChannelRecommendationsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCChannelRecommendationsServer will
// result in compilation errors.
type UnsafeRPCChannelRecommendationsServer interface {
	mustEmbedUnimplementedRPCChannelRecommendationsServer()
}

func RegisterRPCChannelRecommendationsServer(s grpc.ServiceRegistrar, srv RPCChannelRecommendationsServer) {
	// If the following call pancis, it indicates UnimplementedRPCChannelRecommendationsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCChannelRecommendations_ServiceDesc, srv)
}

func _RPCChannelRecommendations_ChannelsGetChannelRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetChannelRecommendations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelRecommendationsServer).ChannelsGetChannelRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannelRecommendations_ChannelsGetChannelRecommendations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelRecommendationsServer).ChannelsGetChannelRecommendations(ctx, req.(*TLChannelsGetChannelRecommendations))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCChannelRecommendations_ServiceDesc is the grpc.ServiceDesc for RPCChannelRecommendations service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCChannelRecommendations_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCChannelRecommendations",
	HandlerType: (*RPCChannelRecommendationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "channels_getChannelRecommendations",
			Handler:    _RPCChannelRecommendations_ChannelsGetChannelRecommendations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCChannels_ChannelsReadHistory_FullMethodName              = "/mtproto.RPCChannels/channels_readHistory"
	RPCChannels_ChannelsDeleteMessages_FullMethodName           = "/mtproto.RPCChannels/channels_deleteMessages"
	RPCChannels_ChannelsGetMessages_FullMethodName              = "/mtproto.RPCChannels/channels_getMessages"
	RPCChannels_ChannelsGetParticipants_FullMethodName          = "/mtproto.RPCChannels/channels_getParticipants"
	RPCChannels_ChannelsGetParticipant_FullMethodName           = "/mtproto.RPCChannels/channels_getParticipant"
	RPCChannels_ChannelsGetChannels_FullMethodName              = "/mtproto.RPCChannels/channels_getChannels"
	RPCChannels_ChannelsGetFullChannel_FullMethodName           = "/mtproto.RPCChannels/channels_getFullChannel"
	RPCChannels_ChannelsCreateChannel_FullMethodName            = "/mtproto.RPCChannels/channels_createChannel"
	RPCChannels_ChannelsEditAdmin_FullMethodName                = "/mtproto.RPCChannels/channels_editAdmin"
	RPCChannels_ChannelsEditTitle_FullMethodName                = "/mtproto.RPCChannels/channels_editTitle"
	RPCChannels_ChannelsEditPhoto_FullMethodName                = "/mtproto.RPCChannels/channels_editPhoto"
	RPCChannels_ChannelsJoinChannel_FullMethodName              = "/mtproto.RPCChannels/channels_joinChannel"
	RPCChannels_ChannelsLeaveChannel_FullMethodName             = "/mtproto.RPCChannels/channels_leaveChannel"
	RPCChannels_ChannelsInviteToChannelC9E33D54_FullMethodName  = "/mtproto.RPCChannels/channels_inviteToChannelC9E33D54"
	RPCChannels_ChannelsDeleteChannel_FullMethodName            = "/mtproto.RPCChannels/channels_deleteChannel"
	RPCChannels_ChannelsExportMessageLink_FullMethodName        = "/mtproto.RPCChannels/channels_exportMessageLink"
	RPCChannels_ChannelsToggleSignatures_FullMethodName         = "/mtproto.RPCChannels/channels_toggleSignatures"
	RPCChannels_ChannelsGetAdminedPublicChannels_FullMethodName = "/mtproto.RPCChannels/channels_getAdminedPublicChannels"
	RPCChannels_ChannelsEditBanned_FullMethodName               = "/mtproto.RPCChannels/channels_editBanned"
	RPCChannels_ChannelsGetAdminLog_FullMethodName              = "/mtproto.RPCChannels/channels_getAdminLog"
	RPCChannels_ChannelsSetStickers_FullMethodName              = "/mtproto.RPCChannels/channels_setStickers"
	RPCChannels_ChannelsReadMessageContents_FullMethodName      = "/mtproto.RPCChannels/channels_readMessageContents"
	RPCChannels_ChannelsDeleteHistory9BAA9647_FullMethodName    = "/mtproto.RPCChannels/channels_deleteHistory9BAA9647"
	RPCChannels_ChannelsTogglePreHistoryHidden_FullMethodName   = "/mtproto.RPCChannels/channels_togglePreHistoryHidden"
	RPCChannels_ChannelsGetGroupsForDiscussion_FullMethodName   = "/mtproto.RPCChannels/channels_getGroupsForDiscussion"
	RPCChannels_ChannelsSetDiscussionGroup_FullMethodName       = "/mtproto.RPCChannels/channels_setDiscussionGroup"
	RPCChannels_ChannelsEditCreator_FullMethodName              = "/mtproto.RPCChannels/channels_editCreator"
	RPCChannels_ChannelsEditLocation_FullMethodName             = "/mtproto.RPCChannels/channels_editLocation"
	RPCChannels_ChannelsToggleSlowMode_FullMethodName           = "/mtproto.RPCChannels/channels_toggleSlowMode"
	RPCChannels_ChannelsGetInactiveChannels_FullMethodName      = "/mtproto.RPCChannels/channels_getInactiveChannels"
	RPCChannels_ChannelsDeleteParticipantHistory_FullMethodName = "/mtproto.RPCChannels/channels_deleteParticipantHistory"
	RPCChannels_ChannelsToggleParticipantsHidden_FullMethodName = "/mtproto.RPCChannels/channels_toggleParticipantsHidden"
	RPCChannels_ChannelsInviteToChannel199F3A6C_FullMethodName  = "/mtproto.RPCChannels/channels_inviteToChannel199F3A6C"
	RPCChannels_ChannelsDeleteHistoryAF369D42_FullMethodName    = "/mtproto.RPCChannels/channels_deleteHistoryAF369D42"
)

// RPCChannelsClient is the client API for RPCChannels service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCChannelsClient interface {
	ChannelsReadHistory(ctx context.Context, in *TLChannelsReadHistory, opts ...grpc.CallOption) (*Bool, error)
	ChannelsDeleteMessages(ctx context.Context, in *TLChannelsDeleteMessages, opts ...grpc.CallOption) (*Messages_AffectedMessages, error)
	ChannelsGetMessages(ctx context.Context, in *TLChannelsGetMessages, opts ...grpc.CallOption) (*Messages_Messages, error)
	ChannelsGetParticipants(ctx context.Context, in *TLChannelsGetParticipants, opts ...grpc.CallOption) (*Channels_ChannelParticipants, error)
	ChannelsGetParticipant(ctx context.Context, in *TLChannelsGetParticipant, opts ...grpc.CallOption) (*Channels_ChannelParticipant, error)
	ChannelsGetChannels(ctx context.Context, in *TLChannelsGetChannels, opts ...grpc.CallOption) (*Messages_Chats, error)
	ChannelsGetFullChannel(ctx context.Context, in *TLChannelsGetFullChannel, opts ...grpc.CallOption) (*Messages_ChatFull, error)
	ChannelsCreateChannel(ctx context.Context, in *TLChannelsCreateChannel, opts ...grpc.CallOption) (*Updates, error)
	ChannelsEditAdmin(ctx context.Context, in *TLChannelsEditAdmin, opts ...grpc.CallOption) (*Updates, error)
	ChannelsEditTitle(ctx context.Context, in *TLChannelsEditTitle, opts ...grpc.CallOption) (*Updates, error)
	ChannelsEditPhoto(ctx context.Context, in *TLChannelsEditPhoto, opts ...grpc.CallOption) (*Updates, error)
	ChannelsJoinChannel(ctx context.Context, in *TLChannelsJoinChannel, opts ...grpc.CallOption) (*Updates, error)
	ChannelsLeaveChannel(ctx context.Context, in *TLChannelsLeaveChannel, opts ...grpc.CallOption) (*Updates, error)
	ChannelsInviteToChannelC9E33D54(ctx context.Context, in *TLChannelsInviteToChannelC9E33D54, opts ...grpc.CallOption) (*Messages_InvitedUsers, error)
	ChannelsDeleteChannel(ctx context.Context, in *TLChannelsDeleteChannel, opts ...grpc.CallOption) (*Updates, error)
	ChannelsExportMessageLink(ctx context.Context, in *TLChannelsExportMessageLink, opts ...grpc.CallOption) (*ExportedMessageLink, error)
	ChannelsToggleSignatures(ctx context.Context, in *TLChannelsToggleSignatures, opts ...grpc.CallOption) (*Updates, error)
	ChannelsGetAdminedPublicChannels(ctx context.Context, in *TLChannelsGetAdminedPublicChannels, opts ...grpc.CallOption) (*Messages_Chats, error)
	ChannelsEditBanned(ctx context.Context, in *TLChannelsEditBanned, opts ...grpc.CallOption) (*Updates, error)
	ChannelsGetAdminLog(ctx context.Context, in *TLChannelsGetAdminLog, opts ...grpc.CallOption) (*Channels_AdminLogResults, error)
	ChannelsSetStickers(ctx context.Context, in *TLChannelsSetStickers, opts ...grpc.CallOption) (*Bool, error)
	ChannelsReadMessageContents(ctx context.Context, in *TLChannelsReadMessageContents, opts ...grpc.CallOption) (*Bool, error)
	ChannelsDeleteHistory9BAA9647(ctx context.Context, in *TLChannelsDeleteHistory9BAA9647, opts ...grpc.CallOption) (*Updates, error)
	ChannelsTogglePreHistoryHidden(ctx context.Context, in *TLChannelsTogglePreHistoryHidden, opts ...grpc.CallOption) (*Updates, error)
	ChannelsGetGroupsForDiscussion(ctx context.Context, in *TLChannelsGetGroupsForDiscussion, opts ...grpc.CallOption) (*Messages_Chats, error)
	ChannelsSetDiscussionGroup(ctx context.Context, in *TLChannelsSetDiscussionGroup, opts ...grpc.CallOption) (*Bool, error)
	ChannelsEditCreator(ctx context.Context, in *TLChannelsEditCreator, opts ...grpc.CallOption) (*Updates, error)
	ChannelsEditLocation(ctx context.Context, in *TLChannelsEditLocation, opts ...grpc.CallOption) (*Bool, error)
	ChannelsToggleSlowMode(ctx context.Context, in *TLChannelsToggleSlowMode, opts ...grpc.CallOption) (*Updates, error)
	ChannelsGetInactiveChannels(ctx context.Context, in *TLChannelsGetInactiveChannels, opts ...grpc.CallOption) (*Messages_InactiveChats, error)
	ChannelsDeleteParticipantHistory(ctx context.Context, in *TLChannelsDeleteParticipantHistory, opts ...grpc.CallOption) (*Messages_AffectedHistory, error)
	ChannelsToggleParticipantsHidden(ctx context.Context, in *TLChannelsToggleParticipantsHidden, opts ...grpc.CallOption) (*Updates, error)
	ChannelsInviteToChannel199F3A6C(ctx context.Context, in *TLChannelsInviteToChannel199F3A6C, opts ...grpc.CallOption) (*Updates, error)
	ChannelsDeleteHistoryAF369D42(ctx context.Context, in *TLChannelsDeleteHistoryAF369D42, opts ...grpc.CallOption) (*Bool, error)
}

type rPCChannelsClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCChannelsClient(cc grpc.ClientConnInterface) RPCChannelsClient {
	return &rPCChannelsClient{cc}
}

func (c *rPCChannelsClient) ChannelsReadHistory(ctx context.Context, in *TLChannelsReadHistory, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsReadHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsDeleteMessages(ctx context.Context, in *TLChannelsDeleteMessages, opts ...grpc.CallOption) (*Messages_AffectedMessages, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_AffectedMessages)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsDeleteMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsGetMessages(ctx context.Context, in *TLChannelsGetMessages, opts ...grpc.CallOption) (*Messages_Messages, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsGetMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsGetParticipants(ctx context.Context, in *TLChannelsGetParticipants, opts ...grpc.CallOption) (*Channels_ChannelParticipants, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Channels_ChannelParticipants)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsGetParticipants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsGetParticipant(ctx context.Context, in *TLChannelsGetParticipant, opts ...grpc.CallOption) (*Channels_ChannelParticipant, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Channels_ChannelParticipant)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsGetParticipant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsGetChannels(ctx context.Context, in *TLChannelsGetChannels, opts ...grpc.CallOption) (*Messages_Chats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_Chats)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsGetChannels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsGetFullChannel(ctx context.Context, in *TLChannelsGetFullChannel, opts ...grpc.CallOption) (*Messages_ChatFull, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_ChatFull)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsGetFullChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsCreateChannel(ctx context.Context, in *TLChannelsCreateChannel, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsCreateChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsEditAdmin(ctx context.Context, in *TLChannelsEditAdmin, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsEditAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsEditTitle(ctx context.Context, in *TLChannelsEditTitle, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsEditTitle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsEditPhoto(ctx context.Context, in *TLChannelsEditPhoto, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsEditPhoto_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsJoinChannel(ctx context.Context, in *TLChannelsJoinChannel, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsJoinChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsLeaveChannel(ctx context.Context, in *TLChannelsLeaveChannel, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsLeaveChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsInviteToChannelC9E33D54(ctx context.Context, in *TLChannelsInviteToChannelC9E33D54, opts ...grpc.CallOption) (*Messages_InvitedUsers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_InvitedUsers)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsInviteToChannelC9E33D54_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsDeleteChannel(ctx context.Context, in *TLChannelsDeleteChannel, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsDeleteChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsExportMessageLink(ctx context.Context, in *TLChannelsExportMessageLink, opts ...grpc.CallOption) (*ExportedMessageLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportedMessageLink)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsExportMessageLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsToggleSignatures(ctx context.Context, in *TLChannelsToggleSignatures, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsToggleSignatures_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsGetAdminedPublicChannels(ctx context.Context, in *TLChannelsGetAdminedPublicChannels, opts ...grpc.CallOption) (*Messages_Chats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_Chats)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsGetAdminedPublicChannels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsEditBanned(ctx context.Context, in *TLChannelsEditBanned, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsEditBanned_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsGetAdminLog(ctx context.Context, in *TLChannelsGetAdminLog, opts ...grpc.CallOption) (*Channels_AdminLogResults, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Channels_AdminLogResults)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsGetAdminLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsSetStickers(ctx context.Context, in *TLChannelsSetStickers, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsSetStickers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsReadMessageContents(ctx context.Context, in *TLChannelsReadMessageContents, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsReadMessageContents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsDeleteHistory9BAA9647(ctx context.Context, in *TLChannelsDeleteHistory9BAA9647, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsDeleteHistory9BAA9647_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsTogglePreHistoryHidden(ctx context.Context, in *TLChannelsTogglePreHistoryHidden, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsTogglePreHistoryHidden_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsGetGroupsForDiscussion(ctx context.Context, in *TLChannelsGetGroupsForDiscussion, opts ...grpc.CallOption) (*Messages_Chats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_Chats)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsGetGroupsForDiscussion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsSetDiscussionGroup(ctx context.Context, in *TLChannelsSetDiscussionGroup, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsSetDiscussionGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsEditCreator(ctx context.Context, in *TLChannelsEditCreator, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsEditCreator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsEditLocation(ctx context.Context, in *TLChannelsEditLocation, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsEditLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsToggleSlowMode(ctx context.Context, in *TLChannelsToggleSlowMode, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsToggleSlowMode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsGetInactiveChannels(ctx context.Context, in *TLChannelsGetInactiveChannels, opts ...grpc.CallOption) (*Messages_InactiveChats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_InactiveChats)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsGetInactiveChannels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsDeleteParticipantHistory(ctx context.Context, in *TLChannelsDeleteParticipantHistory, opts ...grpc.CallOption) (*Messages_AffectedHistory, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_AffectedHistory)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsDeleteParticipantHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsToggleParticipantsHidden(ctx context.Context, in *TLChannelsToggleParticipantsHidden, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsToggleParticipantsHidden_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsInviteToChannel199F3A6C(ctx context.Context, in *TLChannelsInviteToChannel199F3A6C, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsInviteToChannel199F3A6C_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsDeleteHistoryAF369D42(ctx context.Context, in *TLChannelsDeleteHistoryAF369D42, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsDeleteHistoryAF369D42_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCChannelsServer is the server API for RPCChannels service.
// All implementations should embed UnimplementedRPCChannelsServer
// for forward compatibility.
type RPCChannelsServer interface {
	ChannelsReadHistory(context.Context, *TLChannelsReadHistory) (*Bool, error)
	ChannelsDeleteMessages(context.Context, *TLChannelsDeleteMessages) (*Messages_AffectedMessages, error)
	ChannelsGetMessages(context.Context, *TLChannelsGetMessages) (*Messages_Messages, error)
	ChannelsGetParticipants(context.Context, *TLChannelsGetParticipants) (*Channels_ChannelParticipants, error)
	ChannelsGetParticipant(context.Context, *TLChannelsGetParticipant) (*Channels_ChannelParticipant, error)
	ChannelsGetChannels(context.Context, *TLChannelsGetChannels) (*Messages_Chats, error)
	ChannelsGetFullChannel(context.Context, *TLChannelsGetFullChannel) (*Messages_ChatFull, error)
	ChannelsCreateChannel(context.Context, *TLChannelsCreateChannel) (*Updates, error)
	ChannelsEditAdmin(context.Context, *TLChannelsEditAdmin) (*Updates, error)
	ChannelsEditTitle(context.Context, *TLChannelsEditTitle) (*Updates, error)
	ChannelsEditPhoto(context.Context, *TLChannelsEditPhoto) (*Updates, error)
	ChannelsJoinChannel(context.Context, *TLChannelsJoinChannel) (*Updates, error)
	ChannelsLeaveChannel(context.Context, *TLChannelsLeaveChannel) (*Updates, error)
	ChannelsInviteToChannelC9E33D54(context.Context, *TLChannelsInviteToChannelC9E33D54) (*Messages_InvitedUsers, error)
	ChannelsDeleteChannel(context.Context, *TLChannelsDeleteChannel) (*Updates, error)
	ChannelsExportMessageLink(context.Context, *TLChannelsExportMessageLink) (*ExportedMessageLink, error)
	ChannelsToggleSignatures(context.Context, *TLChannelsToggleSignatures) (*Updates, error)
	ChannelsGetAdminedPublicChannels(context.Context, *TLChannelsGetAdminedPublicChannels) (*Messages_Chats, error)
	ChannelsEditBanned(context.Context, *TLChannelsEditBanned) (*Updates, error)
	ChannelsGetAdminLog(context.Context, *TLChannelsGetAdminLog) (*Channels_AdminLogResults, error)
	ChannelsSetStickers(context.Context, *TLChannelsSetStickers) (*Bool, error)
	ChannelsReadMessageContents(context.Context, *TLChannelsReadMessageContents) (*Bool, error)
	ChannelsDeleteHistory9BAA9647(context.Context, *TLChannelsDeleteHistory9BAA9647) (*Updates, error)
	ChannelsTogglePreHistoryHidden(context.Context, *TLChannelsTogglePreHistoryHidden) (*Updates, error)
	ChannelsGetGroupsForDiscussion(context.Context, *TLChannelsGetGroupsForDiscussion) (*Messages_Chats, error)
	ChannelsSetDiscussionGroup(context.Context, *TLChannelsSetDiscussionGroup) (*Bool, error)
	ChannelsEditCreator(context.Context, *TLChannelsEditCreator) (*Updates, error)
	ChannelsEditLocation(context.Context, *TLChannelsEditLocation) (*Bool, error)
	ChannelsToggleSlowMode(context.Context, *TLChannelsToggleSlowMode) (*Updates, error)
	ChannelsGetInactiveChannels(context.Context, *TLChannelsGetInactiveChannels) (*Messages_InactiveChats, error)
	ChannelsDeleteParticipantHistory(context.Context, *TLChannelsDeleteParticipantHistory) (*Messages_AffectedHistory, error)
	ChannelsToggleParticipantsHidden(context.Context, *TLChannelsToggleParticipantsHidden) (*Updates, error)
	ChannelsInviteToChannel199F3A6C(context.Context, *TLChannelsInviteToChannel199F3A6C) (*Updates, error)
	ChannelsDeleteHistoryAF369D42(context.Context, *TLChannelsDeleteHistoryAF369D42) (*Bool, error)
}

// UnimplementedRPCChannelsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCChannelsServer struct{}

func (UnimplementedRPCChannelsServer) ChannelsReadHistory(context.Context, *TLChannelsReadHistory) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsReadHistory not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsDeleteMessages(context.Context, *TLChannelsDeleteMessages) (*Messages_AffectedMessages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsDeleteMessages not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsGetMessages(context.Context, *TLChannelsGetMessages) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetMessages not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsGetParticipants(context.Context, *TLChannelsGetParticipants) (*Channels_ChannelParticipants, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetParticipants not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsGetParticipant(context.Context, *TLChannelsGetParticipant) (*Channels_ChannelParticipant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetParticipant not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsGetChannels(context.Context, *TLChannelsGetChannels) (*Messages_Chats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetChannels not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsGetFullChannel(context.Context, *TLChannelsGetFullChannel) (*Messages_ChatFull, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetFullChannel not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsCreateChannel(context.Context, *TLChannelsCreateChannel) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsCreateChannel not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsEditAdmin(context.Context, *TLChannelsEditAdmin) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsEditAdmin not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsEditTitle(context.Context, *TLChannelsEditTitle) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsEditTitle not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsEditPhoto(context.Context, *TLChannelsEditPhoto) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsEditPhoto not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsJoinChannel(context.Context, *TLChannelsJoinChannel) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsJoinChannel not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsLeaveChannel(context.Context, *TLChannelsLeaveChannel) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsLeaveChannel not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsInviteToChannelC9E33D54(context.Context, *TLChannelsInviteToChannelC9E33D54) (*Messages_InvitedUsers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsInviteToChannelC9E33D54 not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsDeleteChannel(context.Context, *TLChannelsDeleteChannel) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsDeleteChannel not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsExportMessageLink(context.Context, *TLChannelsExportMessageLink) (*ExportedMessageLink, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsExportMessageLink not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsToggleSignatures(context.Context, *TLChannelsToggleSignatures) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsToggleSignatures not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsGetAdminedPublicChannels(context.Context, *TLChannelsGetAdminedPublicChannels) (*Messages_Chats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetAdminedPublicChannels not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsEditBanned(context.Context, *TLChannelsEditBanned) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsEditBanned not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsGetAdminLog(context.Context, *TLChannelsGetAdminLog) (*Channels_AdminLogResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetAdminLog not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsSetStickers(context.Context, *TLChannelsSetStickers) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsSetStickers not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsReadMessageContents(context.Context, *TLChannelsReadMessageContents) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsReadMessageContents not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsDeleteHistory9BAA9647(context.Context, *TLChannelsDeleteHistory9BAA9647) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsDeleteHistory9BAA9647 not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsTogglePreHistoryHidden(context.Context, *TLChannelsTogglePreHistoryHidden) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsTogglePreHistoryHidden not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsGetGroupsForDiscussion(context.Context, *TLChannelsGetGroupsForDiscussion) (*Messages_Chats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetGroupsForDiscussion not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsSetDiscussionGroup(context.Context, *TLChannelsSetDiscussionGroup) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsSetDiscussionGroup not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsEditCreator(context.Context, *TLChannelsEditCreator) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsEditCreator not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsEditLocation(context.Context, *TLChannelsEditLocation) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsEditLocation not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsToggleSlowMode(context.Context, *TLChannelsToggleSlowMode) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsToggleSlowMode not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsGetInactiveChannels(context.Context, *TLChannelsGetInactiveChannels) (*Messages_InactiveChats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetInactiveChannels not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsDeleteParticipantHistory(context.Context, *TLChannelsDeleteParticipantHistory) (*Messages_AffectedHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsDeleteParticipantHistory not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsToggleParticipantsHidden(context.Context, *TLChannelsToggleParticipantsHidden) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsToggleParticipantsHidden not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsInviteToChannel199F3A6C(context.Context, *TLChannelsInviteToChannel199F3A6C) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsInviteToChannel199F3A6C not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsDeleteHistoryAF369D42(context.Context, *TLChannelsDeleteHistoryAF369D42) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsDeleteHistoryAF369D42 not implemented")
}
func (UnimplementedRPCChannelsServer) testEmbeddedByValue() {}

// UnsafeRPCChannelsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCChannelsServer will
// result in compilation errors.
type UnsafeRPCChannelsServer interface {
	mustEmbedUnimplementedRPCChannelsServer()
}

func RegisterRPCChannelsServer(s grpc.ServiceRegistrar, srv RPCChannelsServer) {
	// If the following call pancis, it indicates UnimplementedRPCChannelsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCChannels_ServiceDesc, srv)
}

func _RPCChannels_ChannelsReadHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsReadHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsReadHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsReadHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsReadHistory(ctx, req.(*TLChannelsReadHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsDeleteMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsDeleteMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsDeleteMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsDeleteMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsDeleteMessages(ctx, req.(*TLChannelsDeleteMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsGetMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsGetMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsGetMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsGetMessages(ctx, req.(*TLChannelsGetMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsGetParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetParticipants)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsGetParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsGetParticipants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsGetParticipants(ctx, req.(*TLChannelsGetParticipants))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsGetParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetParticipant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsGetParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsGetParticipant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsGetParticipant(ctx, req.(*TLChannelsGetParticipant))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsGetChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetChannels)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsGetChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsGetChannels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsGetChannels(ctx, req.(*TLChannelsGetChannels))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsGetFullChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetFullChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsGetFullChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsGetFullChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsGetFullChannel(ctx, req.(*TLChannelsGetFullChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsCreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsCreateChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsCreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsCreateChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsCreateChannel(ctx, req.(*TLChannelsCreateChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsEditAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsEditAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsEditAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsEditAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsEditAdmin(ctx, req.(*TLChannelsEditAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsEditTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsEditTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsEditTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsEditTitle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsEditTitle(ctx, req.(*TLChannelsEditTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsEditPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsEditPhoto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsEditPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsEditPhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsEditPhoto(ctx, req.(*TLChannelsEditPhoto))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsJoinChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsJoinChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsJoinChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsJoinChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsJoinChannel(ctx, req.(*TLChannelsJoinChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsLeaveChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsLeaveChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsLeaveChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsLeaveChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsLeaveChannel(ctx, req.(*TLChannelsLeaveChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsInviteToChannelC9E33D54_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsInviteToChannelC9E33D54)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsInviteToChannelC9E33D54(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsInviteToChannelC9E33D54_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsInviteToChannelC9E33D54(ctx, req.(*TLChannelsInviteToChannelC9E33D54))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsDeleteChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsDeleteChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsDeleteChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsDeleteChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsDeleteChannel(ctx, req.(*TLChannelsDeleteChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsExportMessageLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsExportMessageLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsExportMessageLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsExportMessageLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsExportMessageLink(ctx, req.(*TLChannelsExportMessageLink))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsToggleSignatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsToggleSignatures)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsToggleSignatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsToggleSignatures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsToggleSignatures(ctx, req.(*TLChannelsToggleSignatures))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsGetAdminedPublicChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetAdminedPublicChannels)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsGetAdminedPublicChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsGetAdminedPublicChannels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsGetAdminedPublicChannels(ctx, req.(*TLChannelsGetAdminedPublicChannels))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsEditBanned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsEditBanned)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsEditBanned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsEditBanned_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsEditBanned(ctx, req.(*TLChannelsEditBanned))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsGetAdminLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetAdminLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsGetAdminLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsGetAdminLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsGetAdminLog(ctx, req.(*TLChannelsGetAdminLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsSetStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsSetStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsSetStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsSetStickers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsSetStickers(ctx, req.(*TLChannelsSetStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsReadMessageContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsReadMessageContents)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsReadMessageContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsReadMessageContents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsReadMessageContents(ctx, req.(*TLChannelsReadMessageContents))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsDeleteHistory9BAA9647_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsDeleteHistory9BAA9647)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsDeleteHistory9BAA9647(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsDeleteHistory9BAA9647_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsDeleteHistory9BAA9647(ctx, req.(*TLChannelsDeleteHistory9BAA9647))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsTogglePreHistoryHidden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsTogglePreHistoryHidden)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsTogglePreHistoryHidden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsTogglePreHistoryHidden_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsTogglePreHistoryHidden(ctx, req.(*TLChannelsTogglePreHistoryHidden))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsGetGroupsForDiscussion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetGroupsForDiscussion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsGetGroupsForDiscussion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsGetGroupsForDiscussion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsGetGroupsForDiscussion(ctx, req.(*TLChannelsGetGroupsForDiscussion))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsSetDiscussionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsSetDiscussionGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsSetDiscussionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsSetDiscussionGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsSetDiscussionGroup(ctx, req.(*TLChannelsSetDiscussionGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsEditCreator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsEditCreator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsEditCreator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsEditCreator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsEditCreator(ctx, req.(*TLChannelsEditCreator))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsEditLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsEditLocation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsEditLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsEditLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsEditLocation(ctx, req.(*TLChannelsEditLocation))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsToggleSlowMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsToggleSlowMode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsToggleSlowMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsToggleSlowMode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsToggleSlowMode(ctx, req.(*TLChannelsToggleSlowMode))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsGetInactiveChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetInactiveChannels)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsGetInactiveChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsGetInactiveChannels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsGetInactiveChannels(ctx, req.(*TLChannelsGetInactiveChannels))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsDeleteParticipantHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsDeleteParticipantHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsDeleteParticipantHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsDeleteParticipantHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsDeleteParticipantHistory(ctx, req.(*TLChannelsDeleteParticipantHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsToggleParticipantsHidden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsToggleParticipantsHidden)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsToggleParticipantsHidden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsToggleParticipantsHidden_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsToggleParticipantsHidden(ctx, req.(*TLChannelsToggleParticipantsHidden))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsInviteToChannel199F3A6C_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsInviteToChannel199F3A6C)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsInviteToChannel199F3A6C(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsInviteToChannel199F3A6C_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsInviteToChannel199F3A6C(ctx, req.(*TLChannelsInviteToChannel199F3A6C))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsDeleteHistoryAF369D42_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsDeleteHistoryAF369D42)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsDeleteHistoryAF369D42(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsDeleteHistoryAF369D42_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsDeleteHistoryAF369D42(ctx, req.(*TLChannelsDeleteHistoryAF369D42))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCChannels_ServiceDesc is the grpc.ServiceDesc for RPCChannels service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCChannels_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCChannels",
	HandlerType: (*RPCChannelsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "channels_readHistory",
			Handler:    _RPCChannels_ChannelsReadHistory_Handler,
		},
		{
			MethodName: "channels_deleteMessages",
			Handler:    _RPCChannels_ChannelsDeleteMessages_Handler,
		},
		{
			MethodName: "channels_getMessages",
			Handler:    _RPCChannels_ChannelsGetMessages_Handler,
		},
		{
			MethodName: "channels_getParticipants",
			Handler:    _RPCChannels_ChannelsGetParticipants_Handler,
		},
		{
			MethodName: "channels_getParticipant",
			Handler:    _RPCChannels_ChannelsGetParticipant_Handler,
		},
		{
			MethodName: "channels_getChannels",
			Handler:    _RPCChannels_ChannelsGetChannels_Handler,
		},
		{
			MethodName: "channels_getFullChannel",
			Handler:    _RPCChannels_ChannelsGetFullChannel_Handler,
		},
		{
			MethodName: "channels_createChannel",
			Handler:    _RPCChannels_ChannelsCreateChannel_Handler,
		},
		{
			MethodName: "channels_editAdmin",
			Handler:    _RPCChannels_ChannelsEditAdmin_Handler,
		},
		{
			MethodName: "channels_editTitle",
			Handler:    _RPCChannels_ChannelsEditTitle_Handler,
		},
		{
			MethodName: "channels_editPhoto",
			Handler:    _RPCChannels_ChannelsEditPhoto_Handler,
		},
		{
			MethodName: "channels_joinChannel",
			Handler:    _RPCChannels_ChannelsJoinChannel_Handler,
		},
		{
			MethodName: "channels_leaveChannel",
			Handler:    _RPCChannels_ChannelsLeaveChannel_Handler,
		},
		{
			MethodName: "channels_inviteToChannelC9E33D54",
			Handler:    _RPCChannels_ChannelsInviteToChannelC9E33D54_Handler,
		},
		{
			MethodName: "channels_deleteChannel",
			Handler:    _RPCChannels_ChannelsDeleteChannel_Handler,
		},
		{
			MethodName: "channels_exportMessageLink",
			Handler:    _RPCChannels_ChannelsExportMessageLink_Handler,
		},
		{
			MethodName: "channels_toggleSignatures",
			Handler:    _RPCChannels_ChannelsToggleSignatures_Handler,
		},
		{
			MethodName: "channels_getAdminedPublicChannels",
			Handler:    _RPCChannels_ChannelsGetAdminedPublicChannels_Handler,
		},
		{
			MethodName: "channels_editBanned",
			Handler:    _RPCChannels_ChannelsEditBanned_Handler,
		},
		{
			MethodName: "channels_getAdminLog",
			Handler:    _RPCChannels_ChannelsGetAdminLog_Handler,
		},
		{
			MethodName: "channels_setStickers",
			Handler:    _RPCChannels_ChannelsSetStickers_Handler,
		},
		{
			MethodName: "channels_readMessageContents",
			Handler:    _RPCChannels_ChannelsReadMessageContents_Handler,
		},
		{
			MethodName: "channels_deleteHistory9BAA9647",
			Handler:    _RPCChannels_ChannelsDeleteHistory9BAA9647_Handler,
		},
		{
			MethodName: "channels_togglePreHistoryHidden",
			Handler:    _RPCChannels_ChannelsTogglePreHistoryHidden_Handler,
		},
		{
			MethodName: "channels_getGroupsForDiscussion",
			Handler:    _RPCChannels_ChannelsGetGroupsForDiscussion_Handler,
		},
		{
			MethodName: "channels_setDiscussionGroup",
			Handler:    _RPCChannels_ChannelsSetDiscussionGroup_Handler,
		},
		{
			MethodName: "channels_editCreator",
			Handler:    _RPCChannels_ChannelsEditCreator_Handler,
		},
		{
			MethodName: "channels_editLocation",
			Handler:    _RPCChannels_ChannelsEditLocation_Handler,
		},
		{
			MethodName: "channels_toggleSlowMode",
			Handler:    _RPCChannels_ChannelsToggleSlowMode_Handler,
		},
		{
			MethodName: "channels_getInactiveChannels",
			Handler:    _RPCChannels_ChannelsGetInactiveChannels_Handler,
		},
		{
			MethodName: "channels_deleteParticipantHistory",
			Handler:    _RPCChannels_ChannelsDeleteParticipantHistory_Handler,
		},
		{
			MethodName: "channels_toggleParticipantsHidden",
			Handler:    _RPCChannels_ChannelsToggleParticipantsHidden_Handler,
		},
		{
			MethodName: "channels_inviteToChannel199F3A6C",
			Handler:    _RPCChannels_ChannelsInviteToChannel199F3A6C_Handler,
		},
		{
			MethodName: "channels_deleteHistoryAF369D42",
			Handler:    _RPCChannels_ChannelsDeleteHistoryAF369D42_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCChatInvites_MessagesExportChatInvite_FullMethodName                 = "/mtproto.RPCChatInvites/messages_exportChatInvite"
	RPCChatInvites_MessagesCheckChatInvite_FullMethodName                  = "/mtproto.RPCChatInvites/messages_checkChatInvite"
	RPCChatInvites_MessagesImportChatInvite_FullMethodName                 = "/mtproto.RPCChatInvites/messages_importChatInvite"
	RPCChatInvites_MessagesGetExportedChatInvites_FullMethodName           = "/mtproto.RPCChatInvites/messages_getExportedChatInvites"
	RPCChatInvites_MessagesGetExportedChatInvite_FullMethodName            = "/mtproto.RPCChatInvites/messages_getExportedChatInvite"
	RPCChatInvites_MessagesEditExportedChatInvite_FullMethodName           = "/mtproto.RPCChatInvites/messages_editExportedChatInvite"
	RPCChatInvites_MessagesDeleteRevokedExportedChatInvites_FullMethodName = "/mtproto.RPCChatInvites/messages_deleteRevokedExportedChatInvites"
	RPCChatInvites_MessagesDeleteExportedChatInvite_FullMethodName         = "/mtproto.RPCChatInvites/messages_deleteExportedChatInvite"
	RPCChatInvites_MessagesGetAdminsWithInvites_FullMethodName             = "/mtproto.RPCChatInvites/messages_getAdminsWithInvites"
	RPCChatInvites_MessagesGetChatInviteImporters_FullMethodName           = "/mtproto.RPCChatInvites/messages_getChatInviteImporters"
	RPCChatInvites_MessagesHideChatJoinRequest_FullMethodName              = "/mtproto.RPCChatInvites/messages_hideChatJoinRequest"
	RPCChatInvites_MessagesHideAllChatJoinRequests_FullMethodName          = "/mtproto.RPCChatInvites/messages_hideAllChatJoinRequests"
	RPCChatInvites_ChannelsToggleJoinToSend_FullMethodName                 = "/mtproto.RPCChatInvites/channels_toggleJoinToSend"
	RPCChatInvites_ChannelsToggleJoinRequest_FullMethodName                = "/mtproto.RPCChatInvites/channels_toggleJoinRequest"
)

// RPCChatInvitesClient is the client API for RPCChatInvites service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCChatInvitesClient interface {
	MessagesExportChatInvite(ctx context.Context, in *TLMessagesExportChatInvite, opts ...grpc.CallOption) (*ExportedChatInvite, error)
	MessagesCheckChatInvite(ctx context.Context, in *TLMessagesCheckChatInvite, opts ...grpc.CallOption) (*ChatInvite, error)
	MessagesImportChatInvite(ctx context.Context, in *TLMessagesImportChatInvite, opts ...grpc.CallOption) (*Updates, error)
	MessagesGetExportedChatInvites(ctx context.Context, in *TLMessagesGetExportedChatInvites, opts ...grpc.CallOption) (*Messages_ExportedChatInvites, error)
	MessagesGetExportedChatInvite(ctx context.Context, in *TLMessagesGetExportedChatInvite, opts ...grpc.CallOption) (*Messages_ExportedChatInvite, error)
	MessagesEditExportedChatInvite(ctx context.Context, in *TLMessagesEditExportedChatInvite, opts ...grpc.CallOption) (*Messages_ExportedChatInvite, error)
	MessagesDeleteRevokedExportedChatInvites(ctx context.Context, in *TLMessagesDeleteRevokedExportedChatInvites, opts ...grpc.CallOption) (*Bool, error)
	MessagesDeleteExportedChatInvite(ctx context.Context, in *TLMessagesDeleteExportedChatInvite, opts ...grpc.CallOption) (*Bool, error)
	MessagesGetAdminsWithInvites(ctx context.Context, in *TLMessagesGetAdminsWithInvites, opts ...grpc.CallOption) (*Messages_ChatAdminsWithInvites, error)
	MessagesGetChatInviteImporters(ctx context.Context, in *TLMessagesGetChatInviteImporters, opts ...grpc.CallOption) (*Messages_ChatInviteImporters, error)
	MessagesHideChatJoinRequest(ctx context.Context, in *TLMessagesHideChatJoinRequest, opts ...grpc.CallOption) (*Updates, error)
	MessagesHideAllChatJoinRequests(ctx context.Context, in *TLMessagesHideAllChatJoinRequests, opts ...grpc.CallOption) (*Updates, error)
	ChannelsToggleJoinToSend(ctx context.Context, in *TLChannelsToggleJoinToSend, opts ...grpc.CallOption) (*Updates, error)
	ChannelsToggleJoinRequest(ctx context.Context, in *TLChannelsToggleJoinRequest, opts ...grpc.CallOption) (*Updates, error)
}

type rPCChatInvitesClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCChatInvitesClient(cc grpc.ClientConnInterface) RPCChatInvitesClient {
	return &rPCChatInvitesClient{cc}
}

func (c *rPCChatInvitesClient) MessagesExportChatInvite(ctx context.Context, in *TLMessagesExportChatInvite, opts ...grpc.CallOption) (*ExportedChatInvite, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportedChatInvite)
	err := c.cc.Invoke(ctx, RPCChatInvites_MessagesExportChatInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatInvitesClient) MessagesCheckChatInvite(ctx context.Context, in *TLMessagesCheckChatInvite, opts ...grpc.CallOption) (*ChatInvite, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChatInvite)
	err := c.cc.Invoke(ctx, RPCChatInvites_MessagesCheckChatInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatInvitesClient) MessagesImportChatInvite(ctx context.Context, in *TLMessagesImportChatInvite, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCChatInvites_MessagesImportChatInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatInvitesClient) MessagesGetExportedChatInvites(ctx context.Context, in *TLMessagesGetExportedChatInvites, opts ...grpc.CallOption) (*Messages_ExportedChatInvites, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_ExportedChatInvites)
	err := c.cc.Invoke(ctx, RPCChatInvites_MessagesGetExportedChatInvites_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatInvitesClient) MessagesGetExportedChatInvite(ctx context.Context, in *TLMessagesGetExportedChatInvite, opts ...grpc.CallOption) (*Messages_ExportedChatInvite, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_ExportedChatInvite)
	err := c.cc.Invoke(ctx, RPCChatInvites_MessagesGetExportedChatInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatInvitesClient) MessagesEditExportedChatInvite(ctx context.Context, in *TLMessagesEditExportedChatInvite, opts ...grpc.CallOption) (*Messages_ExportedChatInvite, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_ExportedChatInvite)
	err := c.cc.Invoke(ctx, RPCChatInvites_MessagesEditExportedChatInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatInvitesClient) MessagesDeleteRevokedExportedChatInvites(ctx context.Context, in *TLMessagesDeleteRevokedExportedChatInvites, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCChatInvites_MessagesDeleteRevokedExportedChatInvites_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatInvitesClient) MessagesDeleteExportedChatInvite(ctx context.Context, in *TLMessagesDeleteExportedChatInvite, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCChatInvites_MessagesDeleteExportedChatInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatInvitesClient) MessagesGetAdminsWithInvites(ctx context.Context, in *TLMessagesGetAdminsWithInvites, opts ...grpc.CallOption) (*Messages_ChatAdminsWithInvites, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_ChatAdminsWithInvites)
	err := c.cc.Invoke(ctx, RPCChatInvites_MessagesGetAdminsWithInvites_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatInvitesClient) MessagesGetChatInviteImporters(ctx context.Context, in *TLMessagesGetChatInviteImporters, opts ...grpc.CallOption) (*Messages_ChatInviteImporters, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_ChatInviteImporters)
	err := c.cc.Invoke(ctx, RPCChatInvites_MessagesGetChatInviteImporters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatInvitesClient) MessagesHideChatJoinRequest(ctx context.Context, in *TLMessagesHideChatJoinRequest, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCChatInvites_MessagesHideChatJoinRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatInvitesClient) MessagesHideAllChatJoinRequests(ctx context.Context, in *TLMessagesHideAllChatJoinRequests, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCChatInvites_MessagesHideAllChatJoinRequests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatInvitesClient) ChannelsToggleJoinToSend(ctx context.Context, in *TLChannelsToggleJoinToSend, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCChatInvites_ChannelsToggleJoinToSend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatInvitesClient) ChannelsToggleJoinRequest(ctx context.Context, in *TLChannelsToggleJoinRequest, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCChatInvites_ChannelsToggleJoinRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCChatInvitesServer is the server API for RPCChatInvites service.
// All implementations should embed UnimplementedRPCChatInvitesServer
// for forward compatibility.
type RPCChatInvitesServer interface {
	MessagesExportChatInvite(context.Context, *TLMessagesExportChatInvite) (*ExportedChatInvite, error)
	MessagesCheckChatInvite(context.Context, *TLMessagesCheckChatInvite) (*ChatInvite, error)
	MessagesImportChatInvite(context.Context, *TLMessagesImportChatInvite) (*Updates, error)
	MessagesGetExportedChatInvites(context.Context, *TLMessagesGetExportedChatInvites) (*Messages_ExportedChatInvites, error)
	MessagesGetExportedChatInvite(context.Context, *TLMessagesGetExportedChatInvite) (*Messages_ExportedChatInvite, error)
	MessagesEditExportedChatInvite(context.Context, *TLMessagesEditExportedChatInvite) (*Messages_ExportedChatInvite, error)
	MessagesDeleteRevokedExportedChatInvites(context.Context, *TLMessagesDeleteRevokedExportedChatInvites) (*Bool, error)
	MessagesDeleteExportedChatInvite(context.Context, *TLMessagesDeleteExportedChatInvite) (*Bool, error)
	MessagesGetAdminsWithInvites(context.Context, *TLMessagesGetAdminsWithInvites) (*Messages_ChatAdminsWithInvites, error)
	MessagesGetChatInviteImporters(context.Context, *TLMessagesGetChatInviteImporters) (*Messages_ChatInviteImporters, error)
	MessagesHideChatJoinRequest(context.Context, *TLMessagesHideChatJoinRequest) (*Updates, error)
	MessagesHideAllChatJoinRequests(context.Context, *TLMessagesHideAllChatJoinRequests) (*Updates, error)
	ChannelsToggleJoinToSend(context.Context, *TLChannelsToggleJoinToSend) (*Updates, error)
	ChannelsToggleJoinRequest(context.Context, *TLChannelsToggleJoinRequest) (*Updates, error)
}

// UnimplementedRPCChatInvitesServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCChatInvitesServer struct{}

func (UnimplementedRPCChatInvitesServer) MessagesExportChatInvite(context.Context, *TLMessagesExportChatInvite) (*ExportedChatInvite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesExportChatInvite not implemented")
}
func (UnimplementedRPCChatInvitesServer) MessagesCheckChatInvite(context.Context, *TLMessagesCheckChatInvite) (*ChatInvite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesCheckChatInvite not implemented")
}
func (UnimplementedRPCChatInvitesServer) MessagesImportChatInvite(context.Context, *TLMessagesImportChatInvite) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesImportChatInvite not implemented")
}
func (UnimplementedRPCChatInvitesServer) MessagesGetExportedChatInvites(context.Context, *TLMessagesGetExportedChatInvites) (*Messages_ExportedChatInvites, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetExportedChatInvites not implemented")
}
func (UnimplementedRPCChatInvitesServer) MessagesGetExportedChatInvite(context.Context, *TLMessagesGetExportedChatInvite) (*Messages_ExportedChatInvite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetExportedChatInvite not implemented")
}
func (UnimplementedRPCChatInvitesServer) MessagesEditExportedChatInvite(context.Context, *TLMessagesEditExportedChatInvite) (*Messages_ExportedChatInvite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesEditExportedChatInvite not implemented")
}
func (UnimplementedRPCChatInvitesServer) MessagesDeleteRevokedExportedChatInvites(context.Context, *TLMessagesDeleteRevokedExportedChatInvites) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesDeleteRevokedExportedChatInvites not implemented")
}
func (UnimplementedRPCChatInvitesServer) MessagesDeleteExportedChatInvite(context.Context, *TLMessagesDeleteExportedChatInvite) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesDeleteExportedChatInvite not implemented")
}
func (UnimplementedRPCChatInvitesServer) MessagesGetAdminsWithInvites(context.Context, *TLMessagesGetAdminsWithInvites) (*Messages_ChatAdminsWithInvites, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetAdminsWithInvites not implemented")
}
func (UnimplementedRPCChatInvitesServer) MessagesGetChatInviteImporters(context.Context, *TLMessagesGetChatInviteImporters) (*Messages_ChatInviteImporters, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetChatInviteImporters not implemented")
}
func (UnimplementedRPCChatInvitesServer) MessagesHideChatJoinRequest(context.Context, *TLMessagesHideChatJoinRequest) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesHideChatJoinRequest not implemented")
}
func (UnimplementedRPCChatInvitesServer) MessagesHideAllChatJoinRequests(context.Context, *TLMessagesHideAllChatJoinRequests) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesHideAllChatJoinRequests not implemented")
}
func (UnimplementedRPCChatInvitesServer) ChannelsToggleJoinToSend(context.Context, *TLChannelsToggleJoinToSend) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsToggleJoinToSend not implemented")
}
func (UnimplementedRPCChatInvitesServer) ChannelsToggleJoinRequest(context.Context, *TLChannelsToggleJoinRequest) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsToggleJoinRequest not implemented")
}
func (UnimplementedRPCChatInvitesServer) testEmbeddedByValue() {}

// UnsafeRPCChatInvitesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCChatInvitesServer will
// result in compilation errors.
type UnsafeRPCChatInvitesServer interface {
	mustEmbedUnimplementedRPCChatInvitesServer()
}

func RegisterRPCChatInvitesServer(s grpc.ServiceRegistrar, srv RPCChatInvitesServer) {
	// If the following call pancis, it indicates UnimplementedRPCChatInvitesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCChatInvites_ServiceDesc, srv)
}

func _RPCChatInvites_MessagesExportChatInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesExportChatInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatInvitesServer).MessagesExportChatInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChatInvites_MessagesExportChatInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatInvitesServer).MessagesExportChatInvite(ctx, req.(*TLMessagesExportChatInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChatInvites_MessagesCheckChatInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesCheckChatInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatInvitesServer).MessagesCheckChatInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChatInvites_MessagesCheckChatInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatInvitesServer).MessagesCheckChatInvite(ctx, req.(*TLMessagesCheckChatInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChatInvites_MessagesImportChatInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesImportChatInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatInvitesServer).MessagesImportChatInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChatInvites_MessagesImportChatInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatInvitesServer).MessagesImportChatInvite(ctx, req.(*TLMessagesImportChatInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChatInvites_MessagesGetExportedChatInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetExportedChatInvites)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatInvitesServer).MessagesGetExportedChatInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChatInvites_MessagesGetExportedChatInvites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatInvitesServer).MessagesGetExportedChatInvites(ctx, req.(*TLMessagesGetExportedChatInvites))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChatInvites_MessagesGetExportedChatInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetExportedChatInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatInvitesServer).MessagesGetExportedChatInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChatInvites_MessagesGetExportedChatInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatInvitesServer).MessagesGetExportedChatInvite(ctx, req.(*TLMessagesGetExportedChatInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChatInvites_MessagesEditExportedChatInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesEditExportedChatInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatInvitesServer).MessagesEditExportedChatInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChatInvites_MessagesEditExportedChatInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatInvitesServer).MessagesEditExportedChatInvite(ctx, req.(*TLMessagesEditExportedChatInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChatInvites_MessagesDeleteRevokedExportedChatInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesDeleteRevokedExportedChatInvites)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatInvitesServer).MessagesDeleteRevokedExportedChatInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChatInvites_MessagesDeleteRevokedExportedChatInvites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatInvitesServer).MessagesDeleteRevokedExportedChatInvites(ctx, req.(*TLMessagesDeleteRevokedExportedChatInvites))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChatInvites_MessagesDeleteExportedChatInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesDeleteExportedChatInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatInvitesServer).MessagesDeleteExportedChatInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChatInvites_MessagesDeleteExportedChatInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatInvitesServer).MessagesDeleteExportedChatInvite(ctx, req.(*TLMessagesDeleteExportedChatInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChatInvites_MessagesGetAdminsWithInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetAdminsWithInvites)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatInvitesServer).MessagesGetAdminsWithInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChatInvites_MessagesGetAdminsWithInvites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatInvitesServer).MessagesGetAdminsWithInvites(ctx, req.(*TLMessagesGetAdminsWithInvites))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChatInvites_MessagesGetChatInviteImporters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetChatInviteImporters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatInvitesServer).MessagesGetChatInviteImporters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChatInvites_MessagesGetChatInviteImporters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatInvitesServer).MessagesGetChatInviteImporters(ctx, req.(*TLMessagesGetChatInviteImporters))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChatInvites_MessagesHideChatJoinRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesHideChatJoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatInvitesServer).MessagesHideChatJoinRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChatInvites_MessagesHideChatJoinRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatInvitesServer).MessagesHideChatJoinRequest(ctx, req.(*TLMessagesHideChatJoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChatInvites_MessagesHideAllChatJoinRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesHideAllChatJoinRequests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatInvitesServer).MessagesHideAllChatJoinRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChatInvites_MessagesHideAllChatJoinRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatInvitesServer).MessagesHideAllChatJoinRequests(ctx, req.(*TLMessagesHideAllChatJoinRequests))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChatInvites_ChannelsToggleJoinToSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsToggleJoinToSend)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatInvitesServer).ChannelsToggleJoinToSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChatInvites_ChannelsToggleJoinToSend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatInvitesServer).ChannelsToggleJoinToSend(ctx, req.(*TLChannelsToggleJoinToSend))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChatInvites_ChannelsToggleJoinRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsToggleJoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatInvitesServer).ChannelsToggleJoinRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChatInvites_ChannelsToggleJoinRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatInvitesServer).ChannelsToggleJoinRequest(ctx, req.(*TLChannelsToggleJoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCChatInvites_ServiceDesc is the grpc.ServiceDesc for RPCChatInvites service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCChatInvites_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCChatInvites",
	HandlerType: (*RPCChatInvitesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "messages_exportChatInvite",
			Handler:    _RPCChatInvites_MessagesExportChatInvite_Handler,
		},
		{
			MethodName: "messages_checkChatInvite",
			Handler:    _RPCChatInvites_MessagesCheckChatInvite_Handler,
		},
		{
			MethodName: "messages_importChatInvite",
			Handler:    _RPCChatInvites_MessagesImportChatInvite_Handler,
		},
		{
			MethodName: "messages_getExportedChatInvites",
			Handler:    _RPCChatInvites_MessagesGetExportedChatInvites_Handler,
		},
		{
			MethodName: "messages_getExportedChatInvite",
			Handler:    _RPCChatInvites_MessagesGetExportedChatInvite_Handler,
		},
		{
			MethodName: "messages_editExportedChatInvite",
			Handler:    _RPCChatInvites_MessagesEditExportedChatInvite_Handler,
		},
		{
			MethodName: "messages_deleteRevokedExportedChatInvites",
			Handler:    _RPCChatInvites_MessagesDeleteRevokedExportedChatInvites_Handler,
		},
		{
			MethodName: "messages_deleteExportedChatInvite",
			Handler:    _RPCChatInvites_MessagesDeleteExportedChatInvite_Handler,
		},
		{
			MethodName: "messages_getAdminsWithInvites",
			Handler:    _RPCChatInvites_MessagesGetAdminsWithInvites_Handler,
		},
		{
			MethodName: "messages_getChatInviteImporters",
			Handler:    _RPCChatInvites_MessagesGetChatInviteImporters_Handler,
		},
		{
			MethodName: "messages_hideChatJoinRequest",
			Handler:    _RPCChatInvites_MessagesHideChatJoinRequest_Handler,
		},
		{
			MethodName: "messages_hideAllChatJoinRequests",
			Handler:    _RPCChatInvites_MessagesHideAllChatJoinRequests_Handler,
		},
		{
			MethodName: "channels_toggleJoinToSend",
			Handler:    _RPCChatInvites_ChannelsToggleJoinToSend_Handler,
		},
		{
			MethodName: "channels_toggleJoinRequest",
			Handler:    _RPCChatInvites_ChannelsToggleJoinRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCChats_MessagesGetChats_FullMethodName                           = "/mtproto.RPCChats/messages_getChats"
	RPCChats_MessagesGetFullChat_FullMethodName                        = "/mtproto.RPCChats/messages_getFullChat"
	RPCChats_MessagesEditChatTitle_FullMethodName                      = "/mtproto.RPCChats/messages_editChatTitle"
	RPCChats_MessagesEditChatPhoto_FullMethodName                      = "/mtproto.RPCChats/messages_editChatPhoto"
	RPCChats_MessagesAddChatUserCBC6D107_FullMethodName                = "/mtproto.RPCChats/messages_addChatUserCBC6D107"
	RPCChats_MessagesDeleteChatUser_FullMethodName                     = "/mtproto.RPCChats/messages_deleteChatUser"
	RPCChats_MessagesCreateChat92CEDDD4_FullMethodName                 = "/mtproto.RPCChats/messages_createChat92CEDDD4"
	RPCChats_MessagesEditChatAdmin_FullMethodName                      = "/mtproto.RPCChats/messages_editChatAdmin"
	RPCChats_MessagesMigrateChat_FullMethodName                        = "/mtproto.RPCChats/messages_migrateChat"
	RPCChats_MessagesGetCommonChats_FullMethodName                     = "/mtproto.RPCChats/messages_getCommonChats"
	RPCChats_MessagesEditChatAbout_FullMethodName                      = "/mtproto.RPCChats/messages_editChatAbout"
	RPCChats_MessagesEditChatDefaultBannedRights_FullMethodName        = "/mtproto.RPCChats/messages_editChatDefaultBannedRights"
	RPCChats_MessagesDeleteChat_FullMethodName                         = "/mtproto.RPCChats/messages_deleteChat"
	RPCChats_MessagesGetMessageReadParticipants31C1C44F_FullMethodName = "/mtproto.RPCChats/messages_getMessageReadParticipants31C1C44F"
	RPCChats_ChannelsConvertToGigagroup_FullMethodName                 = "/mtproto.RPCChats/channels_convertToGigagroup"
	RPCChats_ChannelsSetEmojiStickers_FullMethodName                   = "/mtproto.RPCChats/channels_setEmojiStickers"
	RPCChats_MessagesAddChatUserF24753E3_FullMethodName                = "/mtproto.RPCChats/messages_addChatUserF24753E3"
	RPCChats_MessagesCreateChat34A818_FullMethodName                   = "/mtproto.RPCChats/messages_createChat34A818"
	RPCChats_MessagesGetAllChats_FullMethodName                        = "/mtproto.RPCChats/messages_getAllChats"
	RPCChats_MessagesGetMessageReadParticipants2C6F97B7_FullMethodName = "/mtproto.RPCChats/messages_getMessageReadParticipants2C6F97B7"
	RPCChats_MessagesCreateChat9CB126E_FullMethodName                  = "/mtproto.RPCChats/messages_createChat9CB126E"
)

// RPCChatsClient is the client API for RPCChats service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCChatsClient interface {
	MessagesGetChats(ctx context.Context, in *TLMessagesGetChats, opts ...grpc.CallOption) (*Messages_Chats, error)
	MessagesGetFullChat(ctx context.Context, in *TLMessagesGetFullChat, opts ...grpc.CallOption) (*Messages_ChatFull, error)
	MessagesEditChatTitle(ctx context.Context, in *TLMessagesEditChatTitle, opts ...grpc.CallOption) (*Updates, error)
	MessagesEditChatPhoto(ctx context.Context, in *TLMessagesEditChatPhoto, opts ...grpc.CallOption) (*Updates, error)
	MessagesAddChatUserCBC6D107(ctx context.Context, in *TLMessagesAddChatUserCBC6D107, opts ...grpc.CallOption) (*Messages_InvitedUsers, error)
	MessagesDeleteChatUser(ctx context.Context, in *TLMessagesDeleteChatUser, opts ...grpc.CallOption) (*Updates, error)
	MessagesCreateChat92CEDDD4(ctx context.Context, in *TLMessagesCreateChat92CEDDD4, opts ...grpc.CallOption) (*Messages_InvitedUsers, error)
	MessagesEditChatAdmin(ctx context.Context, in *TLMessagesEditChatAdmin, opts ...grpc.CallOption) (*Bool, error)
	MessagesMigrateChat(ctx context.Context, in *TLMessagesMigrateChat, opts ...grpc.CallOption) (*Updates, error)
	MessagesGetCommonChats(ctx context.Context, in *TLMessagesGetCommonChats, opts ...grpc.CallOption) (*Messages_Chats, error)
	MessagesEditChatAbout(ctx context.Context, in *TLMessagesEditChatAbout, opts ...grpc.CallOption) (*Bool, error)
	MessagesEditChatDefaultBannedRights(ctx context.Context, in *TLMessagesEditChatDefaultBannedRights, opts ...grpc.CallOption) (*Updates, error)
	MessagesDeleteChat(ctx context.Context, in *TLMessagesDeleteChat, opts ...grpc.CallOption) (*Bool, error)
	MessagesGetMessageReadParticipants31C1C44F(ctx context.Context, in *TLMessagesGetMessageReadParticipants31C1C44F, opts ...grpc.CallOption) (*Vector_ReadParticipantDate, error)
	ChannelsConvertToGigagroup(ctx context.Context, in *TLChannelsConvertToGigagroup, opts ...grpc.CallOption) (*Updates, error)
	ChannelsSetEmojiStickers(ctx context.Context, in *TLChannelsSetEmojiStickers, opts ...grpc.CallOption) (*Bool, error)
	MessagesAddChatUserF24753E3(ctx context.Context, in *TLMessagesAddChatUserF24753E3, opts ...grpc.CallOption) (*Updates, error)
	MessagesCreateChat34A818(ctx context.Context, in *TLMessagesCreateChat34A818, opts ...grpc.CallOption) (*Updates, error)
	MessagesGetAllChats(ctx context.Context, in *TLMessagesGetAllChats, opts ...grpc.CallOption) (*Messages_Chats, error)
	MessagesGetMessageReadParticipants2C6F97B7(ctx context.Context, in *TLMessagesGetMessageReadParticipants2C6F97B7, opts ...grpc.CallOption) (*Vector_Long, error)
	MessagesCreateChat9CB126E(ctx context.Context, in *TLMessagesCreateChat9CB126E, opts ...grpc.CallOption) (*Updates, error)
}

type rPCChatsClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCChatsClient(cc grpc.ClientConnInterface) RPCChatsClient {
	return &rPCChatsClient{cc}
}

func (c *rPCChatsClient) MessagesGetChats(ctx context.Context, in *TLMessagesGetChats, opts ...grpc.CallOption) (*Messages_Chats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_Chats)
	err := c.cc.Invoke(ctx, RPCChats_MessagesGetChats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatsClient) MessagesGetFullChat(ctx context.Context, in *TLMessagesGetFullChat, opts ...grpc.CallOption) (*Messages_ChatFull, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_ChatFull)
	err := c.cc.Invoke(ctx, RPCChats_MessagesGetFullChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatsClient) MessagesEditChatTitle(ctx context.Context, in *TLMessagesEditChatTitle, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCChats_MessagesEditChatTitle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatsClient) MessagesEditChatPhoto(ctx context.Context, in *TLMessagesEditChatPhoto, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCChats_MessagesEditChatPhoto_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatsClient) MessagesAddChatUserCBC6D107(ctx context.Context, in *TLMessagesAddChatUserCBC6D107, opts ...grpc.CallOption) (*Messages_InvitedUsers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_InvitedUsers)
	err := c.cc.Invoke(ctx, RPCChats_MessagesAddChatUserCBC6D107_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatsClient) MessagesDeleteChatUser(ctx context.Context, in *TLMessagesDeleteChatUser, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCChats_MessagesDeleteChatUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatsClient) MessagesCreateChat92CEDDD4(ctx context.Context, in *TLMessagesCreateChat92CEDDD4, opts ...grpc.CallOption) (*Messages_InvitedUsers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_InvitedUsers)
	err := c.cc.Invoke(ctx, RPCChats_MessagesCreateChat92CEDDD4_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatsClient) MessagesEditChatAdmin(ctx context.Context, in *TLMessagesEditChatAdmin, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCChats_MessagesEditChatAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatsClient) MessagesMigrateChat(ctx context.Context, in *TLMessagesMigrateChat, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCChats_MessagesMigrateChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatsClient) MessagesGetCommonChats(ctx context.Context, in *TLMessagesGetCommonChats, opts ...grpc.CallOption) (*Messages_Chats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_Chats)
	err := c.cc.Invoke(ctx, RPCChats_MessagesGetCommonChats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatsClient) MessagesEditChatAbout(ctx context.Context, in *TLMessagesEditChatAbout, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCChats_MessagesEditChatAbout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatsClient) MessagesEditChatDefaultBannedRights(ctx context.Context, in *TLMessagesEditChatDefaultBannedRights, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCChats_MessagesEditChatDefaultBannedRights_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatsClient) MessagesDeleteChat(ctx context.Context, in *TLMessagesDeleteChat, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCChats_MessagesDeleteChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatsClient) MessagesGetMessageReadParticipants31C1C44F(ctx context.Context, in *TLMessagesGetMessageReadParticipants31C1C44F, opts ...grpc.CallOption) (*Vector_ReadParticipantDate, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_ReadParticipantDate)
	err := c.cc.Invoke(ctx, RPCChats_MessagesGetMessageReadParticipants31C1C44F_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatsClient) ChannelsConvertToGigagroup(ctx context.Context, in *TLChannelsConvertToGigagroup, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCChats_ChannelsConvertToGigagroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatsClient) ChannelsSetEmojiStickers(ctx context.Context, in *TLChannelsSetEmojiStickers, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCChats_ChannelsSetEmojiStickers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatsClient) MessagesAddChatUserF24753E3(ctx context.Context, in *TLMessagesAddChatUserF24753E3, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCChats_MessagesAddChatUserF24753E3_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatsClient) MessagesCreateChat34A818(ctx context.Context, in *TLMessagesCreateChat34A818, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCChats_MessagesCreateChat34A818_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatsClient) MessagesGetAllChats(ctx context.Context, in *TLMessagesGetAllChats, opts ...grpc.CallOption) (*Messages_Chats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_Chats)
	err := c.cc.Invoke(ctx, RPCChats_MessagesGetAllChats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatsClient) MessagesGetMessageReadParticipants2C6F97B7(ctx context.Context, in *TLMessagesGetMessageReadParticipants2C6F97B7, opts ...grpc.CallOption) (*Vector_Long, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_Long)
	err := c.cc.Invoke(ctx, RPCChats_MessagesGetMessageReadParticipants2C6F97B7_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatsClient) MessagesCreateChat9CB126E(ctx context.Context, in *TLMessagesCreateChat9CB126E, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCChats_MessagesCreateChat9CB126E_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCChatsServer is the server API for RPCChats service.
// All implementations should embed UnimplementedRPCChatsServer
// for forward compatibility.
type RPCChatsServer interface {
	MessagesGetChats(context.Context, *TLMessagesGetChats) (*Messages_Chats, error)
	MessagesGetFullChat(context.Context, *TLMessagesGetFullChat) (*Messages_ChatFull, error)
	MessagesEditChatTitle(context.Context, *TLMessagesEditChatTitle) (*Updates, error)
	MessagesEditChatPhoto(context.Context, *TLMessagesEditChatPhoto) (*Updates, error)
	MessagesAddChatUserCBC6D107(context.Context, *TLMessagesAddChatUserCBC6D107) (*Messages_InvitedUsers, error)
	MessagesDeleteChatUser(context.Context, *TLMessagesDeleteChatUser) (*Updates, error)
	MessagesCreateChat92CEDDD4(context.Context, *TLMessagesCreateChat92CEDDD4) (*Messages_InvitedUsers, error)
	MessagesEditChatAdmin(context.Context, *TLMessagesEditChatAdmin) (*Bool, error)
	MessagesMigrateChat(context.Context, *TLMessagesMigrateChat) (*Updates, error)
	MessagesGetCommonChats(context.Context, *TLMessagesGetCommonChats) (*Messages_Chats, error)
	MessagesEditChatAbout(context.Context, *TLMessagesEditChatAbout) (*Bool, error)
	MessagesEditChatDefaultBannedRights(context.Context, *TLMessagesEditChatDefaultBannedRights) (*Updates, error)
	MessagesDeleteChat(context.Context, *TLMessagesDeleteChat) (*Bool, error)
	MessagesGetMessageReadParticipants31C1C44F(context.Context, *TLMessagesGetMessageReadParticipants31C1C44F) (*Vector_ReadParticipantDate, error)
	ChannelsConvertToGigagroup(context.Context, *TLChannelsConvertToGigagroup) (*Updates, error)
	ChannelsSetEmojiStickers(context.Context, *TLChannelsSetEmojiStickers) (*Bool, error)
	MessagesAddChatUserF24753E3(context.Context, *TLMessagesAddChatUserF24753E3) (*Updates, error)
	MessagesCreateChat34A818(context.Context, *TLMessagesCreateChat34A818) (*Updates, error)
	MessagesGetAllChats(context.Context, *TLMessagesGetAllChats) (*Messages_Chats, error)
	MessagesGetMessageReadParticipants2C6F97B7(context.Context, *TLMessagesGetMessageReadParticipants2C6F97B7) (*Vector_Long, error)
	MessagesCreateChat9CB126E(context.Context, *TLMessagesCreateChat9CB126E) (*Updates, error)
}

// UnimplementedRPCChatsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCChatsServer struct{}

func (UnimplementedRPCChatsServer) MessagesGetChats(context.Context, *TLMessagesGetChats) (*Messages_Chats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetChats not implemented")
}
func (UnimplementedRPCChatsServer) MessagesGetFullChat(context.Context, *TLMessagesGetFullChat) (*Messages_ChatFull, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetFullChat not implemented")
}
func (UnimplementedRPCChatsServer) MessagesEditChatTitle(context.Context, *TLMessagesEditChatTitle) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesEditChatTitle not implemented")
}
func (UnimplementedRPCChatsServer) MessagesEditChatPhoto(context.Context, *TLMessagesEditChatPhoto) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesEditChatPhoto not implemented")
}
func (UnimplementedRPCChatsServer) MessagesAddChatUserCBC6D107(context.Context, *TLMessagesAddChatUserCBC6D107) (*Messages_InvitedUsers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesAddChatUserCBC6D107 not implemented")
}
func (UnimplementedRPCChatsServer) MessagesDeleteChatUser(context.Context, *TLMessagesDeleteChatUser) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesDeleteChatUser not implemented")
}
func (UnimplementedRPCChatsServer) MessagesCreateChat92CEDDD4(context.Context, *TLMessagesCreateChat92CEDDD4) (*Messages_InvitedUsers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesCreateChat92CEDDD4 not implemented")
}
func (UnimplementedRPCChatsServer) MessagesEditChatAdmin(context.Context, *TLMessagesEditChatAdmin) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesEditChatAdmin not implemented")
}
func (UnimplementedRPCChatsServer) MessagesMigrateChat(context.Context, *TLMessagesMigrateChat) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesMigrateChat not implemented")
}
func (UnimplementedRPCChatsServer) MessagesGetCommonChats(context.Context, *TLMessagesGetCommonChats) (*Messages_Chats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetCommonChats not implemented")
}
func (UnimplementedRPCChatsServer) MessagesEditChatAbout(context.Context, *TLMessagesEditChatAbout) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesEditChatAbout not implemented")
}
func (UnimplementedRPCChatsServer) MessagesEditChatDefaultBannedRights(context.Context, *TLMessagesEditChatDefaultBannedRights) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesEditChatDefaultBannedRights not implemented")
}
func (UnimplementedRPCChatsServer) MessagesDeleteChat(context.Context, *TLMessagesDeleteChat) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesDeleteChat not implemented")
}
func (UnimplementedRPCChatsServer) MessagesGetMessageReadParticipants31C1C44F(context.Context, *TLMessagesGetMessageReadParticipants31C1C44F) (*Vector_ReadParticipantDate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetMessageReadParticipants31C1C44F not implemented")
}
func (UnimplementedRPCChatsServer) ChannelsConvertToGigagroup(context.Context, *TLChannelsConvertToGigagroup) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsConvertToGigagroup not implemented")
}
func (UnimplementedRPCChatsServer) ChannelsSetEmojiStickers(context.Context, *TLChannelsSetEmojiStickers) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsSetEmojiStickers not implemented")
}
func (UnimplementedRPCChatsServer) MessagesAddChatUserF24753E3(context.Context, *TLMessagesAddChatUserF24753E3) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesAddChatUserF24753E3 not implemented")
}
func (UnimplementedRPCChatsServer) MessagesCreateChat34A818(context.Context, *TLMessagesCreateChat34A818) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesCreateChat34A818 not implemented")
}
func (UnimplementedRPCChatsServer) MessagesGetAllChats(context.Context, *TLMessagesGetAllChats) (*Messages_Chats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetAllChats not implemented")
}
func (UnimplementedRPCChatsServer) MessagesGetMessageReadParticipants2C6F97B7(context.Context, *TLMessagesGetMessageReadParticipants2C6F97B7) (*Vector_Long, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetMessageReadParticipants2C6F97B7 not implemented")
}
func (UnimplementedRPCChatsServer) MessagesCreateChat9CB126E(context.Context, *TLMessagesCreateChat9CB126E) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesCreateChat9CB126E not implemented")
}
func (UnimplementedRPCChatsServer) testEmbeddedByValue() {}

// UnsafeRPCChatsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCChatsServer will
// result in compilation errors.
type UnsafeRPCChatsServer interface {
	mustEmbedUnimplementedRPCChatsServer()
}

func RegisterRPCChatsServer(s grpc.ServiceRegistrar, srv RPCChatsServer) {
	// If the following call pancis, it indicates UnimplementedRPCChatsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCChats_ServiceDesc, srv)
}

func _RPCChats_MessagesGetChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetChats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatsServer).MessagesGetChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChats_MessagesGetChats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatsServer).MessagesGetChats(ctx, req.(*TLMessagesGetChats))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChats_MessagesGetFullChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetFullChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatsServer).MessagesGetFullChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChats_MessagesGetFullChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatsServer).MessagesGetFullChat(ctx, req.(*TLMessagesGetFullChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChats_MessagesEditChatTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesEditChatTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatsServer).MessagesEditChatTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChats_MessagesEditChatTitle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatsServer).MessagesEditChatTitle(ctx, req.(*TLMessagesEditChatTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChats_MessagesEditChatPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesEditChatPhoto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatsServer).MessagesEditChatPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChats_MessagesEditChatPhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatsServer).MessagesEditChatPhoto(ctx, req.(*TLMessagesEditChatPhoto))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChats_MessagesAddChatUserCBC6D107_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesAddChatUserCBC6D107)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatsServer).MessagesAddChatUserCBC6D107(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChats_MessagesAddChatUserCBC6D107_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatsServer).MessagesAddChatUserCBC6D107(ctx, req.(*TLMessagesAddChatUserCBC6D107))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChats_MessagesDeleteChatUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesDeleteChatUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatsServer).MessagesDeleteChatUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChats_MessagesDeleteChatUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatsServer).MessagesDeleteChatUser(ctx, req.(*TLMessagesDeleteChatUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChats_MessagesCreateChat92CEDDD4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesCreateChat92CEDDD4)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatsServer).MessagesCreateChat92CEDDD4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChats_MessagesCreateChat92CEDDD4_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatsServer).MessagesCreateChat92CEDDD4(ctx, req.(*TLMessagesCreateChat92CEDDD4))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChats_MessagesEditChatAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesEditChatAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatsServer).MessagesEditChatAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChats_MessagesEditChatAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatsServer).MessagesEditChatAdmin(ctx, req.(*TLMessagesEditChatAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChats_MessagesMigrateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesMigrateChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatsServer).MessagesMigrateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChats_MessagesMigrateChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatsServer).MessagesMigrateChat(ctx, req.(*TLMessagesMigrateChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChats_MessagesGetCommonChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetCommonChats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatsServer).MessagesGetCommonChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChats_MessagesGetCommonChats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatsServer).MessagesGetCommonChats(ctx, req.(*TLMessagesGetCommonChats))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChats_MessagesEditChatAbout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesEditChatAbout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatsServer).MessagesEditChatAbout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChats_MessagesEditChatAbout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatsServer).MessagesEditChatAbout(ctx, req.(*TLMessagesEditChatAbout))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChats_MessagesEditChatDefaultBannedRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesEditChatDefaultBannedRights)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatsServer).MessagesEditChatDefaultBannedRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChats_MessagesEditChatDefaultBannedRights_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatsServer).MessagesEditChatDefaultBannedRights(ctx, req.(*TLMessagesEditChatDefaultBannedRights))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChats_MessagesDeleteChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesDeleteChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatsServer).MessagesDeleteChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChats_MessagesDeleteChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatsServer).MessagesDeleteChat(ctx, req.(*TLMessagesDeleteChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChats_MessagesGetMessageReadParticipants31C1C44F_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetMessageReadParticipants31C1C44F)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatsServer).MessagesGetMessageReadParticipants31C1C44F(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChats_MessagesGetMessageReadParticipants31C1C44F_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatsServer).MessagesGetMessageReadParticipants31C1C44F(ctx, req.(*TLMessagesGetMessageReadParticipants31C1C44F))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChats_ChannelsConvertToGigagroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsConvertToGigagroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatsServer).ChannelsConvertToGigagroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChats_ChannelsConvertToGigagroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatsServer).ChannelsConvertToGigagroup(ctx, req.(*TLChannelsConvertToGigagroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChats_ChannelsSetEmojiStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsSetEmojiStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatsServer).ChannelsSetEmojiStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChats_ChannelsSetEmojiStickers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatsServer).ChannelsSetEmojiStickers(ctx, req.(*TLChannelsSetEmojiStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChats_MessagesAddChatUserF24753E3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesAddChatUserF24753E3)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatsServer).MessagesAddChatUserF24753E3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChats_MessagesAddChatUserF24753E3_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatsServer).MessagesAddChatUserF24753E3(ctx, req.(*TLMessagesAddChatUserF24753E3))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChats_MessagesCreateChat34A818_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesCreateChat34A818)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatsServer).MessagesCreateChat34A818(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChats_MessagesCreateChat34A818_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatsServer).MessagesCreateChat34A818(ctx, req.(*TLMessagesCreateChat34A818))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChats_MessagesGetAllChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetAllChats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatsServer).MessagesGetAllChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChats_MessagesGetAllChats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatsServer).MessagesGetAllChats(ctx, req.(*TLMessagesGetAllChats))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChats_MessagesGetMessageReadParticipants2C6F97B7_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetMessageReadParticipants2C6F97B7)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatsServer).MessagesGetMessageReadParticipants2C6F97B7(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChats_MessagesGetMessageReadParticipants2C6F97B7_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatsServer).MessagesGetMessageReadParticipants2C6F97B7(ctx, req.(*TLMessagesGetMessageReadParticipants2C6F97B7))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChats_MessagesCreateChat9CB126E_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesCreateChat9CB126E)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatsServer).MessagesCreateChat9CB126E(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChats_MessagesCreateChat9CB126E_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatsServer).MessagesCreateChat9CB126E(ctx, req.(*TLMessagesCreateChat9CB126E))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCChats_ServiceDesc is the grpc.ServiceDesc for RPCChats service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCChats_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCChats",
	HandlerType: (*RPCChatsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "messages_getChats",
			Handler:    _RPCChats_MessagesGetChats_Handler,
		},
		{
			MethodName: "messages_getFullChat",
			Handler:    _RPCChats_MessagesGetFullChat_Handler,
		},
		{
			MethodName: "messages_editChatTitle",
			Handler:    _RPCChats_MessagesEditChatTitle_Handler,
		},
		{
			MethodName: "messages_editChatPhoto",
			Handler:    _RPCChats_MessagesEditChatPhoto_Handler,
		},
		{
			MethodName: "messages_addChatUserCBC6D107",
			Handler:    _RPCChats_MessagesAddChatUserCBC6D107_Handler,
		},
		{
			MethodName: "messages_deleteChatUser",
			Handler:    _RPCChats_MessagesDeleteChatUser_Handler,
		},
		{
			MethodName: "messages_createChat92CEDDD4",
			Handler:    _RPCChats_MessagesCreateChat92CEDDD4_Handler,
		},
		{
			MethodName: "messages_editChatAdmin",
			Handler:    _RPCChats_MessagesEditChatAdmin_Handler,
		},
		{
			MethodName: "messages_migrateChat",
			Handler:    _RPCChats_MessagesMigrateChat_Handler,
		},
		{
			MethodName: "messages_getCommonChats",
			Handler:    _RPCChats_MessagesGetCommonChats_Handler,
		},
		{
			MethodName: "messages_editChatAbout",
			Handler:    _RPCChats_MessagesEditChatAbout_Handler,
		},
		{
			MethodName: "messages_editChatDefaultBannedRights",
			Handler:    _RPCChats_MessagesEditChatDefaultBannedRights_Handler,
		},
		{
			MethodName: "messages_deleteChat",
			Handler:    _RPCChats_MessagesDeleteChat_Handler,
		},
		{
			MethodName: "messages_getMessageReadParticipants31C1C44F",
			Handler:    _RPCChats_MessagesGetMessageReadParticipants31C1C44F_Handler,
		},
		{
			MethodName: "channels_convertToGigagroup",
			Handler:    _RPCChats_ChannelsConvertToGigagroup_Handler,
		},
		{
			MethodName: "channels_setEmojiStickers",
			Handler:    _RPCChats_ChannelsSetEmojiStickers_Handler,
		},
		{
			MethodName: "messages_addChatUserF24753E3",
			Handler:    _RPCChats_MessagesAddChatUserF24753E3_Handler,
		},
		{
			MethodName: "messages_createChat34A818",
			Handler:    _RPCChats_MessagesCreateChat34A818_Handler,
		},
		{
			MethodName: "messages_getAllChats",
			Handler:    _RPCChats_MessagesGetAllChats_Handler,
		},
		{
			MethodName: "messages_getMessageReadParticipants2C6F97B7",
			Handler:    _RPCChats_MessagesGetMessageReadParticipants2C6F97B7_Handler,
		},
		{
			MethodName: "messages_createChat9CB126E",
			Handler:    _RPCChats_MessagesCreateChat9CB126E_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCConfiguration_HelpGetConfig_FullMethodName            = "/mtproto.RPCConfiguration/help_getConfig"
	RPCConfiguration_HelpGetNearestDc_FullMethodName         = "/mtproto.RPCConfiguration/help_getNearestDc"
	RPCConfiguration_HelpGetAppUpdate_FullMethodName         = "/mtproto.RPCConfiguration/help_getAppUpdate"
	RPCConfiguration_HelpGetInviteText_FullMethodName        = "/mtproto.RPCConfiguration/help_getInviteText"
	RPCConfiguration_HelpGetSupport_FullMethodName           = "/mtproto.RPCConfiguration/help_getSupport"
	RPCConfiguration_HelpGetAppConfig61E3F854_FullMethodName = "/mtproto.RPCConfiguration/help_getAppConfig61E3F854"
	RPCConfiguration_HelpGetSupportName_FullMethodName       = "/mtproto.RPCConfiguration/help_getSupportName"
	RPCConfiguration_HelpDismissSuggestion_FullMethodName    = "/mtproto.RPCConfiguration/help_dismissSuggestion"
	RPCConfiguration_HelpGetCountriesList_FullMethodName     = "/mtproto.RPCConfiguration/help_getCountriesList"
	RPCConfiguration_HelpGetAppChangelog_FullMethodName      = "/mtproto.RPCConfiguration/help_getAppChangelog"
	RPCConfiguration_HelpGetAppConfig98914110_FullMethodName = "/mtproto.RPCConfiguration/help_getAppConfig98914110"
)

// RPCConfigurationClient is the client API for RPCConfiguration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCConfigurationClient interface {
	HelpGetConfig(ctx context.Context, in *TLHelpGetConfig, opts ...grpc.CallOption) (*Config, error)
	HelpGetNearestDc(ctx context.Context, in *TLHelpGetNearestDc, opts ...grpc.CallOption) (*NearestDc, error)
	HelpGetAppUpdate(ctx context.Context, in *TLHelpGetAppUpdate, opts ...grpc.CallOption) (*Help_AppUpdate, error)
	HelpGetInviteText(ctx context.Context, in *TLHelpGetInviteText, opts ...grpc.CallOption) (*Help_InviteText, error)
	HelpGetSupport(ctx context.Context, in *TLHelpGetSupport, opts ...grpc.CallOption) (*Help_Support, error)
	HelpGetAppConfig61E3F854(ctx context.Context, in *TLHelpGetAppConfig61E3F854, opts ...grpc.CallOption) (*Help_AppConfig, error)
	HelpGetSupportName(ctx context.Context, in *TLHelpGetSupportName, opts ...grpc.CallOption) (*Help_SupportName, error)
	HelpDismissSuggestion(ctx context.Context, in *TLHelpDismissSuggestion, opts ...grpc.CallOption) (*Bool, error)
	HelpGetCountriesList(ctx context.Context, in *TLHelpGetCountriesList, opts ...grpc.CallOption) (*Help_CountriesList, error)
	HelpGetAppChangelog(ctx context.Context, in *TLHelpGetAppChangelog, opts ...grpc.CallOption) (*Updates, error)
	HelpGetAppConfig98914110(ctx context.Context, in *TLHelpGetAppConfig98914110, opts ...grpc.CallOption) (*JSONValue, error)
}

type rPCConfigurationClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCConfigurationClient(cc grpc.ClientConnInterface) RPCConfigurationClient {
	return &rPCConfigurationClient{cc}
}

func (c *rPCConfigurationClient) HelpGetConfig(ctx context.Context, in *TLHelpGetConfig, opts ...grpc.CallOption) (*Config, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Config)
	err := c.cc.Invoke(ctx, RPCConfiguration_HelpGetConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCConfigurationClient) HelpGetNearestDc(ctx context.Context, in *TLHelpGetNearestDc, opts ...grpc.CallOption) (*NearestDc, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NearestDc)
	err := c.cc.Invoke(ctx, RPCConfiguration_HelpGetNearestDc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCConfigurationClient) HelpGetAppUpdate(ctx context.Context, in *TLHelpGetAppUpdate, opts ...grpc.CallOption) (*Help_AppUpdate, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Help_AppUpdate)
	err := c.cc.Invoke(ctx, RPCConfiguration_HelpGetAppUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCConfigurationClient) HelpGetInviteText(ctx context.Context, in *TLHelpGetInviteText, opts ...grpc.CallOption) (*Help_InviteText, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Help_InviteText)
	err := c.cc.Invoke(ctx, RPCConfiguration_HelpGetInviteText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCConfigurationClient) HelpGetSupport(ctx context.Context, in *TLHelpGetSupport, opts ...grpc.CallOption) (*Help_Support, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Help_Support)
	err := c.cc.Invoke(ctx, RPCConfiguration_HelpGetSupport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCConfigurationClient) HelpGetAppConfig61E3F854(ctx context.Context, in *TLHelpGetAppConfig61E3F854, opts ...grpc.CallOption) (*Help_AppConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Help_AppConfig)
	err := c.cc.Invoke(ctx, RPCConfiguration_HelpGetAppConfig61E3F854_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCConfigurationClient) HelpGetSupportName(ctx context.Context, in *TLHelpGetSupportName, opts ...grpc.CallOption) (*Help_SupportName, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Help_SupportName)
	err := c.cc.Invoke(ctx, RPCConfiguration_HelpGetSupportName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCConfigurationClient) HelpDismissSuggestion(ctx context.Context, in *TLHelpDismissSuggestion, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCConfiguration_HelpDismissSuggestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCConfigurationClient) HelpGetCountriesList(ctx context.Context, in *TLHelpGetCountriesList, opts ...grpc.CallOption) (*Help_CountriesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Help_CountriesList)
	err := c.cc.Invoke(ctx, RPCConfiguration_HelpGetCountriesList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCConfigurationClient) HelpGetAppChangelog(ctx context.Context, in *TLHelpGetAppChangelog, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCConfiguration_HelpGetAppChangelog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCConfigurationClient) HelpGetAppConfig98914110(ctx context.Context, in *TLHelpGetAppConfig98914110, opts ...grpc.CallOption) (*JSONValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JSONValue)
	err := c.cc.Invoke(ctx, RPCConfiguration_HelpGetAppConfig98914110_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCConfigurationServer is the server API for RPCConfiguration service.
// All implementations should embed UnimplementedRPCConfigurationServer
// for forward compatibility.
type RPCConfigurationServer interface {
	HelpGetConfig(context.Context, *TLHelpGetConfig) (*Config, error)
	HelpGetNearestDc(context.Context, *TLHelpGetNearestDc) (*NearestDc, error)
	HelpGetAppUpdate(context.Context, *TLHelpGetAppUpdate) (*Help_AppUpdate, error)
	HelpGetInviteText(context.Context, *TLHelpGetInviteText) (*Help_InviteText, error)
	HelpGetSupport(context.Context, *TLHelpGetSupport) (*Help_Support, error)
	HelpGetAppConfig61E3F854(context.Context, *TLHelpGetAppConfig61E3F854) (*Help_AppConfig, error)
	HelpGetSupportName(context.Context, *TLHelpGetSupportName) (*Help_SupportName, error)
	HelpDismissSuggestion(context.Context, *TLHelpDismissSuggestion) (*Bool, error)
	HelpGetCountriesList(context.Context, *TLHelpGetCountriesList) (*Help_CountriesList, error)
	HelpGetAppChangelog(context.Context, *TLHelpGetAppChangelog) (*Updates, error)
	HelpGetAppConfig98914110(context.Context, *TLHelpGetAppConfig98914110) (*JSONValue, error)
}

// UnimplementedRPCConfigurationServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCConfigurationServer struct{}

func (UnimplementedRPCConfigurationServer) HelpGetConfig(context.Context, *TLHelpGetConfig) (*Config, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetConfig not implemented")
}
func (UnimplementedRPCConfigurationServer) HelpGetNearestDc(context.Context, *TLHelpGetNearestDc) (*NearestDc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetNearestDc not implemented")
}
func (UnimplementedRPCConfigurationServer) HelpGetAppUpdate(context.Context, *TLHelpGetAppUpdate) (*Help_AppUpdate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetAppUpdate not implemented")
}
func (UnimplementedRPCConfigurationServer) HelpGetInviteText(context.Context, *TLHelpGetInviteText) (*Help_InviteText, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetInviteText not implemented")
}
func (UnimplementedRPCConfigurationServer) HelpGetSupport(context.Context, *TLHelpGetSupport) (*Help_Support, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetSupport not implemented")
}
func (UnimplementedRPCConfigurationServer) HelpGetAppConfig61E3F854(context.Context, *TLHelpGetAppConfig61E3F854) (*Help_AppConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetAppConfig61E3F854 not implemented")
}
func (UnimplementedRPCConfigurationServer) HelpGetSupportName(context.Context, *TLHelpGetSupportName) (*Help_SupportName, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetSupportName not implemented")
}
func (UnimplementedRPCConfigurationServer) HelpDismissSuggestion(context.Context, *TLHelpDismissSuggestion) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpDismissSuggestion not implemented")
}
func (UnimplementedRPCConfigurationServer) HelpGetCountriesList(context.Context, *TLHelpGetCountriesList) (*Help_CountriesList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetCountriesList not implemented")
}
func (UnimplementedRPCConfigurationServer) HelpGetAppChangelog(context.Context, *TLHelpGetAppChangelog) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetAppChangelog not implemented")
}
func (UnimplementedRPCConfigurationServer) HelpGetAppConfig98914110(context.Context, *TLHelpGetAppConfig98914110) (*JSONValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetAppConfig98914110 not implemented")
}
func (UnimplementedRPCConfigurationServer) testEmbeddedByValue() {}

// UnsafeRPCConfigurationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCConfigurationServer will
// result in compilation errors.
type UnsafeRPCConfigurationServer interface {
	mustEmbedUnimplementedRPCConfigurationServer()
}

func RegisterRPCConfigurationServer(s grpc.ServiceRegistrar, srv RPCConfigurationServer) {
	// If the following call pancis, it indicates UnimplementedRPCConfigurationServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCConfiguration_ServiceDesc, srv)
}

func _RPCConfiguration_HelpGetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCConfigurationServer).HelpGetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCConfiguration_HelpGetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCConfigurationServer).HelpGetConfig(ctx, req.(*TLHelpGetConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCConfiguration_HelpGetNearestDc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetNearestDc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCConfigurationServer).HelpGetNearestDc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCConfiguration_HelpGetNearestDc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCConfigurationServer).HelpGetNearestDc(ctx, req.(*TLHelpGetNearestDc))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCConfiguration_HelpGetAppUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetAppUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCConfigurationServer).HelpGetAppUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCConfiguration_HelpGetAppUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCConfigurationServer).HelpGetAppUpdate(ctx, req.(*TLHelpGetAppUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCConfiguration_HelpGetInviteText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetInviteText)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCConfigurationServer).HelpGetInviteText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCConfiguration_HelpGetInviteText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCConfigurationServer).HelpGetInviteText(ctx, req.(*TLHelpGetInviteText))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCConfiguration_HelpGetSupport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetSupport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCConfigurationServer).HelpGetSupport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCConfiguration_HelpGetSupport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCConfigurationServer).HelpGetSupport(ctx, req.(*TLHelpGetSupport))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCConfiguration_HelpGetAppConfig61E3F854_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetAppConfig61E3F854)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCConfigurationServer).HelpGetAppConfig61E3F854(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCConfiguration_HelpGetAppConfig61E3F854_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCConfigurationServer).HelpGetAppConfig61E3F854(ctx, req.(*TLHelpGetAppConfig61E3F854))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCConfiguration_HelpGetSupportName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetSupportName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCConfigurationServer).HelpGetSupportName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCConfiguration_HelpGetSupportName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCConfigurationServer).HelpGetSupportName(ctx, req.(*TLHelpGetSupportName))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCConfiguration_HelpDismissSuggestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpDismissSuggestion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCConfigurationServer).HelpDismissSuggestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCConfiguration_HelpDismissSuggestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCConfigurationServer).HelpDismissSuggestion(ctx, req.(*TLHelpDismissSuggestion))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCConfiguration_HelpGetCountriesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetCountriesList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCConfigurationServer).HelpGetCountriesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCConfiguration_HelpGetCountriesList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCConfigurationServer).HelpGetCountriesList(ctx, req.(*TLHelpGetCountriesList))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCConfiguration_HelpGetAppChangelog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetAppChangelog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCConfigurationServer).HelpGetAppChangelog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCConfiguration_HelpGetAppChangelog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCConfigurationServer).HelpGetAppChangelog(ctx, req.(*TLHelpGetAppChangelog))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCConfiguration_HelpGetAppConfig98914110_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetAppConfig98914110)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCConfigurationServer).HelpGetAppConfig98914110(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCConfiguration_HelpGetAppConfig98914110_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCConfigurationServer).HelpGetAppConfig98914110(ctx, req.(*TLHelpGetAppConfig98914110))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCConfiguration_ServiceDesc is the grpc.ServiceDesc for RPCConfiguration service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCConfiguration_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCConfiguration",
	HandlerType: (*RPCConfigurationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "help_getConfig",
			Handler:    _RPCConfiguration_HelpGetConfig_Handler,
		},
		{
			MethodName: "help_getNearestDc",
			Handler:    _RPCConfiguration_HelpGetNearestDc_Handler,
		},
		{
			MethodName: "help_getAppUpdate",
			Handler:    _RPCConfiguration_HelpGetAppUpdate_Handler,
		},
		{
			MethodName: "help_getInviteText",
			Handler:    _RPCConfiguration_HelpGetInviteText_Handler,
		},
		{
			MethodName: "help_getSupport",
			Handler:    _RPCConfiguration_HelpGetSupport_Handler,
		},
		{
			MethodName: "help_getAppConfig61E3F854",
			Handler:    _RPCConfiguration_HelpGetAppConfig61E3F854_Handler,
		},
		{
			MethodName: "help_getSupportName",
			Handler:    _RPCConfiguration_HelpGetSupportName_Handler,
		},
		{
			MethodName: "help_dismissSuggestion",
			Handler:    _RPCConfiguration_HelpDismissSuggestion_Handler,
		},
		{
			MethodName: "help_getCountriesList",
			Handler:    _RPCConfiguration_HelpGetCountriesList_Handler,
		},
		{
			MethodName: "help_getAppChangelog",
			Handler:    _RPCConfiguration_HelpGetAppChangelog_Handler,
		},
		{
			MethodName: "help_getAppConfig98914110",
			Handler:    _RPCConfiguration_HelpGetAppConfig98914110_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCContacts_AccountGetContactSignUpNotification_FullMethodName = "/mtproto.RPCContacts/account_getContactSignUpNotification"
	RPCContacts_AccountSetContactSignUpNotification_FullMethodName = "/mtproto.RPCContacts/account_setContactSignUpNotification"
	RPCContacts_ContactsGetContactIDs_FullMethodName               = "/mtproto.RPCContacts/contacts_getContactIDs"
	RPCContacts_ContactsGetStatuses_FullMethodName                 = "/mtproto.RPCContacts/contacts_getStatuses"
	RPCContacts_ContactsGetContacts_FullMethodName                 = "/mtproto.RPCContacts/contacts_getContacts"
	RPCContacts_ContactsImportContacts_FullMethodName              = "/mtproto.RPCContacts/contacts_importContacts"
	RPCContacts_ContactsDeleteContacts_FullMethodName              = "/mtproto.RPCContacts/contacts_deleteContacts"
	RPCContacts_ContactsDeleteByPhones_FullMethodName              = "/mtproto.RPCContacts/contacts_deleteByPhones"
	RPCContacts_ContactsBlock_FullMethodName                       = "/mtproto.RPCContacts/contacts_block"
	RPCContacts_ContactsUnblock_FullMethodName                     = "/mtproto.RPCContacts/contacts_unblock"
	RPCContacts_ContactsGetBlocked_FullMethodName                  = "/mtproto.RPCContacts/contacts_getBlocked"
	RPCContacts_ContactsSearch_FullMethodName                      = "/mtproto.RPCContacts/contacts_search"
	RPCContacts_ContactsGetTopPeers_FullMethodName                 = "/mtproto.RPCContacts/contacts_getTopPeers"
	RPCContacts_ContactsResetTopPeerRating_FullMethodName          = "/mtproto.RPCContacts/contacts_resetTopPeerRating"
	RPCContacts_ContactsResetSaved_FullMethodName                  = "/mtproto.RPCContacts/contacts_resetSaved"
	RPCContacts_ContactsGetSaved_FullMethodName                    = "/mtproto.RPCContacts/contacts_getSaved"
	RPCContacts_ContactsToggleTopPeers_FullMethodName              = "/mtproto.RPCContacts/contacts_toggleTopPeers"
	RPCContacts_ContactsAddContact_FullMethodName                  = "/mtproto.RPCContacts/contacts_addContact"
	RPCContacts_ContactsAcceptContact_FullMethodName               = "/mtproto.RPCContacts/contacts_acceptContact"
	RPCContacts_ContactsGetLocated_FullMethodName                  = "/mtproto.RPCContacts/contacts_getLocated"
	RPCContacts_ContactsEditCloseFriends_FullMethodName            = "/mtproto.RPCContacts/contacts_editCloseFriends"
	RPCContacts_ContactsSetBlocked_FullMethodName                  = "/mtproto.RPCContacts/contacts_setBlocked"
)

// RPCContactsClient is the client API for RPCContacts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCContactsClient interface {
	AccountGetContactSignUpNotification(ctx context.Context, in *TLAccountGetContactSignUpNotification, opts ...grpc.CallOption) (*Bool, error)
	AccountSetContactSignUpNotification(ctx context.Context, in *TLAccountSetContactSignUpNotification, opts ...grpc.CallOption) (*Bool, error)
	ContactsGetContactIDs(ctx context.Context, in *TLContactsGetContactIDs, opts ...grpc.CallOption) (*Vector_Int, error)
	ContactsGetStatuses(ctx context.Context, in *TLContactsGetStatuses, opts ...grpc.CallOption) (*Vector_ContactStatus, error)
	ContactsGetContacts(ctx context.Context, in *TLContactsGetContacts, opts ...grpc.CallOption) (*Contacts_Contacts, error)
	ContactsImportContacts(ctx context.Context, in *TLContactsImportContacts, opts ...grpc.CallOption) (*Contacts_ImportedContacts, error)
	ContactsDeleteContacts(ctx context.Context, in *TLContactsDeleteContacts, opts ...grpc.CallOption) (*Updates, error)
	ContactsDeleteByPhones(ctx context.Context, in *TLContactsDeleteByPhones, opts ...grpc.CallOption) (*Bool, error)
	ContactsBlock(ctx context.Context, in *TLContactsBlock, opts ...grpc.CallOption) (*Bool, error)
	ContactsUnblock(ctx context.Context, in *TLContactsUnblock, opts ...grpc.CallOption) (*Bool, error)
	ContactsGetBlocked(ctx context.Context, in *TLContactsGetBlocked, opts ...grpc.CallOption) (*Contacts_Blocked, error)
	ContactsSearch(ctx context.Context, in *TLContactsSearch, opts ...grpc.CallOption) (*Contacts_Found, error)
	ContactsGetTopPeers(ctx context.Context, in *TLContactsGetTopPeers, opts ...grpc.CallOption) (*Contacts_TopPeers, error)
	ContactsResetTopPeerRating(ctx context.Context, in *TLContactsResetTopPeerRating, opts ...grpc.CallOption) (*Bool, error)
	ContactsResetSaved(ctx context.Context, in *TLContactsResetSaved, opts ...grpc.CallOption) (*Bool, error)
	ContactsGetSaved(ctx context.Context, in *TLContactsGetSaved, opts ...grpc.CallOption) (*Vector_SavedContact, error)
	ContactsToggleTopPeers(ctx context.Context, in *TLContactsToggleTopPeers, opts ...grpc.CallOption) (*Bool, error)
	ContactsAddContact(ctx context.Context, in *TLContactsAddContact, opts ...grpc.CallOption) (*Updates, error)
	ContactsAcceptContact(ctx context.Context, in *TLContactsAcceptContact, opts ...grpc.CallOption) (*Updates, error)
	ContactsGetLocated(ctx context.Context, in *TLContactsGetLocated, opts ...grpc.CallOption) (*Updates, error)
	ContactsEditCloseFriends(ctx context.Context, in *TLContactsEditCloseFriends, opts ...grpc.CallOption) (*Bool, error)
	ContactsSetBlocked(ctx context.Context, in *TLContactsSetBlocked, opts ...grpc.CallOption) (*Bool, error)
}

type rPCContactsClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCContactsClient(cc grpc.ClientConnInterface) RPCContactsClient {
	return &rPCContactsClient{cc}
}

func (c *rPCContactsClient) AccountGetContactSignUpNotification(ctx context.Context, in *TLAccountGetContactSignUpNotification, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCContacts_AccountGetContactSignUpNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) AccountSetContactSignUpNotification(ctx context.Context, in *TLAccountSetContactSignUpNotification, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCContacts_AccountSetContactSignUpNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsGetContactIDs(ctx context.Context, in *TLContactsGetContactIDs, opts ...grpc.CallOption) (*Vector_Int, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_Int)
	err := c.cc.Invoke(ctx, RPCContacts_ContactsGetContactIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsGetStatuses(ctx context.Context, in *TLContactsGetStatuses, opts ...grpc.CallOption) (*Vector_ContactStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_ContactStatus)
	err := c.cc.Invoke(ctx, RPCContacts_ContactsGetStatuses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsGetContacts(ctx context.Context, in *TLContactsGetContacts, opts ...grpc.CallOption) (*Contacts_Contacts, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Contacts_Contacts)
	err := c.cc.Invoke(ctx, RPCContacts_ContactsGetContacts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsImportContacts(ctx context.Context, in *TLContactsImportContacts, opts ...grpc.CallOption) (*Contacts_ImportedContacts, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Contacts_ImportedContacts)
	err := c.cc.Invoke(ctx, RPCContacts_ContactsImportContacts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsDeleteContacts(ctx context.Context, in *TLContactsDeleteContacts, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCContacts_ContactsDeleteContacts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsDeleteByPhones(ctx context.Context, in *TLContactsDeleteByPhones, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCContacts_ContactsDeleteByPhones_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsBlock(ctx context.Context, in *TLContactsBlock, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCContacts_ContactsBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsUnblock(ctx context.Context, in *TLContactsUnblock, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCContacts_ContactsUnblock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsGetBlocked(ctx context.Context, in *TLContactsGetBlocked, opts ...grpc.CallOption) (*Contacts_Blocked, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Contacts_Blocked)
	err := c.cc.Invoke(ctx, RPCContacts_ContactsGetBlocked_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsSearch(ctx context.Context, in *TLContactsSearch, opts ...grpc.CallOption) (*Contacts_Found, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Contacts_Found)
	err := c.cc.Invoke(ctx, RPCContacts_ContactsSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsGetTopPeers(ctx context.Context, in *TLContactsGetTopPeers, opts ...grpc.CallOption) (*Contacts_TopPeers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Contacts_TopPeers)
	err := c.cc.Invoke(ctx, RPCContacts_ContactsGetTopPeers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsResetTopPeerRating(ctx context.Context, in *TLContactsResetTopPeerRating, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCContacts_ContactsResetTopPeerRating_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsResetSaved(ctx context.Context, in *TLContactsResetSaved, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCContacts_ContactsResetSaved_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsGetSaved(ctx context.Context, in *TLContactsGetSaved, opts ...grpc.CallOption) (*Vector_SavedContact, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_SavedContact)
	err := c.cc.Invoke(ctx, RPCContacts_ContactsGetSaved_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsToggleTopPeers(ctx context.Context, in *TLContactsToggleTopPeers, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCContacts_ContactsToggleTopPeers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsAddContact(ctx context.Context, in *TLContactsAddContact, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCContacts_ContactsAddContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsAcceptContact(ctx context.Context, in *TLContactsAcceptContact, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCContacts_ContactsAcceptContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsGetLocated(ctx context.Context, in *TLContactsGetLocated, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCContacts_ContactsGetLocated_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsEditCloseFriends(ctx context.Context, in *TLContactsEditCloseFriends, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCContacts_ContactsEditCloseFriends_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsSetBlocked(ctx context.Context, in *TLContactsSetBlocked, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCContacts_ContactsSetBlocked_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCContactsServer is the server API for RPCContacts service.
// All implementations should embed UnimplementedRPCContactsServer
// for forward compatibility.
type RPCContactsServer interface {
	AccountGetContactSignUpNotification(context.Context, *TLAccountGetContactSignUpNotification) (*Bool, error)
	AccountSetContactSignUpNotification(context.Context, *TLAccountSetContactSignUpNotification) (*Bool, error)
	ContactsGetContactIDs(context.Context, *TLContactsGetContactIDs) (*Vector_Int, error)
	ContactsGetStatuses(context.Context, *TLContactsGetStatuses) (*Vector_ContactStatus, error)
	ContactsGetContacts(context.Context, *TLContactsGetContacts) (*Contacts_Contacts, error)
	ContactsImportContacts(context.Context, *TLContactsImportContacts) (*Contacts_ImportedContacts, error)
	ContactsDeleteContacts(context.Context, *TLContactsDeleteContacts) (*Updates, error)
	ContactsDeleteByPhones(context.Context, *TLContactsDeleteByPhones) (*Bool, error)
	ContactsBlock(context.Context, *TLContactsBlock) (*Bool, error)
	ContactsUnblock(context.Context, *TLContactsUnblock) (*Bool, error)
	ContactsGetBlocked(context.Context, *TLContactsGetBlocked) (*Contacts_Blocked, error)
	ContactsSearch(context.Context, *TLContactsSearch) (*Contacts_Found, error)
	ContactsGetTopPeers(context.Context, *TLContactsGetTopPeers) (*Contacts_TopPeers, error)
	ContactsResetTopPeerRating(context.Context, *TLContactsResetTopPeerRating) (*Bool, error)
	ContactsResetSaved(context.Context, *TLContactsResetSaved) (*Bool, error)
	ContactsGetSaved(context.Context, *TLContactsGetSaved) (*Vector_SavedContact, error)
	ContactsToggleTopPeers(context.Context, *TLContactsToggleTopPeers) (*Bool, error)
	ContactsAddContact(context.Context, *TLContactsAddContact) (*Updates, error)
	ContactsAcceptContact(context.Context, *TLContactsAcceptContact) (*Updates, error)
	ContactsGetLocated(context.Context, *TLContactsGetLocated) (*Updates, error)
	ContactsEditCloseFriends(context.Context, *TLContactsEditCloseFriends) (*Bool, error)
	ContactsSetBlocked(context.Context, *TLContactsSetBlocked) (*Bool, error)
}

// UnimplementedRPCContactsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCContactsServer struct{}

func (UnimplementedRPCContactsServer) AccountGetContactSignUpNotification(context.Context, *TLAccountGetContactSignUpNotification) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetContactSignUpNotification not implemented")
}
func (UnimplementedRPCContactsServer) AccountSetContactSignUpNotification(context.Context, *TLAccountSetContactSignUpNotification) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSetContactSignUpNotification not implemented")
}
func (UnimplementedRPCContactsServer) ContactsGetContactIDs(context.Context, *TLContactsGetContactIDs) (*Vector_Int, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsGetContactIDs not implemented")
}
func (UnimplementedRPCContactsServer) ContactsGetStatuses(context.Context, *TLContactsGetStatuses) (*Vector_ContactStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsGetStatuses not implemented")
}
func (UnimplementedRPCContactsServer) ContactsGetContacts(context.Context, *TLContactsGetContacts) (*Contacts_Contacts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsGetContacts not implemented")
}
func (UnimplementedRPCContactsServer) ContactsImportContacts(context.Context, *TLContactsImportContacts) (*Contacts_ImportedContacts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsImportContacts not implemented")
}
func (UnimplementedRPCContactsServer) ContactsDeleteContacts(context.Context, *TLContactsDeleteContacts) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsDeleteContacts not implemented")
}
func (UnimplementedRPCContactsServer) ContactsDeleteByPhones(context.Context, *TLContactsDeleteByPhones) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsDeleteByPhones not implemented")
}
func (UnimplementedRPCContactsServer) ContactsBlock(context.Context, *TLContactsBlock) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsBlock not implemented")
}
func (UnimplementedRPCContactsServer) ContactsUnblock(context.Context, *TLContactsUnblock) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsUnblock not implemented")
}
func (UnimplementedRPCContactsServer) ContactsGetBlocked(context.Context, *TLContactsGetBlocked) (*Contacts_Blocked, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsGetBlocked not implemented")
}
func (UnimplementedRPCContactsServer) ContactsSearch(context.Context, *TLContactsSearch) (*Contacts_Found, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsSearch not implemented")
}
func (UnimplementedRPCContactsServer) ContactsGetTopPeers(context.Context, *TLContactsGetTopPeers) (*Contacts_TopPeers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsGetTopPeers not implemented")
}
func (UnimplementedRPCContactsServer) ContactsResetTopPeerRating(context.Context, *TLContactsResetTopPeerRating) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsResetTopPeerRating not implemented")
}
func (UnimplementedRPCContactsServer) ContactsResetSaved(context.Context, *TLContactsResetSaved) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsResetSaved not implemented")
}
func (UnimplementedRPCContactsServer) ContactsGetSaved(context.Context, *TLContactsGetSaved) (*Vector_SavedContact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsGetSaved not implemented")
}
func (UnimplementedRPCContactsServer) ContactsToggleTopPeers(context.Context, *TLContactsToggleTopPeers) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsToggleTopPeers not implemented")
}
func (UnimplementedRPCContactsServer) ContactsAddContact(context.Context, *TLContactsAddContact) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsAddContact not implemented")
}
func (UnimplementedRPCContactsServer) ContactsAcceptContact(context.Context, *TLContactsAcceptContact) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsAcceptContact not implemented")
}
func (UnimplementedRPCContactsServer) ContactsGetLocated(context.Context, *TLContactsGetLocated) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsGetLocated not implemented")
}
func (UnimplementedRPCContactsServer) ContactsEditCloseFriends(context.Context, *TLContactsEditCloseFriends) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsEditCloseFriends not implemented")
}
func (UnimplementedRPCContactsServer) ContactsSetBlocked(context.Context, *TLContactsSetBlocked) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsSetBlocked not implemented")
}
func (UnimplementedRPCContactsServer) testEmbeddedByValue() {}

// UnsafeRPCContactsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCContactsServer will
// result in compilation errors.
type UnsafeRPCContactsServer interface {
	mustEmbedUnimplementedRPCContactsServer()
}

func RegisterRPCContactsServer(s grpc.ServiceRegistrar, srv RPCContactsServer) {
	// If the following call pancis, it indicates UnimplementedRPCContactsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCContacts_ServiceDesc, srv)
}

func _RPCContacts_AccountGetContactSignUpNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetContactSignUpNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).AccountGetContactSignUpNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCContacts_AccountGetContactSignUpNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).AccountGetContactSignUpNotification(ctx, req.(*TLAccountGetContactSignUpNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_AccountSetContactSignUpNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSetContactSignUpNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).AccountSetContactSignUpNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCContacts_AccountSetContactSignUpNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).AccountSetContactSignUpNotification(ctx, req.(*TLAccountSetContactSignUpNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsGetContactIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsGetContactIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsGetContactIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCContacts_ContactsGetContactIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsGetContactIDs(ctx, req.(*TLContactsGetContactIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsGetStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsGetStatuses)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsGetStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCContacts_ContactsGetStatuses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsGetStatuses(ctx, req.(*TLContactsGetStatuses))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsGetContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsGetContacts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsGetContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCContacts_ContactsGetContacts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsGetContacts(ctx, req.(*TLContactsGetContacts))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsImportContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsImportContacts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsImportContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCContacts_ContactsImportContacts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsImportContacts(ctx, req.(*TLContactsImportContacts))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsDeleteContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsDeleteContacts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsDeleteContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCContacts_ContactsDeleteContacts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsDeleteContacts(ctx, req.(*TLContactsDeleteContacts))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsDeleteByPhones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsDeleteByPhones)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsDeleteByPhones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCContacts_ContactsDeleteByPhones_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsDeleteByPhones(ctx, req.(*TLContactsDeleteByPhones))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCContacts_ContactsBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsBlock(ctx, req.(*TLContactsBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsUnblock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsUnblock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsUnblock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCContacts_ContactsUnblock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsUnblock(ctx, req.(*TLContactsUnblock))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsGetBlocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsGetBlocked)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsGetBlocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCContacts_ContactsGetBlocked_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsGetBlocked(ctx, req.(*TLContactsGetBlocked))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCContacts_ContactsSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsSearch(ctx, req.(*TLContactsSearch))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsGetTopPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsGetTopPeers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsGetTopPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCContacts_ContactsGetTopPeers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsGetTopPeers(ctx, req.(*TLContactsGetTopPeers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsResetTopPeerRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsResetTopPeerRating)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsResetTopPeerRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCContacts_ContactsResetTopPeerRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsResetTopPeerRating(ctx, req.(*TLContactsResetTopPeerRating))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsResetSaved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsResetSaved)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsResetSaved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCContacts_ContactsResetSaved_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsResetSaved(ctx, req.(*TLContactsResetSaved))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsGetSaved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsGetSaved)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsGetSaved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCContacts_ContactsGetSaved_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsGetSaved(ctx, req.(*TLContactsGetSaved))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsToggleTopPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsToggleTopPeers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsToggleTopPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCContacts_ContactsToggleTopPeers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsToggleTopPeers(ctx, req.(*TLContactsToggleTopPeers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsAddContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsAddContact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsAddContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCContacts_ContactsAddContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsAddContact(ctx, req.(*TLContactsAddContact))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsAcceptContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsAcceptContact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsAcceptContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCContacts_ContactsAcceptContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsAcceptContact(ctx, req.(*TLContactsAcceptContact))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsGetLocated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsGetLocated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsGetLocated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCContacts_ContactsGetLocated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsGetLocated(ctx, req.(*TLContactsGetLocated))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsEditCloseFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsEditCloseFriends)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsEditCloseFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCContacts_ContactsEditCloseFriends_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsEditCloseFriends(ctx, req.(*TLContactsEditCloseFriends))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsSetBlocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsSetBlocked)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsSetBlocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCContacts_ContactsSetBlocked_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsSetBlocked(ctx, req.(*TLContactsSetBlocked))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCContacts_ServiceDesc is the grpc.ServiceDesc for RPCContacts service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCContacts_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCContacts",
	HandlerType: (*RPCContactsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "account_getContactSignUpNotification",
			Handler:    _RPCContacts_AccountGetContactSignUpNotification_Handler,
		},
		{
			MethodName: "account_setContactSignUpNotification",
			Handler:    _RPCContacts_AccountSetContactSignUpNotification_Handler,
		},
		{
			MethodName: "contacts_getContactIDs",
			Handler:    _RPCContacts_ContactsGetContactIDs_Handler,
		},
		{
			MethodName: "contacts_getStatuses",
			Handler:    _RPCContacts_ContactsGetStatuses_Handler,
		},
		{
			MethodName: "contacts_getContacts",
			Handler:    _RPCContacts_ContactsGetContacts_Handler,
		},
		{
			MethodName: "contacts_importContacts",
			Handler:    _RPCContacts_ContactsImportContacts_Handler,
		},
		{
			MethodName: "contacts_deleteContacts",
			Handler:    _RPCContacts_ContactsDeleteContacts_Handler,
		},
		{
			MethodName: "contacts_deleteByPhones",
			Handler:    _RPCContacts_ContactsDeleteByPhones_Handler,
		},
		{
			MethodName: "contacts_block",
			Handler:    _RPCContacts_ContactsBlock_Handler,
		},
		{
			MethodName: "contacts_unblock",
			Handler:    _RPCContacts_ContactsUnblock_Handler,
		},
		{
			MethodName: "contacts_getBlocked",
			Handler:    _RPCContacts_ContactsGetBlocked_Handler,
		},
		{
			MethodName: "contacts_search",
			Handler:    _RPCContacts_ContactsSearch_Handler,
		},
		{
			MethodName: "contacts_getTopPeers",
			Handler:    _RPCContacts_ContactsGetTopPeers_Handler,
		},
		{
			MethodName: "contacts_resetTopPeerRating",
			Handler:    _RPCContacts_ContactsResetTopPeerRating_Handler,
		},
		{
			MethodName: "contacts_resetSaved",
			Handler:    _RPCContacts_ContactsResetSaved_Handler,
		},
		{
			MethodName: "contacts_getSaved",
			Handler:    _RPCContacts_ContactsGetSaved_Handler,
		},
		{
			MethodName: "contacts_toggleTopPeers",
			Handler:    _RPCContacts_ContactsToggleTopPeers_Handler,
		},
		{
			MethodName: "contacts_addContact",
			Handler:    _RPCContacts_ContactsAddContact_Handler,
		},
		{
			MethodName: "contacts_acceptContact",
			Handler:    _RPCContacts_ContactsAcceptContact_Handler,
		},
		{
			MethodName: "contacts_getLocated",
			Handler:    _RPCContacts_ContactsGetLocated_Handler,
		},
		{
			MethodName: "contacts_editCloseFriends",
			Handler:    _RPCContacts_ContactsEditCloseFriends_Handler,
		},
		{
			MethodName: "contacts_setBlocked",
			Handler:    _RPCContacts_ContactsSetBlocked_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCCustomEmojis_AccountGetDefaultProfilePhotoEmojis_FullMethodName = "/mtproto.RPCCustomEmojis/account_getDefaultProfilePhotoEmojis"
	RPCCustomEmojis_AccountGetDefaultGroupPhotoEmojis_FullMethodName   = "/mtproto.RPCCustomEmojis/account_getDefaultGroupPhotoEmojis"
	RPCCustomEmojis_MessagesGetCustomEmojiDocuments_FullMethodName     = "/mtproto.RPCCustomEmojis/messages_getCustomEmojiDocuments"
	RPCCustomEmojis_MessagesGetEmojiStickers_FullMethodName            = "/mtproto.RPCCustomEmojis/messages_getEmojiStickers"
	RPCCustomEmojis_MessagesGetFeaturedEmojiStickers_FullMethodName    = "/mtproto.RPCCustomEmojis/messages_getFeaturedEmojiStickers"
	RPCCustomEmojis_MessagesSearchCustomEmoji_FullMethodName           = "/mtproto.RPCCustomEmojis/messages_searchCustomEmoji"
)

// RPCCustomEmojisClient is the client API for RPCCustomEmojis service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCCustomEmojisClient interface {
	AccountGetDefaultProfilePhotoEmojis(ctx context.Context, in *TLAccountGetDefaultProfilePhotoEmojis, opts ...grpc.CallOption) (*EmojiList, error)
	AccountGetDefaultGroupPhotoEmojis(ctx context.Context, in *TLAccountGetDefaultGroupPhotoEmojis, opts ...grpc.CallOption) (*EmojiList, error)
	MessagesGetCustomEmojiDocuments(ctx context.Context, in *TLMessagesGetCustomEmojiDocuments, opts ...grpc.CallOption) (*Vector_Document, error)
	MessagesGetEmojiStickers(ctx context.Context, in *TLMessagesGetEmojiStickers, opts ...grpc.CallOption) (*Messages_AllStickers, error)
	MessagesGetFeaturedEmojiStickers(ctx context.Context, in *TLMessagesGetFeaturedEmojiStickers, opts ...grpc.CallOption) (*Messages_FeaturedStickers, error)
	MessagesSearchCustomEmoji(ctx context.Context, in *TLMessagesSearchCustomEmoji, opts ...grpc.CallOption) (*EmojiList, error)
}

type rPCCustomEmojisClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCCustomEmojisClient(cc grpc.ClientConnInterface) RPCCustomEmojisClient {
	return &rPCCustomEmojisClient{cc}
}

func (c *rPCCustomEmojisClient) AccountGetDefaultProfilePhotoEmojis(ctx context.Context, in *TLAccountGetDefaultProfilePhotoEmojis, opts ...grpc.CallOption) (*EmojiList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmojiList)
	err := c.cc.Invoke(ctx, RPCCustomEmojis_AccountGetDefaultProfilePhotoEmojis_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCCustomEmojisClient) AccountGetDefaultGroupPhotoEmojis(ctx context.Context, in *TLAccountGetDefaultGroupPhotoEmojis, opts ...grpc.CallOption) (*EmojiList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmojiList)
	err := c.cc.Invoke(ctx, RPCCustomEmojis_AccountGetDefaultGroupPhotoEmojis_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCCustomEmojisClient) MessagesGetCustomEmojiDocuments(ctx context.Context, in *TLMessagesGetCustomEmojiDocuments, opts ...grpc.CallOption) (*Vector_Document, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_Document)
	err := c.cc.Invoke(ctx, RPCCustomEmojis_MessagesGetCustomEmojiDocuments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCCustomEmojisClient) MessagesGetEmojiStickers(ctx context.Context, in *TLMessagesGetEmojiStickers, opts ...grpc.CallOption) (*Messages_AllStickers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_AllStickers)
	err := c.cc.Invoke(ctx, RPCCustomEmojis_MessagesGetEmojiStickers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCCustomEmojisClient) MessagesGetFeaturedEmojiStickers(ctx context.Context, in *TLMessagesGetFeaturedEmojiStickers, opts ...grpc.CallOption) (*Messages_FeaturedStickers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_FeaturedStickers)
	err := c.cc.Invoke(ctx, RPCCustomEmojis_MessagesGetFeaturedEmojiStickers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCCustomEmojisClient) MessagesSearchCustomEmoji(ctx context.Context, in *TLMessagesSearchCustomEmoji, opts ...grpc.CallOption) (*EmojiList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmojiList)
	err := c.cc.Invoke(ctx, RPCCustomEmojis_MessagesSearchCustomEmoji_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCCustomEmojisServer is the server API for RPCCustomEmojis service.
// All implementations should embed UnimplementedRPCCustomEmojisServer
// for forward compatibility.
type RPCCustomEmojisServer interface {
	AccountGetDefaultProfilePhotoEmojis(context.Context, *TLAccountGetDefaultProfilePhotoEmojis) (*EmojiList, error)
	AccountGetDefaultGroupPhotoEmojis(context.Context, *TLAccountGetDefaultGroupPhotoEmojis) (*EmojiList, error)
	MessagesGetCustomEmojiDocuments(context.Context, *TLMessagesGetCustomEmojiDocuments) (*Vector_Document, error)
	MessagesGetEmojiStickers(context.Context, *TLMessagesGetEmojiStickers) (*Messages_AllStickers, error)
	MessagesGetFeaturedEmojiStickers(context.Context, *TLMessagesGetFeaturedEmojiStickers) (*Messages_FeaturedStickers, error)
	MessagesSearchCustomEmoji(context.Context, *TLMessagesSearchCustomEmoji) (*EmojiList, error)
}

// UnimplementedRPCCustomEmojisServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCCustomEmojisServer struct{}

func (UnimplementedRPCCustomEmojisServer) AccountGetDefaultProfilePhotoEmojis(context.Context, *TLAccountGetDefaultProfilePhotoEmojis) (*EmojiList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetDefaultProfilePhotoEmojis not implemented")
}
func (UnimplementedRPCCustomEmojisServer) AccountGetDefaultGroupPhotoEmojis(context.Context, *TLAccountGetDefaultGroupPhotoEmojis) (*EmojiList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetDefaultGroupPhotoEmojis not implemented")
}
func (UnimplementedRPCCustomEmojisServer) MessagesGetCustomEmojiDocuments(context.Context, *TLMessagesGetCustomEmojiDocuments) (*Vector_Document, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetCustomEmojiDocuments not implemented")
}
func (UnimplementedRPCCustomEmojisServer) MessagesGetEmojiStickers(context.Context, *TLMessagesGetEmojiStickers) (*Messages_AllStickers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetEmojiStickers not implemented")
}
func (UnimplementedRPCCustomEmojisServer) MessagesGetFeaturedEmojiStickers(context.Context, *TLMessagesGetFeaturedEmojiStickers) (*Messages_FeaturedStickers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetFeaturedEmojiStickers not implemented")
}
func (UnimplementedRPCCustomEmojisServer) MessagesSearchCustomEmoji(context.Context, *TLMessagesSearchCustomEmoji) (*EmojiList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSearchCustomEmoji not implemented")
}
func (UnimplementedRPCCustomEmojisServer) testEmbeddedByValue() {}

// UnsafeRPCCustomEmojisServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCCustomEmojisServer will
// result in compilation errors.
type UnsafeRPCCustomEmojisServer interface {
	mustEmbedUnimplementedRPCCustomEmojisServer()
}

func RegisterRPCCustomEmojisServer(s grpc.ServiceRegistrar, srv RPCCustomEmojisServer) {
	// If the following call pancis, it indicates UnimplementedRPCCustomEmojisServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCCustomEmojis_ServiceDesc, srv)
}

func _RPCCustomEmojis_AccountGetDefaultProfilePhotoEmojis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetDefaultProfilePhotoEmojis)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCCustomEmojisServer).AccountGetDefaultProfilePhotoEmojis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCCustomEmojis_AccountGetDefaultProfilePhotoEmojis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCCustomEmojisServer).AccountGetDefaultProfilePhotoEmojis(ctx, req.(*TLAccountGetDefaultProfilePhotoEmojis))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCCustomEmojis_AccountGetDefaultGroupPhotoEmojis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetDefaultGroupPhotoEmojis)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCCustomEmojisServer).AccountGetDefaultGroupPhotoEmojis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCCustomEmojis_AccountGetDefaultGroupPhotoEmojis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCCustomEmojisServer).AccountGetDefaultGroupPhotoEmojis(ctx, req.(*TLAccountGetDefaultGroupPhotoEmojis))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCCustomEmojis_MessagesGetCustomEmojiDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetCustomEmojiDocuments)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCCustomEmojisServer).MessagesGetCustomEmojiDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCCustomEmojis_MessagesGetCustomEmojiDocuments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCCustomEmojisServer).MessagesGetCustomEmojiDocuments(ctx, req.(*TLMessagesGetCustomEmojiDocuments))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCCustomEmojis_MessagesGetEmojiStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetEmojiStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCCustomEmojisServer).MessagesGetEmojiStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCCustomEmojis_MessagesGetEmojiStickers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCCustomEmojisServer).MessagesGetEmojiStickers(ctx, req.(*TLMessagesGetEmojiStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCCustomEmojis_MessagesGetFeaturedEmojiStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetFeaturedEmojiStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCCustomEmojisServer).MessagesGetFeaturedEmojiStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCCustomEmojis_MessagesGetFeaturedEmojiStickers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCCustomEmojisServer).MessagesGetFeaturedEmojiStickers(ctx, req.(*TLMessagesGetFeaturedEmojiStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCCustomEmojis_MessagesSearchCustomEmoji_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSearchCustomEmoji)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCCustomEmojisServer).MessagesSearchCustomEmoji(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCCustomEmojis_MessagesSearchCustomEmoji_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCCustomEmojisServer).MessagesSearchCustomEmoji(ctx, req.(*TLMessagesSearchCustomEmoji))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCCustomEmojis_ServiceDesc is the grpc.ServiceDesc for RPCCustomEmojis service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCCustomEmojis_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCCustomEmojis",
	HandlerType: (*RPCCustomEmojisServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "account_getDefaultProfilePhotoEmojis",
			Handler:    _RPCCustomEmojis_AccountGetDefaultProfilePhotoEmojis_Handler,
		},
		{
			MethodName: "account_getDefaultGroupPhotoEmojis",
			Handler:    _RPCCustomEmojis_AccountGetDefaultGroupPhotoEmojis_Handler,
		},
		{
			MethodName: "messages_getCustomEmojiDocuments",
			Handler:    _RPCCustomEmojis_MessagesGetCustomEmojiDocuments_Handler,
		},
		{
			MethodName: "messages_getEmojiStickers",
			Handler:    _RPCCustomEmojis_MessagesGetEmojiStickers_Handler,
		},
		{
			MethodName: "messages_getFeaturedEmojiStickers",
			Handler:    _RPCCustomEmojis_MessagesGetFeaturedEmojiStickers_Handler,
		},
		{
			MethodName: "messages_searchCustomEmoji",
			Handler:    _RPCCustomEmojis_MessagesSearchCustomEmoji_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCDeepLinks_MessagesStartBot_FullMethodName    = "/mtproto.RPCDeepLinks/messages_startBot"
	RPCDeepLinks_HelpGetRecentMeUrls_FullMethodName = "/mtproto.RPCDeepLinks/help_getRecentMeUrls"
	RPCDeepLinks_HelpGetDeepLinkInfo_FullMethodName = "/mtproto.RPCDeepLinks/help_getDeepLinkInfo"
)

// RPCDeepLinksClient is the client API for RPCDeepLinks service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCDeepLinksClient interface {
	MessagesStartBot(ctx context.Context, in *TLMessagesStartBot, opts ...grpc.CallOption) (*Updates, error)
	HelpGetRecentMeUrls(ctx context.Context, in *TLHelpGetRecentMeUrls, opts ...grpc.CallOption) (*Help_RecentMeUrls, error)
	HelpGetDeepLinkInfo(ctx context.Context, in *TLHelpGetDeepLinkInfo, opts ...grpc.CallOption) (*Help_DeepLinkInfo, error)
}

type rPCDeepLinksClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCDeepLinksClient(cc grpc.ClientConnInterface) RPCDeepLinksClient {
	return &rPCDeepLinksClient{cc}
}

func (c *rPCDeepLinksClient) MessagesStartBot(ctx context.Context, in *TLMessagesStartBot, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCDeepLinks_MessagesStartBot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDeepLinksClient) HelpGetRecentMeUrls(ctx context.Context, in *TLHelpGetRecentMeUrls, opts ...grpc.CallOption) (*Help_RecentMeUrls, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Help_RecentMeUrls)
	err := c.cc.Invoke(ctx, RPCDeepLinks_HelpGetRecentMeUrls_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDeepLinksClient) HelpGetDeepLinkInfo(ctx context.Context, in *TLHelpGetDeepLinkInfo, opts ...grpc.CallOption) (*Help_DeepLinkInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Help_DeepLinkInfo)
	err := c.cc.Invoke(ctx, RPCDeepLinks_HelpGetDeepLinkInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCDeepLinksServer is the server API for RPCDeepLinks service.
// All implementations should embed UnimplementedRPCDeepLinksServer
// for forward compatibility.
type RPCDeepLinksServer interface {
	MessagesStartBot(context.Context, *TLMessagesStartBot) (*Updates, error)
	HelpGetRecentMeUrls(context.Context, *TLHelpGetRecentMeUrls) (*Help_RecentMeUrls, error)
	HelpGetDeepLinkInfo(context.Context, *TLHelpGetDeepLinkInfo) (*Help_DeepLinkInfo, error)
}

// UnimplementedRPCDeepLinksServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCDeepLinksServer struct{}

func (UnimplementedRPCDeepLinksServer) MessagesStartBot(context.Context, *TLMessagesStartBot) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesStartBot not implemented")
}
func (UnimplementedRPCDeepLinksServer) HelpGetRecentMeUrls(context.Context, *TLHelpGetRecentMeUrls) (*Help_RecentMeUrls, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetRecentMeUrls not implemented")
}
func (UnimplementedRPCDeepLinksServer) HelpGetDeepLinkInfo(context.Context, *TLHelpGetDeepLinkInfo) (*Help_DeepLinkInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetDeepLinkInfo not implemented")
}
func (UnimplementedRPCDeepLinksServer) testEmbeddedByValue() {}

// UnsafeRPCDeepLinksServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCDeepLinksServer will
// result in compilation errors.
type UnsafeRPCDeepLinksServer interface {
	mustEmbedUnimplementedRPCDeepLinksServer()
}

func RegisterRPCDeepLinksServer(s grpc.ServiceRegistrar, srv RPCDeepLinksServer) {
	// If the following call pancis, it indicates UnimplementedRPCDeepLinksServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCDeepLinks_ServiceDesc, srv)
}

func _RPCDeepLinks_MessagesStartBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesStartBot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDeepLinksServer).MessagesStartBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDeepLinks_MessagesStartBot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDeepLinksServer).MessagesStartBot(ctx, req.(*TLMessagesStartBot))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDeepLinks_HelpGetRecentMeUrls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetRecentMeUrls)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDeepLinksServer).HelpGetRecentMeUrls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDeepLinks_HelpGetRecentMeUrls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDeepLinksServer).HelpGetRecentMeUrls(ctx, req.(*TLHelpGetRecentMeUrls))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDeepLinks_HelpGetDeepLinkInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetDeepLinkInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDeepLinksServer).HelpGetDeepLinkInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDeepLinks_HelpGetDeepLinkInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDeepLinksServer).HelpGetDeepLinkInfo(ctx, req.(*TLHelpGetDeepLinkInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCDeepLinks_ServiceDesc is the grpc.ServiceDesc for RPCDeepLinks service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCDeepLinks_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCDeepLinks",
	HandlerType: (*RPCDeepLinksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "messages_startBot",
			Handler:    _RPCDeepLinks_MessagesStartBot_Handler,
		},
		{
			MethodName: "help_getRecentMeUrls",
			Handler:    _RPCDeepLinks_HelpGetRecentMeUrls_Handler,
		},
		{
			MethodName: "help_getDeepLinkInfo",
			Handler:    _RPCDeepLinks_HelpGetDeepLinkInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCDialogs_MessagesGetDialogs_FullMethodName                 = "/mtproto.RPCDialogs/messages_getDialogs"
	RPCDialogs_MessagesSetTyping_FullMethodName                  = "/mtproto.RPCDialogs/messages_setTyping"
	RPCDialogs_MessagesGetPeerSettings_FullMethodName            = "/mtproto.RPCDialogs/messages_getPeerSettings"
	RPCDialogs_MessagesGetPeerDialogs_FullMethodName             = "/mtproto.RPCDialogs/messages_getPeerDialogs"
	RPCDialogs_MessagesToggleDialogPin_FullMethodName            = "/mtproto.RPCDialogs/messages_toggleDialogPin"
	RPCDialogs_MessagesReorderPinnedDialogs_FullMethodName       = "/mtproto.RPCDialogs/messages_reorderPinnedDialogs"
	RPCDialogs_MessagesGetPinnedDialogs_FullMethodName           = "/mtproto.RPCDialogs/messages_getPinnedDialogs"
	RPCDialogs_MessagesSendScreenshotNotification_FullMethodName = "/mtproto.RPCDialogs/messages_sendScreenshotNotification"
	RPCDialogs_MessagesMarkDialogUnread_FullMethodName           = "/mtproto.RPCDialogs/messages_markDialogUnread"
	RPCDialogs_MessagesGetDialogUnreadMarks_FullMethodName       = "/mtproto.RPCDialogs/messages_getDialogUnreadMarks"
	RPCDialogs_MessagesGetOnlines_FullMethodName                 = "/mtproto.RPCDialogs/messages_getOnlines"
	RPCDialogs_MessagesHidePeerSettingsBar_FullMethodName        = "/mtproto.RPCDialogs/messages_hidePeerSettingsBar"
	RPCDialogs_MessagesSetHistoryTTL_FullMethodName              = "/mtproto.RPCDialogs/messages_setHistoryTTL"
)

// RPCDialogsClient is the client API for RPCDialogs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCDialogsClient interface {
	MessagesGetDialogs(ctx context.Context, in *TLMessagesGetDialogs, opts ...grpc.CallOption) (*Messages_Dialogs, error)
	MessagesSetTyping(ctx context.Context, in *TLMessagesSetTyping, opts ...grpc.CallOption) (*Bool, error)
	MessagesGetPeerSettings(ctx context.Context, in *TLMessagesGetPeerSettings, opts ...grpc.CallOption) (*Messages_PeerSettings, error)
	MessagesGetPeerDialogs(ctx context.Context, in *TLMessagesGetPeerDialogs, opts ...grpc.CallOption) (*Messages_PeerDialogs, error)
	MessagesToggleDialogPin(ctx context.Context, in *TLMessagesToggleDialogPin, opts ...grpc.CallOption) (*Bool, error)
	MessagesReorderPinnedDialogs(ctx context.Context, in *TLMessagesReorderPinnedDialogs, opts ...grpc.CallOption) (*Bool, error)
	MessagesGetPinnedDialogs(ctx context.Context, in *TLMessagesGetPinnedDialogs, opts ...grpc.CallOption) (*Messages_PeerDialogs, error)
	MessagesSendScreenshotNotification(ctx context.Context, in *TLMessagesSendScreenshotNotification, opts ...grpc.CallOption) (*Updates, error)
	MessagesMarkDialogUnread(ctx context.Context, in *TLMessagesMarkDialogUnread, opts ...grpc.CallOption) (*Bool, error)
	MessagesGetDialogUnreadMarks(ctx context.Context, in *TLMessagesGetDialogUnreadMarks, opts ...grpc.CallOption) (*Vector_DialogPeer, error)
	MessagesGetOnlines(ctx context.Context, in *TLMessagesGetOnlines, opts ...grpc.CallOption) (*ChatOnlines, error)
	MessagesHidePeerSettingsBar(ctx context.Context, in *TLMessagesHidePeerSettingsBar, opts ...grpc.CallOption) (*Bool, error)
	MessagesSetHistoryTTL(ctx context.Context, in *TLMessagesSetHistoryTTL, opts ...grpc.CallOption) (*Updates, error)
}

type rPCDialogsClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCDialogsClient(cc grpc.ClientConnInterface) RPCDialogsClient {
	return &rPCDialogsClient{cc}
}

func (c *rPCDialogsClient) MessagesGetDialogs(ctx context.Context, in *TLMessagesGetDialogs, opts ...grpc.CallOption) (*Messages_Dialogs, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_Dialogs)
	err := c.cc.Invoke(ctx, RPCDialogs_MessagesGetDialogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogsClient) MessagesSetTyping(ctx context.Context, in *TLMessagesSetTyping, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCDialogs_MessagesSetTyping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogsClient) MessagesGetPeerSettings(ctx context.Context, in *TLMessagesGetPeerSettings, opts ...grpc.CallOption) (*Messages_PeerSettings, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_PeerSettings)
	err := c.cc.Invoke(ctx, RPCDialogs_MessagesGetPeerSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogsClient) MessagesGetPeerDialogs(ctx context.Context, in *TLMessagesGetPeerDialogs, opts ...grpc.CallOption) (*Messages_PeerDialogs, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_PeerDialogs)
	err := c.cc.Invoke(ctx, RPCDialogs_MessagesGetPeerDialogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogsClient) MessagesToggleDialogPin(ctx context.Context, in *TLMessagesToggleDialogPin, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCDialogs_MessagesToggleDialogPin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogsClient) MessagesReorderPinnedDialogs(ctx context.Context, in *TLMessagesReorderPinnedDialogs, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCDialogs_MessagesReorderPinnedDialogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogsClient) MessagesGetPinnedDialogs(ctx context.Context, in *TLMessagesGetPinnedDialogs, opts ...grpc.CallOption) (*Messages_PeerDialogs, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_PeerDialogs)
	err := c.cc.Invoke(ctx, RPCDialogs_MessagesGetPinnedDialogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogsClient) MessagesSendScreenshotNotification(ctx context.Context, in *TLMessagesSendScreenshotNotification, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCDialogs_MessagesSendScreenshotNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogsClient) MessagesMarkDialogUnread(ctx context.Context, in *TLMessagesMarkDialogUnread, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCDialogs_MessagesMarkDialogUnread_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogsClient) MessagesGetDialogUnreadMarks(ctx context.Context, in *TLMessagesGetDialogUnreadMarks, opts ...grpc.CallOption) (*Vector_DialogPeer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_DialogPeer)
	err := c.cc.Invoke(ctx, RPCDialogs_MessagesGetDialogUnreadMarks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogsClient) MessagesGetOnlines(ctx context.Context, in *TLMessagesGetOnlines, opts ...grpc.CallOption) (*ChatOnlines, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChatOnlines)
	err := c.cc.Invoke(ctx, RPCDialogs_MessagesGetOnlines_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogsClient) MessagesHidePeerSettingsBar(ctx context.Context, in *TLMessagesHidePeerSettingsBar, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCDialogs_MessagesHidePeerSettingsBar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogsClient) MessagesSetHistoryTTL(ctx context.Context, in *TLMessagesSetHistoryTTL, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCDialogs_MessagesSetHistoryTTL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCDialogsServer is the server API for RPCDialogs service.
// All implementations should embed UnimplementedRPCDialogsServer
// for forward compatibility.
type RPCDialogsServer interface {
	MessagesGetDialogs(context.Context, *TLMessagesGetDialogs) (*Messages_Dialogs, error)
	MessagesSetTyping(context.Context, *TLMessagesSetTyping) (*Bool, error)
	MessagesGetPeerSettings(context.Context, *TLMessagesGetPeerSettings) (*Messages_PeerSettings, error)
	MessagesGetPeerDialogs(context.Context, *TLMessagesGetPeerDialogs) (*Messages_PeerDialogs, error)
	MessagesToggleDialogPin(context.Context, *TLMessagesToggleDialogPin) (*Bool, error)
	MessagesReorderPinnedDialogs(context.Context, *TLMessagesReorderPinnedDialogs) (*Bool, error)
	MessagesGetPinnedDialogs(context.Context, *TLMessagesGetPinnedDialogs) (*Messages_PeerDialogs, error)
	MessagesSendScreenshotNotification(context.Context, *TLMessagesSendScreenshotNotification) (*Updates, error)
	MessagesMarkDialogUnread(context.Context, *TLMessagesMarkDialogUnread) (*Bool, error)
	MessagesGetDialogUnreadMarks(context.Context, *TLMessagesGetDialogUnreadMarks) (*Vector_DialogPeer, error)
	MessagesGetOnlines(context.Context, *TLMessagesGetOnlines) (*ChatOnlines, error)
	MessagesHidePeerSettingsBar(context.Context, *TLMessagesHidePeerSettingsBar) (*Bool, error)
	MessagesSetHistoryTTL(context.Context, *TLMessagesSetHistoryTTL) (*Updates, error)
}

// UnimplementedRPCDialogsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCDialogsServer struct{}

func (UnimplementedRPCDialogsServer) MessagesGetDialogs(context.Context, *TLMessagesGetDialogs) (*Messages_Dialogs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetDialogs not implemented")
}
func (UnimplementedRPCDialogsServer) MessagesSetTyping(context.Context, *TLMessagesSetTyping) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSetTyping not implemented")
}
func (UnimplementedRPCDialogsServer) MessagesGetPeerSettings(context.Context, *TLMessagesGetPeerSettings) (*Messages_PeerSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetPeerSettings not implemented")
}
func (UnimplementedRPCDialogsServer) MessagesGetPeerDialogs(context.Context, *TLMessagesGetPeerDialogs) (*Messages_PeerDialogs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetPeerDialogs not implemented")
}
func (UnimplementedRPCDialogsServer) MessagesToggleDialogPin(context.Context, *TLMessagesToggleDialogPin) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesToggleDialogPin not implemented")
}
func (UnimplementedRPCDialogsServer) MessagesReorderPinnedDialogs(context.Context, *TLMessagesReorderPinnedDialogs) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReorderPinnedDialogs not implemented")
}
func (UnimplementedRPCDialogsServer) MessagesGetPinnedDialogs(context.Context, *TLMessagesGetPinnedDialogs) (*Messages_PeerDialogs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetPinnedDialogs not implemented")
}
func (UnimplementedRPCDialogsServer) MessagesSendScreenshotNotification(context.Context, *TLMessagesSendScreenshotNotification) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendScreenshotNotification not implemented")
}
func (UnimplementedRPCDialogsServer) MessagesMarkDialogUnread(context.Context, *TLMessagesMarkDialogUnread) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesMarkDialogUnread not implemented")
}
func (UnimplementedRPCDialogsServer) MessagesGetDialogUnreadMarks(context.Context, *TLMessagesGetDialogUnreadMarks) (*Vector_DialogPeer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetDialogUnreadMarks not implemented")
}
func (UnimplementedRPCDialogsServer) MessagesGetOnlines(context.Context, *TLMessagesGetOnlines) (*ChatOnlines, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetOnlines not implemented")
}
func (UnimplementedRPCDialogsServer) MessagesHidePeerSettingsBar(context.Context, *TLMessagesHidePeerSettingsBar) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesHidePeerSettingsBar not implemented")
}
func (UnimplementedRPCDialogsServer) MessagesSetHistoryTTL(context.Context, *TLMessagesSetHistoryTTL) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSetHistoryTTL not implemented")
}
func (UnimplementedRPCDialogsServer) testEmbeddedByValue() {}

// UnsafeRPCDialogsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCDialogsServer will
// result in compilation errors.
type UnsafeRPCDialogsServer interface {
	mustEmbedUnimplementedRPCDialogsServer()
}

func RegisterRPCDialogsServer(s grpc.ServiceRegistrar, srv RPCDialogsServer) {
	// If the following call pancis, it indicates UnimplementedRPCDialogsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCDialogs_ServiceDesc, srv)
}

func _RPCDialogs_MessagesGetDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetDialogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogsServer).MessagesGetDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialogs_MessagesGetDialogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogsServer).MessagesGetDialogs(ctx, req.(*TLMessagesGetDialogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialogs_MessagesSetTyping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSetTyping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogsServer).MessagesSetTyping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialogs_MessagesSetTyping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogsServer).MessagesSetTyping(ctx, req.(*TLMessagesSetTyping))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialogs_MessagesGetPeerSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetPeerSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogsServer).MessagesGetPeerSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialogs_MessagesGetPeerSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogsServer).MessagesGetPeerSettings(ctx, req.(*TLMessagesGetPeerSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialogs_MessagesGetPeerDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetPeerDialogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogsServer).MessagesGetPeerDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialogs_MessagesGetPeerDialogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogsServer).MessagesGetPeerDialogs(ctx, req.(*TLMessagesGetPeerDialogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialogs_MessagesToggleDialogPin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesToggleDialogPin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogsServer).MessagesToggleDialogPin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialogs_MessagesToggleDialogPin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogsServer).MessagesToggleDialogPin(ctx, req.(*TLMessagesToggleDialogPin))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialogs_MessagesReorderPinnedDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReorderPinnedDialogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogsServer).MessagesReorderPinnedDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialogs_MessagesReorderPinnedDialogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogsServer).MessagesReorderPinnedDialogs(ctx, req.(*TLMessagesReorderPinnedDialogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialogs_MessagesGetPinnedDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetPinnedDialogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogsServer).MessagesGetPinnedDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialogs_MessagesGetPinnedDialogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogsServer).MessagesGetPinnedDialogs(ctx, req.(*TLMessagesGetPinnedDialogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialogs_MessagesSendScreenshotNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendScreenshotNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogsServer).MessagesSendScreenshotNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialogs_MessagesSendScreenshotNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogsServer).MessagesSendScreenshotNotification(ctx, req.(*TLMessagesSendScreenshotNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialogs_MessagesMarkDialogUnread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesMarkDialogUnread)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogsServer).MessagesMarkDialogUnread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialogs_MessagesMarkDialogUnread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogsServer).MessagesMarkDialogUnread(ctx, req.(*TLMessagesMarkDialogUnread))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialogs_MessagesGetDialogUnreadMarks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetDialogUnreadMarks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogsServer).MessagesGetDialogUnreadMarks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialogs_MessagesGetDialogUnreadMarks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogsServer).MessagesGetDialogUnreadMarks(ctx, req.(*TLMessagesGetDialogUnreadMarks))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialogs_MessagesGetOnlines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetOnlines)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogsServer).MessagesGetOnlines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialogs_MessagesGetOnlines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogsServer).MessagesGetOnlines(ctx, req.(*TLMessagesGetOnlines))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialogs_MessagesHidePeerSettingsBar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesHidePeerSettingsBar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogsServer).MessagesHidePeerSettingsBar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialogs_MessagesHidePeerSettingsBar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogsServer).MessagesHidePeerSettingsBar(ctx, req.(*TLMessagesHidePeerSettingsBar))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialogs_MessagesSetHistoryTTL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSetHistoryTTL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogsServer).MessagesSetHistoryTTL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialogs_MessagesSetHistoryTTL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogsServer).MessagesSetHistoryTTL(ctx, req.(*TLMessagesSetHistoryTTL))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCDialogs_ServiceDesc is the grpc.ServiceDesc for RPCDialogs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCDialogs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCDialogs",
	HandlerType: (*RPCDialogsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "messages_getDialogs",
			Handler:    _RPCDialogs_MessagesGetDialogs_Handler,
		},
		{
			MethodName: "messages_setTyping",
			Handler:    _RPCDialogs_MessagesSetTyping_Handler,
		},
		{
			MethodName: "messages_getPeerSettings",
			Handler:    _RPCDialogs_MessagesGetPeerSettings_Handler,
		},
		{
			MethodName: "messages_getPeerDialogs",
			Handler:    _RPCDialogs_MessagesGetPeerDialogs_Handler,
		},
		{
			MethodName: "messages_toggleDialogPin",
			Handler:    _RPCDialogs_MessagesToggleDialogPin_Handler,
		},
		{
			MethodName: "messages_reorderPinnedDialogs",
			Handler:    _RPCDialogs_MessagesReorderPinnedDialogs_Handler,
		},
		{
			MethodName: "messages_getPinnedDialogs",
			Handler:    _RPCDialogs_MessagesGetPinnedDialogs_Handler,
		},
		{
			MethodName: "messages_sendScreenshotNotification",
			Handler:    _RPCDialogs_MessagesSendScreenshotNotification_Handler,
		},
		{
			MethodName: "messages_markDialogUnread",
			Handler:    _RPCDialogs_MessagesMarkDialogUnread_Handler,
		},
		{
			MethodName: "messages_getDialogUnreadMarks",
			Handler:    _RPCDialogs_MessagesGetDialogUnreadMarks_Handler,
		},
		{
			MethodName: "messages_getOnlines",
			Handler:    _RPCDialogs_MessagesGetOnlines_Handler,
		},
		{
			MethodName: "messages_hidePeerSettingsBar",
			Handler:    _RPCDialogs_MessagesHidePeerSettingsBar_Handler,
		},
		{
			MethodName: "messages_setHistoryTTL",
			Handler:    _RPCDialogs_MessagesSetHistoryTTL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCDrafts_MessagesSaveDraft_FullMethodName      = "/mtproto.RPCDrafts/messages_saveDraft"
	RPCDrafts_MessagesGetAllDrafts_FullMethodName   = "/mtproto.RPCDrafts/messages_getAllDrafts"
	RPCDrafts_MessagesClearAllDrafts_FullMethodName = "/mtproto.RPCDrafts/messages_clearAllDrafts"
)

// RPCDraftsClient is the client API for RPCDrafts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCDraftsClient interface {
	MessagesSaveDraft(ctx context.Context, in *TLMessagesSaveDraft, opts ...grpc.CallOption) (*Bool, error)
	MessagesGetAllDrafts(ctx context.Context, in *TLMessagesGetAllDrafts, opts ...grpc.CallOption) (*Updates, error)
	MessagesClearAllDrafts(ctx context.Context, in *TLMessagesClearAllDrafts, opts ...grpc.CallOption) (*Bool, error)
}

type rPCDraftsClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCDraftsClient(cc grpc.ClientConnInterface) RPCDraftsClient {
	return &rPCDraftsClient{cc}
}

func (c *rPCDraftsClient) MessagesSaveDraft(ctx context.Context, in *TLMessagesSaveDraft, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCDrafts_MessagesSaveDraft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDraftsClient) MessagesGetAllDrafts(ctx context.Context, in *TLMessagesGetAllDrafts, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCDrafts_MessagesGetAllDrafts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDraftsClient) MessagesClearAllDrafts(ctx context.Context, in *TLMessagesClearAllDrafts, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCDrafts_MessagesClearAllDrafts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCDraftsServer is the server API for RPCDrafts service.
// All implementations should embed UnimplementedRPCDraftsServer
// for forward compatibility.
type RPCDraftsServer interface {
	MessagesSaveDraft(context.Context, *TLMessagesSaveDraft) (*Bool, error)
	MessagesGetAllDrafts(context.Context, *TLMessagesGetAllDrafts) (*Updates, error)
	MessagesClearAllDrafts(context.Context, *TLMessagesClearAllDrafts) (*Bool, error)
}

// UnimplementedRPCDraftsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCDraftsServer struct{}

func (UnimplementedRPCDraftsServer) MessagesSaveDraft(context.Context, *TLMessagesSaveDraft) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSaveDraft not implemented")
}
func (UnimplementedRPCDraftsServer) MessagesGetAllDrafts(context.Context, *TLMessagesGetAllDrafts) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetAllDrafts not implemented")
}
func (UnimplementedRPCDraftsServer) MessagesClearAllDrafts(context.Context, *TLMessagesClearAllDrafts) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesClearAllDrafts not implemented")
}
func (UnimplementedRPCDraftsServer) testEmbeddedByValue() {}

// UnsafeRPCDraftsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCDraftsServer will
// result in compilation errors.
type UnsafeRPCDraftsServer interface {
	mustEmbedUnimplementedRPCDraftsServer()
}

func RegisterRPCDraftsServer(s grpc.ServiceRegistrar, srv RPCDraftsServer) {
	// If the following call pancis, it indicates UnimplementedRPCDraftsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCDrafts_ServiceDesc, srv)
}

func _RPCDrafts_MessagesSaveDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSaveDraft)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDraftsServer).MessagesSaveDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDrafts_MessagesSaveDraft_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDraftsServer).MessagesSaveDraft(ctx, req.(*TLMessagesSaveDraft))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDrafts_MessagesGetAllDrafts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetAllDrafts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDraftsServer).MessagesGetAllDrafts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDrafts_MessagesGetAllDrafts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDraftsServer).MessagesGetAllDrafts(ctx, req.(*TLMessagesGetAllDrafts))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDrafts_MessagesClearAllDrafts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesClearAllDrafts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDraftsServer).MessagesClearAllDrafts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDrafts_MessagesClearAllDrafts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDraftsServer).MessagesClearAllDrafts(ctx, req.(*TLMessagesClearAllDrafts))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCDrafts_ServiceDesc is the grpc.ServiceDesc for RPCDrafts service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCDrafts_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCDrafts",
	HandlerType: (*RPCDraftsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "messages_saveDraft",
			Handler:    _RPCDrafts_MessagesSaveDraft_Handler,
		},
		{
			MethodName: "messages_getAllDrafts",
			Handler:    _RPCDrafts_MessagesGetAllDrafts_Handler,
		},
		{
			MethodName: "messages_clearAllDrafts",
			Handler:    _RPCDrafts_MessagesClearAllDrafts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCEmoji_MessagesGetEmojiKeywords_FullMethodName           = "/mtproto.RPCEmoji/messages_getEmojiKeywords"
	RPCEmoji_MessagesGetEmojiKeywordsDifference_FullMethodName = "/mtproto.RPCEmoji/messages_getEmojiKeywordsDifference"
	RPCEmoji_MessagesGetEmojiKeywordsLanguages_FullMethodName  = "/mtproto.RPCEmoji/messages_getEmojiKeywordsLanguages"
	RPCEmoji_MessagesGetEmojiURL_FullMethodName                = "/mtproto.RPCEmoji/messages_getEmojiURL"
)

// RPCEmojiClient is the client API for RPCEmoji service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCEmojiClient interface {
	MessagesGetEmojiKeywords(ctx context.Context, in *TLMessagesGetEmojiKeywords, opts ...grpc.CallOption) (*EmojiKeywordsDifference, error)
	MessagesGetEmojiKeywordsDifference(ctx context.Context, in *TLMessagesGetEmojiKeywordsDifference, opts ...grpc.CallOption) (*EmojiKeywordsDifference, error)
	MessagesGetEmojiKeywordsLanguages(ctx context.Context, in *TLMessagesGetEmojiKeywordsLanguages, opts ...grpc.CallOption) (*Vector_EmojiLanguage, error)
	MessagesGetEmojiURL(ctx context.Context, in *TLMessagesGetEmojiURL, opts ...grpc.CallOption) (*EmojiURL, error)
}

type rPCEmojiClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCEmojiClient(cc grpc.ClientConnInterface) RPCEmojiClient {
	return &rPCEmojiClient{cc}
}

func (c *rPCEmojiClient) MessagesGetEmojiKeywords(ctx context.Context, in *TLMessagesGetEmojiKeywords, opts ...grpc.CallOption) (*EmojiKeywordsDifference, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmojiKeywordsDifference)
	err := c.cc.Invoke(ctx, RPCEmoji_MessagesGetEmojiKeywords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCEmojiClient) MessagesGetEmojiKeywordsDifference(ctx context.Context, in *TLMessagesGetEmojiKeywordsDifference, opts ...grpc.CallOption) (*EmojiKeywordsDifference, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmojiKeywordsDifference)
	err := c.cc.Invoke(ctx, RPCEmoji_MessagesGetEmojiKeywordsDifference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCEmojiClient) MessagesGetEmojiKeywordsLanguages(ctx context.Context, in *TLMessagesGetEmojiKeywordsLanguages, opts ...grpc.CallOption) (*Vector_EmojiLanguage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_EmojiLanguage)
	err := c.cc.Invoke(ctx, RPCEmoji_MessagesGetEmojiKeywordsLanguages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCEmojiClient) MessagesGetEmojiURL(ctx context.Context, in *TLMessagesGetEmojiURL, opts ...grpc.CallOption) (*EmojiURL, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmojiURL)
	err := c.cc.Invoke(ctx, RPCEmoji_MessagesGetEmojiURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCEmojiServer is the server API for RPCEmoji service.
// All implementations should embed UnimplementedRPCEmojiServer
// for forward compatibility.
type RPCEmojiServer interface {
	MessagesGetEmojiKeywords(context.Context, *TLMessagesGetEmojiKeywords) (*EmojiKeywordsDifference, error)
	MessagesGetEmojiKeywordsDifference(context.Context, *TLMessagesGetEmojiKeywordsDifference) (*EmojiKeywordsDifference, error)
	MessagesGetEmojiKeywordsLanguages(context.Context, *TLMessagesGetEmojiKeywordsLanguages) (*Vector_EmojiLanguage, error)
	MessagesGetEmojiURL(context.Context, *TLMessagesGetEmojiURL) (*EmojiURL, error)
}

// UnimplementedRPCEmojiServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCEmojiServer struct{}

func (UnimplementedRPCEmojiServer) MessagesGetEmojiKeywords(context.Context, *TLMessagesGetEmojiKeywords) (*EmojiKeywordsDifference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetEmojiKeywords not implemented")
}
func (UnimplementedRPCEmojiServer) MessagesGetEmojiKeywordsDifference(context.Context, *TLMessagesGetEmojiKeywordsDifference) (*EmojiKeywordsDifference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetEmojiKeywordsDifference not implemented")
}
func (UnimplementedRPCEmojiServer) MessagesGetEmojiKeywordsLanguages(context.Context, *TLMessagesGetEmojiKeywordsLanguages) (*Vector_EmojiLanguage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetEmojiKeywordsLanguages not implemented")
}
func (UnimplementedRPCEmojiServer) MessagesGetEmojiURL(context.Context, *TLMessagesGetEmojiURL) (*EmojiURL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetEmojiURL not implemented")
}
func (UnimplementedRPCEmojiServer) testEmbeddedByValue() {}

// UnsafeRPCEmojiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCEmojiServer will
// result in compilation errors.
type UnsafeRPCEmojiServer interface {
	mustEmbedUnimplementedRPCEmojiServer()
}

func RegisterRPCEmojiServer(s grpc.ServiceRegistrar, srv RPCEmojiServer) {
	// If the following call pancis, it indicates UnimplementedRPCEmojiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCEmoji_ServiceDesc, srv)
}

func _RPCEmoji_MessagesGetEmojiKeywords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetEmojiKeywords)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCEmojiServer).MessagesGetEmojiKeywords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCEmoji_MessagesGetEmojiKeywords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCEmojiServer).MessagesGetEmojiKeywords(ctx, req.(*TLMessagesGetEmojiKeywords))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCEmoji_MessagesGetEmojiKeywordsDifference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetEmojiKeywordsDifference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCEmojiServer).MessagesGetEmojiKeywordsDifference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCEmoji_MessagesGetEmojiKeywordsDifference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCEmojiServer).MessagesGetEmojiKeywordsDifference(ctx, req.(*TLMessagesGetEmojiKeywordsDifference))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCEmoji_MessagesGetEmojiKeywordsLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetEmojiKeywordsLanguages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCEmojiServer).MessagesGetEmojiKeywordsLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCEmoji_MessagesGetEmojiKeywordsLanguages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCEmojiServer).MessagesGetEmojiKeywordsLanguages(ctx, req.(*TLMessagesGetEmojiKeywordsLanguages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCEmoji_MessagesGetEmojiURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetEmojiURL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCEmojiServer).MessagesGetEmojiURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCEmoji_MessagesGetEmojiURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCEmojiServer).MessagesGetEmojiURL(ctx, req.(*TLMessagesGetEmojiURL))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCEmoji_ServiceDesc is the grpc.ServiceDesc for RPCEmoji service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCEmoji_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCEmoji",
	HandlerType: (*RPCEmojiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "messages_getEmojiKeywords",
			Handler:    _RPCEmoji_MessagesGetEmojiKeywords_Handler,
		},
		{
			MethodName: "messages_getEmojiKeywordsDifference",
			Handler:    _RPCEmoji_MessagesGetEmojiKeywordsDifference_Handler,
		},
		{
			MethodName: "messages_getEmojiKeywordsLanguages",
			Handler:    _RPCEmoji_MessagesGetEmojiKeywordsLanguages_Handler,
		},
		{
			MethodName: "messages_getEmojiURL",
			Handler:    _RPCEmoji_MessagesGetEmojiURL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCEmojiCategories_MessagesGetEmojiGroups_FullMethodName             = "/mtproto.RPCEmojiCategories/messages_getEmojiGroups"
	RPCEmojiCategories_MessagesGetEmojiStatusGroups_FullMethodName       = "/mtproto.RPCEmojiCategories/messages_getEmojiStatusGroups"
	RPCEmojiCategories_MessagesGetEmojiProfilePhotoGroups_FullMethodName = "/mtproto.RPCEmojiCategories/messages_getEmojiProfilePhotoGroups"
	RPCEmojiCategories_MessagesGetEmojiStickerGroups_FullMethodName      = "/mtproto.RPCEmojiCategories/messages_getEmojiStickerGroups"
)

// RPCEmojiCategoriesClient is the client API for RPCEmojiCategories service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCEmojiCategoriesClient interface {
	MessagesGetEmojiGroups(ctx context.Context, in *TLMessagesGetEmojiGroups, opts ...grpc.CallOption) (*Messages_EmojiGroups, error)
	MessagesGetEmojiStatusGroups(ctx context.Context, in *TLMessagesGetEmojiStatusGroups, opts ...grpc.CallOption) (*Messages_EmojiGroups, error)
	MessagesGetEmojiProfilePhotoGroups(ctx context.Context, in *TLMessagesGetEmojiProfilePhotoGroups, opts ...grpc.CallOption) (*Messages_EmojiGroups, error)
	MessagesGetEmojiStickerGroups(ctx context.Context, in *TLMessagesGetEmojiStickerGroups, opts ...grpc.CallOption) (*Messages_EmojiGroups, error)
}

type rPCEmojiCategoriesClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCEmojiCategoriesClient(cc grpc.ClientConnInterface) RPCEmojiCategoriesClient {
	return &rPCEmojiCategoriesClient{cc}
}

func (c *rPCEmojiCategoriesClient) MessagesGetEmojiGroups(ctx context.Context, in *TLMessagesGetEmojiGroups, opts ...grpc.CallOption) (*Messages_EmojiGroups, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_EmojiGroups)
	err := c.cc.Invoke(ctx, RPCEmojiCategories_MessagesGetEmojiGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCEmojiCategoriesClient) MessagesGetEmojiStatusGroups(ctx context.Context, in *TLMessagesGetEmojiStatusGroups, opts ...grpc.CallOption) (*Messages_EmojiGroups, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_EmojiGroups)
	err := c.cc.Invoke(ctx, RPCEmojiCategories_MessagesGetEmojiStatusGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCEmojiCategoriesClient) MessagesGetEmojiProfilePhotoGroups(ctx context.Context, in *TLMessagesGetEmojiProfilePhotoGroups, opts ...grpc.CallOption) (*Messages_EmojiGroups, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_EmojiGroups)
	err := c.cc.Invoke(ctx, RPCEmojiCategories_MessagesGetEmojiProfilePhotoGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCEmojiCategoriesClient) MessagesGetEmojiStickerGroups(ctx context.Context, in *TLMessagesGetEmojiStickerGroups, opts ...grpc.CallOption) (*Messages_EmojiGroups, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_EmojiGroups)
	err := c.cc.Invoke(ctx, RPCEmojiCategories_MessagesGetEmojiStickerGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCEmojiCategoriesServer is the server API for RPCEmojiCategories service.
// All implementations should embed UnimplementedRPCEmojiCategoriesServer
// for forward compatibility.
type RPCEmojiCategoriesServer interface {
	MessagesGetEmojiGroups(context.Context, *TLMessagesGetEmojiGroups) (*Messages_EmojiGroups, error)
	MessagesGetEmojiStatusGroups(context.Context, *TLMessagesGetEmojiStatusGroups) (*Messages_EmojiGroups, error)
	MessagesGetEmojiProfilePhotoGroups(context.Context, *TLMessagesGetEmojiProfilePhotoGroups) (*Messages_EmojiGroups, error)
	MessagesGetEmojiStickerGroups(context.Context, *TLMessagesGetEmojiStickerGroups) (*Messages_EmojiGroups, error)
}

// UnimplementedRPCEmojiCategoriesServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCEmojiCategoriesServer struct{}

func (UnimplementedRPCEmojiCategoriesServer) MessagesGetEmojiGroups(context.Context, *TLMessagesGetEmojiGroups) (*Messages_EmojiGroups, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetEmojiGroups not implemented")
}
func (UnimplementedRPCEmojiCategoriesServer) MessagesGetEmojiStatusGroups(context.Context, *TLMessagesGetEmojiStatusGroups) (*Messages_EmojiGroups, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetEmojiStatusGroups not implemented")
}
func (UnimplementedRPCEmojiCategoriesServer) MessagesGetEmojiProfilePhotoGroups(context.Context, *TLMessagesGetEmojiProfilePhotoGroups) (*Messages_EmojiGroups, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetEmojiProfilePhotoGroups not implemented")
}
func (UnimplementedRPCEmojiCategoriesServer) MessagesGetEmojiStickerGroups(context.Context, *TLMessagesGetEmojiStickerGroups) (*Messages_EmojiGroups, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetEmojiStickerGroups not implemented")
}
func (UnimplementedRPCEmojiCategoriesServer) testEmbeddedByValue() {}

// UnsafeRPCEmojiCategoriesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCEmojiCategoriesServer will
// result in compilation errors.
type UnsafeRPCEmojiCategoriesServer interface {
	mustEmbedUnimplementedRPCEmojiCategoriesServer()
}

func RegisterRPCEmojiCategoriesServer(s grpc.ServiceRegistrar, srv RPCEmojiCategoriesServer) {
	// If the following call pancis, it indicates UnimplementedRPCEmojiCategoriesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCEmojiCategories_ServiceDesc, srv)
}

func _RPCEmojiCategories_MessagesGetEmojiGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetEmojiGroups)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCEmojiCategoriesServer).MessagesGetEmojiGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCEmojiCategories_MessagesGetEmojiGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCEmojiCategoriesServer).MessagesGetEmojiGroups(ctx, req.(*TLMessagesGetEmojiGroups))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCEmojiCategories_MessagesGetEmojiStatusGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetEmojiStatusGroups)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCEmojiCategoriesServer).MessagesGetEmojiStatusGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCEmojiCategories_MessagesGetEmojiStatusGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCEmojiCategoriesServer).MessagesGetEmojiStatusGroups(ctx, req.(*TLMessagesGetEmojiStatusGroups))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCEmojiCategories_MessagesGetEmojiProfilePhotoGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetEmojiProfilePhotoGroups)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCEmojiCategoriesServer).MessagesGetEmojiProfilePhotoGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCEmojiCategories_MessagesGetEmojiProfilePhotoGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCEmojiCategoriesServer).MessagesGetEmojiProfilePhotoGroups(ctx, req.(*TLMessagesGetEmojiProfilePhotoGroups))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCEmojiCategories_MessagesGetEmojiStickerGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetEmojiStickerGroups)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCEmojiCategoriesServer).MessagesGetEmojiStickerGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCEmojiCategories_MessagesGetEmojiStickerGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCEmojiCategoriesServer).MessagesGetEmojiStickerGroups(ctx, req.(*TLMessagesGetEmojiStickerGroups))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCEmojiCategories_ServiceDesc is the grpc.ServiceDesc for RPCEmojiCategories service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCEmojiCategories_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCEmojiCategories",
	HandlerType: (*RPCEmojiCategoriesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "messages_getEmojiGroups",
			Handler:    _RPCEmojiCategories_MessagesGetEmojiGroups_Handler,
		},
		{
			MethodName: "messages_getEmojiStatusGroups",
			Handler:    _RPCEmojiCategories_MessagesGetEmojiStatusGroups_Handler,
		},
		{
			MethodName: "messages_getEmojiProfilePhotoGroups",
			Handler:    _RPCEmojiCategories_MessagesGetEmojiProfilePhotoGroups_Handler,
		},
		{
			MethodName: "messages_getEmojiStickerGroups",
			Handler:    _RPCEmojiCategories_MessagesGetEmojiStickerGroups_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCEmojiStatus_AccountUpdateEmojiStatus_FullMethodName                = "/mtproto.RPCEmojiStatus/account_updateEmojiStatus"
	RPCEmojiStatus_AccountGetDefaultEmojiStatuses_FullMethodName          = "/mtproto.RPCEmojiStatus/account_getDefaultEmojiStatuses"
	RPCEmojiStatus_AccountGetRecentEmojiStatuses_FullMethodName           = "/mtproto.RPCEmojiStatus/account_getRecentEmojiStatuses"
	RPCEmojiStatus_AccountClearRecentEmojiStatuses_FullMethodName         = "/mtproto.RPCEmojiStatus/account_clearRecentEmojiStatuses"
	RPCEmojiStatus_AccountGetChannelDefaultEmojiStatuses_FullMethodName   = "/mtproto.RPCEmojiStatus/account_getChannelDefaultEmojiStatuses"
	RPCEmojiStatus_AccountGetChannelRestrictedStatusEmojis_FullMethodName = "/mtproto.RPCEmojiStatus/account_getChannelRestrictedStatusEmojis"
	RPCEmojiStatus_AccountGetCollectibleEmojiStatuses_FullMethodName      = "/mtproto.RPCEmojiStatus/account_getCollectibleEmojiStatuses"
	RPCEmojiStatus_ChannelsUpdateEmojiStatus_FullMethodName               = "/mtproto.RPCEmojiStatus/channels_updateEmojiStatus"
	RPCEmojiStatus_BotsUpdateUserEmojiStatus_FullMethodName               = "/mtproto.RPCEmojiStatus/bots_updateUserEmojiStatus"
	RPCEmojiStatus_BotsToggleUserEmojiStatusPermission_FullMethodName     = "/mtproto.RPCEmojiStatus/bots_toggleUserEmojiStatusPermission"
)

// RPCEmojiStatusClient is the client API for RPCEmojiStatus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCEmojiStatusClient interface {
	AccountUpdateEmojiStatus(ctx context.Context, in *TLAccountUpdateEmojiStatus, opts ...grpc.CallOption) (*Bool, error)
	AccountGetDefaultEmojiStatuses(ctx context.Context, in *TLAccountGetDefaultEmojiStatuses, opts ...grpc.CallOption) (*Account_EmojiStatuses, error)
	AccountGetRecentEmojiStatuses(ctx context.Context, in *TLAccountGetRecentEmojiStatuses, opts ...grpc.CallOption) (*Account_EmojiStatuses, error)
	AccountClearRecentEmojiStatuses(ctx context.Context, in *TLAccountClearRecentEmojiStatuses, opts ...grpc.CallOption) (*Bool, error)
	AccountGetChannelDefaultEmojiStatuses(ctx context.Context, in *TLAccountGetChannelDefaultEmojiStatuses, opts ...grpc.CallOption) (*Account_EmojiStatuses, error)
	AccountGetChannelRestrictedStatusEmojis(ctx context.Context, in *TLAccountGetChannelRestrictedStatusEmojis, opts ...grpc.CallOption) (*EmojiList, error)
	AccountGetCollectibleEmojiStatuses(ctx context.Context, in *TLAccountGetCollectibleEmojiStatuses, opts ...grpc.CallOption) (*Account_EmojiStatuses, error)
	ChannelsUpdateEmojiStatus(ctx context.Context, in *TLChannelsUpdateEmojiStatus, opts ...grpc.CallOption) (*Updates, error)
	BotsUpdateUserEmojiStatus(ctx context.Context, in *TLBotsUpdateUserEmojiStatus, opts ...grpc.CallOption) (*Bool, error)
	BotsToggleUserEmojiStatusPermission(ctx context.Context, in *TLBotsToggleUserEmojiStatusPermission, opts ...grpc.CallOption) (*Bool, error)
}

type rPCEmojiStatusClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCEmojiStatusClient(cc grpc.ClientConnInterface) RPCEmojiStatusClient {
	return &rPCEmojiStatusClient{cc}
}

func (c *rPCEmojiStatusClient) AccountUpdateEmojiStatus(ctx context.Context, in *TLAccountUpdateEmojiStatus, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCEmojiStatus_AccountUpdateEmojiStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCEmojiStatusClient) AccountGetDefaultEmojiStatuses(ctx context.Context, in *TLAccountGetDefaultEmojiStatuses, opts ...grpc.CallOption) (*Account_EmojiStatuses, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account_EmojiStatuses)
	err := c.cc.Invoke(ctx, RPCEmojiStatus_AccountGetDefaultEmojiStatuses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCEmojiStatusClient) AccountGetRecentEmojiStatuses(ctx context.Context, in *TLAccountGetRecentEmojiStatuses, opts ...grpc.CallOption) (*Account_EmojiStatuses, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account_EmojiStatuses)
	err := c.cc.Invoke(ctx, RPCEmojiStatus_AccountGetRecentEmojiStatuses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCEmojiStatusClient) AccountClearRecentEmojiStatuses(ctx context.Context, in *TLAccountClearRecentEmojiStatuses, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCEmojiStatus_AccountClearRecentEmojiStatuses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCEmojiStatusClient) AccountGetChannelDefaultEmojiStatuses(ctx context.Context, in *TLAccountGetChannelDefaultEmojiStatuses, opts ...grpc.CallOption) (*Account_EmojiStatuses, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account_EmojiStatuses)
	err := c.cc.Invoke(ctx, RPCEmojiStatus_AccountGetChannelDefaultEmojiStatuses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCEmojiStatusClient) AccountGetChannelRestrictedStatusEmojis(ctx context.Context, in *TLAccountGetChannelRestrictedStatusEmojis, opts ...grpc.CallOption) (*EmojiList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmojiList)
	err := c.cc.Invoke(ctx, RPCEmojiStatus_AccountGetChannelRestrictedStatusEmojis_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCEmojiStatusClient) AccountGetCollectibleEmojiStatuses(ctx context.Context, in *TLAccountGetCollectibleEmojiStatuses, opts ...grpc.CallOption) (*Account_EmojiStatuses, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account_EmojiStatuses)
	err := c.cc.Invoke(ctx, RPCEmojiStatus_AccountGetCollectibleEmojiStatuses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCEmojiStatusClient) ChannelsUpdateEmojiStatus(ctx context.Context, in *TLChannelsUpdateEmojiStatus, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCEmojiStatus_ChannelsUpdateEmojiStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCEmojiStatusClient) BotsUpdateUserEmojiStatus(ctx context.Context, in *TLBotsUpdateUserEmojiStatus, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCEmojiStatus_BotsUpdateUserEmojiStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCEmojiStatusClient) BotsToggleUserEmojiStatusPermission(ctx context.Context, in *TLBotsToggleUserEmojiStatusPermission, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCEmojiStatus_BotsToggleUserEmojiStatusPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCEmojiStatusServer is the server API for RPCEmojiStatus service.
// All implementations should embed UnimplementedRPCEmojiStatusServer
// for forward compatibility.
type RPCEmojiStatusServer interface {
	AccountUpdateEmojiStatus(context.Context, *TLAccountUpdateEmojiStatus) (*Bool, error)
	AccountGetDefaultEmojiStatuses(context.Context, *TLAccountGetDefaultEmojiStatuses) (*Account_EmojiStatuses, error)
	AccountGetRecentEmojiStatuses(context.Context, *TLAccountGetRecentEmojiStatuses) (*Account_EmojiStatuses, error)
	AccountClearRecentEmojiStatuses(context.Context, *TLAccountClearRecentEmojiStatuses) (*Bool, error)
	AccountGetChannelDefaultEmojiStatuses(context.Context, *TLAccountGetChannelDefaultEmojiStatuses) (*Account_EmojiStatuses, error)
	AccountGetChannelRestrictedStatusEmojis(context.Context, *TLAccountGetChannelRestrictedStatusEmojis) (*EmojiList, error)
	AccountGetCollectibleEmojiStatuses(context.Context, *TLAccountGetCollectibleEmojiStatuses) (*Account_EmojiStatuses, error)
	ChannelsUpdateEmojiStatus(context.Context, *TLChannelsUpdateEmojiStatus) (*Updates, error)
	BotsUpdateUserEmojiStatus(context.Context, *TLBotsUpdateUserEmojiStatus) (*Bool, error)
	BotsToggleUserEmojiStatusPermission(context.Context, *TLBotsToggleUserEmojiStatusPermission) (*Bool, error)
}

// UnimplementedRPCEmojiStatusServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCEmojiStatusServer struct{}

func (UnimplementedRPCEmojiStatusServer) AccountUpdateEmojiStatus(context.Context, *TLAccountUpdateEmojiStatus) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUpdateEmojiStatus not implemented")
}
func (UnimplementedRPCEmojiStatusServer) AccountGetDefaultEmojiStatuses(context.Context, *TLAccountGetDefaultEmojiStatuses) (*Account_EmojiStatuses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetDefaultEmojiStatuses not implemented")
}
func (UnimplementedRPCEmojiStatusServer) AccountGetRecentEmojiStatuses(context.Context, *TLAccountGetRecentEmojiStatuses) (*Account_EmojiStatuses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetRecentEmojiStatuses not implemented")
}
func (UnimplementedRPCEmojiStatusServer) AccountClearRecentEmojiStatuses(context.Context, *TLAccountClearRecentEmojiStatuses) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountClearRecentEmojiStatuses not implemented")
}
func (UnimplementedRPCEmojiStatusServer) AccountGetChannelDefaultEmojiStatuses(context.Context, *TLAccountGetChannelDefaultEmojiStatuses) (*Account_EmojiStatuses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetChannelDefaultEmojiStatuses not implemented")
}
func (UnimplementedRPCEmojiStatusServer) AccountGetChannelRestrictedStatusEmojis(context.Context, *TLAccountGetChannelRestrictedStatusEmojis) (*EmojiList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetChannelRestrictedStatusEmojis not implemented")
}
func (UnimplementedRPCEmojiStatusServer) AccountGetCollectibleEmojiStatuses(context.Context, *TLAccountGetCollectibleEmojiStatuses) (*Account_EmojiStatuses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetCollectibleEmojiStatuses not implemented")
}
func (UnimplementedRPCEmojiStatusServer) ChannelsUpdateEmojiStatus(context.Context, *TLChannelsUpdateEmojiStatus) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsUpdateEmojiStatus not implemented")
}
func (UnimplementedRPCEmojiStatusServer) BotsUpdateUserEmojiStatus(context.Context, *TLBotsUpdateUserEmojiStatus) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotsUpdateUserEmojiStatus not implemented")
}
func (UnimplementedRPCEmojiStatusServer) BotsToggleUserEmojiStatusPermission(context.Context, *TLBotsToggleUserEmojiStatusPermission) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotsToggleUserEmojiStatusPermission not implemented")
}
func (UnimplementedRPCEmojiStatusServer) testEmbeddedByValue() {}

// UnsafeRPCEmojiStatusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCEmojiStatusServer will
// result in compilation errors.
type UnsafeRPCEmojiStatusServer interface {
	mustEmbedUnimplementedRPCEmojiStatusServer()
}

func RegisterRPCEmojiStatusServer(s grpc.ServiceRegistrar, srv RPCEmojiStatusServer) {
	// If the following call pancis, it indicates UnimplementedRPCEmojiStatusServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCEmojiStatus_ServiceDesc, srv)
}

func _RPCEmojiStatus_AccountUpdateEmojiStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUpdateEmojiStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCEmojiStatusServer).AccountUpdateEmojiStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCEmojiStatus_AccountUpdateEmojiStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCEmojiStatusServer).AccountUpdateEmojiStatus(ctx, req.(*TLAccountUpdateEmojiStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCEmojiStatus_AccountGetDefaultEmojiStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetDefaultEmojiStatuses)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCEmojiStatusServer).AccountGetDefaultEmojiStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCEmojiStatus_AccountGetDefaultEmojiStatuses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCEmojiStatusServer).AccountGetDefaultEmojiStatuses(ctx, req.(*TLAccountGetDefaultEmojiStatuses))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCEmojiStatus_AccountGetRecentEmojiStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetRecentEmojiStatuses)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCEmojiStatusServer).AccountGetRecentEmojiStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCEmojiStatus_AccountGetRecentEmojiStatuses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCEmojiStatusServer).AccountGetRecentEmojiStatuses(ctx, req.(*TLAccountGetRecentEmojiStatuses))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCEmojiStatus_AccountClearRecentEmojiStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountClearRecentEmojiStatuses)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCEmojiStatusServer).AccountClearRecentEmojiStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCEmojiStatus_AccountClearRecentEmojiStatuses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCEmojiStatusServer).AccountClearRecentEmojiStatuses(ctx, req.(*TLAccountClearRecentEmojiStatuses))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCEmojiStatus_AccountGetChannelDefaultEmojiStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetChannelDefaultEmojiStatuses)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCEmojiStatusServer).AccountGetChannelDefaultEmojiStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCEmojiStatus_AccountGetChannelDefaultEmojiStatuses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCEmojiStatusServer).AccountGetChannelDefaultEmojiStatuses(ctx, req.(*TLAccountGetChannelDefaultEmojiStatuses))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCEmojiStatus_AccountGetChannelRestrictedStatusEmojis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetChannelRestrictedStatusEmojis)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCEmojiStatusServer).AccountGetChannelRestrictedStatusEmojis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCEmojiStatus_AccountGetChannelRestrictedStatusEmojis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCEmojiStatusServer).AccountGetChannelRestrictedStatusEmojis(ctx, req.(*TLAccountGetChannelRestrictedStatusEmojis))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCEmojiStatus_AccountGetCollectibleEmojiStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetCollectibleEmojiStatuses)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCEmojiStatusServer).AccountGetCollectibleEmojiStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCEmojiStatus_AccountGetCollectibleEmojiStatuses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCEmojiStatusServer).AccountGetCollectibleEmojiStatuses(ctx, req.(*TLAccountGetCollectibleEmojiStatuses))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCEmojiStatus_ChannelsUpdateEmojiStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsUpdateEmojiStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCEmojiStatusServer).ChannelsUpdateEmojiStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCEmojiStatus_ChannelsUpdateEmojiStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCEmojiStatusServer).ChannelsUpdateEmojiStatus(ctx, req.(*TLChannelsUpdateEmojiStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCEmojiStatus_BotsUpdateUserEmojiStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLBotsUpdateUserEmojiStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCEmojiStatusServer).BotsUpdateUserEmojiStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCEmojiStatus_BotsUpdateUserEmojiStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCEmojiStatusServer).BotsUpdateUserEmojiStatus(ctx, req.(*TLBotsUpdateUserEmojiStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCEmojiStatus_BotsToggleUserEmojiStatusPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLBotsToggleUserEmojiStatusPermission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCEmojiStatusServer).BotsToggleUserEmojiStatusPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCEmojiStatus_BotsToggleUserEmojiStatusPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCEmojiStatusServer).BotsToggleUserEmojiStatusPermission(ctx, req.(*TLBotsToggleUserEmojiStatusPermission))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCEmojiStatus_ServiceDesc is the grpc.ServiceDesc for RPCEmojiStatus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCEmojiStatus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCEmojiStatus",
	HandlerType: (*RPCEmojiStatusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "account_updateEmojiStatus",
			Handler:    _RPCEmojiStatus_AccountUpdateEmojiStatus_Handler,
		},
		{
			MethodName: "account_getDefaultEmojiStatuses",
			Handler:    _RPCEmojiStatus_AccountGetDefaultEmojiStatuses_Handler,
		},
		{
			MethodName: "account_getRecentEmojiStatuses",
			Handler:    _RPCEmojiStatus_AccountGetRecentEmojiStatuses_Handler,
		},
		{
			MethodName: "account_clearRecentEmojiStatuses",
			Handler:    _RPCEmojiStatus_AccountClearRecentEmojiStatuses_Handler,
		},
		{
			MethodName: "account_getChannelDefaultEmojiStatuses",
			Handler:    _RPCEmojiStatus_AccountGetChannelDefaultEmojiStatuses_Handler,
		},
		{
			MethodName: "account_getChannelRestrictedStatusEmojis",
			Handler:    _RPCEmojiStatus_AccountGetChannelRestrictedStatusEmojis_Handler,
		},
		{
			MethodName: "account_getCollectibleEmojiStatuses",
			Handler:    _RPCEmojiStatus_AccountGetCollectibleEmojiStatuses_Handler,
		},
		{
			MethodName: "channels_updateEmojiStatus",
			Handler:    _RPCEmojiStatus_ChannelsUpdateEmojiStatus_Handler,
		},
		{
			MethodName: "bots_updateUserEmojiStatus",
			Handler:    _RPCEmojiStatus_BotsUpdateUserEmojiStatus_Handler,
		},
		{
			MethodName: "bots_toggleUserEmojiStatusPermission",
			Handler:    _RPCEmojiStatus_BotsToggleUserEmojiStatusPermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCFactChecks_MessagesEditFactCheck_FullMethodName   = "/mtproto.RPCFactChecks/messages_editFactCheck"
	RPCFactChecks_MessagesDeleteFactCheck_FullMethodName = "/mtproto.RPCFactChecks/messages_deleteFactCheck"
	RPCFactChecks_MessagesGetFactCheck_FullMethodName    = "/mtproto.RPCFactChecks/messages_getFactCheck"
)

// RPCFactChecksClient is the client API for RPCFactChecks service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCFactChecksClient interface {
	MessagesEditFactCheck(ctx context.Context, in *TLMessagesEditFactCheck, opts ...grpc.CallOption) (*Updates, error)
	MessagesDeleteFactCheck(ctx context.Context, in *TLMessagesDeleteFactCheck, opts ...grpc.CallOption) (*Updates, error)
	MessagesGetFactCheck(ctx context.Context, in *TLMessagesGetFactCheck, opts ...grpc.CallOption) (*Vector_FactCheck, error)
}

type rPCFactChecksClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCFactChecksClient(cc grpc.ClientConnInterface) RPCFactChecksClient {
	return &rPCFactChecksClient{cc}
}

func (c *rPCFactChecksClient) MessagesEditFactCheck(ctx context.Context, in *TLMessagesEditFactCheck, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCFactChecks_MessagesEditFactCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCFactChecksClient) MessagesDeleteFactCheck(ctx context.Context, in *TLMessagesDeleteFactCheck, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCFactChecks_MessagesDeleteFactCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCFactChecksClient) MessagesGetFactCheck(ctx context.Context, in *TLMessagesGetFactCheck, opts ...grpc.CallOption) (*Vector_FactCheck, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_FactCheck)
	err := c.cc.Invoke(ctx, RPCFactChecks_MessagesGetFactCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCFactChecksServer is the server API for RPCFactChecks service.
// All implementations should embed UnimplementedRPCFactChecksServer
// for forward compatibility.
type RPCFactChecksServer interface {
	MessagesEditFactCheck(context.Context, *TLMessagesEditFactCheck) (*Updates, error)
	MessagesDeleteFactCheck(context.Context, *TLMessagesDeleteFactCheck) (*Updates, error)
	MessagesGetFactCheck(context.Context, *TLMessagesGetFactCheck) (*Vector_FactCheck, error)
}

// UnimplementedRPCFactChecksServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCFactChecksServer struct{}

func (UnimplementedRPCFactChecksServer) MessagesEditFactCheck(context.Context, *TLMessagesEditFactCheck) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesEditFactCheck not implemented")
}
func (UnimplementedRPCFactChecksServer) MessagesDeleteFactCheck(context.Context, *TLMessagesDeleteFactCheck) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesDeleteFactCheck not implemented")
}
func (UnimplementedRPCFactChecksServer) MessagesGetFactCheck(context.Context, *TLMessagesGetFactCheck) (*Vector_FactCheck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetFactCheck not implemented")
}
func (UnimplementedRPCFactChecksServer) testEmbeddedByValue() {}

// UnsafeRPCFactChecksServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCFactChecksServer will
// result in compilation errors.
type UnsafeRPCFactChecksServer interface {
	mustEmbedUnimplementedRPCFactChecksServer()
}

func RegisterRPCFactChecksServer(s grpc.ServiceRegistrar, srv RPCFactChecksServer) {
	// If the following call pancis, it indicates UnimplementedRPCFactChecksServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCFactChecks_ServiceDesc, srv)
}

func _RPCFactChecks_MessagesEditFactCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesEditFactCheck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFactChecksServer).MessagesEditFactCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCFactChecks_MessagesEditFactCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFactChecksServer).MessagesEditFactCheck(ctx, req.(*TLMessagesEditFactCheck))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCFactChecks_MessagesDeleteFactCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesDeleteFactCheck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFactChecksServer).MessagesDeleteFactCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCFactChecks_MessagesDeleteFactCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFactChecksServer).MessagesDeleteFactCheck(ctx, req.(*TLMessagesDeleteFactCheck))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCFactChecks_MessagesGetFactCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetFactCheck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFactChecksServer).MessagesGetFactCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCFactChecks_MessagesGetFactCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFactChecksServer).MessagesGetFactCheck(ctx, req.(*TLMessagesGetFactCheck))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCFactChecks_ServiceDesc is the grpc.ServiceDesc for RPCFactChecks service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCFactChecks_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCFactChecks",
	HandlerType: (*RPCFactChecksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "messages_editFactCheck",
			Handler:    _RPCFactChecks_MessagesEditFactCheck_Handler,
		},
		{
			MethodName: "messages_deleteFactCheck",
			Handler:    _RPCFactChecks_MessagesDeleteFactCheck_Handler,
		},
		{
			MethodName: "messages_getFactCheck",
			Handler:    _RPCFactChecks_MessagesGetFactCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCFiles_MessagesGetDocumentByHash_FullMethodName   = "/mtproto.RPCFiles/messages_getDocumentByHash"
	RPCFiles_MessagesUploadMedia_FullMethodName         = "/mtproto.RPCFiles/messages_uploadMedia"
	RPCFiles_MessagesUploadEncryptedFile_FullMethodName = "/mtproto.RPCFiles/messages_uploadEncryptedFile"
	RPCFiles_UploadSaveFilePart_FullMethodName          = "/mtproto.RPCFiles/upload_saveFilePart"
	RPCFiles_UploadGetFile_FullMethodName               = "/mtproto.RPCFiles/upload_getFile"
	RPCFiles_UploadSaveBigFilePart_FullMethodName       = "/mtproto.RPCFiles/upload_saveBigFilePart"
	RPCFiles_UploadGetWebFile_FullMethodName            = "/mtproto.RPCFiles/upload_getWebFile"
	RPCFiles_UploadGetCdnFile_FullMethodName            = "/mtproto.RPCFiles/upload_getCdnFile"
	RPCFiles_UploadReuploadCdnFile_FullMethodName       = "/mtproto.RPCFiles/upload_reuploadCdnFile"
	RPCFiles_UploadGetCdnFileHashes_FullMethodName      = "/mtproto.RPCFiles/upload_getCdnFileHashes"
	RPCFiles_UploadGetFileHashes_FullMethodName         = "/mtproto.RPCFiles/upload_getFileHashes"
	RPCFiles_HelpGetCdnConfig_FullMethodName            = "/mtproto.RPCFiles/help_getCdnConfig"
)

// RPCFilesClient is the client API for RPCFiles service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCFilesClient interface {
	MessagesGetDocumentByHash(ctx context.Context, in *TLMessagesGetDocumentByHash, opts ...grpc.CallOption) (*Document, error)
	MessagesUploadMedia(ctx context.Context, in *TLMessagesUploadMedia, opts ...grpc.CallOption) (*MessageMedia, error)
	MessagesUploadEncryptedFile(ctx context.Context, in *TLMessagesUploadEncryptedFile, opts ...grpc.CallOption) (*EncryptedFile, error)
	UploadSaveFilePart(ctx context.Context, in *TLUploadSaveFilePart, opts ...grpc.CallOption) (*Bool, error)
	UploadGetFile(ctx context.Context, in *TLUploadGetFile, opts ...grpc.CallOption) (*Upload_File, error)
	UploadSaveBigFilePart(ctx context.Context, in *TLUploadSaveBigFilePart, opts ...grpc.CallOption) (*Bool, error)
	UploadGetWebFile(ctx context.Context, in *TLUploadGetWebFile, opts ...grpc.CallOption) (*Upload_WebFile, error)
	UploadGetCdnFile(ctx context.Context, in *TLUploadGetCdnFile, opts ...grpc.CallOption) (*Upload_CdnFile, error)
	UploadReuploadCdnFile(ctx context.Context, in *TLUploadReuploadCdnFile, opts ...grpc.CallOption) (*Vector_FileHash, error)
	UploadGetCdnFileHashes(ctx context.Context, in *TLUploadGetCdnFileHashes, opts ...grpc.CallOption) (*Vector_FileHash, error)
	UploadGetFileHashes(ctx context.Context, in *TLUploadGetFileHashes, opts ...grpc.CallOption) (*Vector_FileHash, error)
	HelpGetCdnConfig(ctx context.Context, in *TLHelpGetCdnConfig, opts ...grpc.CallOption) (*CdnConfig, error)
}

type rPCFilesClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCFilesClient(cc grpc.ClientConnInterface) RPCFilesClient {
	return &rPCFilesClient{cc}
}

func (c *rPCFilesClient) MessagesGetDocumentByHash(ctx context.Context, in *TLMessagesGetDocumentByHash, opts ...grpc.CallOption) (*Document, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Document)
	err := c.cc.Invoke(ctx, RPCFiles_MessagesGetDocumentByHash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCFilesClient) MessagesUploadMedia(ctx context.Context, in *TLMessagesUploadMedia, opts ...grpc.CallOption) (*MessageMedia, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageMedia)
	err := c.cc.Invoke(ctx, RPCFiles_MessagesUploadMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCFilesClient) MessagesUploadEncryptedFile(ctx context.Context, in *TLMessagesUploadEncryptedFile, opts ...grpc.CallOption) (*EncryptedFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EncryptedFile)
	err := c.cc.Invoke(ctx, RPCFiles_MessagesUploadEncryptedFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCFilesClient) UploadSaveFilePart(ctx context.Context, in *TLUploadSaveFilePart, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCFiles_UploadSaveFilePart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCFilesClient) UploadGetFile(ctx context.Context, in *TLUploadGetFile, opts ...grpc.CallOption) (*Upload_File, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Upload_File)
	err := c.cc.Invoke(ctx, RPCFiles_UploadGetFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCFilesClient) UploadSaveBigFilePart(ctx context.Context, in *TLUploadSaveBigFilePart, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCFiles_UploadSaveBigFilePart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCFilesClient) UploadGetWebFile(ctx context.Context, in *TLUploadGetWebFile, opts ...grpc.CallOption) (*Upload_WebFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Upload_WebFile)
	err := c.cc.Invoke(ctx, RPCFiles_UploadGetWebFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCFilesClient) UploadGetCdnFile(ctx context.Context, in *TLUploadGetCdnFile, opts ...grpc.CallOption) (*Upload_CdnFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Upload_CdnFile)
	err := c.cc.Invoke(ctx, RPCFiles_UploadGetCdnFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCFilesClient) UploadReuploadCdnFile(ctx context.Context, in *TLUploadReuploadCdnFile, opts ...grpc.CallOption) (*Vector_FileHash, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_FileHash)
	err := c.cc.Invoke(ctx, RPCFiles_UploadReuploadCdnFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCFilesClient) UploadGetCdnFileHashes(ctx context.Context, in *TLUploadGetCdnFileHashes, opts ...grpc.CallOption) (*Vector_FileHash, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_FileHash)
	err := c.cc.Invoke(ctx, RPCFiles_UploadGetCdnFileHashes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCFilesClient) UploadGetFileHashes(ctx context.Context, in *TLUploadGetFileHashes, opts ...grpc.CallOption) (*Vector_FileHash, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_FileHash)
	err := c.cc.Invoke(ctx, RPCFiles_UploadGetFileHashes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCFilesClient) HelpGetCdnConfig(ctx context.Context, in *TLHelpGetCdnConfig, opts ...grpc.CallOption) (*CdnConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CdnConfig)
	err := c.cc.Invoke(ctx, RPCFiles_HelpGetCdnConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCFilesServer is the server API for RPCFiles service.
// All implementations should embed UnimplementedRPCFilesServer
// for forward compatibility.
type RPCFilesServer interface {
	MessagesGetDocumentByHash(context.Context, *TLMessagesGetDocumentByHash) (*Document, error)
	MessagesUploadMedia(context.Context, *TLMessagesUploadMedia) (*MessageMedia, error)
	MessagesUploadEncryptedFile(context.Context, *TLMessagesUploadEncryptedFile) (*EncryptedFile, error)
	UploadSaveFilePart(context.Context, *TLUploadSaveFilePart) (*Bool, error)
	UploadGetFile(context.Context, *TLUploadGetFile) (*Upload_File, error)
	UploadSaveBigFilePart(context.Context, *TLUploadSaveBigFilePart) (*Bool, error)
	UploadGetWebFile(context.Context, *TLUploadGetWebFile) (*Upload_WebFile, error)
	UploadGetCdnFile(context.Context, *TLUploadGetCdnFile) (*Upload_CdnFile, error)
	UploadReuploadCdnFile(context.Context, *TLUploadReuploadCdnFile) (*Vector_FileHash, error)
	UploadGetCdnFileHashes(context.Context, *TLUploadGetCdnFileHashes) (*Vector_FileHash, error)
	UploadGetFileHashes(context.Context, *TLUploadGetFileHashes) (*Vector_FileHash, error)
	HelpGetCdnConfig(context.Context, *TLHelpGetCdnConfig) (*CdnConfig, error)
}

// UnimplementedRPCFilesServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCFilesServer struct{}

func (UnimplementedRPCFilesServer) MessagesGetDocumentByHash(context.Context, *TLMessagesGetDocumentByHash) (*Document, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetDocumentByHash not implemented")
}
func (UnimplementedRPCFilesServer) MessagesUploadMedia(context.Context, *TLMessagesUploadMedia) (*MessageMedia, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesUploadMedia not implemented")
}
func (UnimplementedRPCFilesServer) MessagesUploadEncryptedFile(context.Context, *TLMessagesUploadEncryptedFile) (*EncryptedFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesUploadEncryptedFile not implemented")
}
func (UnimplementedRPCFilesServer) UploadSaveFilePart(context.Context, *TLUploadSaveFilePart) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadSaveFilePart not implemented")
}
func (UnimplementedRPCFilesServer) UploadGetFile(context.Context, *TLUploadGetFile) (*Upload_File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadGetFile not implemented")
}
func (UnimplementedRPCFilesServer) UploadSaveBigFilePart(context.Context, *TLUploadSaveBigFilePart) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadSaveBigFilePart not implemented")
}
func (UnimplementedRPCFilesServer) UploadGetWebFile(context.Context, *TLUploadGetWebFile) (*Upload_WebFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadGetWebFile not implemented")
}
func (UnimplementedRPCFilesServer) UploadGetCdnFile(context.Context, *TLUploadGetCdnFile) (*Upload_CdnFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadGetCdnFile not implemented")
}
func (UnimplementedRPCFilesServer) UploadReuploadCdnFile(context.Context, *TLUploadReuploadCdnFile) (*Vector_FileHash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadReuploadCdnFile not implemented")
}
func (UnimplementedRPCFilesServer) UploadGetCdnFileHashes(context.Context, *TLUploadGetCdnFileHashes) (*Vector_FileHash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadGetCdnFileHashes not implemented")
}
func (UnimplementedRPCFilesServer) UploadGetFileHashes(context.Context, *TLUploadGetFileHashes) (*Vector_FileHash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadGetFileHashes not implemented")
}
func (UnimplementedRPCFilesServer) HelpGetCdnConfig(context.Context, *TLHelpGetCdnConfig) (*CdnConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetCdnConfig not implemented")
}
func (UnimplementedRPCFilesServer) testEmbeddedByValue() {}

// UnsafeRPCFilesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCFilesServer will
// result in compilation errors.
type UnsafeRPCFilesServer interface {
	mustEmbedUnimplementedRPCFilesServer()
}

func RegisterRPCFilesServer(s grpc.ServiceRegistrar, srv RPCFilesServer) {
	// If the following call pancis, it indicates UnimplementedRPCFilesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCFiles_ServiceDesc, srv)
}

func _RPCFiles_MessagesGetDocumentByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetDocumentByHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFilesServer).MessagesGetDocumentByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCFiles_MessagesGetDocumentByHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFilesServer).MessagesGetDocumentByHash(ctx, req.(*TLMessagesGetDocumentByHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCFiles_MessagesUploadMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesUploadMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFilesServer).MessagesUploadMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCFiles_MessagesUploadMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFilesServer).MessagesUploadMedia(ctx, req.(*TLMessagesUploadMedia))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCFiles_MessagesUploadEncryptedFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesUploadEncryptedFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFilesServer).MessagesUploadEncryptedFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCFiles_MessagesUploadEncryptedFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFilesServer).MessagesUploadEncryptedFile(ctx, req.(*TLMessagesUploadEncryptedFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCFiles_UploadSaveFilePart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUploadSaveFilePart)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFilesServer).UploadSaveFilePart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCFiles_UploadSaveFilePart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFilesServer).UploadSaveFilePart(ctx, req.(*TLUploadSaveFilePart))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCFiles_UploadGetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUploadGetFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFilesServer).UploadGetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCFiles_UploadGetFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFilesServer).UploadGetFile(ctx, req.(*TLUploadGetFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCFiles_UploadSaveBigFilePart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUploadSaveBigFilePart)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFilesServer).UploadSaveBigFilePart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCFiles_UploadSaveBigFilePart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFilesServer).UploadSaveBigFilePart(ctx, req.(*TLUploadSaveBigFilePart))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCFiles_UploadGetWebFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUploadGetWebFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFilesServer).UploadGetWebFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCFiles_UploadGetWebFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFilesServer).UploadGetWebFile(ctx, req.(*TLUploadGetWebFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCFiles_UploadGetCdnFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUploadGetCdnFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFilesServer).UploadGetCdnFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCFiles_UploadGetCdnFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFilesServer).UploadGetCdnFile(ctx, req.(*TLUploadGetCdnFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCFiles_UploadReuploadCdnFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUploadReuploadCdnFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFilesServer).UploadReuploadCdnFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCFiles_UploadReuploadCdnFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFilesServer).UploadReuploadCdnFile(ctx, req.(*TLUploadReuploadCdnFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCFiles_UploadGetCdnFileHashes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUploadGetCdnFileHashes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFilesServer).UploadGetCdnFileHashes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCFiles_UploadGetCdnFileHashes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFilesServer).UploadGetCdnFileHashes(ctx, req.(*TLUploadGetCdnFileHashes))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCFiles_UploadGetFileHashes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUploadGetFileHashes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFilesServer).UploadGetFileHashes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCFiles_UploadGetFileHashes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFilesServer).UploadGetFileHashes(ctx, req.(*TLUploadGetFileHashes))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCFiles_HelpGetCdnConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetCdnConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFilesServer).HelpGetCdnConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCFiles_HelpGetCdnConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFilesServer).HelpGetCdnConfig(ctx, req.(*TLHelpGetCdnConfig))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCFiles_ServiceDesc is the grpc.ServiceDesc for RPCFiles service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCFiles_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCFiles",
	HandlerType: (*RPCFilesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "messages_getDocumentByHash",
			Handler:    _RPCFiles_MessagesGetDocumentByHash_Handler,
		},
		{
			MethodName: "messages_uploadMedia",
			Handler:    _RPCFiles_MessagesUploadMedia_Handler,
		},
		{
			MethodName: "messages_uploadEncryptedFile",
			Handler:    _RPCFiles_MessagesUploadEncryptedFile_Handler,
		},
		{
			MethodName: "upload_saveFilePart",
			Handler:    _RPCFiles_UploadSaveFilePart_Handler,
		},
		{
			MethodName: "upload_getFile",
			Handler:    _RPCFiles_UploadGetFile_Handler,
		},
		{
			MethodName: "upload_saveBigFilePart",
			Handler:    _RPCFiles_UploadSaveBigFilePart_Handler,
		},
		{
			MethodName: "upload_getWebFile",
			Handler:    _RPCFiles_UploadGetWebFile_Handler,
		},
		{
			MethodName: "upload_getCdnFile",
			Handler:    _RPCFiles_UploadGetCdnFile_Handler,
		},
		{
			MethodName: "upload_reuploadCdnFile",
			Handler:    _RPCFiles_UploadReuploadCdnFile_Handler,
		},
		{
			MethodName: "upload_getCdnFileHashes",
			Handler:    _RPCFiles_UploadGetCdnFileHashes_Handler,
		},
		{
			MethodName: "upload_getFileHashes",
			Handler:    _RPCFiles_UploadGetFileHashes_Handler,
		},
		{
			MethodName: "help_getCdnConfig",
			Handler:    _RPCFiles_HelpGetCdnConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCFolderTags_MessagesToggleDialogFilterTags_FullMethodName = "/mtproto.RPCFolderTags/messages_toggleDialogFilterTags"
)

// RPCFolderTagsClient is the client API for RPCFolderTags service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCFolderTagsClient interface {
	MessagesToggleDialogFilterTags(ctx context.Context, in *TLMessagesToggleDialogFilterTags, opts ...grpc.CallOption) (*Bool, error)
}

type rPCFolderTagsClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCFolderTagsClient(cc grpc.ClientConnInterface) RPCFolderTagsClient {
	return &rPCFolderTagsClient{cc}
}

func (c *rPCFolderTagsClient) MessagesToggleDialogFilterTags(ctx context.Context, in *TLMessagesToggleDialogFilterTags, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCFolderTags_MessagesToggleDialogFilterTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCFolderTagsServer is the server API for RPCFolderTags service.
// All implementations should embed UnimplementedRPCFolderTagsServer
// for forward compatibility.
type RPCFolderTagsServer interface {
	MessagesToggleDialogFilterTags(context.Context, *TLMessagesToggleDialogFilterTags) (*Bool, error)
}

// UnimplementedRPCFolderTagsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCFolderTagsServer struct{}

func (UnimplementedRPCFolderTagsServer) MessagesToggleDialogFilterTags(context.Context, *TLMessagesToggleDialogFilterTags) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesToggleDialogFilterTags not implemented")
}
func (UnimplementedRPCFolderTagsServer) testEmbeddedByValue() {}

// UnsafeRPCFolderTagsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCFolderTagsServer will
// result in compilation errors.
type UnsafeRPCFolderTagsServer interface {
	mustEmbedUnimplementedRPCFolderTagsServer()
}

func RegisterRPCFolderTagsServer(s grpc.ServiceRegistrar, srv RPCFolderTagsServer) {
	// If the following call pancis, it indicates UnimplementedRPCFolderTagsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCFolderTags_ServiceDesc, srv)
}

func _RPCFolderTags_MessagesToggleDialogFilterTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesToggleDialogFilterTags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFolderTagsServer).MessagesToggleDialogFilterTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCFolderTags_MessagesToggleDialogFilterTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFolderTagsServer).MessagesToggleDialogFilterTags(ctx, req.(*TLMessagesToggleDialogFilterTags))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCFolderTags_ServiceDesc is the grpc.ServiceDesc for RPCFolderTags service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCFolderTags_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCFolderTags",
	HandlerType: (*RPCFolderTagsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "messages_toggleDialogFilterTags",
			Handler:    _RPCFolderTags_MessagesToggleDialogFilterTags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCFolders_MessagesGetDialogFiltersEFD48C89_FullMethodName     = "/mtproto.RPCFolders/messages_getDialogFiltersEFD48C89"
	RPCFolders_MessagesGetSuggestedDialogFilters_FullMethodName    = "/mtproto.RPCFolders/messages_getSuggestedDialogFilters"
	RPCFolders_MessagesUpdateDialogFilter_FullMethodName           = "/mtproto.RPCFolders/messages_updateDialogFilter"
	RPCFolders_MessagesUpdateDialogFiltersOrder_FullMethodName     = "/mtproto.RPCFolders/messages_updateDialogFiltersOrder"
	RPCFolders_FoldersEditPeerFolders_FullMethodName               = "/mtproto.RPCFolders/folders_editPeerFolders"
	RPCFolders_ChatlistsExportChatlistInvite_FullMethodName        = "/mtproto.RPCFolders/chatlists_exportChatlistInvite"
	RPCFolders_ChatlistsDeleteExportedInvite_FullMethodName        = "/mtproto.RPCFolders/chatlists_deleteExportedInvite"
	RPCFolders_ChatlistsEditExportedInvite_FullMethodName          = "/mtproto.RPCFolders/chatlists_editExportedInvite"
	RPCFolders_ChatlistsGetExportedInvites_FullMethodName          = "/mtproto.RPCFolders/chatlists_getExportedInvites"
	RPCFolders_ChatlistsCheckChatlistInvite_FullMethodName         = "/mtproto.RPCFolders/chatlists_checkChatlistInvite"
	RPCFolders_ChatlistsJoinChatlistInvite_FullMethodName          = "/mtproto.RPCFolders/chatlists_joinChatlistInvite"
	RPCFolders_ChatlistsGetChatlistUpdates_FullMethodName          = "/mtproto.RPCFolders/chatlists_getChatlistUpdates"
	RPCFolders_ChatlistsJoinChatlistUpdates_FullMethodName         = "/mtproto.RPCFolders/chatlists_joinChatlistUpdates"
	RPCFolders_ChatlistsHideChatlistUpdates_FullMethodName         = "/mtproto.RPCFolders/chatlists_hideChatlistUpdates"
	RPCFolders_ChatlistsGetLeaveChatlistSuggestions_FullMethodName = "/mtproto.RPCFolders/chatlists_getLeaveChatlistSuggestions"
	RPCFolders_ChatlistsLeaveChatlist_FullMethodName               = "/mtproto.RPCFolders/chatlists_leaveChatlist"
	RPCFolders_MessagesGetDialogFiltersF19ED96D_FullMethodName     = "/mtproto.RPCFolders/messages_getDialogFiltersF19ED96D"
	RPCFolders_FoldersDeleteFolder_FullMethodName                  = "/mtproto.RPCFolders/folders_deleteFolder"
)

// RPCFoldersClient is the client API for RPCFolders service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCFoldersClient interface {
	MessagesGetDialogFiltersEFD48C89(ctx context.Context, in *TLMessagesGetDialogFiltersEFD48C89, opts ...grpc.CallOption) (*Messages_DialogFilters, error)
	MessagesGetSuggestedDialogFilters(ctx context.Context, in *TLMessagesGetSuggestedDialogFilters, opts ...grpc.CallOption) (*Vector_DialogFilterSuggested, error)
	MessagesUpdateDialogFilter(ctx context.Context, in *TLMessagesUpdateDialogFilter, opts ...grpc.CallOption) (*Bool, error)
	MessagesUpdateDialogFiltersOrder(ctx context.Context, in *TLMessagesUpdateDialogFiltersOrder, opts ...grpc.CallOption) (*Bool, error)
	FoldersEditPeerFolders(ctx context.Context, in *TLFoldersEditPeerFolders, opts ...grpc.CallOption) (*Updates, error)
	ChatlistsExportChatlistInvite(ctx context.Context, in *TLChatlistsExportChatlistInvite, opts ...grpc.CallOption) (*Chatlists_ExportedChatlistInvite, error)
	ChatlistsDeleteExportedInvite(ctx context.Context, in *TLChatlistsDeleteExportedInvite, opts ...grpc.CallOption) (*Bool, error)
	ChatlistsEditExportedInvite(ctx context.Context, in *TLChatlistsEditExportedInvite, opts ...grpc.CallOption) (*ExportedChatlistInvite, error)
	ChatlistsGetExportedInvites(ctx context.Context, in *TLChatlistsGetExportedInvites, opts ...grpc.CallOption) (*Chatlists_ExportedInvites, error)
	ChatlistsCheckChatlistInvite(ctx context.Context, in *TLChatlistsCheckChatlistInvite, opts ...grpc.CallOption) (*Chatlists_ChatlistInvite, error)
	ChatlistsJoinChatlistInvite(ctx context.Context, in *TLChatlistsJoinChatlistInvite, opts ...grpc.CallOption) (*Updates, error)
	ChatlistsGetChatlistUpdates(ctx context.Context, in *TLChatlistsGetChatlistUpdates, opts ...grpc.CallOption) (*Chatlists_ChatlistUpdates, error)
	ChatlistsJoinChatlistUpdates(ctx context.Context, in *TLChatlistsJoinChatlistUpdates, opts ...grpc.CallOption) (*Updates, error)
	ChatlistsHideChatlistUpdates(ctx context.Context, in *TLChatlistsHideChatlistUpdates, opts ...grpc.CallOption) (*Bool, error)
	ChatlistsGetLeaveChatlistSuggestions(ctx context.Context, in *TLChatlistsGetLeaveChatlistSuggestions, opts ...grpc.CallOption) (*Vector_Peer, error)
	ChatlistsLeaveChatlist(ctx context.Context, in *TLChatlistsLeaveChatlist, opts ...grpc.CallOption) (*Updates, error)
	MessagesGetDialogFiltersF19ED96D(ctx context.Context, in *TLMessagesGetDialogFiltersF19ED96D, opts ...grpc.CallOption) (*Vector_DialogFilter, error)
	FoldersDeleteFolder(ctx context.Context, in *TLFoldersDeleteFolder, opts ...grpc.CallOption) (*Updates, error)
}

type rPCFoldersClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCFoldersClient(cc grpc.ClientConnInterface) RPCFoldersClient {
	return &rPCFoldersClient{cc}
}

func (c *rPCFoldersClient) MessagesGetDialogFiltersEFD48C89(ctx context.Context, in *TLMessagesGetDialogFiltersEFD48C89, opts ...grpc.CallOption) (*Messages_DialogFilters, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_DialogFilters)
	err := c.cc.Invoke(ctx, RPCFolders_MessagesGetDialogFiltersEFD48C89_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCFoldersClient) MessagesGetSuggestedDialogFilters(ctx context.Context, in *TLMessagesGetSuggestedDialogFilters, opts ...grpc.CallOption) (*Vector_DialogFilterSuggested, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_DialogFilterSuggested)
	err := c.cc.Invoke(ctx, RPCFolders_MessagesGetSuggestedDialogFilters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCFoldersClient) MessagesUpdateDialogFilter(ctx context.Context, in *TLMessagesUpdateDialogFilter, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCFolders_MessagesUpdateDialogFilter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCFoldersClient) MessagesUpdateDialogFiltersOrder(ctx context.Context, in *TLMessagesUpdateDialogFiltersOrder, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCFolders_MessagesUpdateDialogFiltersOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCFoldersClient) FoldersEditPeerFolders(ctx context.Context, in *TLFoldersEditPeerFolders, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCFolders_FoldersEditPeerFolders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCFoldersClient) ChatlistsExportChatlistInvite(ctx context.Context, in *TLChatlistsExportChatlistInvite, opts ...grpc.CallOption) (*Chatlists_ExportedChatlistInvite, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Chatlists_ExportedChatlistInvite)
	err := c.cc.Invoke(ctx, RPCFolders_ChatlistsExportChatlistInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCFoldersClient) ChatlistsDeleteExportedInvite(ctx context.Context, in *TLChatlistsDeleteExportedInvite, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCFolders_ChatlistsDeleteExportedInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCFoldersClient) ChatlistsEditExportedInvite(ctx context.Context, in *TLChatlistsEditExportedInvite, opts ...grpc.CallOption) (*ExportedChatlistInvite, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportedChatlistInvite)
	err := c.cc.Invoke(ctx, RPCFolders_ChatlistsEditExportedInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCFoldersClient) ChatlistsGetExportedInvites(ctx context.Context, in *TLChatlistsGetExportedInvites, opts ...grpc.CallOption) (*Chatlists_ExportedInvites, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Chatlists_ExportedInvites)
	err := c.cc.Invoke(ctx, RPCFolders_ChatlistsGetExportedInvites_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCFoldersClient) ChatlistsCheckChatlistInvite(ctx context.Context, in *TLChatlistsCheckChatlistInvite, opts ...grpc.CallOption) (*Chatlists_ChatlistInvite, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Chatlists_ChatlistInvite)
	err := c.cc.Invoke(ctx, RPCFolders_ChatlistsCheckChatlistInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCFoldersClient) ChatlistsJoinChatlistInvite(ctx context.Context, in *TLChatlistsJoinChatlistInvite, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCFolders_ChatlistsJoinChatlistInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCFoldersClient) ChatlistsGetChatlistUpdates(ctx context.Context, in *TLChatlistsGetChatlistUpdates, opts ...grpc.CallOption) (*Chatlists_ChatlistUpdates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Chatlists_ChatlistUpdates)
	err := c.cc.Invoke(ctx, RPCFolders_ChatlistsGetChatlistUpdates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCFoldersClient) ChatlistsJoinChatlistUpdates(ctx context.Context, in *TLChatlistsJoinChatlistUpdates, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCFolders_ChatlistsJoinChatlistUpdates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCFoldersClient) ChatlistsHideChatlistUpdates(ctx context.Context, in *TLChatlistsHideChatlistUpdates, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCFolders_ChatlistsHideChatlistUpdates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCFoldersClient) ChatlistsGetLeaveChatlistSuggestions(ctx context.Context, in *TLChatlistsGetLeaveChatlistSuggestions, opts ...grpc.CallOption) (*Vector_Peer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_Peer)
	err := c.cc.Invoke(ctx, RPCFolders_ChatlistsGetLeaveChatlistSuggestions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCFoldersClient) ChatlistsLeaveChatlist(ctx context.Context, in *TLChatlistsLeaveChatlist, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCFolders_ChatlistsLeaveChatlist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCFoldersClient) MessagesGetDialogFiltersF19ED96D(ctx context.Context, in *TLMessagesGetDialogFiltersF19ED96D, opts ...grpc.CallOption) (*Vector_DialogFilter, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_DialogFilter)
	err := c.cc.Invoke(ctx, RPCFolders_MessagesGetDialogFiltersF19ED96D_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCFoldersClient) FoldersDeleteFolder(ctx context.Context, in *TLFoldersDeleteFolder, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCFolders_FoldersDeleteFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCFoldersServer is the server API for RPCFolders service.
// All implementations should embed UnimplementedRPCFoldersServer
// for forward compatibility.
type RPCFoldersServer interface {
	MessagesGetDialogFiltersEFD48C89(context.Context, *TLMessagesGetDialogFiltersEFD48C89) (*Messages_DialogFilters, error)
	MessagesGetSuggestedDialogFilters(context.Context, *TLMessagesGetSuggestedDialogFilters) (*Vector_DialogFilterSuggested, error)
	MessagesUpdateDialogFilter(context.Context, *TLMessagesUpdateDialogFilter) (*Bool, error)
	MessagesUpdateDialogFiltersOrder(context.Context, *TLMessagesUpdateDialogFiltersOrder) (*Bool, error)
	FoldersEditPeerFolders(context.Context, *TLFoldersEditPeerFolders) (*Updates, error)
	ChatlistsExportChatlistInvite(context.Context, *TLChatlistsExportChatlistInvite) (*Chatlists_ExportedChatlistInvite, error)
	ChatlistsDeleteExportedInvite(context.Context, *TLChatlistsDeleteExportedInvite) (*Bool, error)
	ChatlistsEditExportedInvite(context.Context, *TLChatlistsEditExportedInvite) (*ExportedChatlistInvite, error)
	ChatlistsGetExportedInvites(context.Context, *TLChatlistsGetExportedInvites) (*Chatlists_ExportedInvites, error)
	ChatlistsCheckChatlistInvite(context.Context, *TLChatlistsCheckChatlistInvite) (*Chatlists_ChatlistInvite, error)
	ChatlistsJoinChatlistInvite(context.Context, *TLChatlistsJoinChatlistInvite) (*Updates, error)
	ChatlistsGetChatlistUpdates(context.Context, *TLChatlistsGetChatlistUpdates) (*Chatlists_ChatlistUpdates, error)
	ChatlistsJoinChatlistUpdates(context.Context, *TLChatlistsJoinChatlistUpdates) (*Updates, error)
	ChatlistsHideChatlistUpdates(context.Context, *TLChatlistsHideChatlistUpdates) (*Bool, error)
	ChatlistsGetLeaveChatlistSuggestions(context.Context, *TLChatlistsGetLeaveChatlistSuggestions) (*Vector_Peer, error)
	ChatlistsLeaveChatlist(context.Context, *TLChatlistsLeaveChatlist) (*Updates, error)
	MessagesGetDialogFiltersF19ED96D(context.Context, *TLMessagesGetDialogFiltersF19ED96D) (*Vector_DialogFilter, error)
	FoldersDeleteFolder(context.Context, *TLFoldersDeleteFolder) (*Updates, error)
}

// UnimplementedRPCFoldersServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCFoldersServer struct{}

func (UnimplementedRPCFoldersServer) MessagesGetDialogFiltersEFD48C89(context.Context, *TLMessagesGetDialogFiltersEFD48C89) (*Messages_DialogFilters, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetDialogFiltersEFD48C89 not implemented")
}
func (UnimplementedRPCFoldersServer) MessagesGetSuggestedDialogFilters(context.Context, *TLMessagesGetSuggestedDialogFilters) (*Vector_DialogFilterSuggested, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetSuggestedDialogFilters not implemented")
}
func (UnimplementedRPCFoldersServer) MessagesUpdateDialogFilter(context.Context, *TLMessagesUpdateDialogFilter) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesUpdateDialogFilter not implemented")
}
func (UnimplementedRPCFoldersServer) MessagesUpdateDialogFiltersOrder(context.Context, *TLMessagesUpdateDialogFiltersOrder) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesUpdateDialogFiltersOrder not implemented")
}
func (UnimplementedRPCFoldersServer) FoldersEditPeerFolders(context.Context, *TLFoldersEditPeerFolders) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FoldersEditPeerFolders not implemented")
}
func (UnimplementedRPCFoldersServer) ChatlistsExportChatlistInvite(context.Context, *TLChatlistsExportChatlistInvite) (*Chatlists_ExportedChatlistInvite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatlistsExportChatlistInvite not implemented")
}
func (UnimplementedRPCFoldersServer) ChatlistsDeleteExportedInvite(context.Context, *TLChatlistsDeleteExportedInvite) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatlistsDeleteExportedInvite not implemented")
}
func (UnimplementedRPCFoldersServer) ChatlistsEditExportedInvite(context.Context, *TLChatlistsEditExportedInvite) (*ExportedChatlistInvite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatlistsEditExportedInvite not implemented")
}
func (UnimplementedRPCFoldersServer) ChatlistsGetExportedInvites(context.Context, *TLChatlistsGetExportedInvites) (*Chatlists_ExportedInvites, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatlistsGetExportedInvites not implemented")
}
func (UnimplementedRPCFoldersServer) ChatlistsCheckChatlistInvite(context.Context, *TLChatlistsCheckChatlistInvite) (*Chatlists_ChatlistInvite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatlistsCheckChatlistInvite not implemented")
}
func (UnimplementedRPCFoldersServer) ChatlistsJoinChatlistInvite(context.Context, *TLChatlistsJoinChatlistInvite) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatlistsJoinChatlistInvite not implemented")
}
func (UnimplementedRPCFoldersServer) ChatlistsGetChatlistUpdates(context.Context, *TLChatlistsGetChatlistUpdates) (*Chatlists_ChatlistUpdates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatlistsGetChatlistUpdates not implemented")
}
func (UnimplementedRPCFoldersServer) ChatlistsJoinChatlistUpdates(context.Context, *TLChatlistsJoinChatlistUpdates) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatlistsJoinChatlistUpdates not implemented")
}
func (UnimplementedRPCFoldersServer) ChatlistsHideChatlistUpdates(context.Context, *TLChatlistsHideChatlistUpdates) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatlistsHideChatlistUpdates not implemented")
}
func (UnimplementedRPCFoldersServer) ChatlistsGetLeaveChatlistSuggestions(context.Context, *TLChatlistsGetLeaveChatlistSuggestions) (*Vector_Peer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatlistsGetLeaveChatlistSuggestions not implemented")
}
func (UnimplementedRPCFoldersServer) ChatlistsLeaveChatlist(context.Context, *TLChatlistsLeaveChatlist) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatlistsLeaveChatlist not implemented")
}
func (UnimplementedRPCFoldersServer) MessagesGetDialogFiltersF19ED96D(context.Context, *TLMessagesGetDialogFiltersF19ED96D) (*Vector_DialogFilter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetDialogFiltersF19ED96D not implemented")
}
func (UnimplementedRPCFoldersServer) FoldersDeleteFolder(context.Context, *TLFoldersDeleteFolder) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FoldersDeleteFolder not implemented")
}
func (UnimplementedRPCFoldersServer) testEmbeddedByValue() {}

// UnsafeRPCFoldersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCFoldersServer will
// result in compilation errors.
type UnsafeRPCFoldersServer interface {
	mustEmbedUnimplementedRPCFoldersServer()
}

func RegisterRPCFoldersServer(s grpc.ServiceRegistrar, srv RPCFoldersServer) {
	// If the following call pancis, it indicates UnimplementedRPCFoldersServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCFolders_ServiceDesc, srv)
}

func _RPCFolders_MessagesGetDialogFiltersEFD48C89_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetDialogFiltersEFD48C89)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFoldersServer).MessagesGetDialogFiltersEFD48C89(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCFolders_MessagesGetDialogFiltersEFD48C89_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFoldersServer).MessagesGetDialogFiltersEFD48C89(ctx, req.(*TLMessagesGetDialogFiltersEFD48C89))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCFolders_MessagesGetSuggestedDialogFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetSuggestedDialogFilters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFoldersServer).MessagesGetSuggestedDialogFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCFolders_MessagesGetSuggestedDialogFilters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFoldersServer).MessagesGetSuggestedDialogFilters(ctx, req.(*TLMessagesGetSuggestedDialogFilters))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCFolders_MessagesUpdateDialogFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesUpdateDialogFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFoldersServer).MessagesUpdateDialogFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCFolders_MessagesUpdateDialogFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFoldersServer).MessagesUpdateDialogFilter(ctx, req.(*TLMessagesUpdateDialogFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCFolders_MessagesUpdateDialogFiltersOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesUpdateDialogFiltersOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFoldersServer).MessagesUpdateDialogFiltersOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCFolders_MessagesUpdateDialogFiltersOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFoldersServer).MessagesUpdateDialogFiltersOrder(ctx, req.(*TLMessagesUpdateDialogFiltersOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCFolders_FoldersEditPeerFolders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLFoldersEditPeerFolders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFoldersServer).FoldersEditPeerFolders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCFolders_FoldersEditPeerFolders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFoldersServer).FoldersEditPeerFolders(ctx, req.(*TLFoldersEditPeerFolders))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCFolders_ChatlistsExportChatlistInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatlistsExportChatlistInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFoldersServer).ChatlistsExportChatlistInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCFolders_ChatlistsExportChatlistInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFoldersServer).ChatlistsExportChatlistInvite(ctx, req.(*TLChatlistsExportChatlistInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCFolders_ChatlistsDeleteExportedInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatlistsDeleteExportedInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFoldersServer).ChatlistsDeleteExportedInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCFolders_ChatlistsDeleteExportedInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFoldersServer).ChatlistsDeleteExportedInvite(ctx, req.(*TLChatlistsDeleteExportedInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCFolders_ChatlistsEditExportedInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatlistsEditExportedInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFoldersServer).ChatlistsEditExportedInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCFolders_ChatlistsEditExportedInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFoldersServer).ChatlistsEditExportedInvite(ctx, req.(*TLChatlistsEditExportedInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCFolders_ChatlistsGetExportedInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatlistsGetExportedInvites)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFoldersServer).ChatlistsGetExportedInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCFolders_ChatlistsGetExportedInvites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFoldersServer).ChatlistsGetExportedInvites(ctx, req.(*TLChatlistsGetExportedInvites))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCFolders_ChatlistsCheckChatlistInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatlistsCheckChatlistInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFoldersServer).ChatlistsCheckChatlistInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCFolders_ChatlistsCheckChatlistInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFoldersServer).ChatlistsCheckChatlistInvite(ctx, req.(*TLChatlistsCheckChatlistInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCFolders_ChatlistsJoinChatlistInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatlistsJoinChatlistInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFoldersServer).ChatlistsJoinChatlistInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCFolders_ChatlistsJoinChatlistInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFoldersServer).ChatlistsJoinChatlistInvite(ctx, req.(*TLChatlistsJoinChatlistInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCFolders_ChatlistsGetChatlistUpdates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatlistsGetChatlistUpdates)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFoldersServer).ChatlistsGetChatlistUpdates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCFolders_ChatlistsGetChatlistUpdates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFoldersServer).ChatlistsGetChatlistUpdates(ctx, req.(*TLChatlistsGetChatlistUpdates))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCFolders_ChatlistsJoinChatlistUpdates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatlistsJoinChatlistUpdates)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFoldersServer).ChatlistsJoinChatlistUpdates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCFolders_ChatlistsJoinChatlistUpdates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFoldersServer).ChatlistsJoinChatlistUpdates(ctx, req.(*TLChatlistsJoinChatlistUpdates))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCFolders_ChatlistsHideChatlistUpdates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatlistsHideChatlistUpdates)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFoldersServer).ChatlistsHideChatlistUpdates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCFolders_ChatlistsHideChatlistUpdates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFoldersServer).ChatlistsHideChatlistUpdates(ctx, req.(*TLChatlistsHideChatlistUpdates))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCFolders_ChatlistsGetLeaveChatlistSuggestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatlistsGetLeaveChatlistSuggestions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFoldersServer).ChatlistsGetLeaveChatlistSuggestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCFolders_ChatlistsGetLeaveChatlistSuggestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFoldersServer).ChatlistsGetLeaveChatlistSuggestions(ctx, req.(*TLChatlistsGetLeaveChatlistSuggestions))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCFolders_ChatlistsLeaveChatlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatlistsLeaveChatlist)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFoldersServer).ChatlistsLeaveChatlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCFolders_ChatlistsLeaveChatlist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFoldersServer).ChatlistsLeaveChatlist(ctx, req.(*TLChatlistsLeaveChatlist))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCFolders_MessagesGetDialogFiltersF19ED96D_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetDialogFiltersF19ED96D)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFoldersServer).MessagesGetDialogFiltersF19ED96D(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCFolders_MessagesGetDialogFiltersF19ED96D_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFoldersServer).MessagesGetDialogFiltersF19ED96D(ctx, req.(*TLMessagesGetDialogFiltersF19ED96D))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCFolders_FoldersDeleteFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLFoldersDeleteFolder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFoldersServer).FoldersDeleteFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCFolders_FoldersDeleteFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFoldersServer).FoldersDeleteFolder(ctx, req.(*TLFoldersDeleteFolder))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCFolders_ServiceDesc is the grpc.ServiceDesc for RPCFolders service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCFolders_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCFolders",
	HandlerType: (*RPCFoldersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "messages_getDialogFiltersEFD48C89",
			Handler:    _RPCFolders_MessagesGetDialogFiltersEFD48C89_Handler,
		},
		{
			MethodName: "messages_getSuggestedDialogFilters",
			Handler:    _RPCFolders_MessagesGetSuggestedDialogFilters_Handler,
		},
		{
			MethodName: "messages_updateDialogFilter",
			Handler:    _RPCFolders_MessagesUpdateDialogFilter_Handler,
		},
		{
			MethodName: "messages_updateDialogFiltersOrder",
			Handler:    _RPCFolders_MessagesUpdateDialogFiltersOrder_Handler,
		},
		{
			MethodName: "folders_editPeerFolders",
			Handler:    _RPCFolders_FoldersEditPeerFolders_Handler,
		},
		{
			MethodName: "chatlists_exportChatlistInvite",
			Handler:    _RPCFolders_ChatlistsExportChatlistInvite_Handler,
		},
		{
			MethodName: "chatlists_deleteExportedInvite",
			Handler:    _RPCFolders_ChatlistsDeleteExportedInvite_Handler,
		},
		{
			MethodName: "chatlists_editExportedInvite",
			Handler:    _RPCFolders_ChatlistsEditExportedInvite_Handler,
		},
		{
			MethodName: "chatlists_getExportedInvites",
			Handler:    _RPCFolders_ChatlistsGetExportedInvites_Handler,
		},
		{
			MethodName: "chatlists_checkChatlistInvite",
			Handler:    _RPCFolders_ChatlistsCheckChatlistInvite_Handler,
		},
		{
			MethodName: "chatlists_joinChatlistInvite",
			Handler:    _RPCFolders_ChatlistsJoinChatlistInvite_Handler,
		},
		{
			MethodName: "chatlists_getChatlistUpdates",
			Handler:    _RPCFolders_ChatlistsGetChatlistUpdates_Handler,
		},
		{
			MethodName: "chatlists_joinChatlistUpdates",
			Handler:    _RPCFolders_ChatlistsJoinChatlistUpdates_Handler,
		},
		{
			MethodName: "chatlists_hideChatlistUpdates",
			Handler:    _RPCFolders_ChatlistsHideChatlistUpdates_Handler,
		},
		{
			MethodName: "chatlists_getLeaveChatlistSuggestions",
			Handler:    _RPCFolders_ChatlistsGetLeaveChatlistSuggestions_Handler,
		},
		{
			MethodName: "chatlists_leaveChatlist",
			Handler:    _RPCFolders_ChatlistsLeaveChatlist_Handler,
		},
		{
			MethodName: "messages_getDialogFiltersF19ED96D",
			Handler:    _RPCFolders_MessagesGetDialogFiltersF19ED96D_Handler,
		},
		{
			MethodName: "folders_deleteFolder",
			Handler:    _RPCFolders_FoldersDeleteFolder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCForums_ChannelsToggleForum_FullMethodName               = "/mtproto.RPCForums/channels_toggleForum"
	RPCForums_ChannelsCreateForumTopic_FullMethodName          = "/mtproto.RPCForums/channels_createForumTopic"
	RPCForums_ChannelsGetForumTopics_FullMethodName            = "/mtproto.RPCForums/channels_getForumTopics"
	RPCForums_ChannelsGetForumTopicsByID_FullMethodName        = "/mtproto.RPCForums/channels_getForumTopicsByID"
	RPCForums_ChannelsEditForumTopic_FullMethodName            = "/mtproto.RPCForums/channels_editForumTopic"
	RPCForums_ChannelsUpdatePinnedForumTopic_FullMethodName    = "/mtproto.RPCForums/channels_updatePinnedForumTopic"
	RPCForums_ChannelsDeleteTopicHistory_FullMethodName        = "/mtproto.RPCForums/channels_deleteTopicHistory"
	RPCForums_ChannelsReorderPinnedForumTopics_FullMethodName  = "/mtproto.RPCForums/channels_reorderPinnedForumTopics"
	RPCForums_ChannelsToggleViewForumAsMessages_FullMethodName = "/mtproto.RPCForums/channels_toggleViewForumAsMessages"
)

// RPCForumsClient is the client API for RPCForums service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCForumsClient interface {
	ChannelsToggleForum(ctx context.Context, in *TLChannelsToggleForum, opts ...grpc.CallOption) (*Updates, error)
	ChannelsCreateForumTopic(ctx context.Context, in *TLChannelsCreateForumTopic, opts ...grpc.CallOption) (*Updates, error)
	ChannelsGetForumTopics(ctx context.Context, in *TLChannelsGetForumTopics, opts ...grpc.CallOption) (*Messages_ForumTopics, error)
	ChannelsGetForumTopicsByID(ctx context.Context, in *TLChannelsGetForumTopicsByID, opts ...grpc.CallOption) (*Messages_ForumTopics, error)
	ChannelsEditForumTopic(ctx context.Context, in *TLChannelsEditForumTopic, opts ...grpc.CallOption) (*Updates, error)
	ChannelsUpdatePinnedForumTopic(ctx context.Context, in *TLChannelsUpdatePinnedForumTopic, opts ...grpc.CallOption) (*Updates, error)
	ChannelsDeleteTopicHistory(ctx context.Context, in *TLChannelsDeleteTopicHistory, opts ...grpc.CallOption) (*Messages_AffectedHistory, error)
	ChannelsReorderPinnedForumTopics(ctx context.Context, in *TLChannelsReorderPinnedForumTopics, opts ...grpc.CallOption) (*Updates, error)
	ChannelsToggleViewForumAsMessages(ctx context.Context, in *TLChannelsToggleViewForumAsMessages, opts ...grpc.CallOption) (*Updates, error)
}

type rPCForumsClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCForumsClient(cc grpc.ClientConnInterface) RPCForumsClient {
	return &rPCForumsClient{cc}
}

func (c *rPCForumsClient) ChannelsToggleForum(ctx context.Context, in *TLChannelsToggleForum, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCForums_ChannelsToggleForum_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCForumsClient) ChannelsCreateForumTopic(ctx context.Context, in *TLChannelsCreateForumTopic, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCForums_ChannelsCreateForumTopic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCForumsClient) ChannelsGetForumTopics(ctx context.Context, in *TLChannelsGetForumTopics, opts ...grpc.CallOption) (*Messages_ForumTopics, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_ForumTopics)
	err := c.cc.Invoke(ctx, RPCForums_ChannelsGetForumTopics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCForumsClient) ChannelsGetForumTopicsByID(ctx context.Context, in *TLChannelsGetForumTopicsByID, opts ...grpc.CallOption) (*Messages_ForumTopics, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_ForumTopics)
	err := c.cc.Invoke(ctx, RPCForums_ChannelsGetForumTopicsByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCForumsClient) ChannelsEditForumTopic(ctx context.Context, in *TLChannelsEditForumTopic, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCForums_ChannelsEditForumTopic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCForumsClient) ChannelsUpdatePinnedForumTopic(ctx context.Context, in *TLChannelsUpdatePinnedForumTopic, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCForums_ChannelsUpdatePinnedForumTopic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCForumsClient) ChannelsDeleteTopicHistory(ctx context.Context, in *TLChannelsDeleteTopicHistory, opts ...grpc.CallOption) (*Messages_AffectedHistory, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_AffectedHistory)
	err := c.cc.Invoke(ctx, RPCForums_ChannelsDeleteTopicHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCForumsClient) ChannelsReorderPinnedForumTopics(ctx context.Context, in *TLChannelsReorderPinnedForumTopics, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCForums_ChannelsReorderPinnedForumTopics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCForumsClient) ChannelsToggleViewForumAsMessages(ctx context.Context, in *TLChannelsToggleViewForumAsMessages, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCForums_ChannelsToggleViewForumAsMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCForumsServer is the server API for RPCForums service.
// All implementations should embed UnimplementedRPCForumsServer
// for forward compatibility.
type RPCForumsServer interface {
	ChannelsToggleForum(context.Context, *TLChannelsToggleForum) (*Updates, error)
	ChannelsCreateForumTopic(context.Context, *TLChannelsCreateForumTopic) (*Updates, error)
	ChannelsGetForumTopics(context.Context, *TLChannelsGetForumTopics) (*Messages_ForumTopics, error)
	ChannelsGetForumTopicsByID(context.Context, *TLChannelsGetForumTopicsByID) (*Messages_ForumTopics, error)
	ChannelsEditForumTopic(context.Context, *TLChannelsEditForumTopic) (*Updates, error)
	ChannelsUpdatePinnedForumTopic(context.Context, *TLChannelsUpdatePinnedForumTopic) (*Updates, error)
	ChannelsDeleteTopicHistory(context.Context, *TLChannelsDeleteTopicHistory) (*Messages_AffectedHistory, error)
	ChannelsReorderPinnedForumTopics(context.Context, *TLChannelsReorderPinnedForumTopics) (*Updates, error)
	ChannelsToggleViewForumAsMessages(context.Context, *TLChannelsToggleViewForumAsMessages) (*Updates, error)
}

// UnimplementedRPCForumsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCForumsServer struct{}

func (UnimplementedRPCForumsServer) ChannelsToggleForum(context.Context, *TLChannelsToggleForum) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsToggleForum not implemented")
}
func (UnimplementedRPCForumsServer) ChannelsCreateForumTopic(context.Context, *TLChannelsCreateForumTopic) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsCreateForumTopic not implemented")
}
func (UnimplementedRPCForumsServer) ChannelsGetForumTopics(context.Context, *TLChannelsGetForumTopics) (*Messages_ForumTopics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetForumTopics not implemented")
}
func (UnimplementedRPCForumsServer) ChannelsGetForumTopicsByID(context.Context, *TLChannelsGetForumTopicsByID) (*Messages_ForumTopics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetForumTopicsByID not implemented")
}
func (UnimplementedRPCForumsServer) ChannelsEditForumTopic(context.Context, *TLChannelsEditForumTopic) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsEditForumTopic not implemented")
}
func (UnimplementedRPCForumsServer) ChannelsUpdatePinnedForumTopic(context.Context, *TLChannelsUpdatePinnedForumTopic) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsUpdatePinnedForumTopic not implemented")
}
func (UnimplementedRPCForumsServer) ChannelsDeleteTopicHistory(context.Context, *TLChannelsDeleteTopicHistory) (*Messages_AffectedHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsDeleteTopicHistory not implemented")
}
func (UnimplementedRPCForumsServer) ChannelsReorderPinnedForumTopics(context.Context, *TLChannelsReorderPinnedForumTopics) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsReorderPinnedForumTopics not implemented")
}
func (UnimplementedRPCForumsServer) ChannelsToggleViewForumAsMessages(context.Context, *TLChannelsToggleViewForumAsMessages) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsToggleViewForumAsMessages not implemented")
}
func (UnimplementedRPCForumsServer) testEmbeddedByValue() {}

// UnsafeRPCForumsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCForumsServer will
// result in compilation errors.
type UnsafeRPCForumsServer interface {
	mustEmbedUnimplementedRPCForumsServer()
}

func RegisterRPCForumsServer(s grpc.ServiceRegistrar, srv RPCForumsServer) {
	// If the following call pancis, it indicates UnimplementedRPCForumsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCForums_ServiceDesc, srv)
}

func _RPCForums_ChannelsToggleForum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsToggleForum)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCForumsServer).ChannelsToggleForum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCForums_ChannelsToggleForum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCForumsServer).ChannelsToggleForum(ctx, req.(*TLChannelsToggleForum))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCForums_ChannelsCreateForumTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsCreateForumTopic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCForumsServer).ChannelsCreateForumTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCForums_ChannelsCreateForumTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCForumsServer).ChannelsCreateForumTopic(ctx, req.(*TLChannelsCreateForumTopic))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCForums_ChannelsGetForumTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetForumTopics)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCForumsServer).ChannelsGetForumTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCForums_ChannelsGetForumTopics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCForumsServer).ChannelsGetForumTopics(ctx, req.(*TLChannelsGetForumTopics))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCForums_ChannelsGetForumTopicsByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetForumTopicsByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCForumsServer).ChannelsGetForumTopicsByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCForums_ChannelsGetForumTopicsByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCForumsServer).ChannelsGetForumTopicsByID(ctx, req.(*TLChannelsGetForumTopicsByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCForums_ChannelsEditForumTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsEditForumTopic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCForumsServer).ChannelsEditForumTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCForums_ChannelsEditForumTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCForumsServer).ChannelsEditForumTopic(ctx, req.(*TLChannelsEditForumTopic))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCForums_ChannelsUpdatePinnedForumTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsUpdatePinnedForumTopic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCForumsServer).ChannelsUpdatePinnedForumTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCForums_ChannelsUpdatePinnedForumTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCForumsServer).ChannelsUpdatePinnedForumTopic(ctx, req.(*TLChannelsUpdatePinnedForumTopic))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCForums_ChannelsDeleteTopicHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsDeleteTopicHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCForumsServer).ChannelsDeleteTopicHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCForums_ChannelsDeleteTopicHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCForumsServer).ChannelsDeleteTopicHistory(ctx, req.(*TLChannelsDeleteTopicHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCForums_ChannelsReorderPinnedForumTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsReorderPinnedForumTopics)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCForumsServer).ChannelsReorderPinnedForumTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCForums_ChannelsReorderPinnedForumTopics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCForumsServer).ChannelsReorderPinnedForumTopics(ctx, req.(*TLChannelsReorderPinnedForumTopics))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCForums_ChannelsToggleViewForumAsMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsToggleViewForumAsMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCForumsServer).ChannelsToggleViewForumAsMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCForums_ChannelsToggleViewForumAsMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCForumsServer).ChannelsToggleViewForumAsMessages(ctx, req.(*TLChannelsToggleViewForumAsMessages))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCForums_ServiceDesc is the grpc.ServiceDesc for RPCForums service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCForums_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCForums",
	HandlerType: (*RPCForumsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "channels_toggleForum",
			Handler:    _RPCForums_ChannelsToggleForum_Handler,
		},
		{
			MethodName: "channels_createForumTopic",
			Handler:    _RPCForums_ChannelsCreateForumTopic_Handler,
		},
		{
			MethodName: "channels_getForumTopics",
			Handler:    _RPCForums_ChannelsGetForumTopics_Handler,
		},
		{
			MethodName: "channels_getForumTopicsByID",
			Handler:    _RPCForums_ChannelsGetForumTopicsByID_Handler,
		},
		{
			MethodName: "channels_editForumTopic",
			Handler:    _RPCForums_ChannelsEditForumTopic_Handler,
		},
		{
			MethodName: "channels_updatePinnedForumTopic",
			Handler:    _RPCForums_ChannelsUpdatePinnedForumTopic_Handler,
		},
		{
			MethodName: "channels_deleteTopicHistory",
			Handler:    _RPCForums_ChannelsDeleteTopicHistory_Handler,
		},
		{
			MethodName: "channels_reorderPinnedForumTopics",
			Handler:    _RPCForums_ChannelsReorderPinnedForumTopics_Handler,
		},
		{
			MethodName: "channels_toggleViewForumAsMessages",
			Handler:    _RPCForums_ChannelsToggleViewForumAsMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCFragment_AccountReorderUsernames_FullMethodName        = "/mtproto.RPCFragment/account_reorderUsernames"
	RPCFragment_AccountToggleUsername_FullMethodName          = "/mtproto.RPCFragment/account_toggleUsername"
	RPCFragment_ChannelsReorderUsernames_FullMethodName       = "/mtproto.RPCFragment/channels_reorderUsernames"
	RPCFragment_ChannelsToggleUsername_FullMethodName         = "/mtproto.RPCFragment/channels_toggleUsername"
	RPCFragment_ChannelsDeactivateAllUsernames_FullMethodName = "/mtproto.RPCFragment/channels_deactivateAllUsernames"
	RPCFragment_BotsReorderUsernames_FullMethodName           = "/mtproto.RPCFragment/bots_reorderUsernames"
	RPCFragment_BotsToggleUsername_FullMethodName             = "/mtproto.RPCFragment/bots_toggleUsername"
)

// RPCFragmentClient is the client API for RPCFragment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCFragmentClient interface {
	AccountReorderUsernames(ctx context.Context, in *TLAccountReorderUsernames, opts ...grpc.CallOption) (*Bool, error)
	AccountToggleUsername(ctx context.Context, in *TLAccountToggleUsername, opts ...grpc.CallOption) (*Bool, error)
	ChannelsReorderUsernames(ctx context.Context, in *TLChannelsReorderUsernames, opts ...grpc.CallOption) (*Bool, error)
	ChannelsToggleUsername(ctx context.Context, in *TLChannelsToggleUsername, opts ...grpc.CallOption) (*Bool, error)
	ChannelsDeactivateAllUsernames(ctx context.Context, in *TLChannelsDeactivateAllUsernames, opts ...grpc.CallOption) (*Bool, error)
	BotsReorderUsernames(ctx context.Context, in *TLBotsReorderUsernames, opts ...grpc.CallOption) (*Bool, error)
	BotsToggleUsername(ctx context.Context, in *TLBotsToggleUsername, opts ...grpc.CallOption) (*Bool, error)
}

type rPCFragmentClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCFragmentClient(cc grpc.ClientConnInterface) RPCFragmentClient {
	return &rPCFragmentClient{cc}
}

func (c *rPCFragmentClient) AccountReorderUsernames(ctx context.Context, in *TLAccountReorderUsernames, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCFragment_AccountReorderUsernames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCFragmentClient) AccountToggleUsername(ctx context.Context, in *TLAccountToggleUsername, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCFragment_AccountToggleUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCFragmentClient) ChannelsReorderUsernames(ctx context.Context, in *TLChannelsReorderUsernames, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCFragment_ChannelsReorderUsernames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCFragmentClient) ChannelsToggleUsername(ctx context.Context, in *TLChannelsToggleUsername, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCFragment_ChannelsToggleUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCFragmentClient) ChannelsDeactivateAllUsernames(ctx context.Context, in *TLChannelsDeactivateAllUsernames, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCFragment_ChannelsDeactivateAllUsernames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCFragmentClient) BotsReorderUsernames(ctx context.Context, in *TLBotsReorderUsernames, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCFragment_BotsReorderUsernames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCFragmentClient) BotsToggleUsername(ctx context.Context, in *TLBotsToggleUsername, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCFragment_BotsToggleUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCFragmentServer is the server API for RPCFragment service.
// All implementations should embed UnimplementedRPCFragmentServer
// for forward compatibility.
type RPCFragmentServer interface {
	AccountReorderUsernames(context.Context, *TLAccountReorderUsernames) (*Bool, error)
	AccountToggleUsername(context.Context, *TLAccountToggleUsername) (*Bool, error)
	ChannelsReorderUsernames(context.Context, *TLChannelsReorderUsernames) (*Bool, error)
	ChannelsToggleUsername(context.Context, *TLChannelsToggleUsername) (*Bool, error)
	ChannelsDeactivateAllUsernames(context.Context, *TLChannelsDeactivateAllUsernames) (*Bool, error)
	BotsReorderUsernames(context.Context, *TLBotsReorderUsernames) (*Bool, error)
	BotsToggleUsername(context.Context, *TLBotsToggleUsername) (*Bool, error)
}

// UnimplementedRPCFragmentServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCFragmentServer struct{}

func (UnimplementedRPCFragmentServer) AccountReorderUsernames(context.Context, *TLAccountReorderUsernames) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountReorderUsernames not implemented")
}
func (UnimplementedRPCFragmentServer) AccountToggleUsername(context.Context, *TLAccountToggleUsername) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountToggleUsername not implemented")
}
func (UnimplementedRPCFragmentServer) ChannelsReorderUsernames(context.Context, *TLChannelsReorderUsernames) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsReorderUsernames not implemented")
}
func (UnimplementedRPCFragmentServer) ChannelsToggleUsername(context.Context, *TLChannelsToggleUsername) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsToggleUsername not implemented")
}
func (UnimplementedRPCFragmentServer) ChannelsDeactivateAllUsernames(context.Context, *TLChannelsDeactivateAllUsernames) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsDeactivateAllUsernames not implemented")
}
func (UnimplementedRPCFragmentServer) BotsReorderUsernames(context.Context, *TLBotsReorderUsernames) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotsReorderUsernames not implemented")
}
func (UnimplementedRPCFragmentServer) BotsToggleUsername(context.Context, *TLBotsToggleUsername) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotsToggleUsername not implemented")
}
func (UnimplementedRPCFragmentServer) testEmbeddedByValue() {}

// UnsafeRPCFragmentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCFragmentServer will
// result in compilation errors.
type UnsafeRPCFragmentServer interface {
	mustEmbedUnimplementedRPCFragmentServer()
}

func RegisterRPCFragmentServer(s grpc.ServiceRegistrar, srv RPCFragmentServer) {
	// If the following call pancis, it indicates UnimplementedRPCFragmentServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCFragment_ServiceDesc, srv)
}

func _RPCFragment_AccountReorderUsernames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountReorderUsernames)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFragmentServer).AccountReorderUsernames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCFragment_AccountReorderUsernames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFragmentServer).AccountReorderUsernames(ctx, req.(*TLAccountReorderUsernames))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCFragment_AccountToggleUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountToggleUsername)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFragmentServer).AccountToggleUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCFragment_AccountToggleUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFragmentServer).AccountToggleUsername(ctx, req.(*TLAccountToggleUsername))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCFragment_ChannelsReorderUsernames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsReorderUsernames)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFragmentServer).ChannelsReorderUsernames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCFragment_ChannelsReorderUsernames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFragmentServer).ChannelsReorderUsernames(ctx, req.(*TLChannelsReorderUsernames))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCFragment_ChannelsToggleUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsToggleUsername)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFragmentServer).ChannelsToggleUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCFragment_ChannelsToggleUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFragmentServer).ChannelsToggleUsername(ctx, req.(*TLChannelsToggleUsername))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCFragment_ChannelsDeactivateAllUsernames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsDeactivateAllUsernames)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFragmentServer).ChannelsDeactivateAllUsernames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCFragment_ChannelsDeactivateAllUsernames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFragmentServer).ChannelsDeactivateAllUsernames(ctx, req.(*TLChannelsDeactivateAllUsernames))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCFragment_BotsReorderUsernames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLBotsReorderUsernames)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFragmentServer).BotsReorderUsernames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCFragment_BotsReorderUsernames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFragmentServer).BotsReorderUsernames(ctx, req.(*TLBotsReorderUsernames))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCFragment_BotsToggleUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLBotsToggleUsername)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFragmentServer).BotsToggleUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCFragment_BotsToggleUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFragmentServer).BotsToggleUsername(ctx, req.(*TLBotsToggleUsername))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCFragment_ServiceDesc is the grpc.ServiceDesc for RPCFragment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCFragment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCFragment",
	HandlerType: (*RPCFragmentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "account_reorderUsernames",
			Handler:    _RPCFragment_AccountReorderUsernames_Handler,
		},
		{
			MethodName: "account_toggleUsername",
			Handler:    _RPCFragment_AccountToggleUsername_Handler,
		},
		{
			MethodName: "channels_reorderUsernames",
			Handler:    _RPCFragment_ChannelsReorderUsernames_Handler,
		},
		{
			MethodName: "channels_toggleUsername",
			Handler:    _RPCFragment_ChannelsToggleUsername_Handler,
		},
		{
			MethodName: "channels_deactivateAllUsernames",
			Handler:    _RPCFragment_ChannelsDeactivateAllUsernames_Handler,
		},
		{
			MethodName: "bots_reorderUsernames",
			Handler:    _RPCFragment_BotsReorderUsernames_Handler,
		},
		{
			MethodName: "bots_toggleUsername",
			Handler:    _RPCFragment_BotsToggleUsername_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCFragmentCollectibles_FragmentGetCollectibleInfo_FullMethodName = "/mtproto.RPCFragmentCollectibles/fragment_getCollectibleInfo"
)

// RPCFragmentCollectiblesClient is the client API for RPCFragmentCollectibles service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCFragmentCollectiblesClient interface {
	FragmentGetCollectibleInfo(ctx context.Context, in *TLFragmentGetCollectibleInfo, opts ...grpc.CallOption) (*Fragment_CollectibleInfo, error)
}

type rPCFragmentCollectiblesClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCFragmentCollectiblesClient(cc grpc.ClientConnInterface) RPCFragmentCollectiblesClient {
	return &rPCFragmentCollectiblesClient{cc}
}

func (c *rPCFragmentCollectiblesClient) FragmentGetCollectibleInfo(ctx context.Context, in *TLFragmentGetCollectibleInfo, opts ...grpc.CallOption) (*Fragment_CollectibleInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Fragment_CollectibleInfo)
	err := c.cc.Invoke(ctx, RPCFragmentCollectibles_FragmentGetCollectibleInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCFragmentCollectiblesServer is the server API for RPCFragmentCollectibles service.
// All implementations should embed UnimplementedRPCFragmentCollectiblesServer
// for forward compatibility.
type RPCFragmentCollectiblesServer interface {
	FragmentGetCollectibleInfo(context.Context, *TLFragmentGetCollectibleInfo) (*Fragment_CollectibleInfo, error)
}

// UnimplementedRPCFragmentCollectiblesServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCFragmentCollectiblesServer struct{}

func (UnimplementedRPCFragmentCollectiblesServer) FragmentGetCollectibleInfo(context.Context, *TLFragmentGetCollectibleInfo) (*Fragment_CollectibleInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FragmentGetCollectibleInfo not implemented")
}
func (UnimplementedRPCFragmentCollectiblesServer) testEmbeddedByValue() {}

// UnsafeRPCFragmentCollectiblesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCFragmentCollectiblesServer will
// result in compilation errors.
type UnsafeRPCFragmentCollectiblesServer interface {
	mustEmbedUnimplementedRPCFragmentCollectiblesServer()
}

func RegisterRPCFragmentCollectiblesServer(s grpc.ServiceRegistrar, srv RPCFragmentCollectiblesServer) {
	// If the following call pancis, it indicates UnimplementedRPCFragmentCollectiblesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCFragmentCollectibles_ServiceDesc, srv)
}

func _RPCFragmentCollectibles_FragmentGetCollectibleInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLFragmentGetCollectibleInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFragmentCollectiblesServer).FragmentGetCollectibleInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCFragmentCollectibles_FragmentGetCollectibleInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFragmentCollectiblesServer).FragmentGetCollectibleInfo(ctx, req.(*TLFragmentGetCollectibleInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCFragmentCollectibles_ServiceDesc is the grpc.ServiceDesc for RPCFragmentCollectibles service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCFragmentCollectibles_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCFragmentCollectibles",
	HandlerType: (*RPCFragmentCollectiblesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "fragment_getCollectibleInfo",
			Handler:    _RPCFragmentCollectibles_FragmentGetCollectibleInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCGames_MessagesSetGameScore_FullMethodName            = "/mtproto.RPCGames/messages_setGameScore"
	RPCGames_MessagesSetInlineGameScore_FullMethodName      = "/mtproto.RPCGames/messages_setInlineGameScore"
	RPCGames_MessagesGetGameHighScores_FullMethodName       = "/mtproto.RPCGames/messages_getGameHighScores"
	RPCGames_MessagesGetInlineGameHighScores_FullMethodName = "/mtproto.RPCGames/messages_getInlineGameHighScores"
)

// RPCGamesClient is the client API for RPCGames service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCGamesClient interface {
	MessagesSetGameScore(ctx context.Context, in *TLMessagesSetGameScore, opts ...grpc.CallOption) (*Updates, error)
	MessagesSetInlineGameScore(ctx context.Context, in *TLMessagesSetInlineGameScore, opts ...grpc.CallOption) (*Bool, error)
	MessagesGetGameHighScores(ctx context.Context, in *TLMessagesGetGameHighScores, opts ...grpc.CallOption) (*Messages_HighScores, error)
	MessagesGetInlineGameHighScores(ctx context.Context, in *TLMessagesGetInlineGameHighScores, opts ...grpc.CallOption) (*Messages_HighScores, error)
}

type rPCGamesClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCGamesClient(cc grpc.ClientConnInterface) RPCGamesClient {
	return &rPCGamesClient{cc}
}

func (c *rPCGamesClient) MessagesSetGameScore(ctx context.Context, in *TLMessagesSetGameScore, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCGames_MessagesSetGameScore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCGamesClient) MessagesSetInlineGameScore(ctx context.Context, in *TLMessagesSetInlineGameScore, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCGames_MessagesSetInlineGameScore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCGamesClient) MessagesGetGameHighScores(ctx context.Context, in *TLMessagesGetGameHighScores, opts ...grpc.CallOption) (*Messages_HighScores, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_HighScores)
	err := c.cc.Invoke(ctx, RPCGames_MessagesGetGameHighScores_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCGamesClient) MessagesGetInlineGameHighScores(ctx context.Context, in *TLMessagesGetInlineGameHighScores, opts ...grpc.CallOption) (*Messages_HighScores, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_HighScores)
	err := c.cc.Invoke(ctx, RPCGames_MessagesGetInlineGameHighScores_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCGamesServer is the server API for RPCGames service.
// All implementations should embed UnimplementedRPCGamesServer
// for forward compatibility.
type RPCGamesServer interface {
	MessagesSetGameScore(context.Context, *TLMessagesSetGameScore) (*Updates, error)
	MessagesSetInlineGameScore(context.Context, *TLMessagesSetInlineGameScore) (*Bool, error)
	MessagesGetGameHighScores(context.Context, *TLMessagesGetGameHighScores) (*Messages_HighScores, error)
	MessagesGetInlineGameHighScores(context.Context, *TLMessagesGetInlineGameHighScores) (*Messages_HighScores, error)
}

// UnimplementedRPCGamesServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCGamesServer struct{}

func (UnimplementedRPCGamesServer) MessagesSetGameScore(context.Context, *TLMessagesSetGameScore) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSetGameScore not implemented")
}
func (UnimplementedRPCGamesServer) MessagesSetInlineGameScore(context.Context, *TLMessagesSetInlineGameScore) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSetInlineGameScore not implemented")
}
func (UnimplementedRPCGamesServer) MessagesGetGameHighScores(context.Context, *TLMessagesGetGameHighScores) (*Messages_HighScores, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetGameHighScores not implemented")
}
func (UnimplementedRPCGamesServer) MessagesGetInlineGameHighScores(context.Context, *TLMessagesGetInlineGameHighScores) (*Messages_HighScores, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetInlineGameHighScores not implemented")
}
func (UnimplementedRPCGamesServer) testEmbeddedByValue() {}

// UnsafeRPCGamesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCGamesServer will
// result in compilation errors.
type UnsafeRPCGamesServer interface {
	mustEmbedUnimplementedRPCGamesServer()
}

func RegisterRPCGamesServer(s grpc.ServiceRegistrar, srv RPCGamesServer) {
	// If the following call pancis, it indicates UnimplementedRPCGamesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCGames_ServiceDesc, srv)
}

func _RPCGames_MessagesSetGameScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSetGameScore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCGamesServer).MessagesSetGameScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCGames_MessagesSetGameScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCGamesServer).MessagesSetGameScore(ctx, req.(*TLMessagesSetGameScore))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCGames_MessagesSetInlineGameScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSetInlineGameScore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCGamesServer).MessagesSetInlineGameScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCGames_MessagesSetInlineGameScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCGamesServer).MessagesSetInlineGameScore(ctx, req.(*TLMessagesSetInlineGameScore))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCGames_MessagesGetGameHighScores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetGameHighScores)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCGamesServer).MessagesGetGameHighScores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCGames_MessagesGetGameHighScores_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCGamesServer).MessagesGetGameHighScores(ctx, req.(*TLMessagesGetGameHighScores))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCGames_MessagesGetInlineGameHighScores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetInlineGameHighScores)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCGamesServer).MessagesGetInlineGameHighScores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCGames_MessagesGetInlineGameHighScores_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCGamesServer).MessagesGetInlineGameHighScores(ctx, req.(*TLMessagesGetInlineGameHighScores))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCGames_ServiceDesc is the grpc.ServiceDesc for RPCGames service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCGames_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCGames",
	HandlerType: (*RPCGamesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "messages_setGameScore",
			Handler:    _RPCGames_MessagesSetGameScore_Handler,
		},
		{
			MethodName: "messages_setInlineGameScore",
			Handler:    _RPCGames_MessagesSetInlineGameScore_Handler,
		},
		{
			MethodName: "messages_getGameHighScores",
			Handler:    _RPCGames_MessagesGetGameHighScores_Handler,
		},
		{
			MethodName: "messages_getInlineGameHighScores",
			Handler:    _RPCGames_MessagesGetInlineGameHighScores_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCGifs_MessagesGetSavedGifs_FullMethodName = "/mtproto.RPCGifs/messages_getSavedGifs"
	RPCGifs_MessagesSaveGif_FullMethodName      = "/mtproto.RPCGifs/messages_saveGif"
)

// RPCGifsClient is the client API for RPCGifs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCGifsClient interface {
	MessagesGetSavedGifs(ctx context.Context, in *TLMessagesGetSavedGifs, opts ...grpc.CallOption) (*Messages_SavedGifs, error)
	MessagesSaveGif(ctx context.Context, in *TLMessagesSaveGif, opts ...grpc.CallOption) (*Bool, error)
}

type rPCGifsClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCGifsClient(cc grpc.ClientConnInterface) RPCGifsClient {
	return &rPCGifsClient{cc}
}

func (c *rPCGifsClient) MessagesGetSavedGifs(ctx context.Context, in *TLMessagesGetSavedGifs, opts ...grpc.CallOption) (*Messages_SavedGifs, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_SavedGifs)
	err := c.cc.Invoke(ctx, RPCGifs_MessagesGetSavedGifs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCGifsClient) MessagesSaveGif(ctx context.Context, in *TLMessagesSaveGif, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCGifs_MessagesSaveGif_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCGifsServer is the server API for RPCGifs service.
// All implementations should embed UnimplementedRPCGifsServer
// for forward compatibility.
type RPCGifsServer interface {
	MessagesGetSavedGifs(context.Context, *TLMessagesGetSavedGifs) (*Messages_SavedGifs, error)
	MessagesSaveGif(context.Context, *TLMessagesSaveGif) (*Bool, error)
}

// UnimplementedRPCGifsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCGifsServer struct{}

func (UnimplementedRPCGifsServer) MessagesGetSavedGifs(context.Context, *TLMessagesGetSavedGifs) (*Messages_SavedGifs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetSavedGifs not implemented")
}
func (UnimplementedRPCGifsServer) MessagesSaveGif(context.Context, *TLMessagesSaveGif) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSaveGif not implemented")
}
func (UnimplementedRPCGifsServer) testEmbeddedByValue() {}

// UnsafeRPCGifsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCGifsServer will
// result in compilation errors.
type UnsafeRPCGifsServer interface {
	mustEmbedUnimplementedRPCGifsServer()
}

func RegisterRPCGifsServer(s grpc.ServiceRegistrar, srv RPCGifsServer) {
	// If the following call pancis, it indicates UnimplementedRPCGifsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCGifs_ServiceDesc, srv)
}

func _RPCGifs_MessagesGetSavedGifs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetSavedGifs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCGifsServer).MessagesGetSavedGifs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCGifs_MessagesGetSavedGifs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCGifsServer).MessagesGetSavedGifs(ctx, req.(*TLMessagesGetSavedGifs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCGifs_MessagesSaveGif_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSaveGif)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCGifsServer).MessagesSaveGif(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCGifs_MessagesSaveGif_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCGifsServer).MessagesSaveGif(ctx, req.(*TLMessagesSaveGif))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCGifs_ServiceDesc is the grpc.ServiceDesc for RPCGifs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCGifs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCGifs",
	HandlerType: (*RPCGifsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "messages_getSavedGifs",
			Handler:    _RPCGifs_MessagesGetSavedGifs_Handler,
		},
		{
			MethodName: "messages_saveGif",
			Handler:    _RPCGifs_MessagesSaveGif_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCGiftCodes_PaymentsCheckGiftCode_FullMethodName = "/mtproto.RPCGiftCodes/payments_checkGiftCode"
	RPCGiftCodes_PaymentsApplyGiftCode_FullMethodName = "/mtproto.RPCGiftCodes/payments_applyGiftCode"
)

// RPCGiftCodesClient is the client API for RPCGiftCodes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCGiftCodesClient interface {
	PaymentsCheckGiftCode(ctx context.Context, in *TLPaymentsCheckGiftCode, opts ...grpc.CallOption) (*Payments_CheckedGiftCode, error)
	PaymentsApplyGiftCode(ctx context.Context, in *TLPaymentsApplyGiftCode, opts ...grpc.CallOption) (*Updates, error)
}

type rPCGiftCodesClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCGiftCodesClient(cc grpc.ClientConnInterface) RPCGiftCodesClient {
	return &rPCGiftCodesClient{cc}
}

func (c *rPCGiftCodesClient) PaymentsCheckGiftCode(ctx context.Context, in *TLPaymentsCheckGiftCode, opts ...grpc.CallOption) (*Payments_CheckedGiftCode, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payments_CheckedGiftCode)
	err := c.cc.Invoke(ctx, RPCGiftCodes_PaymentsCheckGiftCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCGiftCodesClient) PaymentsApplyGiftCode(ctx context.Context, in *TLPaymentsApplyGiftCode, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCGiftCodes_PaymentsApplyGiftCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCGiftCodesServer is the server API for RPCGiftCodes service.
// All implementations should embed UnimplementedRPCGiftCodesServer
// for forward compatibility.
type RPCGiftCodesServer interface {
	PaymentsCheckGiftCode(context.Context, *TLPaymentsCheckGiftCode) (*Payments_CheckedGiftCode, error)
	PaymentsApplyGiftCode(context.Context, *TLPaymentsApplyGiftCode) (*Updates, error)
}

// UnimplementedRPCGiftCodesServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCGiftCodesServer struct{}

func (UnimplementedRPCGiftCodesServer) PaymentsCheckGiftCode(context.Context, *TLPaymentsCheckGiftCode) (*Payments_CheckedGiftCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsCheckGiftCode not implemented")
}
func (UnimplementedRPCGiftCodesServer) PaymentsApplyGiftCode(context.Context, *TLPaymentsApplyGiftCode) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsApplyGiftCode not implemented")
}
func (UnimplementedRPCGiftCodesServer) testEmbeddedByValue() {}

// UnsafeRPCGiftCodesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCGiftCodesServer will
// result in compilation errors.
type UnsafeRPCGiftCodesServer interface {
	mustEmbedUnimplementedRPCGiftCodesServer()
}

func RegisterRPCGiftCodesServer(s grpc.ServiceRegistrar, srv RPCGiftCodesServer) {
	// If the following call pancis, it indicates UnimplementedRPCGiftCodesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCGiftCodes_ServiceDesc, srv)
}

func _RPCGiftCodes_PaymentsCheckGiftCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsCheckGiftCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCGiftCodesServer).PaymentsCheckGiftCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCGiftCodes_PaymentsCheckGiftCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCGiftCodesServer).PaymentsCheckGiftCode(ctx, req.(*TLPaymentsCheckGiftCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCGiftCodes_PaymentsApplyGiftCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsApplyGiftCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCGiftCodesServer).PaymentsApplyGiftCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCGiftCodes_PaymentsApplyGiftCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCGiftCodesServer).PaymentsApplyGiftCode(ctx, req.(*TLPaymentsApplyGiftCode))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCGiftCodes_ServiceDesc is the grpc.ServiceDesc for RPCGiftCodes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCGiftCodes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCGiftCodes",
	HandlerType: (*RPCGiftCodesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "payments_checkGiftCode",
			Handler:    _RPCGiftCodes_PaymentsCheckGiftCode_Handler,
		},
		{
			MethodName: "payments_applyGiftCode",
			Handler:    _RPCGiftCodes_PaymentsApplyGiftCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCGifts_PaymentsGetStarGifts_FullMethodName                    = "/mtproto.RPCGifts/payments_getStarGifts"
	RPCGifts_PaymentsSaveStarGift_FullMethodName                    = "/mtproto.RPCGifts/payments_saveStarGift"
	RPCGifts_PaymentsConvertStarGift_FullMethodName                 = "/mtproto.RPCGifts/payments_convertStarGift"
	RPCGifts_PaymentsGetStarGiftUpgradePreview_FullMethodName       = "/mtproto.RPCGifts/payments_getStarGiftUpgradePreview"
	RPCGifts_PaymentsUpgradeStarGift_FullMethodName                 = "/mtproto.RPCGifts/payments_upgradeStarGift"
	RPCGifts_PaymentsTransferStarGift_FullMethodName                = "/mtproto.RPCGifts/payments_transferStarGift"
	RPCGifts_PaymentsGetUniqueStarGift_FullMethodName               = "/mtproto.RPCGifts/payments_getUniqueStarGift"
	RPCGifts_PaymentsGetSavedStarGifts_FullMethodName               = "/mtproto.RPCGifts/payments_getSavedStarGifts"
	RPCGifts_PaymentsGetSavedStarGift_FullMethodName                = "/mtproto.RPCGifts/payments_getSavedStarGift"
	RPCGifts_PaymentsGetStarGiftWithdrawalUrl_FullMethodName        = "/mtproto.RPCGifts/payments_getStarGiftWithdrawalUrl"
	RPCGifts_PaymentsToggleChatStarGiftNotifications_FullMethodName = "/mtproto.RPCGifts/payments_toggleChatStarGiftNotifications"
	RPCGifts_PaymentsToggleStarGiftsPinnedToTop_FullMethodName      = "/mtproto.RPCGifts/payments_toggleStarGiftsPinnedToTop"
	RPCGifts_PaymentsGetUserStarGifts_FullMethodName                = "/mtproto.RPCGifts/payments_getUserStarGifts"
	RPCGifts_PaymentsGetUserStarGift_FullMethodName                 = "/mtproto.RPCGifts/payments_getUserStarGift"
)

// RPCGiftsClient is the client API for RPCGifts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCGiftsClient interface {
	PaymentsGetStarGifts(ctx context.Context, in *TLPaymentsGetStarGifts, opts ...grpc.CallOption) (*Payments_StarGifts, error)
	PaymentsSaveStarGift(ctx context.Context, in *TLPaymentsSaveStarGift, opts ...grpc.CallOption) (*Bool, error)
	PaymentsConvertStarGift(ctx context.Context, in *TLPaymentsConvertStarGift, opts ...grpc.CallOption) (*Bool, error)
	PaymentsGetStarGiftUpgradePreview(ctx context.Context, in *TLPaymentsGetStarGiftUpgradePreview, opts ...grpc.CallOption) (*Payments_StarGiftUpgradePreview, error)
	PaymentsUpgradeStarGift(ctx context.Context, in *TLPaymentsUpgradeStarGift, opts ...grpc.CallOption) (*Updates, error)
	PaymentsTransferStarGift(ctx context.Context, in *TLPaymentsTransferStarGift, opts ...grpc.CallOption) (*Updates, error)
	PaymentsGetUniqueStarGift(ctx context.Context, in *TLPaymentsGetUniqueStarGift, opts ...grpc.CallOption) (*Payments_UniqueStarGift, error)
	PaymentsGetSavedStarGifts(ctx context.Context, in *TLPaymentsGetSavedStarGifts, opts ...grpc.CallOption) (*Payments_SavedStarGifts, error)
	PaymentsGetSavedStarGift(ctx context.Context, in *TLPaymentsGetSavedStarGift, opts ...grpc.CallOption) (*Payments_SavedStarGifts, error)
	PaymentsGetStarGiftWithdrawalUrl(ctx context.Context, in *TLPaymentsGetStarGiftWithdrawalUrl, opts ...grpc.CallOption) (*Payments_StarGiftWithdrawalUrl, error)
	PaymentsToggleChatStarGiftNotifications(ctx context.Context, in *TLPaymentsToggleChatStarGiftNotifications, opts ...grpc.CallOption) (*Bool, error)
	PaymentsToggleStarGiftsPinnedToTop(ctx context.Context, in *TLPaymentsToggleStarGiftsPinnedToTop, opts ...grpc.CallOption) (*Bool, error)
	PaymentsGetUserStarGifts(ctx context.Context, in *TLPaymentsGetUserStarGifts, opts ...grpc.CallOption) (*Payments_UserStarGifts, error)
	PaymentsGetUserStarGift(ctx context.Context, in *TLPaymentsGetUserStarGift, opts ...grpc.CallOption) (*Payments_UserStarGifts, error)
}

type rPCGiftsClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCGiftsClient(cc grpc.ClientConnInterface) RPCGiftsClient {
	return &rPCGiftsClient{cc}
}

func (c *rPCGiftsClient) PaymentsGetStarGifts(ctx context.Context, in *TLPaymentsGetStarGifts, opts ...grpc.CallOption) (*Payments_StarGifts, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payments_StarGifts)
	err := c.cc.Invoke(ctx, RPCGifts_PaymentsGetStarGifts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCGiftsClient) PaymentsSaveStarGift(ctx context.Context, in *TLPaymentsSaveStarGift, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCGifts_PaymentsSaveStarGift_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCGiftsClient) PaymentsConvertStarGift(ctx context.Context, in *TLPaymentsConvertStarGift, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCGifts_PaymentsConvertStarGift_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCGiftsClient) PaymentsGetStarGiftUpgradePreview(ctx context.Context, in *TLPaymentsGetStarGiftUpgradePreview, opts ...grpc.CallOption) (*Payments_StarGiftUpgradePreview, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payments_StarGiftUpgradePreview)
	err := c.cc.Invoke(ctx, RPCGifts_PaymentsGetStarGiftUpgradePreview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCGiftsClient) PaymentsUpgradeStarGift(ctx context.Context, in *TLPaymentsUpgradeStarGift, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCGifts_PaymentsUpgradeStarGift_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCGiftsClient) PaymentsTransferStarGift(ctx context.Context, in *TLPaymentsTransferStarGift, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCGifts_PaymentsTransferStarGift_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCGiftsClient) PaymentsGetUniqueStarGift(ctx context.Context, in *TLPaymentsGetUniqueStarGift, opts ...grpc.CallOption) (*Payments_UniqueStarGift, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payments_UniqueStarGift)
	err := c.cc.Invoke(ctx, RPCGifts_PaymentsGetUniqueStarGift_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCGiftsClient) PaymentsGetSavedStarGifts(ctx context.Context, in *TLPaymentsGetSavedStarGifts, opts ...grpc.CallOption) (*Payments_SavedStarGifts, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payments_SavedStarGifts)
	err := c.cc.Invoke(ctx, RPCGifts_PaymentsGetSavedStarGifts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCGiftsClient) PaymentsGetSavedStarGift(ctx context.Context, in *TLPaymentsGetSavedStarGift, opts ...grpc.CallOption) (*Payments_SavedStarGifts, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payments_SavedStarGifts)
	err := c.cc.Invoke(ctx, RPCGifts_PaymentsGetSavedStarGift_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCGiftsClient) PaymentsGetStarGiftWithdrawalUrl(ctx context.Context, in *TLPaymentsGetStarGiftWithdrawalUrl, opts ...grpc.CallOption) (*Payments_StarGiftWithdrawalUrl, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payments_StarGiftWithdrawalUrl)
	err := c.cc.Invoke(ctx, RPCGifts_PaymentsGetStarGiftWithdrawalUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCGiftsClient) PaymentsToggleChatStarGiftNotifications(ctx context.Context, in *TLPaymentsToggleChatStarGiftNotifications, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCGifts_PaymentsToggleChatStarGiftNotifications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCGiftsClient) PaymentsToggleStarGiftsPinnedToTop(ctx context.Context, in *TLPaymentsToggleStarGiftsPinnedToTop, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCGifts_PaymentsToggleStarGiftsPinnedToTop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCGiftsClient) PaymentsGetUserStarGifts(ctx context.Context, in *TLPaymentsGetUserStarGifts, opts ...grpc.CallOption) (*Payments_UserStarGifts, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payments_UserStarGifts)
	err := c.cc.Invoke(ctx, RPCGifts_PaymentsGetUserStarGifts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCGiftsClient) PaymentsGetUserStarGift(ctx context.Context, in *TLPaymentsGetUserStarGift, opts ...grpc.CallOption) (*Payments_UserStarGifts, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payments_UserStarGifts)
	err := c.cc.Invoke(ctx, RPCGifts_PaymentsGetUserStarGift_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCGiftsServer is the server API for RPCGifts service.
// All implementations should embed UnimplementedRPCGiftsServer
// for forward compatibility.
type RPCGiftsServer interface {
	PaymentsGetStarGifts(context.Context, *TLPaymentsGetStarGifts) (*Payments_StarGifts, error)
	PaymentsSaveStarGift(context.Context, *TLPaymentsSaveStarGift) (*Bool, error)
	PaymentsConvertStarGift(context.Context, *TLPaymentsConvertStarGift) (*Bool, error)
	PaymentsGetStarGiftUpgradePreview(context.Context, *TLPaymentsGetStarGiftUpgradePreview) (*Payments_StarGiftUpgradePreview, error)
	PaymentsUpgradeStarGift(context.Context, *TLPaymentsUpgradeStarGift) (*Updates, error)
	PaymentsTransferStarGift(context.Context, *TLPaymentsTransferStarGift) (*Updates, error)
	PaymentsGetUniqueStarGift(context.Context, *TLPaymentsGetUniqueStarGift) (*Payments_UniqueStarGift, error)
	PaymentsGetSavedStarGifts(context.Context, *TLPaymentsGetSavedStarGifts) (*Payments_SavedStarGifts, error)
	PaymentsGetSavedStarGift(context.Context, *TLPaymentsGetSavedStarGift) (*Payments_SavedStarGifts, error)
	PaymentsGetStarGiftWithdrawalUrl(context.Context, *TLPaymentsGetStarGiftWithdrawalUrl) (*Payments_StarGiftWithdrawalUrl, error)
	PaymentsToggleChatStarGiftNotifications(context.Context, *TLPaymentsToggleChatStarGiftNotifications) (*Bool, error)
	PaymentsToggleStarGiftsPinnedToTop(context.Context, *TLPaymentsToggleStarGiftsPinnedToTop) (*Bool, error)
	PaymentsGetUserStarGifts(context.Context, *TLPaymentsGetUserStarGifts) (*Payments_UserStarGifts, error)
	PaymentsGetUserStarGift(context.Context, *TLPaymentsGetUserStarGift) (*Payments_UserStarGifts, error)
}

// UnimplementedRPCGiftsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCGiftsServer struct{}

func (UnimplementedRPCGiftsServer) PaymentsGetStarGifts(context.Context, *TLPaymentsGetStarGifts) (*Payments_StarGifts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsGetStarGifts not implemented")
}
func (UnimplementedRPCGiftsServer) PaymentsSaveStarGift(context.Context, *TLPaymentsSaveStarGift) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsSaveStarGift not implemented")
}
func (UnimplementedRPCGiftsServer) PaymentsConvertStarGift(context.Context, *TLPaymentsConvertStarGift) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsConvertStarGift not implemented")
}
func (UnimplementedRPCGiftsServer) PaymentsGetStarGiftUpgradePreview(context.Context, *TLPaymentsGetStarGiftUpgradePreview) (*Payments_StarGiftUpgradePreview, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsGetStarGiftUpgradePreview not implemented")
}
func (UnimplementedRPCGiftsServer) PaymentsUpgradeStarGift(context.Context, *TLPaymentsUpgradeStarGift) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsUpgradeStarGift not implemented")
}
func (UnimplementedRPCGiftsServer) PaymentsTransferStarGift(context.Context, *TLPaymentsTransferStarGift) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsTransferStarGift not implemented")
}
func (UnimplementedRPCGiftsServer) PaymentsGetUniqueStarGift(context.Context, *TLPaymentsGetUniqueStarGift) (*Payments_UniqueStarGift, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsGetUniqueStarGift not implemented")
}
func (UnimplementedRPCGiftsServer) PaymentsGetSavedStarGifts(context.Context, *TLPaymentsGetSavedStarGifts) (*Payments_SavedStarGifts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsGetSavedStarGifts not implemented")
}
func (UnimplementedRPCGiftsServer) PaymentsGetSavedStarGift(context.Context, *TLPaymentsGetSavedStarGift) (*Payments_SavedStarGifts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsGetSavedStarGift not implemented")
}
func (UnimplementedRPCGiftsServer) PaymentsGetStarGiftWithdrawalUrl(context.Context, *TLPaymentsGetStarGiftWithdrawalUrl) (*Payments_StarGiftWithdrawalUrl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsGetStarGiftWithdrawalUrl not implemented")
}
func (UnimplementedRPCGiftsServer) PaymentsToggleChatStarGiftNotifications(context.Context, *TLPaymentsToggleChatStarGiftNotifications) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsToggleChatStarGiftNotifications not implemented")
}
func (UnimplementedRPCGiftsServer) PaymentsToggleStarGiftsPinnedToTop(context.Context, *TLPaymentsToggleStarGiftsPinnedToTop) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsToggleStarGiftsPinnedToTop not implemented")
}
func (UnimplementedRPCGiftsServer) PaymentsGetUserStarGifts(context.Context, *TLPaymentsGetUserStarGifts) (*Payments_UserStarGifts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsGetUserStarGifts not implemented")
}
func (UnimplementedRPCGiftsServer) PaymentsGetUserStarGift(context.Context, *TLPaymentsGetUserStarGift) (*Payments_UserStarGifts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsGetUserStarGift not implemented")
}
func (UnimplementedRPCGiftsServer) testEmbeddedByValue() {}

// UnsafeRPCGiftsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCGiftsServer will
// result in compilation errors.
type UnsafeRPCGiftsServer interface {
	mustEmbedUnimplementedRPCGiftsServer()
}

func RegisterRPCGiftsServer(s grpc.ServiceRegistrar, srv RPCGiftsServer) {
	// If the following call pancis, it indicates UnimplementedRPCGiftsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCGifts_ServiceDesc, srv)
}

func _RPCGifts_PaymentsGetStarGifts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsGetStarGifts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCGiftsServer).PaymentsGetStarGifts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCGifts_PaymentsGetStarGifts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCGiftsServer).PaymentsGetStarGifts(ctx, req.(*TLPaymentsGetStarGifts))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCGifts_PaymentsSaveStarGift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsSaveStarGift)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCGiftsServer).PaymentsSaveStarGift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCGifts_PaymentsSaveStarGift_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCGiftsServer).PaymentsSaveStarGift(ctx, req.(*TLPaymentsSaveStarGift))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCGifts_PaymentsConvertStarGift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsConvertStarGift)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCGiftsServer).PaymentsConvertStarGift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCGifts_PaymentsConvertStarGift_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCGiftsServer).PaymentsConvertStarGift(ctx, req.(*TLPaymentsConvertStarGift))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCGifts_PaymentsGetStarGiftUpgradePreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsGetStarGiftUpgradePreview)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCGiftsServer).PaymentsGetStarGiftUpgradePreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCGifts_PaymentsGetStarGiftUpgradePreview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCGiftsServer).PaymentsGetStarGiftUpgradePreview(ctx, req.(*TLPaymentsGetStarGiftUpgradePreview))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCGifts_PaymentsUpgradeStarGift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsUpgradeStarGift)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCGiftsServer).PaymentsUpgradeStarGift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCGifts_PaymentsUpgradeStarGift_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCGiftsServer).PaymentsUpgradeStarGift(ctx, req.(*TLPaymentsUpgradeStarGift))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCGifts_PaymentsTransferStarGift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsTransferStarGift)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCGiftsServer).PaymentsTransferStarGift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCGifts_PaymentsTransferStarGift_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCGiftsServer).PaymentsTransferStarGift(ctx, req.(*TLPaymentsTransferStarGift))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCGifts_PaymentsGetUniqueStarGift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsGetUniqueStarGift)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCGiftsServer).PaymentsGetUniqueStarGift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCGifts_PaymentsGetUniqueStarGift_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCGiftsServer).PaymentsGetUniqueStarGift(ctx, req.(*TLPaymentsGetUniqueStarGift))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCGifts_PaymentsGetSavedStarGifts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsGetSavedStarGifts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCGiftsServer).PaymentsGetSavedStarGifts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCGifts_PaymentsGetSavedStarGifts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCGiftsServer).PaymentsGetSavedStarGifts(ctx, req.(*TLPaymentsGetSavedStarGifts))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCGifts_PaymentsGetSavedStarGift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsGetSavedStarGift)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCGiftsServer).PaymentsGetSavedStarGift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCGifts_PaymentsGetSavedStarGift_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCGiftsServer).PaymentsGetSavedStarGift(ctx, req.(*TLPaymentsGetSavedStarGift))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCGifts_PaymentsGetStarGiftWithdrawalUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsGetStarGiftWithdrawalUrl)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCGiftsServer).PaymentsGetStarGiftWithdrawalUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCGifts_PaymentsGetStarGiftWithdrawalUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCGiftsServer).PaymentsGetStarGiftWithdrawalUrl(ctx, req.(*TLPaymentsGetStarGiftWithdrawalUrl))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCGifts_PaymentsToggleChatStarGiftNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsToggleChatStarGiftNotifications)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCGiftsServer).PaymentsToggleChatStarGiftNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCGifts_PaymentsToggleChatStarGiftNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCGiftsServer).PaymentsToggleChatStarGiftNotifications(ctx, req.(*TLPaymentsToggleChatStarGiftNotifications))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCGifts_PaymentsToggleStarGiftsPinnedToTop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsToggleStarGiftsPinnedToTop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCGiftsServer).PaymentsToggleStarGiftsPinnedToTop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCGifts_PaymentsToggleStarGiftsPinnedToTop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCGiftsServer).PaymentsToggleStarGiftsPinnedToTop(ctx, req.(*TLPaymentsToggleStarGiftsPinnedToTop))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCGifts_PaymentsGetUserStarGifts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsGetUserStarGifts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCGiftsServer).PaymentsGetUserStarGifts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCGifts_PaymentsGetUserStarGifts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCGiftsServer).PaymentsGetUserStarGifts(ctx, req.(*TLPaymentsGetUserStarGifts))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCGifts_PaymentsGetUserStarGift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsGetUserStarGift)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCGiftsServer).PaymentsGetUserStarGift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCGifts_PaymentsGetUserStarGift_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCGiftsServer).PaymentsGetUserStarGift(ctx, req.(*TLPaymentsGetUserStarGift))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCGifts_ServiceDesc is the grpc.ServiceDesc for RPCGifts service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCGifts_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCGifts",
	HandlerType: (*RPCGiftsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "payments_getStarGifts",
			Handler:    _RPCGifts_PaymentsGetStarGifts_Handler,
		},
		{
			MethodName: "payments_saveStarGift",
			Handler:    _RPCGifts_PaymentsSaveStarGift_Handler,
		},
		{
			MethodName: "payments_convertStarGift",
			Handler:    _RPCGifts_PaymentsConvertStarGift_Handler,
		},
		{
			MethodName: "payments_getStarGiftUpgradePreview",
			Handler:    _RPCGifts_PaymentsGetStarGiftUpgradePreview_Handler,
		},
		{
			MethodName: "payments_upgradeStarGift",
			Handler:    _RPCGifts_PaymentsUpgradeStarGift_Handler,
		},
		{
			MethodName: "payments_transferStarGift",
			Handler:    _RPCGifts_PaymentsTransferStarGift_Handler,
		},
		{
			MethodName: "payments_getUniqueStarGift",
			Handler:    _RPCGifts_PaymentsGetUniqueStarGift_Handler,
		},
		{
			MethodName: "payments_getSavedStarGifts",
			Handler:    _RPCGifts_PaymentsGetSavedStarGifts_Handler,
		},
		{
			MethodName: "payments_getSavedStarGift",
			Handler:    _RPCGifts_PaymentsGetSavedStarGift_Handler,
		},
		{
			MethodName: "payments_getStarGiftWithdrawalUrl",
			Handler:    _RPCGifts_PaymentsGetStarGiftWithdrawalUrl_Handler,
		},
		{
			MethodName: "payments_toggleChatStarGiftNotifications",
			Handler:    _RPCGifts_PaymentsToggleChatStarGiftNotifications_Handler,
		},
		{
			MethodName: "payments_toggleStarGiftsPinnedToTop",
			Handler:    _RPCGifts_PaymentsToggleStarGiftsPinnedToTop_Handler,
		},
		{
			MethodName: "payments_getUserStarGifts",
			Handler:    _RPCGifts_PaymentsGetUserStarGifts_Handler,
		},
		{
			MethodName: "payments_getUserStarGift",
			Handler:    _RPCGifts_PaymentsGetUserStarGift_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCGiveaways_PaymentsGetPremiumGiftCodeOptions_FullMethodName = "/mtproto.RPCGiveaways/payments_getPremiumGiftCodeOptions"
	RPCGiveaways_PaymentsGetGiveawayInfo_FullMethodName           = "/mtproto.RPCGiveaways/payments_getGiveawayInfo"
	RPCGiveaways_PaymentsLaunchPrepaidGiveaway_FullMethodName     = "/mtproto.RPCGiveaways/payments_launchPrepaidGiveaway"
	RPCGiveaways_PaymentsGetStarsGiveawayOptions_FullMethodName   = "/mtproto.RPCGiveaways/payments_getStarsGiveawayOptions"
)

// RPCGiveawaysClient is the client API for RPCGiveaways service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCGiveawaysClient interface {
	PaymentsGetPremiumGiftCodeOptions(ctx context.Context, in *TLPaymentsGetPremiumGiftCodeOptions, opts ...grpc.CallOption) (*Vector_PremiumGiftCodeOption, error)
	PaymentsGetGiveawayInfo(ctx context.Context, in *TLPaymentsGetGiveawayInfo, opts ...grpc.CallOption) (*Payments_GiveawayInfo, error)
	PaymentsLaunchPrepaidGiveaway(ctx context.Context, in *TLPaymentsLaunchPrepaidGiveaway, opts ...grpc.CallOption) (*Updates, error)
	PaymentsGetStarsGiveawayOptions(ctx context.Context, in *TLPaymentsGetStarsGiveawayOptions, opts ...grpc.CallOption) (*Vector_StarsGiveawayOption, error)
}

type rPCGiveawaysClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCGiveawaysClient(cc grpc.ClientConnInterface) RPCGiveawaysClient {
	return &rPCGiveawaysClient{cc}
}

func (c *rPCGiveawaysClient) PaymentsGetPremiumGiftCodeOptions(ctx context.Context, in *TLPaymentsGetPremiumGiftCodeOptions, opts ...grpc.CallOption) (*Vector_PremiumGiftCodeOption, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_PremiumGiftCodeOption)
	err := c.cc.Invoke(ctx, RPCGiveaways_PaymentsGetPremiumGiftCodeOptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCGiveawaysClient) PaymentsGetGiveawayInfo(ctx context.Context, in *TLPaymentsGetGiveawayInfo, opts ...grpc.CallOption) (*Payments_GiveawayInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payments_GiveawayInfo)
	err := c.cc.Invoke(ctx, RPCGiveaways_PaymentsGetGiveawayInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCGiveawaysClient) PaymentsLaunchPrepaidGiveaway(ctx context.Context, in *TLPaymentsLaunchPrepaidGiveaway, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCGiveaways_PaymentsLaunchPrepaidGiveaway_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCGiveawaysClient) PaymentsGetStarsGiveawayOptions(ctx context.Context, in *TLPaymentsGetStarsGiveawayOptions, opts ...grpc.CallOption) (*Vector_StarsGiveawayOption, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_StarsGiveawayOption)
	err := c.cc.Invoke(ctx, RPCGiveaways_PaymentsGetStarsGiveawayOptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCGiveawaysServer is the server API for RPCGiveaways service.
// All implementations should embed UnimplementedRPCGiveawaysServer
// for forward compatibility.
type RPCGiveawaysServer interface {
	PaymentsGetPremiumGiftCodeOptions(context.Context, *TLPaymentsGetPremiumGiftCodeOptions) (*Vector_PremiumGiftCodeOption, error)
	PaymentsGetGiveawayInfo(context.Context, *TLPaymentsGetGiveawayInfo) (*Payments_GiveawayInfo, error)
	PaymentsLaunchPrepaidGiveaway(context.Context, *TLPaymentsLaunchPrepaidGiveaway) (*Updates, error)
	PaymentsGetStarsGiveawayOptions(context.Context, *TLPaymentsGetStarsGiveawayOptions) (*Vector_StarsGiveawayOption, error)
}

// UnimplementedRPCGiveawaysServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCGiveawaysServer struct{}

func (UnimplementedRPCGiveawaysServer) PaymentsGetPremiumGiftCodeOptions(context.Context, *TLPaymentsGetPremiumGiftCodeOptions) (*Vector_PremiumGiftCodeOption, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsGetPremiumGiftCodeOptions not implemented")
}
func (UnimplementedRPCGiveawaysServer) PaymentsGetGiveawayInfo(context.Context, *TLPaymentsGetGiveawayInfo) (*Payments_GiveawayInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsGetGiveawayInfo not implemented")
}
func (UnimplementedRPCGiveawaysServer) PaymentsLaunchPrepaidGiveaway(context.Context, *TLPaymentsLaunchPrepaidGiveaway) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsLaunchPrepaidGiveaway not implemented")
}
func (UnimplementedRPCGiveawaysServer) PaymentsGetStarsGiveawayOptions(context.Context, *TLPaymentsGetStarsGiveawayOptions) (*Vector_StarsGiveawayOption, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsGetStarsGiveawayOptions not implemented")
}
func (UnimplementedRPCGiveawaysServer) testEmbeddedByValue() {}

// UnsafeRPCGiveawaysServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCGiveawaysServer will
// result in compilation errors.
type UnsafeRPCGiveawaysServer interface {
	mustEmbedUnimplementedRPCGiveawaysServer()
}

func RegisterRPCGiveawaysServer(s grpc.ServiceRegistrar, srv RPCGiveawaysServer) {
	// If the following call pancis, it indicates UnimplementedRPCGiveawaysServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCGiveaways_ServiceDesc, srv)
}

func _RPCGiveaways_PaymentsGetPremiumGiftCodeOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsGetPremiumGiftCodeOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCGiveawaysServer).PaymentsGetPremiumGiftCodeOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCGiveaways_PaymentsGetPremiumGiftCodeOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCGiveawaysServer).PaymentsGetPremiumGiftCodeOptions(ctx, req.(*TLPaymentsGetPremiumGiftCodeOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCGiveaways_PaymentsGetGiveawayInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsGetGiveawayInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCGiveawaysServer).PaymentsGetGiveawayInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCGiveaways_PaymentsGetGiveawayInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCGiveawaysServer).PaymentsGetGiveawayInfo(ctx, req.(*TLPaymentsGetGiveawayInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCGiveaways_PaymentsLaunchPrepaidGiveaway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsLaunchPrepaidGiveaway)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCGiveawaysServer).PaymentsLaunchPrepaidGiveaway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCGiveaways_PaymentsLaunchPrepaidGiveaway_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCGiveawaysServer).PaymentsLaunchPrepaidGiveaway(ctx, req.(*TLPaymentsLaunchPrepaidGiveaway))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCGiveaways_PaymentsGetStarsGiveawayOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsGetStarsGiveawayOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCGiveawaysServer).PaymentsGetStarsGiveawayOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCGiveaways_PaymentsGetStarsGiveawayOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCGiveawaysServer).PaymentsGetStarsGiveawayOptions(ctx, req.(*TLPaymentsGetStarsGiveawayOptions))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCGiveaways_ServiceDesc is the grpc.ServiceDesc for RPCGiveaways service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCGiveaways_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCGiveaways",
	HandlerType: (*RPCGiveawaysServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "payments_getPremiumGiftCodeOptions",
			Handler:    _RPCGiveaways_PaymentsGetPremiumGiftCodeOptions_Handler,
		},
		{
			MethodName: "payments_getGiveawayInfo",
			Handler:    _RPCGiveaways_PaymentsGetGiveawayInfo_Handler,
		},
		{
			MethodName: "payments_launchPrepaidGiveaway",
			Handler:    _RPCGiveaways_PaymentsLaunchPrepaidGiveaway_Handler,
		},
		{
			MethodName: "payments_getStarsGiveawayOptions",
			Handler:    _RPCGiveaways_PaymentsGetStarsGiveawayOptions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCGroupCalls_PhoneCreateGroupCall_FullMethodName                  = "/mtproto.RPCGroupCalls/phone_createGroupCall"
	RPCGroupCalls_PhoneJoinGroupCall_FullMethodName                    = "/mtproto.RPCGroupCalls/phone_joinGroupCall"
	RPCGroupCalls_PhoneLeaveGroupCall_FullMethodName                   = "/mtproto.RPCGroupCalls/phone_leaveGroupCall"
	RPCGroupCalls_PhoneInviteToGroupCall_FullMethodName                = "/mtproto.RPCGroupCalls/phone_inviteToGroupCall"
	RPCGroupCalls_PhoneDiscardGroupCall_FullMethodName                 = "/mtproto.RPCGroupCalls/phone_discardGroupCall"
	RPCGroupCalls_PhoneToggleGroupCallSettings_FullMethodName          = "/mtproto.RPCGroupCalls/phone_toggleGroupCallSettings"
	RPCGroupCalls_PhoneGetGroupCall_FullMethodName                     = "/mtproto.RPCGroupCalls/phone_getGroupCall"
	RPCGroupCalls_PhoneGetGroupParticipants_FullMethodName             = "/mtproto.RPCGroupCalls/phone_getGroupParticipants"
	RPCGroupCalls_PhoneCheckGroupCall_FullMethodName                   = "/mtproto.RPCGroupCalls/phone_checkGroupCall"
	RPCGroupCalls_PhoneToggleGroupCallRecord_FullMethodName            = "/mtproto.RPCGroupCalls/phone_toggleGroupCallRecord"
	RPCGroupCalls_PhoneEditGroupCallParticipant_FullMethodName         = "/mtproto.RPCGroupCalls/phone_editGroupCallParticipant"
	RPCGroupCalls_PhoneEditGroupCallTitle_FullMethodName               = "/mtproto.RPCGroupCalls/phone_editGroupCallTitle"
	RPCGroupCalls_PhoneGetGroupCallJoinAs_FullMethodName               = "/mtproto.RPCGroupCalls/phone_getGroupCallJoinAs"
	RPCGroupCalls_PhoneExportGroupCallInvite_FullMethodName            = "/mtproto.RPCGroupCalls/phone_exportGroupCallInvite"
	RPCGroupCalls_PhoneToggleGroupCallStartSubscription_FullMethodName = "/mtproto.RPCGroupCalls/phone_toggleGroupCallStartSubscription"
	RPCGroupCalls_PhoneStartScheduledGroupCall_FullMethodName          = "/mtproto.RPCGroupCalls/phone_startScheduledGroupCall"
	RPCGroupCalls_PhoneSaveDefaultGroupCallJoinAs_FullMethodName       = "/mtproto.RPCGroupCalls/phone_saveDefaultGroupCallJoinAs"
	RPCGroupCalls_PhoneJoinGroupCallPresentation_FullMethodName        = "/mtproto.RPCGroupCalls/phone_joinGroupCallPresentation"
	RPCGroupCalls_PhoneLeaveGroupCallPresentation_FullMethodName       = "/mtproto.RPCGroupCalls/phone_leaveGroupCallPresentation"
	RPCGroupCalls_PhoneGetGroupCallStreamChannels_FullMethodName       = "/mtproto.RPCGroupCalls/phone_getGroupCallStreamChannels"
	RPCGroupCalls_PhoneGetGroupCallStreamRtmpUrl_FullMethodName        = "/mtproto.RPCGroupCalls/phone_getGroupCallStreamRtmpUrl"
)

// RPCGroupCallsClient is the client API for RPCGroupCalls service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCGroupCallsClient interface {
	PhoneCreateGroupCall(ctx context.Context, in *TLPhoneCreateGroupCall, opts ...grpc.CallOption) (*Updates, error)
	PhoneJoinGroupCall(ctx context.Context, in *TLPhoneJoinGroupCall, opts ...grpc.CallOption) (*Updates, error)
	PhoneLeaveGroupCall(ctx context.Context, in *TLPhoneLeaveGroupCall, opts ...grpc.CallOption) (*Updates, error)
	PhoneInviteToGroupCall(ctx context.Context, in *TLPhoneInviteToGroupCall, opts ...grpc.CallOption) (*Updates, error)
	PhoneDiscardGroupCall(ctx context.Context, in *TLPhoneDiscardGroupCall, opts ...grpc.CallOption) (*Updates, error)
	PhoneToggleGroupCallSettings(ctx context.Context, in *TLPhoneToggleGroupCallSettings, opts ...grpc.CallOption) (*Updates, error)
	PhoneGetGroupCall(ctx context.Context, in *TLPhoneGetGroupCall, opts ...grpc.CallOption) (*Phone_GroupCall, error)
	PhoneGetGroupParticipants(ctx context.Context, in *TLPhoneGetGroupParticipants, opts ...grpc.CallOption) (*Phone_GroupParticipants, error)
	PhoneCheckGroupCall(ctx context.Context, in *TLPhoneCheckGroupCall, opts ...grpc.CallOption) (*Vector_Int, error)
	PhoneToggleGroupCallRecord(ctx context.Context, in *TLPhoneToggleGroupCallRecord, opts ...grpc.CallOption) (*Updates, error)
	PhoneEditGroupCallParticipant(ctx context.Context, in *TLPhoneEditGroupCallParticipant, opts ...grpc.CallOption) (*Updates, error)
	PhoneEditGroupCallTitle(ctx context.Context, in *TLPhoneEditGroupCallTitle, opts ...grpc.CallOption) (*Updates, error)
	PhoneGetGroupCallJoinAs(ctx context.Context, in *TLPhoneGetGroupCallJoinAs, opts ...grpc.CallOption) (*Phone_JoinAsPeers, error)
	PhoneExportGroupCallInvite(ctx context.Context, in *TLPhoneExportGroupCallInvite, opts ...grpc.CallOption) (*Phone_ExportedGroupCallInvite, error)
	PhoneToggleGroupCallStartSubscription(ctx context.Context, in *TLPhoneToggleGroupCallStartSubscription, opts ...grpc.CallOption) (*Updates, error)
	PhoneStartScheduledGroupCall(ctx context.Context, in *TLPhoneStartScheduledGroupCall, opts ...grpc.CallOption) (*Updates, error)
	PhoneSaveDefaultGroupCallJoinAs(ctx context.Context, in *TLPhoneSaveDefaultGroupCallJoinAs, opts ...grpc.CallOption) (*Bool, error)
	PhoneJoinGroupCallPresentation(ctx context.Context, in *TLPhoneJoinGroupCallPresentation, opts ...grpc.CallOption) (*Updates, error)
	PhoneLeaveGroupCallPresentation(ctx context.Context, in *TLPhoneLeaveGroupCallPresentation, opts ...grpc.CallOption) (*Updates, error)
	PhoneGetGroupCallStreamChannels(ctx context.Context, in *TLPhoneGetGroupCallStreamChannels, opts ...grpc.CallOption) (*Phone_GroupCallStreamChannels, error)
	PhoneGetGroupCallStreamRtmpUrl(ctx context.Context, in *TLPhoneGetGroupCallStreamRtmpUrl, opts ...grpc.CallOption) (*Phone_GroupCallStreamRtmpUrl, error)
}

type rPCGroupCallsClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCGroupCallsClient(cc grpc.ClientConnInterface) RPCGroupCallsClient {
	return &rPCGroupCallsClient{cc}
}

func (c *rPCGroupCallsClient) PhoneCreateGroupCall(ctx context.Context, in *TLPhoneCreateGroupCall, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCGroupCalls_PhoneCreateGroupCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCGroupCallsClient) PhoneJoinGroupCall(ctx context.Context, in *TLPhoneJoinGroupCall, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCGroupCalls_PhoneJoinGroupCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCGroupCallsClient) PhoneLeaveGroupCall(ctx context.Context, in *TLPhoneLeaveGroupCall, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCGroupCalls_PhoneLeaveGroupCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCGroupCallsClient) PhoneInviteToGroupCall(ctx context.Context, in *TLPhoneInviteToGroupCall, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCGroupCalls_PhoneInviteToGroupCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCGroupCallsClient) PhoneDiscardGroupCall(ctx context.Context, in *TLPhoneDiscardGroupCall, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCGroupCalls_PhoneDiscardGroupCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCGroupCallsClient) PhoneToggleGroupCallSettings(ctx context.Context, in *TLPhoneToggleGroupCallSettings, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCGroupCalls_PhoneToggleGroupCallSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCGroupCallsClient) PhoneGetGroupCall(ctx context.Context, in *TLPhoneGetGroupCall, opts ...grpc.CallOption) (*Phone_GroupCall, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Phone_GroupCall)
	err := c.cc.Invoke(ctx, RPCGroupCalls_PhoneGetGroupCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCGroupCallsClient) PhoneGetGroupParticipants(ctx context.Context, in *TLPhoneGetGroupParticipants, opts ...grpc.CallOption) (*Phone_GroupParticipants, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Phone_GroupParticipants)
	err := c.cc.Invoke(ctx, RPCGroupCalls_PhoneGetGroupParticipants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCGroupCallsClient) PhoneCheckGroupCall(ctx context.Context, in *TLPhoneCheckGroupCall, opts ...grpc.CallOption) (*Vector_Int, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_Int)
	err := c.cc.Invoke(ctx, RPCGroupCalls_PhoneCheckGroupCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCGroupCallsClient) PhoneToggleGroupCallRecord(ctx context.Context, in *TLPhoneToggleGroupCallRecord, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCGroupCalls_PhoneToggleGroupCallRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCGroupCallsClient) PhoneEditGroupCallParticipant(ctx context.Context, in *TLPhoneEditGroupCallParticipant, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCGroupCalls_PhoneEditGroupCallParticipant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCGroupCallsClient) PhoneEditGroupCallTitle(ctx context.Context, in *TLPhoneEditGroupCallTitle, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCGroupCalls_PhoneEditGroupCallTitle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCGroupCallsClient) PhoneGetGroupCallJoinAs(ctx context.Context, in *TLPhoneGetGroupCallJoinAs, opts ...grpc.CallOption) (*Phone_JoinAsPeers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Phone_JoinAsPeers)
	err := c.cc.Invoke(ctx, RPCGroupCalls_PhoneGetGroupCallJoinAs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCGroupCallsClient) PhoneExportGroupCallInvite(ctx context.Context, in *TLPhoneExportGroupCallInvite, opts ...grpc.CallOption) (*Phone_ExportedGroupCallInvite, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Phone_ExportedGroupCallInvite)
	err := c.cc.Invoke(ctx, RPCGroupCalls_PhoneExportGroupCallInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCGroupCallsClient) PhoneToggleGroupCallStartSubscription(ctx context.Context, in *TLPhoneToggleGroupCallStartSubscription, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCGroupCalls_PhoneToggleGroupCallStartSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCGroupCallsClient) PhoneStartScheduledGroupCall(ctx context.Context, in *TLPhoneStartScheduledGroupCall, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCGroupCalls_PhoneStartScheduledGroupCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCGroupCallsClient) PhoneSaveDefaultGroupCallJoinAs(ctx context.Context, in *TLPhoneSaveDefaultGroupCallJoinAs, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCGroupCalls_PhoneSaveDefaultGroupCallJoinAs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCGroupCallsClient) PhoneJoinGroupCallPresentation(ctx context.Context, in *TLPhoneJoinGroupCallPresentation, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCGroupCalls_PhoneJoinGroupCallPresentation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCGroupCallsClient) PhoneLeaveGroupCallPresentation(ctx context.Context, in *TLPhoneLeaveGroupCallPresentation, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCGroupCalls_PhoneLeaveGroupCallPresentation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCGroupCallsClient) PhoneGetGroupCallStreamChannels(ctx context.Context, in *TLPhoneGetGroupCallStreamChannels, opts ...grpc.CallOption) (*Phone_GroupCallStreamChannels, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Phone_GroupCallStreamChannels)
	err := c.cc.Invoke(ctx, RPCGroupCalls_PhoneGetGroupCallStreamChannels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCGroupCallsClient) PhoneGetGroupCallStreamRtmpUrl(ctx context.Context, in *TLPhoneGetGroupCallStreamRtmpUrl, opts ...grpc.CallOption) (*Phone_GroupCallStreamRtmpUrl, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Phone_GroupCallStreamRtmpUrl)
	err := c.cc.Invoke(ctx, RPCGroupCalls_PhoneGetGroupCallStreamRtmpUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCGroupCallsServer is the server API for RPCGroupCalls service.
// All implementations should embed UnimplementedRPCGroupCallsServer
// for forward compatibility.
type RPCGroupCallsServer interface {
	PhoneCreateGroupCall(context.Context, *TLPhoneCreateGroupCall) (*Updates, error)
	PhoneJoinGroupCall(context.Context, *TLPhoneJoinGroupCall) (*Updates, error)
	PhoneLeaveGroupCall(context.Context, *TLPhoneLeaveGroupCall) (*Updates, error)
	PhoneInviteToGroupCall(context.Context, *TLPhoneInviteToGroupCall) (*Updates, error)
	PhoneDiscardGroupCall(context.Context, *TLPhoneDiscardGroupCall) (*Updates, error)
	PhoneToggleGroupCallSettings(context.Context, *TLPhoneToggleGroupCallSettings) (*Updates, error)
	PhoneGetGroupCall(context.Context, *TLPhoneGetGroupCall) (*Phone_GroupCall, error)
	PhoneGetGroupParticipants(context.Context, *TLPhoneGetGroupParticipants) (*Phone_GroupParticipants, error)
	PhoneCheckGroupCall(context.Context, *TLPhoneCheckGroupCall) (*Vector_Int, error)
	PhoneToggleGroupCallRecord(context.Context, *TLPhoneToggleGroupCallRecord) (*Updates, error)
	PhoneEditGroupCallParticipant(context.Context, *TLPhoneEditGroupCallParticipant) (*Updates, error)
	PhoneEditGroupCallTitle(context.Context, *TLPhoneEditGroupCallTitle) (*Updates, error)
	PhoneGetGroupCallJoinAs(context.Context, *TLPhoneGetGroupCallJoinAs) (*Phone_JoinAsPeers, error)
	PhoneExportGroupCallInvite(context.Context, *TLPhoneExportGroupCallInvite) (*Phone_ExportedGroupCallInvite, error)
	PhoneToggleGroupCallStartSubscription(context.Context, *TLPhoneToggleGroupCallStartSubscription) (*Updates, error)
	PhoneStartScheduledGroupCall(context.Context, *TLPhoneStartScheduledGroupCall) (*Updates, error)
	PhoneSaveDefaultGroupCallJoinAs(context.Context, *TLPhoneSaveDefaultGroupCallJoinAs) (*Bool, error)
	PhoneJoinGroupCallPresentation(context.Context, *TLPhoneJoinGroupCallPresentation) (*Updates, error)
	PhoneLeaveGroupCallPresentation(context.Context, *TLPhoneLeaveGroupCallPresentation) (*Updates, error)
	PhoneGetGroupCallStreamChannels(context.Context, *TLPhoneGetGroupCallStreamChannels) (*Phone_GroupCallStreamChannels, error)
	PhoneGetGroupCallStreamRtmpUrl(context.Context, *TLPhoneGetGroupCallStreamRtmpUrl) (*Phone_GroupCallStreamRtmpUrl, error)
}

// UnimplementedRPCGroupCallsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCGroupCallsServer struct{}

func (UnimplementedRPCGroupCallsServer) PhoneCreateGroupCall(context.Context, *TLPhoneCreateGroupCall) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneCreateGroupCall not implemented")
}
func (UnimplementedRPCGroupCallsServer) PhoneJoinGroupCall(context.Context, *TLPhoneJoinGroupCall) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneJoinGroupCall not implemented")
}
func (UnimplementedRPCGroupCallsServer) PhoneLeaveGroupCall(context.Context, *TLPhoneLeaveGroupCall) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneLeaveGroupCall not implemented")
}
func (UnimplementedRPCGroupCallsServer) PhoneInviteToGroupCall(context.Context, *TLPhoneInviteToGroupCall) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneInviteToGroupCall not implemented")
}
func (UnimplementedRPCGroupCallsServer) PhoneDiscardGroupCall(context.Context, *TLPhoneDiscardGroupCall) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneDiscardGroupCall not implemented")
}
func (UnimplementedRPCGroupCallsServer) PhoneToggleGroupCallSettings(context.Context, *TLPhoneToggleGroupCallSettings) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneToggleGroupCallSettings not implemented")
}
func (UnimplementedRPCGroupCallsServer) PhoneGetGroupCall(context.Context, *TLPhoneGetGroupCall) (*Phone_GroupCall, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneGetGroupCall not implemented")
}
func (UnimplementedRPCGroupCallsServer) PhoneGetGroupParticipants(context.Context, *TLPhoneGetGroupParticipants) (*Phone_GroupParticipants, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneGetGroupParticipants not implemented")
}
func (UnimplementedRPCGroupCallsServer) PhoneCheckGroupCall(context.Context, *TLPhoneCheckGroupCall) (*Vector_Int, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneCheckGroupCall not implemented")
}
func (UnimplementedRPCGroupCallsServer) PhoneToggleGroupCallRecord(context.Context, *TLPhoneToggleGroupCallRecord) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneToggleGroupCallRecord not implemented")
}
func (UnimplementedRPCGroupCallsServer) PhoneEditGroupCallParticipant(context.Context, *TLPhoneEditGroupCallParticipant) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneEditGroupCallParticipant not implemented")
}
func (UnimplementedRPCGroupCallsServer) PhoneEditGroupCallTitle(context.Context, *TLPhoneEditGroupCallTitle) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneEditGroupCallTitle not implemented")
}
func (UnimplementedRPCGroupCallsServer) PhoneGetGroupCallJoinAs(context.Context, *TLPhoneGetGroupCallJoinAs) (*Phone_JoinAsPeers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneGetGroupCallJoinAs not implemented")
}
func (UnimplementedRPCGroupCallsServer) PhoneExportGroupCallInvite(context.Context, *TLPhoneExportGroupCallInvite) (*Phone_ExportedGroupCallInvite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneExportGroupCallInvite not implemented")
}
func (UnimplementedRPCGroupCallsServer) PhoneToggleGroupCallStartSubscription(context.Context, *TLPhoneToggleGroupCallStartSubscription) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneToggleGroupCallStartSubscription not implemented")
}
func (UnimplementedRPCGroupCallsServer) PhoneStartScheduledGroupCall(context.Context, *TLPhoneStartScheduledGroupCall) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneStartScheduledGroupCall not implemented")
}
func (UnimplementedRPCGroupCallsServer) PhoneSaveDefaultGroupCallJoinAs(context.Context, *TLPhoneSaveDefaultGroupCallJoinAs) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneSaveDefaultGroupCallJoinAs not implemented")
}
func (UnimplementedRPCGroupCallsServer) PhoneJoinGroupCallPresentation(context.Context, *TLPhoneJoinGroupCallPresentation) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneJoinGroupCallPresentation not implemented")
}
func (UnimplementedRPCGroupCallsServer) PhoneLeaveGroupCallPresentation(context.Context, *TLPhoneLeaveGroupCallPresentation) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneLeaveGroupCallPresentation not implemented")
}
func (UnimplementedRPCGroupCallsServer) PhoneGetGroupCallStreamChannels(context.Context, *TLPhoneGetGroupCallStreamChannels) (*Phone_GroupCallStreamChannels, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneGetGroupCallStreamChannels not implemented")
}
func (UnimplementedRPCGroupCallsServer) PhoneGetGroupCallStreamRtmpUrl(context.Context, *TLPhoneGetGroupCallStreamRtmpUrl) (*Phone_GroupCallStreamRtmpUrl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneGetGroupCallStreamRtmpUrl not implemented")
}
func (UnimplementedRPCGroupCallsServer) testEmbeddedByValue() {}

// UnsafeRPCGroupCallsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCGroupCallsServer will
// result in compilation errors.
type UnsafeRPCGroupCallsServer interface {
	mustEmbedUnimplementedRPCGroupCallsServer()
}

func RegisterRPCGroupCallsServer(s grpc.ServiceRegistrar, srv RPCGroupCallsServer) {
	// If the following call pancis, it indicates UnimplementedRPCGroupCallsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCGroupCalls_ServiceDesc, srv)
}

func _RPCGroupCalls_PhoneCreateGroupCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneCreateGroupCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCGroupCallsServer).PhoneCreateGroupCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCGroupCalls_PhoneCreateGroupCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCGroupCallsServer).PhoneCreateGroupCall(ctx, req.(*TLPhoneCreateGroupCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCGroupCalls_PhoneJoinGroupCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneJoinGroupCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCGroupCallsServer).PhoneJoinGroupCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCGroupCalls_PhoneJoinGroupCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCGroupCallsServer).PhoneJoinGroupCall(ctx, req.(*TLPhoneJoinGroupCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCGroupCalls_PhoneLeaveGroupCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneLeaveGroupCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCGroupCallsServer).PhoneLeaveGroupCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCGroupCalls_PhoneLeaveGroupCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCGroupCallsServer).PhoneLeaveGroupCall(ctx, req.(*TLPhoneLeaveGroupCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCGroupCalls_PhoneInviteToGroupCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneInviteToGroupCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCGroupCallsServer).PhoneInviteToGroupCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCGroupCalls_PhoneInviteToGroupCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCGroupCallsServer).PhoneInviteToGroupCall(ctx, req.(*TLPhoneInviteToGroupCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCGroupCalls_PhoneDiscardGroupCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneDiscardGroupCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCGroupCallsServer).PhoneDiscardGroupCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCGroupCalls_PhoneDiscardGroupCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCGroupCallsServer).PhoneDiscardGroupCall(ctx, req.(*TLPhoneDiscardGroupCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCGroupCalls_PhoneToggleGroupCallSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneToggleGroupCallSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCGroupCallsServer).PhoneToggleGroupCallSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCGroupCalls_PhoneToggleGroupCallSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCGroupCallsServer).PhoneToggleGroupCallSettings(ctx, req.(*TLPhoneToggleGroupCallSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCGroupCalls_PhoneGetGroupCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneGetGroupCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCGroupCallsServer).PhoneGetGroupCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCGroupCalls_PhoneGetGroupCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCGroupCallsServer).PhoneGetGroupCall(ctx, req.(*TLPhoneGetGroupCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCGroupCalls_PhoneGetGroupParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneGetGroupParticipants)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCGroupCallsServer).PhoneGetGroupParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCGroupCalls_PhoneGetGroupParticipants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCGroupCallsServer).PhoneGetGroupParticipants(ctx, req.(*TLPhoneGetGroupParticipants))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCGroupCalls_PhoneCheckGroupCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneCheckGroupCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCGroupCallsServer).PhoneCheckGroupCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCGroupCalls_PhoneCheckGroupCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCGroupCallsServer).PhoneCheckGroupCall(ctx, req.(*TLPhoneCheckGroupCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCGroupCalls_PhoneToggleGroupCallRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneToggleGroupCallRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCGroupCallsServer).PhoneToggleGroupCallRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCGroupCalls_PhoneToggleGroupCallRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCGroupCallsServer).PhoneToggleGroupCallRecord(ctx, req.(*TLPhoneToggleGroupCallRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCGroupCalls_PhoneEditGroupCallParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneEditGroupCallParticipant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCGroupCallsServer).PhoneEditGroupCallParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCGroupCalls_PhoneEditGroupCallParticipant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCGroupCallsServer).PhoneEditGroupCallParticipant(ctx, req.(*TLPhoneEditGroupCallParticipant))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCGroupCalls_PhoneEditGroupCallTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneEditGroupCallTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCGroupCallsServer).PhoneEditGroupCallTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCGroupCalls_PhoneEditGroupCallTitle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCGroupCallsServer).PhoneEditGroupCallTitle(ctx, req.(*TLPhoneEditGroupCallTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCGroupCalls_PhoneGetGroupCallJoinAs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneGetGroupCallJoinAs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCGroupCallsServer).PhoneGetGroupCallJoinAs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCGroupCalls_PhoneGetGroupCallJoinAs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCGroupCallsServer).PhoneGetGroupCallJoinAs(ctx, req.(*TLPhoneGetGroupCallJoinAs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCGroupCalls_PhoneExportGroupCallInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneExportGroupCallInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCGroupCallsServer).PhoneExportGroupCallInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCGroupCalls_PhoneExportGroupCallInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCGroupCallsServer).PhoneExportGroupCallInvite(ctx, req.(*TLPhoneExportGroupCallInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCGroupCalls_PhoneToggleGroupCallStartSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneToggleGroupCallStartSubscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCGroupCallsServer).PhoneToggleGroupCallStartSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCGroupCalls_PhoneToggleGroupCallStartSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCGroupCallsServer).PhoneToggleGroupCallStartSubscription(ctx, req.(*TLPhoneToggleGroupCallStartSubscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCGroupCalls_PhoneStartScheduledGroupCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneStartScheduledGroupCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCGroupCallsServer).PhoneStartScheduledGroupCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCGroupCalls_PhoneStartScheduledGroupCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCGroupCallsServer).PhoneStartScheduledGroupCall(ctx, req.(*TLPhoneStartScheduledGroupCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCGroupCalls_PhoneSaveDefaultGroupCallJoinAs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneSaveDefaultGroupCallJoinAs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCGroupCallsServer).PhoneSaveDefaultGroupCallJoinAs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCGroupCalls_PhoneSaveDefaultGroupCallJoinAs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCGroupCallsServer).PhoneSaveDefaultGroupCallJoinAs(ctx, req.(*TLPhoneSaveDefaultGroupCallJoinAs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCGroupCalls_PhoneJoinGroupCallPresentation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneJoinGroupCallPresentation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCGroupCallsServer).PhoneJoinGroupCallPresentation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCGroupCalls_PhoneJoinGroupCallPresentation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCGroupCallsServer).PhoneJoinGroupCallPresentation(ctx, req.(*TLPhoneJoinGroupCallPresentation))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCGroupCalls_PhoneLeaveGroupCallPresentation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneLeaveGroupCallPresentation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCGroupCallsServer).PhoneLeaveGroupCallPresentation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCGroupCalls_PhoneLeaveGroupCallPresentation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCGroupCallsServer).PhoneLeaveGroupCallPresentation(ctx, req.(*TLPhoneLeaveGroupCallPresentation))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCGroupCalls_PhoneGetGroupCallStreamChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneGetGroupCallStreamChannels)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCGroupCallsServer).PhoneGetGroupCallStreamChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCGroupCalls_PhoneGetGroupCallStreamChannels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCGroupCallsServer).PhoneGetGroupCallStreamChannels(ctx, req.(*TLPhoneGetGroupCallStreamChannels))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCGroupCalls_PhoneGetGroupCallStreamRtmpUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneGetGroupCallStreamRtmpUrl)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCGroupCallsServer).PhoneGetGroupCallStreamRtmpUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCGroupCalls_PhoneGetGroupCallStreamRtmpUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCGroupCallsServer).PhoneGetGroupCallStreamRtmpUrl(ctx, req.(*TLPhoneGetGroupCallStreamRtmpUrl))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCGroupCalls_ServiceDesc is the grpc.ServiceDesc for RPCGroupCalls service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCGroupCalls_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCGroupCalls",
	HandlerType: (*RPCGroupCallsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "phone_createGroupCall",
			Handler:    _RPCGroupCalls_PhoneCreateGroupCall_Handler,
		},
		{
			MethodName: "phone_joinGroupCall",
			Handler:    _RPCGroupCalls_PhoneJoinGroupCall_Handler,
		},
		{
			MethodName: "phone_leaveGroupCall",
			Handler:    _RPCGroupCalls_PhoneLeaveGroupCall_Handler,
		},
		{
			MethodName: "phone_inviteToGroupCall",
			Handler:    _RPCGroupCalls_PhoneInviteToGroupCall_Handler,
		},
		{
			MethodName: "phone_discardGroupCall",
			Handler:    _RPCGroupCalls_PhoneDiscardGroupCall_Handler,
		},
		{
			MethodName: "phone_toggleGroupCallSettings",
			Handler:    _RPCGroupCalls_PhoneToggleGroupCallSettings_Handler,
		},
		{
			MethodName: "phone_getGroupCall",
			Handler:    _RPCGroupCalls_PhoneGetGroupCall_Handler,
		},
		{
			MethodName: "phone_getGroupParticipants",
			Handler:    _RPCGroupCalls_PhoneGetGroupParticipants_Handler,
		},
		{
			MethodName: "phone_checkGroupCall",
			Handler:    _RPCGroupCalls_PhoneCheckGroupCall_Handler,
		},
		{
			MethodName: "phone_toggleGroupCallRecord",
			Handler:    _RPCGroupCalls_PhoneToggleGroupCallRecord_Handler,
		},
		{
			MethodName: "phone_editGroupCallParticipant",
			Handler:    _RPCGroupCalls_PhoneEditGroupCallParticipant_Handler,
		},
		{
			MethodName: "phone_editGroupCallTitle",
			Handler:    _RPCGroupCalls_PhoneEditGroupCallTitle_Handler,
		},
		{
			MethodName: "phone_getGroupCallJoinAs",
			Handler:    _RPCGroupCalls_PhoneGetGroupCallJoinAs_Handler,
		},
		{
			MethodName: "phone_exportGroupCallInvite",
			Handler:    _RPCGroupCalls_PhoneExportGroupCallInvite_Handler,
		},
		{
			MethodName: "phone_toggleGroupCallStartSubscription",
			Handler:    _RPCGroupCalls_PhoneToggleGroupCallStartSubscription_Handler,
		},
		{
			MethodName: "phone_startScheduledGroupCall",
			Handler:    _RPCGroupCalls_PhoneStartScheduledGroupCall_Handler,
		},
		{
			MethodName: "phone_saveDefaultGroupCallJoinAs",
			Handler:    _RPCGroupCalls_PhoneSaveDefaultGroupCallJoinAs_Handler,
		},
		{
			MethodName: "phone_joinGroupCallPresentation",
			Handler:    _RPCGroupCalls_PhoneJoinGroupCallPresentation_Handler,
		},
		{
			MethodName: "phone_leaveGroupCallPresentation",
			Handler:    _RPCGroupCalls_PhoneLeaveGroupCallPresentation_Handler,
		},
		{
			MethodName: "phone_getGroupCallStreamChannels",
			Handler:    _RPCGroupCalls_PhoneGetGroupCallStreamChannels_Handler,
		},
		{
			MethodName: "phone_getGroupCallStreamRtmpUrl",
			Handler:    _RPCGroupCalls_PhoneGetGroupCallStreamRtmpUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCImportedChats_MessagesCheckHistoryImport_FullMethodName     = "/mtproto.RPCImportedChats/messages_checkHistoryImport"
	RPCImportedChats_MessagesInitHistoryImport_FullMethodName      = "/mtproto.RPCImportedChats/messages_initHistoryImport"
	RPCImportedChats_MessagesUploadImportedMedia_FullMethodName    = "/mtproto.RPCImportedChats/messages_uploadImportedMedia"
	RPCImportedChats_MessagesStartHistoryImport_FullMethodName     = "/mtproto.RPCImportedChats/messages_startHistoryImport"
	RPCImportedChats_MessagesCheckHistoryImportPeer_FullMethodName = "/mtproto.RPCImportedChats/messages_checkHistoryImportPeer"
)

// RPCImportedChatsClient is the client API for RPCImportedChats service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCImportedChatsClient interface {
	MessagesCheckHistoryImport(ctx context.Context, in *TLMessagesCheckHistoryImport, opts ...grpc.CallOption) (*Messages_HistoryImportParsed, error)
	MessagesInitHistoryImport(ctx context.Context, in *TLMessagesInitHistoryImport, opts ...grpc.CallOption) (*Messages_HistoryImport, error)
	MessagesUploadImportedMedia(ctx context.Context, in *TLMessagesUploadImportedMedia, opts ...grpc.CallOption) (*MessageMedia, error)
	MessagesStartHistoryImport(ctx context.Context, in *TLMessagesStartHistoryImport, opts ...grpc.CallOption) (*Bool, error)
	MessagesCheckHistoryImportPeer(ctx context.Context, in *TLMessagesCheckHistoryImportPeer, opts ...grpc.CallOption) (*Messages_CheckedHistoryImportPeer, error)
}

type rPCImportedChatsClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCImportedChatsClient(cc grpc.ClientConnInterface) RPCImportedChatsClient {
	return &rPCImportedChatsClient{cc}
}

func (c *rPCImportedChatsClient) MessagesCheckHistoryImport(ctx context.Context, in *TLMessagesCheckHistoryImport, opts ...grpc.CallOption) (*Messages_HistoryImportParsed, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_HistoryImportParsed)
	err := c.cc.Invoke(ctx, RPCImportedChats_MessagesCheckHistoryImport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCImportedChatsClient) MessagesInitHistoryImport(ctx context.Context, in *TLMessagesInitHistoryImport, opts ...grpc.CallOption) (*Messages_HistoryImport, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_HistoryImport)
	err := c.cc.Invoke(ctx, RPCImportedChats_MessagesInitHistoryImport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCImportedChatsClient) MessagesUploadImportedMedia(ctx context.Context, in *TLMessagesUploadImportedMedia, opts ...grpc.CallOption) (*MessageMedia, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageMedia)
	err := c.cc.Invoke(ctx, RPCImportedChats_MessagesUploadImportedMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCImportedChatsClient) MessagesStartHistoryImport(ctx context.Context, in *TLMessagesStartHistoryImport, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCImportedChats_MessagesStartHistoryImport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCImportedChatsClient) MessagesCheckHistoryImportPeer(ctx context.Context, in *TLMessagesCheckHistoryImportPeer, opts ...grpc.CallOption) (*Messages_CheckedHistoryImportPeer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_CheckedHistoryImportPeer)
	err := c.cc.Invoke(ctx, RPCImportedChats_MessagesCheckHistoryImportPeer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCImportedChatsServer is the server API for RPCImportedChats service.
// All implementations should embed UnimplementedRPCImportedChatsServer
// for forward compatibility.
type RPCImportedChatsServer interface {
	MessagesCheckHistoryImport(context.Context, *TLMessagesCheckHistoryImport) (*Messages_HistoryImportParsed, error)
	MessagesInitHistoryImport(context.Context, *TLMessagesInitHistoryImport) (*Messages_HistoryImport, error)
	MessagesUploadImportedMedia(context.Context, *TLMessagesUploadImportedMedia) (*MessageMedia, error)
	MessagesStartHistoryImport(context.Context, *TLMessagesStartHistoryImport) (*Bool, error)
	MessagesCheckHistoryImportPeer(context.Context, *TLMessagesCheckHistoryImportPeer) (*Messages_CheckedHistoryImportPeer, error)
}

// UnimplementedRPCImportedChatsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCImportedChatsServer struct{}

func (UnimplementedRPCImportedChatsServer) MessagesCheckHistoryImport(context.Context, *TLMessagesCheckHistoryImport) (*Messages_HistoryImportParsed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesCheckHistoryImport not implemented")
}
func (UnimplementedRPCImportedChatsServer) MessagesInitHistoryImport(context.Context, *TLMessagesInitHistoryImport) (*Messages_HistoryImport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesInitHistoryImport not implemented")
}
func (UnimplementedRPCImportedChatsServer) MessagesUploadImportedMedia(context.Context, *TLMessagesUploadImportedMedia) (*MessageMedia, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesUploadImportedMedia not implemented")
}
func (UnimplementedRPCImportedChatsServer) MessagesStartHistoryImport(context.Context, *TLMessagesStartHistoryImport) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesStartHistoryImport not implemented")
}
func (UnimplementedRPCImportedChatsServer) MessagesCheckHistoryImportPeer(context.Context, *TLMessagesCheckHistoryImportPeer) (*Messages_CheckedHistoryImportPeer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesCheckHistoryImportPeer not implemented")
}
func (UnimplementedRPCImportedChatsServer) testEmbeddedByValue() {}

// UnsafeRPCImportedChatsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCImportedChatsServer will
// result in compilation errors.
type UnsafeRPCImportedChatsServer interface {
	mustEmbedUnimplementedRPCImportedChatsServer()
}

func RegisterRPCImportedChatsServer(s grpc.ServiceRegistrar, srv RPCImportedChatsServer) {
	// If the following call pancis, it indicates UnimplementedRPCImportedChatsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCImportedChats_ServiceDesc, srv)
}

func _RPCImportedChats_MessagesCheckHistoryImport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesCheckHistoryImport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCImportedChatsServer).MessagesCheckHistoryImport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCImportedChats_MessagesCheckHistoryImport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCImportedChatsServer).MessagesCheckHistoryImport(ctx, req.(*TLMessagesCheckHistoryImport))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCImportedChats_MessagesInitHistoryImport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesInitHistoryImport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCImportedChatsServer).MessagesInitHistoryImport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCImportedChats_MessagesInitHistoryImport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCImportedChatsServer).MessagesInitHistoryImport(ctx, req.(*TLMessagesInitHistoryImport))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCImportedChats_MessagesUploadImportedMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesUploadImportedMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCImportedChatsServer).MessagesUploadImportedMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCImportedChats_MessagesUploadImportedMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCImportedChatsServer).MessagesUploadImportedMedia(ctx, req.(*TLMessagesUploadImportedMedia))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCImportedChats_MessagesStartHistoryImport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesStartHistoryImport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCImportedChatsServer).MessagesStartHistoryImport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCImportedChats_MessagesStartHistoryImport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCImportedChatsServer).MessagesStartHistoryImport(ctx, req.(*TLMessagesStartHistoryImport))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCImportedChats_MessagesCheckHistoryImportPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesCheckHistoryImportPeer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCImportedChatsServer).MessagesCheckHistoryImportPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCImportedChats_MessagesCheckHistoryImportPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCImportedChatsServer).MessagesCheckHistoryImportPeer(ctx, req.(*TLMessagesCheckHistoryImportPeer))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCImportedChats_ServiceDesc is the grpc.ServiceDesc for RPCImportedChats service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCImportedChats_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCImportedChats",
	HandlerType: (*RPCImportedChatsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "messages_checkHistoryImport",
			Handler:    _RPCImportedChats_MessagesCheckHistoryImport_Handler,
		},
		{
			MethodName: "messages_initHistoryImport",
			Handler:    _RPCImportedChats_MessagesInitHistoryImport_Handler,
		},
		{
			MethodName: "messages_uploadImportedMedia",
			Handler:    _RPCImportedChats_MessagesUploadImportedMedia_Handler,
		},
		{
			MethodName: "messages_startHistoryImport",
			Handler:    _RPCImportedChats_MessagesStartHistoryImport_Handler,
		},
		{
			MethodName: "messages_checkHistoryImportPeer",
			Handler:    _RPCImportedChats_MessagesCheckHistoryImportPeer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCInlineBot_MessagesGetInlineBotResults_FullMethodName  = "/mtproto.RPCInlineBot/messages_getInlineBotResults"
	RPCInlineBot_MessagesSetInlineBotResults_FullMethodName  = "/mtproto.RPCInlineBot/messages_setInlineBotResults"
	RPCInlineBot_MessagesSendInlineBotResult_FullMethodName  = "/mtproto.RPCInlineBot/messages_sendInlineBotResult"
	RPCInlineBot_MessagesEditInlineBotMessage_FullMethodName = "/mtproto.RPCInlineBot/messages_editInlineBotMessage"
	RPCInlineBot_MessagesGetBotCallbackAnswer_FullMethodName = "/mtproto.RPCInlineBot/messages_getBotCallbackAnswer"
	RPCInlineBot_MessagesSetBotCallbackAnswer_FullMethodName = "/mtproto.RPCInlineBot/messages_setBotCallbackAnswer"
	RPCInlineBot_MessagesSendBotRequestedPeer_FullMethodName = "/mtproto.RPCInlineBot/messages_sendBotRequestedPeer"
)

// RPCInlineBotClient is the client API for RPCInlineBot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCInlineBotClient interface {
	MessagesGetInlineBotResults(ctx context.Context, in *TLMessagesGetInlineBotResults, opts ...grpc.CallOption) (*Messages_BotResults, error)
	MessagesSetInlineBotResults(ctx context.Context, in *TLMessagesSetInlineBotResults, opts ...grpc.CallOption) (*Bool, error)
	MessagesSendInlineBotResult(ctx context.Context, in *TLMessagesSendInlineBotResult, opts ...grpc.CallOption) (*Updates, error)
	MessagesEditInlineBotMessage(ctx context.Context, in *TLMessagesEditInlineBotMessage, opts ...grpc.CallOption) (*Bool, error)
	MessagesGetBotCallbackAnswer(ctx context.Context, in *TLMessagesGetBotCallbackAnswer, opts ...grpc.CallOption) (*Messages_BotCallbackAnswer, error)
	MessagesSetBotCallbackAnswer(ctx context.Context, in *TLMessagesSetBotCallbackAnswer, opts ...grpc.CallOption) (*Bool, error)
	MessagesSendBotRequestedPeer(ctx context.Context, in *TLMessagesSendBotRequestedPeer, opts ...grpc.CallOption) (*Updates, error)
}

type rPCInlineBotClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCInlineBotClient(cc grpc.ClientConnInterface) RPCInlineBotClient {
	return &rPCInlineBotClient{cc}
}

func (c *rPCInlineBotClient) MessagesGetInlineBotResults(ctx context.Context, in *TLMessagesGetInlineBotResults, opts ...grpc.CallOption) (*Messages_BotResults, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_BotResults)
	err := c.cc.Invoke(ctx, RPCInlineBot_MessagesGetInlineBotResults_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCInlineBotClient) MessagesSetInlineBotResults(ctx context.Context, in *TLMessagesSetInlineBotResults, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCInlineBot_MessagesSetInlineBotResults_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCInlineBotClient) MessagesSendInlineBotResult(ctx context.Context, in *TLMessagesSendInlineBotResult, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCInlineBot_MessagesSendInlineBotResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCInlineBotClient) MessagesEditInlineBotMessage(ctx context.Context, in *TLMessagesEditInlineBotMessage, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCInlineBot_MessagesEditInlineBotMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCInlineBotClient) MessagesGetBotCallbackAnswer(ctx context.Context, in *TLMessagesGetBotCallbackAnswer, opts ...grpc.CallOption) (*Messages_BotCallbackAnswer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_BotCallbackAnswer)
	err := c.cc.Invoke(ctx, RPCInlineBot_MessagesGetBotCallbackAnswer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCInlineBotClient) MessagesSetBotCallbackAnswer(ctx context.Context, in *TLMessagesSetBotCallbackAnswer, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCInlineBot_MessagesSetBotCallbackAnswer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCInlineBotClient) MessagesSendBotRequestedPeer(ctx context.Context, in *TLMessagesSendBotRequestedPeer, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCInlineBot_MessagesSendBotRequestedPeer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCInlineBotServer is the server API for RPCInlineBot service.
// All implementations should embed UnimplementedRPCInlineBotServer
// for forward compatibility.
type RPCInlineBotServer interface {
	MessagesGetInlineBotResults(context.Context, *TLMessagesGetInlineBotResults) (*Messages_BotResults, error)
	MessagesSetInlineBotResults(context.Context, *TLMessagesSetInlineBotResults) (*Bool, error)
	MessagesSendInlineBotResult(context.Context, *TLMessagesSendInlineBotResult) (*Updates, error)
	MessagesEditInlineBotMessage(context.Context, *TLMessagesEditInlineBotMessage) (*Bool, error)
	MessagesGetBotCallbackAnswer(context.Context, *TLMessagesGetBotCallbackAnswer) (*Messages_BotCallbackAnswer, error)
	MessagesSetBotCallbackAnswer(context.Context, *TLMessagesSetBotCallbackAnswer) (*Bool, error)
	MessagesSendBotRequestedPeer(context.Context, *TLMessagesSendBotRequestedPeer) (*Updates, error)
}

// UnimplementedRPCInlineBotServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCInlineBotServer struct{}

func (UnimplementedRPCInlineBotServer) MessagesGetInlineBotResults(context.Context, *TLMessagesGetInlineBotResults) (*Messages_BotResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetInlineBotResults not implemented")
}
func (UnimplementedRPCInlineBotServer) MessagesSetInlineBotResults(context.Context, *TLMessagesSetInlineBotResults) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSetInlineBotResults not implemented")
}
func (UnimplementedRPCInlineBotServer) MessagesSendInlineBotResult(context.Context, *TLMessagesSendInlineBotResult) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendInlineBotResult not implemented")
}
func (UnimplementedRPCInlineBotServer) MessagesEditInlineBotMessage(context.Context, *TLMessagesEditInlineBotMessage) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesEditInlineBotMessage not implemented")
}
func (UnimplementedRPCInlineBotServer) MessagesGetBotCallbackAnswer(context.Context, *TLMessagesGetBotCallbackAnswer) (*Messages_BotCallbackAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetBotCallbackAnswer not implemented")
}
func (UnimplementedRPCInlineBotServer) MessagesSetBotCallbackAnswer(context.Context, *TLMessagesSetBotCallbackAnswer) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSetBotCallbackAnswer not implemented")
}
func (UnimplementedRPCInlineBotServer) MessagesSendBotRequestedPeer(context.Context, *TLMessagesSendBotRequestedPeer) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendBotRequestedPeer not implemented")
}
func (UnimplementedRPCInlineBotServer) testEmbeddedByValue() {}

// UnsafeRPCInlineBotServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCInlineBotServer will
// result in compilation errors.
type UnsafeRPCInlineBotServer interface {
	mustEmbedUnimplementedRPCInlineBotServer()
}

func RegisterRPCInlineBotServer(s grpc.ServiceRegistrar, srv RPCInlineBotServer) {
	// If the following call pancis, it indicates UnimplementedRPCInlineBotServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCInlineBot_ServiceDesc, srv)
}

func _RPCInlineBot_MessagesGetInlineBotResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetInlineBotResults)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCInlineBotServer).MessagesGetInlineBotResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCInlineBot_MessagesGetInlineBotResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCInlineBotServer).MessagesGetInlineBotResults(ctx, req.(*TLMessagesGetInlineBotResults))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCInlineBot_MessagesSetInlineBotResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSetInlineBotResults)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCInlineBotServer).MessagesSetInlineBotResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCInlineBot_MessagesSetInlineBotResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCInlineBotServer).MessagesSetInlineBotResults(ctx, req.(*TLMessagesSetInlineBotResults))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCInlineBot_MessagesSendInlineBotResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendInlineBotResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCInlineBotServer).MessagesSendInlineBotResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCInlineBot_MessagesSendInlineBotResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCInlineBotServer).MessagesSendInlineBotResult(ctx, req.(*TLMessagesSendInlineBotResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCInlineBot_MessagesEditInlineBotMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesEditInlineBotMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCInlineBotServer).MessagesEditInlineBotMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCInlineBot_MessagesEditInlineBotMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCInlineBotServer).MessagesEditInlineBotMessage(ctx, req.(*TLMessagesEditInlineBotMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCInlineBot_MessagesGetBotCallbackAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetBotCallbackAnswer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCInlineBotServer).MessagesGetBotCallbackAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCInlineBot_MessagesGetBotCallbackAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCInlineBotServer).MessagesGetBotCallbackAnswer(ctx, req.(*TLMessagesGetBotCallbackAnswer))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCInlineBot_MessagesSetBotCallbackAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSetBotCallbackAnswer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCInlineBotServer).MessagesSetBotCallbackAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCInlineBot_MessagesSetBotCallbackAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCInlineBotServer).MessagesSetBotCallbackAnswer(ctx, req.(*TLMessagesSetBotCallbackAnswer))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCInlineBot_MessagesSendBotRequestedPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendBotRequestedPeer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCInlineBotServer).MessagesSendBotRequestedPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCInlineBot_MessagesSendBotRequestedPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCInlineBotServer).MessagesSendBotRequestedPeer(ctx, req.(*TLMessagesSendBotRequestedPeer))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCInlineBot_ServiceDesc is the grpc.ServiceDesc for RPCInlineBot service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCInlineBot_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCInlineBot",
	HandlerType: (*RPCInlineBotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "messages_getInlineBotResults",
			Handler:    _RPCInlineBot_MessagesGetInlineBotResults_Handler,
		},
		{
			MethodName: "messages_setInlineBotResults",
			Handler:    _RPCInlineBot_MessagesSetInlineBotResults_Handler,
		},
		{
			MethodName: "messages_sendInlineBotResult",
			Handler:    _RPCInlineBot_MessagesSendInlineBotResult_Handler,
		},
		{
			MethodName: "messages_editInlineBotMessage",
			Handler:    _RPCInlineBot_MessagesEditInlineBotMessage_Handler,
		},
		{
			MethodName: "messages_getBotCallbackAnswer",
			Handler:    _RPCInlineBot_MessagesGetBotCallbackAnswer_Handler,
		},
		{
			MethodName: "messages_setBotCallbackAnswer",
			Handler:    _RPCInlineBot_MessagesSetBotCallbackAnswer_Handler,
		},
		{
			MethodName: "messages_sendBotRequestedPeer",
			Handler:    _RPCInlineBot_MessagesSendBotRequestedPeer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCInternalBot_HelpSetBotUpdatesStatus_FullMethodName    = "/mtproto.RPCInternalBot/help_setBotUpdatesStatus"
	RPCInternalBot_BotsSendCustomRequest_FullMethodName      = "/mtproto.RPCInternalBot/bots_sendCustomRequest"
	RPCInternalBot_BotsAnswerWebhookJSONQuery_FullMethodName = "/mtproto.RPCInternalBot/bots_answerWebhookJSONQuery"
)

// RPCInternalBotClient is the client API for RPCInternalBot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCInternalBotClient interface {
	HelpSetBotUpdatesStatus(ctx context.Context, in *TLHelpSetBotUpdatesStatus, opts ...grpc.CallOption) (*Bool, error)
	BotsSendCustomRequest(ctx context.Context, in *TLBotsSendCustomRequest, opts ...grpc.CallOption) (*DataJSON, error)
	BotsAnswerWebhookJSONQuery(ctx context.Context, in *TLBotsAnswerWebhookJSONQuery, opts ...grpc.CallOption) (*Bool, error)
}

type rPCInternalBotClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCInternalBotClient(cc grpc.ClientConnInterface) RPCInternalBotClient {
	return &rPCInternalBotClient{cc}
}

func (c *rPCInternalBotClient) HelpSetBotUpdatesStatus(ctx context.Context, in *TLHelpSetBotUpdatesStatus, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCInternalBot_HelpSetBotUpdatesStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCInternalBotClient) BotsSendCustomRequest(ctx context.Context, in *TLBotsSendCustomRequest, opts ...grpc.CallOption) (*DataJSON, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataJSON)
	err := c.cc.Invoke(ctx, RPCInternalBot_BotsSendCustomRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCInternalBotClient) BotsAnswerWebhookJSONQuery(ctx context.Context, in *TLBotsAnswerWebhookJSONQuery, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCInternalBot_BotsAnswerWebhookJSONQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCInternalBotServer is the server API for RPCInternalBot service.
// All implementations should embed UnimplementedRPCInternalBotServer
// for forward compatibility.
type RPCInternalBotServer interface {
	HelpSetBotUpdatesStatus(context.Context, *TLHelpSetBotUpdatesStatus) (*Bool, error)
	BotsSendCustomRequest(context.Context, *TLBotsSendCustomRequest) (*DataJSON, error)
	BotsAnswerWebhookJSONQuery(context.Context, *TLBotsAnswerWebhookJSONQuery) (*Bool, error)
}

// UnimplementedRPCInternalBotServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCInternalBotServer struct{}

func (UnimplementedRPCInternalBotServer) HelpSetBotUpdatesStatus(context.Context, *TLHelpSetBotUpdatesStatus) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpSetBotUpdatesStatus not implemented")
}
func (UnimplementedRPCInternalBotServer) BotsSendCustomRequest(context.Context, *TLBotsSendCustomRequest) (*DataJSON, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotsSendCustomRequest not implemented")
}
func (UnimplementedRPCInternalBotServer) BotsAnswerWebhookJSONQuery(context.Context, *TLBotsAnswerWebhookJSONQuery) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotsAnswerWebhookJSONQuery not implemented")
}
func (UnimplementedRPCInternalBotServer) testEmbeddedByValue() {}

// UnsafeRPCInternalBotServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCInternalBotServer will
// result in compilation errors.
type UnsafeRPCInternalBotServer interface {
	mustEmbedUnimplementedRPCInternalBotServer()
}

func RegisterRPCInternalBotServer(s grpc.ServiceRegistrar, srv RPCInternalBotServer) {
	// If the following call pancis, it indicates UnimplementedRPCInternalBotServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCInternalBot_ServiceDesc, srv)
}

func _RPCInternalBot_HelpSetBotUpdatesStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpSetBotUpdatesStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCInternalBotServer).HelpSetBotUpdatesStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCInternalBot_HelpSetBotUpdatesStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCInternalBotServer).HelpSetBotUpdatesStatus(ctx, req.(*TLHelpSetBotUpdatesStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCInternalBot_BotsSendCustomRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLBotsSendCustomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCInternalBotServer).BotsSendCustomRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCInternalBot_BotsSendCustomRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCInternalBotServer).BotsSendCustomRequest(ctx, req.(*TLBotsSendCustomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCInternalBot_BotsAnswerWebhookJSONQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLBotsAnswerWebhookJSONQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCInternalBotServer).BotsAnswerWebhookJSONQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCInternalBot_BotsAnswerWebhookJSONQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCInternalBotServer).BotsAnswerWebhookJSONQuery(ctx, req.(*TLBotsAnswerWebhookJSONQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCInternalBot_ServiceDesc is the grpc.ServiceDesc for RPCInternalBot service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCInternalBot_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCInternalBot",
	HandlerType: (*RPCInternalBotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "help_setBotUpdatesStatus",
			Handler:    _RPCInternalBot_HelpSetBotUpdatesStatus_Handler,
		},
		{
			MethodName: "bots_sendCustomRequest",
			Handler:    _RPCInternalBot_BotsSendCustomRequest_Handler,
		},
		{
			MethodName: "bots_answerWebhookJSONQuery",
			Handler:    _RPCInternalBot_BotsAnswerWebhookJSONQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCLangpack_LangpackGetLangPack_FullMethodName   = "/mtproto.RPCLangpack/langpack_getLangPack"
	RPCLangpack_LangpackGetStrings_FullMethodName    = "/mtproto.RPCLangpack/langpack_getStrings"
	RPCLangpack_LangpackGetDifference_FullMethodName = "/mtproto.RPCLangpack/langpack_getDifference"
	RPCLangpack_LangpackGetLanguages_FullMethodName  = "/mtproto.RPCLangpack/langpack_getLanguages"
	RPCLangpack_LangpackGetLanguage_FullMethodName   = "/mtproto.RPCLangpack/langpack_getLanguage"
)

// RPCLangpackClient is the client API for RPCLangpack service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCLangpackClient interface {
	LangpackGetLangPack(ctx context.Context, in *TLLangpackGetLangPack, opts ...grpc.CallOption) (*LangPackDifference, error)
	LangpackGetStrings(ctx context.Context, in *TLLangpackGetStrings, opts ...grpc.CallOption) (*Vector_LangPackString, error)
	LangpackGetDifference(ctx context.Context, in *TLLangpackGetDifference, opts ...grpc.CallOption) (*LangPackDifference, error)
	LangpackGetLanguages(ctx context.Context, in *TLLangpackGetLanguages, opts ...grpc.CallOption) (*Vector_LangPackLanguage, error)
	LangpackGetLanguage(ctx context.Context, in *TLLangpackGetLanguage, opts ...grpc.CallOption) (*LangPackLanguage, error)
}

type rPCLangpackClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCLangpackClient(cc grpc.ClientConnInterface) RPCLangpackClient {
	return &rPCLangpackClient{cc}
}

func (c *rPCLangpackClient) LangpackGetLangPack(ctx context.Context, in *TLLangpackGetLangPack, opts ...grpc.CallOption) (*LangPackDifference, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LangPackDifference)
	err := c.cc.Invoke(ctx, RPCLangpack_LangpackGetLangPack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCLangpackClient) LangpackGetStrings(ctx context.Context, in *TLLangpackGetStrings, opts ...grpc.CallOption) (*Vector_LangPackString, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_LangPackString)
	err := c.cc.Invoke(ctx, RPCLangpack_LangpackGetStrings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCLangpackClient) LangpackGetDifference(ctx context.Context, in *TLLangpackGetDifference, opts ...grpc.CallOption) (*LangPackDifference, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LangPackDifference)
	err := c.cc.Invoke(ctx, RPCLangpack_LangpackGetDifference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCLangpackClient) LangpackGetLanguages(ctx context.Context, in *TLLangpackGetLanguages, opts ...grpc.CallOption) (*Vector_LangPackLanguage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_LangPackLanguage)
	err := c.cc.Invoke(ctx, RPCLangpack_LangpackGetLanguages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCLangpackClient) LangpackGetLanguage(ctx context.Context, in *TLLangpackGetLanguage, opts ...grpc.CallOption) (*LangPackLanguage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LangPackLanguage)
	err := c.cc.Invoke(ctx, RPCLangpack_LangpackGetLanguage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCLangpackServer is the server API for RPCLangpack service.
// All implementations should embed UnimplementedRPCLangpackServer
// for forward compatibility.
type RPCLangpackServer interface {
	LangpackGetLangPack(context.Context, *TLLangpackGetLangPack) (*LangPackDifference, error)
	LangpackGetStrings(context.Context, *TLLangpackGetStrings) (*Vector_LangPackString, error)
	LangpackGetDifference(context.Context, *TLLangpackGetDifference) (*LangPackDifference, error)
	LangpackGetLanguages(context.Context, *TLLangpackGetLanguages) (*Vector_LangPackLanguage, error)
	LangpackGetLanguage(context.Context, *TLLangpackGetLanguage) (*LangPackLanguage, error)
}

// UnimplementedRPCLangpackServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCLangpackServer struct{}

func (UnimplementedRPCLangpackServer) LangpackGetLangPack(context.Context, *TLLangpackGetLangPack) (*LangPackDifference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LangpackGetLangPack not implemented")
}
func (UnimplementedRPCLangpackServer) LangpackGetStrings(context.Context, *TLLangpackGetStrings) (*Vector_LangPackString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LangpackGetStrings not implemented")
}
func (UnimplementedRPCLangpackServer) LangpackGetDifference(context.Context, *TLLangpackGetDifference) (*LangPackDifference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LangpackGetDifference not implemented")
}
func (UnimplementedRPCLangpackServer) LangpackGetLanguages(context.Context, *TLLangpackGetLanguages) (*Vector_LangPackLanguage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LangpackGetLanguages not implemented")
}
func (UnimplementedRPCLangpackServer) LangpackGetLanguage(context.Context, *TLLangpackGetLanguage) (*LangPackLanguage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LangpackGetLanguage not implemented")
}
func (UnimplementedRPCLangpackServer) testEmbeddedByValue() {}

// UnsafeRPCLangpackServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCLangpackServer will
// result in compilation errors.
type UnsafeRPCLangpackServer interface {
	mustEmbedUnimplementedRPCLangpackServer()
}

func RegisterRPCLangpackServer(s grpc.ServiceRegistrar, srv RPCLangpackServer) {
	// If the following call pancis, it indicates UnimplementedRPCLangpackServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCLangpack_ServiceDesc, srv)
}

func _RPCLangpack_LangpackGetLangPack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLLangpackGetLangPack)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCLangpackServer).LangpackGetLangPack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCLangpack_LangpackGetLangPack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCLangpackServer).LangpackGetLangPack(ctx, req.(*TLLangpackGetLangPack))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCLangpack_LangpackGetStrings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLLangpackGetStrings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCLangpackServer).LangpackGetStrings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCLangpack_LangpackGetStrings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCLangpackServer).LangpackGetStrings(ctx, req.(*TLLangpackGetStrings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCLangpack_LangpackGetDifference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLLangpackGetDifference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCLangpackServer).LangpackGetDifference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCLangpack_LangpackGetDifference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCLangpackServer).LangpackGetDifference(ctx, req.(*TLLangpackGetDifference))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCLangpack_LangpackGetLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLLangpackGetLanguages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCLangpackServer).LangpackGetLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCLangpack_LangpackGetLanguages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCLangpackServer).LangpackGetLanguages(ctx, req.(*TLLangpackGetLanguages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCLangpack_LangpackGetLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLLangpackGetLanguage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCLangpackServer).LangpackGetLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCLangpack_LangpackGetLanguage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCLangpackServer).LangpackGetLanguage(ctx, req.(*TLLangpackGetLanguage))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCLangpack_ServiceDesc is the grpc.ServiceDesc for RPCLangpack service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCLangpack_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCLangpack",
	HandlerType: (*RPCLangpackServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "langpack_getLangPack",
			Handler:    _RPCLangpack_LangpackGetLangPack_Handler,
		},
		{
			MethodName: "langpack_getStrings",
			Handler:    _RPCLangpack_LangpackGetStrings_Handler,
		},
		{
			MethodName: "langpack_getDifference",
			Handler:    _RPCLangpack_LangpackGetDifference_Handler,
		},
		{
			MethodName: "langpack_getLanguages",
			Handler:    _RPCLangpack_LangpackGetLanguages_Handler,
		},
		{
			MethodName: "langpack_getLanguage",
			Handler:    _RPCLangpack_LangpackGetLanguage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCMainMiniBotApps_MessagesRequestMainWebView_FullMethodName = "/mtproto.RPCMainMiniBotApps/messages_requestMainWebView"
	RPCMainMiniBotApps_BotsGetPopularAppBots_FullMethodName      = "/mtproto.RPCMainMiniBotApps/bots_getPopularAppBots"
	RPCMainMiniBotApps_BotsAddPreviewMedia_FullMethodName        = "/mtproto.RPCMainMiniBotApps/bots_addPreviewMedia"
	RPCMainMiniBotApps_BotsEditPreviewMedia_FullMethodName       = "/mtproto.RPCMainMiniBotApps/bots_editPreviewMedia"
	RPCMainMiniBotApps_BotsDeletePreviewMedia_FullMethodName     = "/mtproto.RPCMainMiniBotApps/bots_deletePreviewMedia"
	RPCMainMiniBotApps_BotsReorderPreviewMedias_FullMethodName   = "/mtproto.RPCMainMiniBotApps/bots_reorderPreviewMedias"
	RPCMainMiniBotApps_BotsGetPreviewInfo_FullMethodName         = "/mtproto.RPCMainMiniBotApps/bots_getPreviewInfo"
	RPCMainMiniBotApps_BotsGetPreviewMedias_FullMethodName       = "/mtproto.RPCMainMiniBotApps/bots_getPreviewMedias"
)

// RPCMainMiniBotAppsClient is the client API for RPCMainMiniBotApps service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCMainMiniBotAppsClient interface {
	MessagesRequestMainWebView(ctx context.Context, in *TLMessagesRequestMainWebView, opts ...grpc.CallOption) (*WebViewResult, error)
	BotsGetPopularAppBots(ctx context.Context, in *TLBotsGetPopularAppBots, opts ...grpc.CallOption) (*Bots_PopularAppBots, error)
	BotsAddPreviewMedia(ctx context.Context, in *TLBotsAddPreviewMedia, opts ...grpc.CallOption) (*BotPreviewMedia, error)
	BotsEditPreviewMedia(ctx context.Context, in *TLBotsEditPreviewMedia, opts ...grpc.CallOption) (*BotPreviewMedia, error)
	BotsDeletePreviewMedia(ctx context.Context, in *TLBotsDeletePreviewMedia, opts ...grpc.CallOption) (*Bool, error)
	BotsReorderPreviewMedias(ctx context.Context, in *TLBotsReorderPreviewMedias, opts ...grpc.CallOption) (*Bool, error)
	BotsGetPreviewInfo(ctx context.Context, in *TLBotsGetPreviewInfo, opts ...grpc.CallOption) (*Bots_PreviewInfo, error)
	BotsGetPreviewMedias(ctx context.Context, in *TLBotsGetPreviewMedias, opts ...grpc.CallOption) (*Vector_BotPreviewMedia, error)
}

type rPCMainMiniBotAppsClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCMainMiniBotAppsClient(cc grpc.ClientConnInterface) RPCMainMiniBotAppsClient {
	return &rPCMainMiniBotAppsClient{cc}
}

func (c *rPCMainMiniBotAppsClient) MessagesRequestMainWebView(ctx context.Context, in *TLMessagesRequestMainWebView, opts ...grpc.CallOption) (*WebViewResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WebViewResult)
	err := c.cc.Invoke(ctx, RPCMainMiniBotApps_MessagesRequestMainWebView_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMainMiniBotAppsClient) BotsGetPopularAppBots(ctx context.Context, in *TLBotsGetPopularAppBots, opts ...grpc.CallOption) (*Bots_PopularAppBots, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bots_PopularAppBots)
	err := c.cc.Invoke(ctx, RPCMainMiniBotApps_BotsGetPopularAppBots_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMainMiniBotAppsClient) BotsAddPreviewMedia(ctx context.Context, in *TLBotsAddPreviewMedia, opts ...grpc.CallOption) (*BotPreviewMedia, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BotPreviewMedia)
	err := c.cc.Invoke(ctx, RPCMainMiniBotApps_BotsAddPreviewMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMainMiniBotAppsClient) BotsEditPreviewMedia(ctx context.Context, in *TLBotsEditPreviewMedia, opts ...grpc.CallOption) (*BotPreviewMedia, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BotPreviewMedia)
	err := c.cc.Invoke(ctx, RPCMainMiniBotApps_BotsEditPreviewMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMainMiniBotAppsClient) BotsDeletePreviewMedia(ctx context.Context, in *TLBotsDeletePreviewMedia, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCMainMiniBotApps_BotsDeletePreviewMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMainMiniBotAppsClient) BotsReorderPreviewMedias(ctx context.Context, in *TLBotsReorderPreviewMedias, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCMainMiniBotApps_BotsReorderPreviewMedias_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMainMiniBotAppsClient) BotsGetPreviewInfo(ctx context.Context, in *TLBotsGetPreviewInfo, opts ...grpc.CallOption) (*Bots_PreviewInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bots_PreviewInfo)
	err := c.cc.Invoke(ctx, RPCMainMiniBotApps_BotsGetPreviewInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMainMiniBotAppsClient) BotsGetPreviewMedias(ctx context.Context, in *TLBotsGetPreviewMedias, opts ...grpc.CallOption) (*Vector_BotPreviewMedia, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_BotPreviewMedia)
	err := c.cc.Invoke(ctx, RPCMainMiniBotApps_BotsGetPreviewMedias_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCMainMiniBotAppsServer is the server API for RPCMainMiniBotApps service.
// All implementations should embed UnimplementedRPCMainMiniBotAppsServer
// for forward compatibility.
type RPCMainMiniBotAppsServer interface {
	MessagesRequestMainWebView(context.Context, *TLMessagesRequestMainWebView) (*WebViewResult, error)
	BotsGetPopularAppBots(context.Context, *TLBotsGetPopularAppBots) (*Bots_PopularAppBots, error)
	BotsAddPreviewMedia(context.Context, *TLBotsAddPreviewMedia) (*BotPreviewMedia, error)
	BotsEditPreviewMedia(context.Context, *TLBotsEditPreviewMedia) (*BotPreviewMedia, error)
	BotsDeletePreviewMedia(context.Context, *TLBotsDeletePreviewMedia) (*Bool, error)
	BotsReorderPreviewMedias(context.Context, *TLBotsReorderPreviewMedias) (*Bool, error)
	BotsGetPreviewInfo(context.Context, *TLBotsGetPreviewInfo) (*Bots_PreviewInfo, error)
	BotsGetPreviewMedias(context.Context, *TLBotsGetPreviewMedias) (*Vector_BotPreviewMedia, error)
}

// UnimplementedRPCMainMiniBotAppsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCMainMiniBotAppsServer struct{}

func (UnimplementedRPCMainMiniBotAppsServer) MessagesRequestMainWebView(context.Context, *TLMessagesRequestMainWebView) (*WebViewResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesRequestMainWebView not implemented")
}
func (UnimplementedRPCMainMiniBotAppsServer) BotsGetPopularAppBots(context.Context, *TLBotsGetPopularAppBots) (*Bots_PopularAppBots, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotsGetPopularAppBots not implemented")
}
func (UnimplementedRPCMainMiniBotAppsServer) BotsAddPreviewMedia(context.Context, *TLBotsAddPreviewMedia) (*BotPreviewMedia, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotsAddPreviewMedia not implemented")
}
func (UnimplementedRPCMainMiniBotAppsServer) BotsEditPreviewMedia(context.Context, *TLBotsEditPreviewMedia) (*BotPreviewMedia, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotsEditPreviewMedia not implemented")
}
func (UnimplementedRPCMainMiniBotAppsServer) BotsDeletePreviewMedia(context.Context, *TLBotsDeletePreviewMedia) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotsDeletePreviewMedia not implemented")
}
func (UnimplementedRPCMainMiniBotAppsServer) BotsReorderPreviewMedias(context.Context, *TLBotsReorderPreviewMedias) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotsReorderPreviewMedias not implemented")
}
func (UnimplementedRPCMainMiniBotAppsServer) BotsGetPreviewInfo(context.Context, *TLBotsGetPreviewInfo) (*Bots_PreviewInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotsGetPreviewInfo not implemented")
}
func (UnimplementedRPCMainMiniBotAppsServer) BotsGetPreviewMedias(context.Context, *TLBotsGetPreviewMedias) (*Vector_BotPreviewMedia, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotsGetPreviewMedias not implemented")
}
func (UnimplementedRPCMainMiniBotAppsServer) testEmbeddedByValue() {}

// UnsafeRPCMainMiniBotAppsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCMainMiniBotAppsServer will
// result in compilation errors.
type UnsafeRPCMainMiniBotAppsServer interface {
	mustEmbedUnimplementedRPCMainMiniBotAppsServer()
}

func RegisterRPCMainMiniBotAppsServer(s grpc.ServiceRegistrar, srv RPCMainMiniBotAppsServer) {
	// If the following call pancis, it indicates UnimplementedRPCMainMiniBotAppsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCMainMiniBotApps_ServiceDesc, srv)
}

func _RPCMainMiniBotApps_MessagesRequestMainWebView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesRequestMainWebView)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMainMiniBotAppsServer).MessagesRequestMainWebView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMainMiniBotApps_MessagesRequestMainWebView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMainMiniBotAppsServer).MessagesRequestMainWebView(ctx, req.(*TLMessagesRequestMainWebView))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMainMiniBotApps_BotsGetPopularAppBots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLBotsGetPopularAppBots)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMainMiniBotAppsServer).BotsGetPopularAppBots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMainMiniBotApps_BotsGetPopularAppBots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMainMiniBotAppsServer).BotsGetPopularAppBots(ctx, req.(*TLBotsGetPopularAppBots))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMainMiniBotApps_BotsAddPreviewMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLBotsAddPreviewMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMainMiniBotAppsServer).BotsAddPreviewMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMainMiniBotApps_BotsAddPreviewMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMainMiniBotAppsServer).BotsAddPreviewMedia(ctx, req.(*TLBotsAddPreviewMedia))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMainMiniBotApps_BotsEditPreviewMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLBotsEditPreviewMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMainMiniBotAppsServer).BotsEditPreviewMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMainMiniBotApps_BotsEditPreviewMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMainMiniBotAppsServer).BotsEditPreviewMedia(ctx, req.(*TLBotsEditPreviewMedia))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMainMiniBotApps_BotsDeletePreviewMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLBotsDeletePreviewMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMainMiniBotAppsServer).BotsDeletePreviewMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMainMiniBotApps_BotsDeletePreviewMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMainMiniBotAppsServer).BotsDeletePreviewMedia(ctx, req.(*TLBotsDeletePreviewMedia))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMainMiniBotApps_BotsReorderPreviewMedias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLBotsReorderPreviewMedias)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMainMiniBotAppsServer).BotsReorderPreviewMedias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMainMiniBotApps_BotsReorderPreviewMedias_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMainMiniBotAppsServer).BotsReorderPreviewMedias(ctx, req.(*TLBotsReorderPreviewMedias))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMainMiniBotApps_BotsGetPreviewInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLBotsGetPreviewInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMainMiniBotAppsServer).BotsGetPreviewInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMainMiniBotApps_BotsGetPreviewInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMainMiniBotAppsServer).BotsGetPreviewInfo(ctx, req.(*TLBotsGetPreviewInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMainMiniBotApps_BotsGetPreviewMedias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLBotsGetPreviewMedias)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMainMiniBotAppsServer).BotsGetPreviewMedias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMainMiniBotApps_BotsGetPreviewMedias_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMainMiniBotAppsServer).BotsGetPreviewMedias(ctx, req.(*TLBotsGetPreviewMedias))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCMainMiniBotApps_ServiceDesc is the grpc.ServiceDesc for RPCMainMiniBotApps service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCMainMiniBotApps_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCMainMiniBotApps",
	HandlerType: (*RPCMainMiniBotAppsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "messages_requestMainWebView",
			Handler:    _RPCMainMiniBotApps_MessagesRequestMainWebView_Handler,
		},
		{
			MethodName: "bots_getPopularAppBots",
			Handler:    _RPCMainMiniBotApps_BotsGetPopularAppBots_Handler,
		},
		{
			MethodName: "bots_addPreviewMedia",
			Handler:    _RPCMainMiniBotApps_BotsAddPreviewMedia_Handler,
		},
		{
			MethodName: "bots_editPreviewMedia",
			Handler:    _RPCMainMiniBotApps_BotsEditPreviewMedia_Handler,
		},
		{
			MethodName: "bots_deletePreviewMedia",
			Handler:    _RPCMainMiniBotApps_BotsDeletePreviewMedia_Handler,
		},
		{
			MethodName: "bots_reorderPreviewMedias",
			Handler:    _RPCMainMiniBotApps_BotsReorderPreviewMedias_Handler,
		},
		{
			MethodName: "bots_getPreviewInfo",
			Handler:    _RPCMainMiniBotApps_BotsGetPreviewInfo_Handler,
		},
		{
			MethodName: "bots_getPreviewMedias",
			Handler:    _RPCMainMiniBotApps_BotsGetPreviewMedias_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCMessageEffects_MessagesGetAvailableEffects_FullMethodName = "/mtproto.RPCMessageEffects/messages_getAvailableEffects"
)

// RPCMessageEffectsClient is the client API for RPCMessageEffects service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCMessageEffectsClient interface {
	MessagesGetAvailableEffects(ctx context.Context, in *TLMessagesGetAvailableEffects, opts ...grpc.CallOption) (*Messages_AvailableEffects, error)
}

type rPCMessageEffectsClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCMessageEffectsClient(cc grpc.ClientConnInterface) RPCMessageEffectsClient {
	return &rPCMessageEffectsClient{cc}
}

func (c *rPCMessageEffectsClient) MessagesGetAvailableEffects(ctx context.Context, in *TLMessagesGetAvailableEffects, opts ...grpc.CallOption) (*Messages_AvailableEffects, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_AvailableEffects)
	err := c.cc.Invoke(ctx, RPCMessageEffects_MessagesGetAvailableEffects_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCMessageEffectsServer is the server API for RPCMessageEffects service.
// All implementations should embed UnimplementedRPCMessageEffectsServer
// for forward compatibility.
type RPCMessageEffectsServer interface {
	MessagesGetAvailableEffects(context.Context, *TLMessagesGetAvailableEffects) (*Messages_AvailableEffects, error)
}

// UnimplementedRPCMessageEffectsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCMessageEffectsServer struct{}

func (UnimplementedRPCMessageEffectsServer) MessagesGetAvailableEffects(context.Context, *TLMessagesGetAvailableEffects) (*Messages_AvailableEffects, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetAvailableEffects not implemented")
}
func (UnimplementedRPCMessageEffectsServer) testEmbeddedByValue() {}

// UnsafeRPCMessageEffectsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCMessageEffectsServer will
// result in compilation errors.
type UnsafeRPCMessageEffectsServer interface {
	mustEmbedUnimplementedRPCMessageEffectsServer()
}

func RegisterRPCMessageEffectsServer(s grpc.ServiceRegistrar, srv RPCMessageEffectsServer) {
	// If the following call pancis, it indicates UnimplementedRPCMessageEffectsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCMessageEffects_ServiceDesc, srv)
}

func _RPCMessageEffects_MessagesGetAvailableEffects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetAvailableEffects)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessageEffectsServer).MessagesGetAvailableEffects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessageEffects_MessagesGetAvailableEffects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessageEffectsServer).MessagesGetAvailableEffects(ctx, req.(*TLMessagesGetAvailableEffects))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCMessageEffects_ServiceDesc is the grpc.ServiceDesc for RPCMessageEffects service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCMessageEffects_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCMessageEffects",
	HandlerType: (*RPCMessageEffectsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "messages_getAvailableEffects",
			Handler:    _RPCMessageEffects_MessagesGetAvailableEffects_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCMessageThreads_ContactsBlockFromReplies_FullMethodName     = "/mtproto.RPCMessageThreads/contacts_blockFromReplies"
	RPCMessageThreads_MessagesGetReplies_FullMethodName           = "/mtproto.RPCMessageThreads/messages_getReplies"
	RPCMessageThreads_MessagesGetDiscussionMessage_FullMethodName = "/mtproto.RPCMessageThreads/messages_getDiscussionMessage"
	RPCMessageThreads_MessagesReadDiscussion_FullMethodName       = "/mtproto.RPCMessageThreads/messages_readDiscussion"
)

// RPCMessageThreadsClient is the client API for RPCMessageThreads service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCMessageThreadsClient interface {
	ContactsBlockFromReplies(ctx context.Context, in *TLContactsBlockFromReplies, opts ...grpc.CallOption) (*Updates, error)
	MessagesGetReplies(ctx context.Context, in *TLMessagesGetReplies, opts ...grpc.CallOption) (*Messages_Messages, error)
	MessagesGetDiscussionMessage(ctx context.Context, in *TLMessagesGetDiscussionMessage, opts ...grpc.CallOption) (*Messages_DiscussionMessage, error)
	MessagesReadDiscussion(ctx context.Context, in *TLMessagesReadDiscussion, opts ...grpc.CallOption) (*Bool, error)
}

type rPCMessageThreadsClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCMessageThreadsClient(cc grpc.ClientConnInterface) RPCMessageThreadsClient {
	return &rPCMessageThreadsClient{cc}
}

func (c *rPCMessageThreadsClient) ContactsBlockFromReplies(ctx context.Context, in *TLContactsBlockFromReplies, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCMessageThreads_ContactsBlockFromReplies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessageThreadsClient) MessagesGetReplies(ctx context.Context, in *TLMessagesGetReplies, opts ...grpc.CallOption) (*Messages_Messages, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, RPCMessageThreads_MessagesGetReplies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessageThreadsClient) MessagesGetDiscussionMessage(ctx context.Context, in *TLMessagesGetDiscussionMessage, opts ...grpc.CallOption) (*Messages_DiscussionMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_DiscussionMessage)
	err := c.cc.Invoke(ctx, RPCMessageThreads_MessagesGetDiscussionMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessageThreadsClient) MessagesReadDiscussion(ctx context.Context, in *TLMessagesReadDiscussion, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCMessageThreads_MessagesReadDiscussion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCMessageThreadsServer is the server API for RPCMessageThreads service.
// All implementations should embed UnimplementedRPCMessageThreadsServer
// for forward compatibility.
type RPCMessageThreadsServer interface {
	ContactsBlockFromReplies(context.Context, *TLContactsBlockFromReplies) (*Updates, error)
	MessagesGetReplies(context.Context, *TLMessagesGetReplies) (*Messages_Messages, error)
	MessagesGetDiscussionMessage(context.Context, *TLMessagesGetDiscussionMessage) (*Messages_DiscussionMessage, error)
	MessagesReadDiscussion(context.Context, *TLMessagesReadDiscussion) (*Bool, error)
}

// UnimplementedRPCMessageThreadsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCMessageThreadsServer struct{}

func (UnimplementedRPCMessageThreadsServer) ContactsBlockFromReplies(context.Context, *TLContactsBlockFromReplies) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsBlockFromReplies not implemented")
}
func (UnimplementedRPCMessageThreadsServer) MessagesGetReplies(context.Context, *TLMessagesGetReplies) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetReplies not implemented")
}
func (UnimplementedRPCMessageThreadsServer) MessagesGetDiscussionMessage(context.Context, *TLMessagesGetDiscussionMessage) (*Messages_DiscussionMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetDiscussionMessage not implemented")
}
func (UnimplementedRPCMessageThreadsServer) MessagesReadDiscussion(context.Context, *TLMessagesReadDiscussion) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReadDiscussion not implemented")
}
func (UnimplementedRPCMessageThreadsServer) testEmbeddedByValue() {}

// UnsafeRPCMessageThreadsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCMessageThreadsServer will
// result in compilation errors.
type UnsafeRPCMessageThreadsServer interface {
	mustEmbedUnimplementedRPCMessageThreadsServer()
}

func RegisterRPCMessageThreadsServer(s grpc.ServiceRegistrar, srv RPCMessageThreadsServer) {
	// If the following call pancis, it indicates UnimplementedRPCMessageThreadsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCMessageThreads_ServiceDesc, srv)
}

func _RPCMessageThreads_ContactsBlockFromReplies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsBlockFromReplies)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessageThreadsServer).ContactsBlockFromReplies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessageThreads_ContactsBlockFromReplies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessageThreadsServer).ContactsBlockFromReplies(ctx, req.(*TLContactsBlockFromReplies))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessageThreads_MessagesGetReplies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetReplies)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessageThreadsServer).MessagesGetReplies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessageThreads_MessagesGetReplies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessageThreadsServer).MessagesGetReplies(ctx, req.(*TLMessagesGetReplies))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessageThreads_MessagesGetDiscussionMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetDiscussionMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessageThreadsServer).MessagesGetDiscussionMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessageThreads_MessagesGetDiscussionMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessageThreadsServer).MessagesGetDiscussionMessage(ctx, req.(*TLMessagesGetDiscussionMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessageThreads_MessagesReadDiscussion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReadDiscussion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessageThreadsServer).MessagesReadDiscussion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessageThreads_MessagesReadDiscussion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessageThreadsServer).MessagesReadDiscussion(ctx, req.(*TLMessagesReadDiscussion))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCMessageThreads_ServiceDesc is the grpc.ServiceDesc for RPCMessageThreads service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCMessageThreads_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCMessageThreads",
	HandlerType: (*RPCMessageThreadsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "contacts_blockFromReplies",
			Handler:    _RPCMessageThreads_ContactsBlockFromReplies_Handler,
		},
		{
			MethodName: "messages_getReplies",
			Handler:    _RPCMessageThreads_MessagesGetReplies_Handler,
		},
		{
			MethodName: "messages_getDiscussionMessage",
			Handler:    _RPCMessageThreads_MessagesGetDiscussionMessage_Handler,
		},
		{
			MethodName: "messages_readDiscussion",
			Handler:    _RPCMessageThreads_MessagesReadDiscussion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCMessages_MessagesGetMessages_FullMethodName               = "/mtproto.RPCMessages/messages_getMessages"
	RPCMessages_MessagesGetHistory_FullMethodName                = "/mtproto.RPCMessages/messages_getHistory"
	RPCMessages_MessagesSearch_FullMethodName                    = "/mtproto.RPCMessages/messages_search"
	RPCMessages_MessagesReadHistory_FullMethodName               = "/mtproto.RPCMessages/messages_readHistory"
	RPCMessages_MessagesDeleteHistory_FullMethodName             = "/mtproto.RPCMessages/messages_deleteHistory"
	RPCMessages_MessagesDeleteMessages_FullMethodName            = "/mtproto.RPCMessages/messages_deleteMessages"
	RPCMessages_MessagesReceivedMessages_FullMethodName          = "/mtproto.RPCMessages/messages_receivedMessages"
	RPCMessages_MessagesSendMessage_FullMethodName               = "/mtproto.RPCMessages/messages_sendMessage"
	RPCMessages_MessagesSendMedia_FullMethodName                 = "/mtproto.RPCMessages/messages_sendMedia"
	RPCMessages_MessagesForwardMessages_FullMethodName           = "/mtproto.RPCMessages/messages_forwardMessages"
	RPCMessages_MessagesReadMessageContents_FullMethodName       = "/mtproto.RPCMessages/messages_readMessageContents"
	RPCMessages_MessagesGetMessagesViews_FullMethodName          = "/mtproto.RPCMessages/messages_getMessagesViews"
	RPCMessages_MessagesSearchGlobal_FullMethodName              = "/mtproto.RPCMessages/messages_searchGlobal"
	RPCMessages_MessagesGetMessageEditData_FullMethodName        = "/mtproto.RPCMessages/messages_getMessageEditData"
	RPCMessages_MessagesEditMessage_FullMethodName               = "/mtproto.RPCMessages/messages_editMessage"
	RPCMessages_MessagesGetUnreadMentions_FullMethodName         = "/mtproto.RPCMessages/messages_getUnreadMentions"
	RPCMessages_MessagesReadMentions_FullMethodName              = "/mtproto.RPCMessages/messages_readMentions"
	RPCMessages_MessagesGetRecentLocations_FullMethodName        = "/mtproto.RPCMessages/messages_getRecentLocations"
	RPCMessages_MessagesSendMultiMedia_FullMethodName            = "/mtproto.RPCMessages/messages_sendMultiMedia"
	RPCMessages_MessagesUpdatePinnedMessage_FullMethodName       = "/mtproto.RPCMessages/messages_updatePinnedMessage"
	RPCMessages_MessagesGetSearchCounters_FullMethodName         = "/mtproto.RPCMessages/messages_getSearchCounters"
	RPCMessages_MessagesUnpinAllMessages_FullMethodName          = "/mtproto.RPCMessages/messages_unpinAllMessages"
	RPCMessages_MessagesGetSearchResultsCalendar_FullMethodName  = "/mtproto.RPCMessages/messages_getSearchResultsCalendar"
	RPCMessages_MessagesGetSearchResultsPositions_FullMethodName = "/mtproto.RPCMessages/messages_getSearchResultsPositions"
	RPCMessages_MessagesToggleNoForwards_FullMethodName          = "/mtproto.RPCMessages/messages_toggleNoForwards"
	RPCMessages_MessagesSaveDefaultSendAs_FullMethodName         = "/mtproto.RPCMessages/messages_saveDefaultSendAs"
	RPCMessages_MessagesSearchSentMedia_FullMethodName           = "/mtproto.RPCMessages/messages_searchSentMedia"
	RPCMessages_MessagesGetOutboxReadDate_FullMethodName         = "/mtproto.RPCMessages/messages_getOutboxReadDate"
	RPCMessages_MessagesReportMessagesDelivery_FullMethodName    = "/mtproto.RPCMessages/messages_reportMessagesDelivery"
	RPCMessages_ChannelsGetSendAs_FullMethodName                 = "/mtproto.RPCMessages/channels_getSendAs"
	RPCMessages_ChannelsSearchPosts_FullMethodName               = "/mtproto.RPCMessages/channels_searchPosts"
)

// RPCMessagesClient is the client API for RPCMessages service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCMessagesClient interface {
	MessagesGetMessages(ctx context.Context, in *TLMessagesGetMessages, opts ...grpc.CallOption) (*Messages_Messages, error)
	MessagesGetHistory(ctx context.Context, in *TLMessagesGetHistory, opts ...grpc.CallOption) (*Messages_Messages, error)
	MessagesSearch(ctx context.Context, in *TLMessagesSearch, opts ...grpc.CallOption) (*Messages_Messages, error)
	MessagesReadHistory(ctx context.Context, in *TLMessagesReadHistory, opts ...grpc.CallOption) (*Messages_AffectedMessages, error)
	MessagesDeleteHistory(ctx context.Context, in *TLMessagesDeleteHistory, opts ...grpc.CallOption) (*Messages_AffectedHistory, error)
	MessagesDeleteMessages(ctx context.Context, in *TLMessagesDeleteMessages, opts ...grpc.CallOption) (*Messages_AffectedMessages, error)
	MessagesReceivedMessages(ctx context.Context, in *TLMessagesReceivedMessages, opts ...grpc.CallOption) (*Vector_ReceivedNotifyMessage, error)
	MessagesSendMessage(ctx context.Context, in *TLMessagesSendMessage, opts ...grpc.CallOption) (*Updates, error)
	MessagesSendMedia(ctx context.Context, in *TLMessagesSendMedia, opts ...grpc.CallOption) (*Updates, error)
	MessagesForwardMessages(ctx context.Context, in *TLMessagesForwardMessages, opts ...grpc.CallOption) (*Updates, error)
	MessagesReadMessageContents(ctx context.Context, in *TLMessagesReadMessageContents, opts ...grpc.CallOption) (*Messages_AffectedMessages, error)
	MessagesGetMessagesViews(ctx context.Context, in *TLMessagesGetMessagesViews, opts ...grpc.CallOption) (*Messages_MessageViews, error)
	MessagesSearchGlobal(ctx context.Context, in *TLMessagesSearchGlobal, opts ...grpc.CallOption) (*Messages_Messages, error)
	MessagesGetMessageEditData(ctx context.Context, in *TLMessagesGetMessageEditData, opts ...grpc.CallOption) (*Messages_MessageEditData, error)
	MessagesEditMessage(ctx context.Context, in *TLMessagesEditMessage, opts ...grpc.CallOption) (*Updates, error)
	MessagesGetUnreadMentions(ctx context.Context, in *TLMessagesGetUnreadMentions, opts ...grpc.CallOption) (*Messages_Messages, error)
	MessagesReadMentions(ctx context.Context, in *TLMessagesReadMentions, opts ...grpc.CallOption) (*Messages_AffectedHistory, error)
	MessagesGetRecentLocations(ctx context.Context, in *TLMessagesGetRecentLocations, opts ...grpc.CallOption) (*Messages_Messages, error)
	MessagesSendMultiMedia(ctx context.Context, in *TLMessagesSendMultiMedia, opts ...grpc.CallOption) (*Updates, error)
	MessagesUpdatePinnedMessage(ctx context.Context, in *TLMessagesUpdatePinnedMessage, opts ...grpc.CallOption) (*Updates, error)
	MessagesGetSearchCounters(ctx context.Context, in *TLMessagesGetSearchCounters, opts ...grpc.CallOption) (*Vector_Messages_SearchCounter, error)
	MessagesUnpinAllMessages(ctx context.Context, in *TLMessagesUnpinAllMessages, opts ...grpc.CallOption) (*Messages_AffectedHistory, error)
	MessagesGetSearchResultsCalendar(ctx context.Context, in *TLMessagesGetSearchResultsCalendar, opts ...grpc.CallOption) (*Messages_SearchResultsCalendar, error)
	MessagesGetSearchResultsPositions(ctx context.Context, in *TLMessagesGetSearchResultsPositions, opts ...grpc.CallOption) (*Messages_SearchResultsPositions, error)
	MessagesToggleNoForwards(ctx context.Context, in *TLMessagesToggleNoForwards, opts ...grpc.CallOption) (*Updates, error)
	MessagesSaveDefaultSendAs(ctx context.Context, in *TLMessagesSaveDefaultSendAs, opts ...grpc.CallOption) (*Bool, error)
	MessagesSearchSentMedia(ctx context.Context, in *TLMessagesSearchSentMedia, opts ...grpc.CallOption) (*Messages_Messages, error)
	MessagesGetOutboxReadDate(ctx context.Context, in *TLMessagesGetOutboxReadDate, opts ...grpc.CallOption) (*OutboxReadDate, error)
	MessagesReportMessagesDelivery(ctx context.Context, in *TLMessagesReportMessagesDelivery, opts ...grpc.CallOption) (*Bool, error)
	ChannelsGetSendAs(ctx context.Context, in *TLChannelsGetSendAs, opts ...grpc.CallOption) (*Channels_SendAsPeers, error)
	ChannelsSearchPosts(ctx context.Context, in *TLChannelsSearchPosts, opts ...grpc.CallOption) (*Messages_Messages, error)
}

type rPCMessagesClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCMessagesClient(cc grpc.ClientConnInterface) RPCMessagesClient {
	return &rPCMessagesClient{cc}
}

func (c *rPCMessagesClient) MessagesGetMessages(ctx context.Context, in *TLMessagesGetMessages, opts ...grpc.CallOption) (*Messages_Messages, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesGetMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetHistory(ctx context.Context, in *TLMessagesGetHistory, opts ...grpc.CallOption) (*Messages_Messages, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesGetHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSearch(ctx context.Context, in *TLMessagesSearch, opts ...grpc.CallOption) (*Messages_Messages, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesReadHistory(ctx context.Context, in *TLMessagesReadHistory, opts ...grpc.CallOption) (*Messages_AffectedMessages, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_AffectedMessages)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesReadHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesDeleteHistory(ctx context.Context, in *TLMessagesDeleteHistory, opts ...grpc.CallOption) (*Messages_AffectedHistory, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_AffectedHistory)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesDeleteHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesDeleteMessages(ctx context.Context, in *TLMessagesDeleteMessages, opts ...grpc.CallOption) (*Messages_AffectedMessages, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_AffectedMessages)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesDeleteMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesReceivedMessages(ctx context.Context, in *TLMessagesReceivedMessages, opts ...grpc.CallOption) (*Vector_ReceivedNotifyMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_ReceivedNotifyMessage)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesReceivedMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSendMessage(ctx context.Context, in *TLMessagesSendMessage, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesSendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSendMedia(ctx context.Context, in *TLMessagesSendMedia, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesSendMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesForwardMessages(ctx context.Context, in *TLMessagesForwardMessages, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesForwardMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesReadMessageContents(ctx context.Context, in *TLMessagesReadMessageContents, opts ...grpc.CallOption) (*Messages_AffectedMessages, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_AffectedMessages)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesReadMessageContents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetMessagesViews(ctx context.Context, in *TLMessagesGetMessagesViews, opts ...grpc.CallOption) (*Messages_MessageViews, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_MessageViews)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesGetMessagesViews_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSearchGlobal(ctx context.Context, in *TLMessagesSearchGlobal, opts ...grpc.CallOption) (*Messages_Messages, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesSearchGlobal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetMessageEditData(ctx context.Context, in *TLMessagesGetMessageEditData, opts ...grpc.CallOption) (*Messages_MessageEditData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_MessageEditData)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesGetMessageEditData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesEditMessage(ctx context.Context, in *TLMessagesEditMessage, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesEditMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetUnreadMentions(ctx context.Context, in *TLMessagesGetUnreadMentions, opts ...grpc.CallOption) (*Messages_Messages, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesGetUnreadMentions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesReadMentions(ctx context.Context, in *TLMessagesReadMentions, opts ...grpc.CallOption) (*Messages_AffectedHistory, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_AffectedHistory)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesReadMentions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetRecentLocations(ctx context.Context, in *TLMessagesGetRecentLocations, opts ...grpc.CallOption) (*Messages_Messages, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesGetRecentLocations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSendMultiMedia(ctx context.Context, in *TLMessagesSendMultiMedia, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesSendMultiMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesUpdatePinnedMessage(ctx context.Context, in *TLMessagesUpdatePinnedMessage, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesUpdatePinnedMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetSearchCounters(ctx context.Context, in *TLMessagesGetSearchCounters, opts ...grpc.CallOption) (*Vector_Messages_SearchCounter, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_Messages_SearchCounter)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesGetSearchCounters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesUnpinAllMessages(ctx context.Context, in *TLMessagesUnpinAllMessages, opts ...grpc.CallOption) (*Messages_AffectedHistory, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_AffectedHistory)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesUnpinAllMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetSearchResultsCalendar(ctx context.Context, in *TLMessagesGetSearchResultsCalendar, opts ...grpc.CallOption) (*Messages_SearchResultsCalendar, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_SearchResultsCalendar)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesGetSearchResultsCalendar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetSearchResultsPositions(ctx context.Context, in *TLMessagesGetSearchResultsPositions, opts ...grpc.CallOption) (*Messages_SearchResultsPositions, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_SearchResultsPositions)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesGetSearchResultsPositions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesToggleNoForwards(ctx context.Context, in *TLMessagesToggleNoForwards, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesToggleNoForwards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSaveDefaultSendAs(ctx context.Context, in *TLMessagesSaveDefaultSendAs, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesSaveDefaultSendAs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSearchSentMedia(ctx context.Context, in *TLMessagesSearchSentMedia, opts ...grpc.CallOption) (*Messages_Messages, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesSearchSentMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetOutboxReadDate(ctx context.Context, in *TLMessagesGetOutboxReadDate, opts ...grpc.CallOption) (*OutboxReadDate, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OutboxReadDate)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesGetOutboxReadDate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesReportMessagesDelivery(ctx context.Context, in *TLMessagesReportMessagesDelivery, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesReportMessagesDelivery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) ChannelsGetSendAs(ctx context.Context, in *TLChannelsGetSendAs, opts ...grpc.CallOption) (*Channels_SendAsPeers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Channels_SendAsPeers)
	err := c.cc.Invoke(ctx, RPCMessages_ChannelsGetSendAs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) ChannelsSearchPosts(ctx context.Context, in *TLChannelsSearchPosts, opts ...grpc.CallOption) (*Messages_Messages, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, RPCMessages_ChannelsSearchPosts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCMessagesServer is the server API for RPCMessages service.
// All implementations should embed UnimplementedRPCMessagesServer
// for forward compatibility.
type RPCMessagesServer interface {
	MessagesGetMessages(context.Context, *TLMessagesGetMessages) (*Messages_Messages, error)
	MessagesGetHistory(context.Context, *TLMessagesGetHistory) (*Messages_Messages, error)
	MessagesSearch(context.Context, *TLMessagesSearch) (*Messages_Messages, error)
	MessagesReadHistory(context.Context, *TLMessagesReadHistory) (*Messages_AffectedMessages, error)
	MessagesDeleteHistory(context.Context, *TLMessagesDeleteHistory) (*Messages_AffectedHistory, error)
	MessagesDeleteMessages(context.Context, *TLMessagesDeleteMessages) (*Messages_AffectedMessages, error)
	MessagesReceivedMessages(context.Context, *TLMessagesReceivedMessages) (*Vector_ReceivedNotifyMessage, error)
	MessagesSendMessage(context.Context, *TLMessagesSendMessage) (*Updates, error)
	MessagesSendMedia(context.Context, *TLMessagesSendMedia) (*Updates, error)
	MessagesForwardMessages(context.Context, *TLMessagesForwardMessages) (*Updates, error)
	MessagesReadMessageContents(context.Context, *TLMessagesReadMessageContents) (*Messages_AffectedMessages, error)
	MessagesGetMessagesViews(context.Context, *TLMessagesGetMessagesViews) (*Messages_MessageViews, error)
	MessagesSearchGlobal(context.Context, *TLMessagesSearchGlobal) (*Messages_Messages, error)
	MessagesGetMessageEditData(context.Context, *TLMessagesGetMessageEditData) (*Messages_MessageEditData, error)
	MessagesEditMessage(context.Context, *TLMessagesEditMessage) (*Updates, error)
	MessagesGetUnreadMentions(context.Context, *TLMessagesGetUnreadMentions) (*Messages_Messages, error)
	MessagesReadMentions(context.Context, *TLMessagesReadMentions) (*Messages_AffectedHistory, error)
	MessagesGetRecentLocations(context.Context, *TLMessagesGetRecentLocations) (*Messages_Messages, error)
	MessagesSendMultiMedia(context.Context, *TLMessagesSendMultiMedia) (*Updates, error)
	MessagesUpdatePinnedMessage(context.Context, *TLMessagesUpdatePinnedMessage) (*Updates, error)
	MessagesGetSearchCounters(context.Context, *TLMessagesGetSearchCounters) (*Vector_Messages_SearchCounter, error)
	MessagesUnpinAllMessages(context.Context, *TLMessagesUnpinAllMessages) (*Messages_AffectedHistory, error)
	MessagesGetSearchResultsCalendar(context.Context, *TLMessagesGetSearchResultsCalendar) (*Messages_SearchResultsCalendar, error)
	MessagesGetSearchResultsPositions(context.Context, *TLMessagesGetSearchResultsPositions) (*Messages_SearchResultsPositions, error)
	MessagesToggleNoForwards(context.Context, *TLMessagesToggleNoForwards) (*Updates, error)
	MessagesSaveDefaultSendAs(context.Context, *TLMessagesSaveDefaultSendAs) (*Bool, error)
	MessagesSearchSentMedia(context.Context, *TLMessagesSearchSentMedia) (*Messages_Messages, error)
	MessagesGetOutboxReadDate(context.Context, *TLMessagesGetOutboxReadDate) (*OutboxReadDate, error)
	MessagesReportMessagesDelivery(context.Context, *TLMessagesReportMessagesDelivery) (*Bool, error)
	ChannelsGetSendAs(context.Context, *TLChannelsGetSendAs) (*Channels_SendAsPeers, error)
	ChannelsSearchPosts(context.Context, *TLChannelsSearchPosts) (*Messages_Messages, error)
}

// UnimplementedRPCMessagesServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCMessagesServer struct{}

func (UnimplementedRPCMessagesServer) MessagesGetMessages(context.Context, *TLMessagesGetMessages) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetMessages not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesGetHistory(context.Context, *TLMessagesGetHistory) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetHistory not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesSearch(context.Context, *TLMessagesSearch) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSearch not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesReadHistory(context.Context, *TLMessagesReadHistory) (*Messages_AffectedMessages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReadHistory not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesDeleteHistory(context.Context, *TLMessagesDeleteHistory) (*Messages_AffectedHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesDeleteHistory not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesDeleteMessages(context.Context, *TLMessagesDeleteMessages) (*Messages_AffectedMessages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesDeleteMessages not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesReceivedMessages(context.Context, *TLMessagesReceivedMessages) (*Vector_ReceivedNotifyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReceivedMessages not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesSendMessage(context.Context, *TLMessagesSendMessage) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendMessage not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesSendMedia(context.Context, *TLMessagesSendMedia) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendMedia not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesForwardMessages(context.Context, *TLMessagesForwardMessages) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesForwardMessages not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesReadMessageContents(context.Context, *TLMessagesReadMessageContents) (*Messages_AffectedMessages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReadMessageContents not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesGetMessagesViews(context.Context, *TLMessagesGetMessagesViews) (*Messages_MessageViews, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetMessagesViews not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesSearchGlobal(context.Context, *TLMessagesSearchGlobal) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSearchGlobal not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesGetMessageEditData(context.Context, *TLMessagesGetMessageEditData) (*Messages_MessageEditData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetMessageEditData not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesEditMessage(context.Context, *TLMessagesEditMessage) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesEditMessage not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesGetUnreadMentions(context.Context, *TLMessagesGetUnreadMentions) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetUnreadMentions not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesReadMentions(context.Context, *TLMessagesReadMentions) (*Messages_AffectedHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReadMentions not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesGetRecentLocations(context.Context, *TLMessagesGetRecentLocations) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetRecentLocations not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesSendMultiMedia(context.Context, *TLMessagesSendMultiMedia) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendMultiMedia not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesUpdatePinnedMessage(context.Context, *TLMessagesUpdatePinnedMessage) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesUpdatePinnedMessage not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesGetSearchCounters(context.Context, *TLMessagesGetSearchCounters) (*Vector_Messages_SearchCounter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetSearchCounters not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesUnpinAllMessages(context.Context, *TLMessagesUnpinAllMessages) (*Messages_AffectedHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesUnpinAllMessages not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesGetSearchResultsCalendar(context.Context, *TLMessagesGetSearchResultsCalendar) (*Messages_SearchResultsCalendar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetSearchResultsCalendar not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesGetSearchResultsPositions(context.Context, *TLMessagesGetSearchResultsPositions) (*Messages_SearchResultsPositions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetSearchResultsPositions not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesToggleNoForwards(context.Context, *TLMessagesToggleNoForwards) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesToggleNoForwards not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesSaveDefaultSendAs(context.Context, *TLMessagesSaveDefaultSendAs) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSaveDefaultSendAs not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesSearchSentMedia(context.Context, *TLMessagesSearchSentMedia) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSearchSentMedia not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesGetOutboxReadDate(context.Context, *TLMessagesGetOutboxReadDate) (*OutboxReadDate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetOutboxReadDate not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesReportMessagesDelivery(context.Context, *TLMessagesReportMessagesDelivery) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReportMessagesDelivery not implemented")
}
func (UnimplementedRPCMessagesServer) ChannelsGetSendAs(context.Context, *TLChannelsGetSendAs) (*Channels_SendAsPeers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetSendAs not implemented")
}
func (UnimplementedRPCMessagesServer) ChannelsSearchPosts(context.Context, *TLChannelsSearchPosts) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsSearchPosts not implemented")
}
func (UnimplementedRPCMessagesServer) testEmbeddedByValue() {}

// UnsafeRPCMessagesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCMessagesServer will
// result in compilation errors.
type UnsafeRPCMessagesServer interface {
	mustEmbedUnimplementedRPCMessagesServer()
}

func RegisterRPCMessagesServer(s grpc.ServiceRegistrar, srv RPCMessagesServer) {
	// If the following call pancis, it indicates UnimplementedRPCMessagesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCMessages_ServiceDesc, srv)
}

func _RPCMessages_MessagesGetMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesGetMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetMessages(ctx, req.(*TLMessagesGetMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesGetHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetHistory(ctx, req.(*TLMessagesGetHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSearch(ctx, req.(*TLMessagesSearch))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesReadHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReadHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesReadHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesReadHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesReadHistory(ctx, req.(*TLMessagesReadHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesDeleteHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesDeleteHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesDeleteHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesDeleteHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesDeleteHistory(ctx, req.(*TLMessagesDeleteHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesDeleteMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesDeleteMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesDeleteMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesDeleteMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesDeleteMessages(ctx, req.(*TLMessagesDeleteMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesReceivedMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReceivedMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesReceivedMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesReceivedMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesReceivedMessages(ctx, req.(*TLMessagesReceivedMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesSendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSendMessage(ctx, req.(*TLMessagesSendMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSendMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSendMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesSendMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSendMedia(ctx, req.(*TLMessagesSendMedia))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesForwardMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesForwardMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesForwardMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesForwardMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesForwardMessages(ctx, req.(*TLMessagesForwardMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesReadMessageContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReadMessageContents)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesReadMessageContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesReadMessageContents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesReadMessageContents(ctx, req.(*TLMessagesReadMessageContents))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetMessagesViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetMessagesViews)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetMessagesViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesGetMessagesViews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetMessagesViews(ctx, req.(*TLMessagesGetMessagesViews))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSearchGlobal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSearchGlobal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSearchGlobal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesSearchGlobal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSearchGlobal(ctx, req.(*TLMessagesSearchGlobal))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetMessageEditData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetMessageEditData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetMessageEditData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesGetMessageEditData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetMessageEditData(ctx, req.(*TLMessagesGetMessageEditData))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesEditMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesEditMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesEditMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesEditMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesEditMessage(ctx, req.(*TLMessagesEditMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetUnreadMentions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetUnreadMentions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetUnreadMentions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesGetUnreadMentions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetUnreadMentions(ctx, req.(*TLMessagesGetUnreadMentions))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesReadMentions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReadMentions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesReadMentions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesReadMentions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesReadMentions(ctx, req.(*TLMessagesReadMentions))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetRecentLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetRecentLocations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetRecentLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesGetRecentLocations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetRecentLocations(ctx, req.(*TLMessagesGetRecentLocations))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSendMultiMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendMultiMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSendMultiMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesSendMultiMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSendMultiMedia(ctx, req.(*TLMessagesSendMultiMedia))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesUpdatePinnedMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesUpdatePinnedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesUpdatePinnedMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesUpdatePinnedMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesUpdatePinnedMessage(ctx, req.(*TLMessagesUpdatePinnedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetSearchCounters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetSearchCounters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetSearchCounters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesGetSearchCounters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetSearchCounters(ctx, req.(*TLMessagesGetSearchCounters))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesUnpinAllMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesUnpinAllMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesUnpinAllMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesUnpinAllMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesUnpinAllMessages(ctx, req.(*TLMessagesUnpinAllMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetSearchResultsCalendar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetSearchResultsCalendar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetSearchResultsCalendar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesGetSearchResultsCalendar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetSearchResultsCalendar(ctx, req.(*TLMessagesGetSearchResultsCalendar))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetSearchResultsPositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetSearchResultsPositions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetSearchResultsPositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesGetSearchResultsPositions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetSearchResultsPositions(ctx, req.(*TLMessagesGetSearchResultsPositions))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesToggleNoForwards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesToggleNoForwards)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesToggleNoForwards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesToggleNoForwards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesToggleNoForwards(ctx, req.(*TLMessagesToggleNoForwards))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSaveDefaultSendAs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSaveDefaultSendAs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSaveDefaultSendAs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesSaveDefaultSendAs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSaveDefaultSendAs(ctx, req.(*TLMessagesSaveDefaultSendAs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSearchSentMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSearchSentMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSearchSentMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesSearchSentMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSearchSentMedia(ctx, req.(*TLMessagesSearchSentMedia))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetOutboxReadDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetOutboxReadDate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetOutboxReadDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesGetOutboxReadDate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetOutboxReadDate(ctx, req.(*TLMessagesGetOutboxReadDate))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesReportMessagesDelivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReportMessagesDelivery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesReportMessagesDelivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesReportMessagesDelivery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesReportMessagesDelivery(ctx, req.(*TLMessagesReportMessagesDelivery))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_ChannelsGetSendAs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetSendAs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).ChannelsGetSendAs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_ChannelsGetSendAs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).ChannelsGetSendAs(ctx, req.(*TLChannelsGetSendAs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_ChannelsSearchPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsSearchPosts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).ChannelsSearchPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_ChannelsSearchPosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).ChannelsSearchPosts(ctx, req.(*TLChannelsSearchPosts))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCMessages_ServiceDesc is the grpc.ServiceDesc for RPCMessages service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCMessages_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCMessages",
	HandlerType: (*RPCMessagesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "messages_getMessages",
			Handler:    _RPCMessages_MessagesGetMessages_Handler,
		},
		{
			MethodName: "messages_getHistory",
			Handler:    _RPCMessages_MessagesGetHistory_Handler,
		},
		{
			MethodName: "messages_search",
			Handler:    _RPCMessages_MessagesSearch_Handler,
		},
		{
			MethodName: "messages_readHistory",
			Handler:    _RPCMessages_MessagesReadHistory_Handler,
		},
		{
			MethodName: "messages_deleteHistory",
			Handler:    _RPCMessages_MessagesDeleteHistory_Handler,
		},
		{
			MethodName: "messages_deleteMessages",
			Handler:    _RPCMessages_MessagesDeleteMessages_Handler,
		},
		{
			MethodName: "messages_receivedMessages",
			Handler:    _RPCMessages_MessagesReceivedMessages_Handler,
		},
		{
			MethodName: "messages_sendMessage",
			Handler:    _RPCMessages_MessagesSendMessage_Handler,
		},
		{
			MethodName: "messages_sendMedia",
			Handler:    _RPCMessages_MessagesSendMedia_Handler,
		},
		{
			MethodName: "messages_forwardMessages",
			Handler:    _RPCMessages_MessagesForwardMessages_Handler,
		},
		{
			MethodName: "messages_readMessageContents",
			Handler:    _RPCMessages_MessagesReadMessageContents_Handler,
		},
		{
			MethodName: "messages_getMessagesViews",
			Handler:    _RPCMessages_MessagesGetMessagesViews_Handler,
		},
		{
			MethodName: "messages_searchGlobal",
			Handler:    _RPCMessages_MessagesSearchGlobal_Handler,
		},
		{
			MethodName: "messages_getMessageEditData",
			Handler:    _RPCMessages_MessagesGetMessageEditData_Handler,
		},
		{
			MethodName: "messages_editMessage",
			Handler:    _RPCMessages_MessagesEditMessage_Handler,
		},
		{
			MethodName: "messages_getUnreadMentions",
			Handler:    _RPCMessages_MessagesGetUnreadMentions_Handler,
		},
		{
			MethodName: "messages_readMentions",
			Handler:    _RPCMessages_MessagesReadMentions_Handler,
		},
		{
			MethodName: "messages_getRecentLocations",
			Handler:    _RPCMessages_MessagesGetRecentLocations_Handler,
		},
		{
			MethodName: "messages_sendMultiMedia",
			Handler:    _RPCMessages_MessagesSendMultiMedia_Handler,
		},
		{
			MethodName: "messages_updatePinnedMessage",
			Handler:    _RPCMessages_MessagesUpdatePinnedMessage_Handler,
		},
		{
			MethodName: "messages_getSearchCounters",
			Handler:    _RPCMessages_MessagesGetSearchCounters_Handler,
		},
		{
			MethodName: "messages_unpinAllMessages",
			Handler:    _RPCMessages_MessagesUnpinAllMessages_Handler,
		},
		{
			MethodName: "messages_getSearchResultsCalendar",
			Handler:    _RPCMessages_MessagesGetSearchResultsCalendar_Handler,
		},
		{
			MethodName: "messages_getSearchResultsPositions",
			Handler:    _RPCMessages_MessagesGetSearchResultsPositions_Handler,
		},
		{
			MethodName: "messages_toggleNoForwards",
			Handler:    _RPCMessages_MessagesToggleNoForwards_Handler,
		},
		{
			MethodName: "messages_saveDefaultSendAs",
			Handler:    _RPCMessages_MessagesSaveDefaultSendAs_Handler,
		},
		{
			MethodName: "messages_searchSentMedia",
			Handler:    _RPCMessages_MessagesSearchSentMedia_Handler,
		},
		{
			MethodName: "messages_getOutboxReadDate",
			Handler:    _RPCMessages_MessagesGetOutboxReadDate_Handler,
		},
		{
			MethodName: "messages_reportMessagesDelivery",
			Handler:    _RPCMessages_MessagesReportMessagesDelivery_Handler,
		},
		{
			MethodName: "channels_getSendAs",
			Handler:    _RPCMessages_ChannelsGetSendAs_Handler,
		},
		{
			MethodName: "channels_searchPosts",
			Handler:    _RPCMessages_ChannelsSearchPosts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCMiniBotApps_MessagesRequestWebView_FullMethodName               = "/mtproto.RPCMiniBotApps/messages_requestWebView"
	RPCMiniBotApps_MessagesProlongWebView_FullMethodName               = "/mtproto.RPCMiniBotApps/messages_prolongWebView"
	RPCMiniBotApps_MessagesRequestSimpleWebView413A3E73_FullMethodName = "/mtproto.RPCMiniBotApps/messages_requestSimpleWebView413A3E73"
	RPCMiniBotApps_MessagesSendWebViewResultMessage_FullMethodName     = "/mtproto.RPCMiniBotApps/messages_sendWebViewResultMessage"
	RPCMiniBotApps_MessagesSendWebViewData_FullMethodName              = "/mtproto.RPCMiniBotApps/messages_sendWebViewData"
	RPCMiniBotApps_MessagesGetBotApp_FullMethodName                    = "/mtproto.RPCMiniBotApps/messages_getBotApp"
	RPCMiniBotApps_MessagesRequestAppWebView53618BCE_FullMethodName    = "/mtproto.RPCMiniBotApps/messages_requestAppWebView53618BCE"
	RPCMiniBotApps_BotsCanSendMessage_FullMethodName                   = "/mtproto.RPCMiniBotApps/bots_canSendMessage"
	RPCMiniBotApps_BotsAllowSendMessage_FullMethodName                 = "/mtproto.RPCMiniBotApps/bots_allowSendMessage"
	RPCMiniBotApps_BotsInvokeWebViewCustomMethod_FullMethodName        = "/mtproto.RPCMiniBotApps/bots_invokeWebViewCustomMethod"
	RPCMiniBotApps_BotsCheckDownloadFileParams_FullMethodName          = "/mtproto.RPCMiniBotApps/bots_checkDownloadFileParams"
	RPCMiniBotApps_MessagesRequestSimpleWebView1A46500A_FullMethodName = "/mtproto.RPCMiniBotApps/messages_requestSimpleWebView1A46500A"
	RPCMiniBotApps_MessagesRequestAppWebView8C5A3B3C_FullMethodName    = "/mtproto.RPCMiniBotApps/messages_requestAppWebView8C5A3B3C"
	RPCMiniBotApps_MessagesRequestSimpleWebView299BEC8E_FullMethodName = "/mtproto.RPCMiniBotApps/messages_requestSimpleWebView299BEC8E"
	RPCMiniBotApps_MessagesRequestSimpleWebView6ABB2F73_FullMethodName = "/mtproto.RPCMiniBotApps/messages_requestSimpleWebView6ABB2F73"
)

// RPCMiniBotAppsClient is the client API for RPCMiniBotApps service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCMiniBotAppsClient interface {
	MessagesRequestWebView(ctx context.Context, in *TLMessagesRequestWebView, opts ...grpc.CallOption) (*WebViewResult, error)
	MessagesProlongWebView(ctx context.Context, in *TLMessagesProlongWebView, opts ...grpc.CallOption) (*Bool, error)
	MessagesRequestSimpleWebView413A3E73(ctx context.Context, in *TLMessagesRequestSimpleWebView413A3E73, opts ...grpc.CallOption) (*WebViewResult, error)
	MessagesSendWebViewResultMessage(ctx context.Context, in *TLMessagesSendWebViewResultMessage, opts ...grpc.CallOption) (*WebViewMessageSent, error)
	MessagesSendWebViewData(ctx context.Context, in *TLMessagesSendWebViewData, opts ...grpc.CallOption) (*Updates, error)
	MessagesGetBotApp(ctx context.Context, in *TLMessagesGetBotApp, opts ...grpc.CallOption) (*Messages_BotApp, error)
	MessagesRequestAppWebView53618BCE(ctx context.Context, in *TLMessagesRequestAppWebView53618BCE, opts ...grpc.CallOption) (*WebViewResult, error)
	BotsCanSendMessage(ctx context.Context, in *TLBotsCanSendMessage, opts ...grpc.CallOption) (*Bool, error)
	BotsAllowSendMessage(ctx context.Context, in *TLBotsAllowSendMessage, opts ...grpc.CallOption) (*Updates, error)
	BotsInvokeWebViewCustomMethod(ctx context.Context, in *TLBotsInvokeWebViewCustomMethod, opts ...grpc.CallOption) (*DataJSON, error)
	BotsCheckDownloadFileParams(ctx context.Context, in *TLBotsCheckDownloadFileParams, opts ...grpc.CallOption) (*Bool, error)
	MessagesRequestSimpleWebView1A46500A(ctx context.Context, in *TLMessagesRequestSimpleWebView1A46500A, opts ...grpc.CallOption) (*SimpleWebViewResult, error)
	MessagesRequestAppWebView8C5A3B3C(ctx context.Context, in *TLMessagesRequestAppWebView8C5A3B3C, opts ...grpc.CallOption) (*AppWebViewResult, error)
	MessagesRequestSimpleWebView299BEC8E(ctx context.Context, in *TLMessagesRequestSimpleWebView299BEC8E, opts ...grpc.CallOption) (*SimpleWebViewResult, error)
	MessagesRequestSimpleWebView6ABB2F73(ctx context.Context, in *TLMessagesRequestSimpleWebView6ABB2F73, opts ...grpc.CallOption) (*SimpleWebViewResult, error)
}

type rPCMiniBotAppsClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCMiniBotAppsClient(cc grpc.ClientConnInterface) RPCMiniBotAppsClient {
	return &rPCMiniBotAppsClient{cc}
}

func (c *rPCMiniBotAppsClient) MessagesRequestWebView(ctx context.Context, in *TLMessagesRequestWebView, opts ...grpc.CallOption) (*WebViewResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WebViewResult)
	err := c.cc.Invoke(ctx, RPCMiniBotApps_MessagesRequestWebView_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMiniBotAppsClient) MessagesProlongWebView(ctx context.Context, in *TLMessagesProlongWebView, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCMiniBotApps_MessagesProlongWebView_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMiniBotAppsClient) MessagesRequestSimpleWebView413A3E73(ctx context.Context, in *TLMessagesRequestSimpleWebView413A3E73, opts ...grpc.CallOption) (*WebViewResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WebViewResult)
	err := c.cc.Invoke(ctx, RPCMiniBotApps_MessagesRequestSimpleWebView413A3E73_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMiniBotAppsClient) MessagesSendWebViewResultMessage(ctx context.Context, in *TLMessagesSendWebViewResultMessage, opts ...grpc.CallOption) (*WebViewMessageSent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WebViewMessageSent)
	err := c.cc.Invoke(ctx, RPCMiniBotApps_MessagesSendWebViewResultMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMiniBotAppsClient) MessagesSendWebViewData(ctx context.Context, in *TLMessagesSendWebViewData, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCMiniBotApps_MessagesSendWebViewData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMiniBotAppsClient) MessagesGetBotApp(ctx context.Context, in *TLMessagesGetBotApp, opts ...grpc.CallOption) (*Messages_BotApp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_BotApp)
	err := c.cc.Invoke(ctx, RPCMiniBotApps_MessagesGetBotApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMiniBotAppsClient) MessagesRequestAppWebView53618BCE(ctx context.Context, in *TLMessagesRequestAppWebView53618BCE, opts ...grpc.CallOption) (*WebViewResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WebViewResult)
	err := c.cc.Invoke(ctx, RPCMiniBotApps_MessagesRequestAppWebView53618BCE_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMiniBotAppsClient) BotsCanSendMessage(ctx context.Context, in *TLBotsCanSendMessage, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCMiniBotApps_BotsCanSendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMiniBotAppsClient) BotsAllowSendMessage(ctx context.Context, in *TLBotsAllowSendMessage, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCMiniBotApps_BotsAllowSendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMiniBotAppsClient) BotsInvokeWebViewCustomMethod(ctx context.Context, in *TLBotsInvokeWebViewCustomMethod, opts ...grpc.CallOption) (*DataJSON, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataJSON)
	err := c.cc.Invoke(ctx, RPCMiniBotApps_BotsInvokeWebViewCustomMethod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMiniBotAppsClient) BotsCheckDownloadFileParams(ctx context.Context, in *TLBotsCheckDownloadFileParams, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCMiniBotApps_BotsCheckDownloadFileParams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMiniBotAppsClient) MessagesRequestSimpleWebView1A46500A(ctx context.Context, in *TLMessagesRequestSimpleWebView1A46500A, opts ...grpc.CallOption) (*SimpleWebViewResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SimpleWebViewResult)
	err := c.cc.Invoke(ctx, RPCMiniBotApps_MessagesRequestSimpleWebView1A46500A_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMiniBotAppsClient) MessagesRequestAppWebView8C5A3B3C(ctx context.Context, in *TLMessagesRequestAppWebView8C5A3B3C, opts ...grpc.CallOption) (*AppWebViewResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppWebViewResult)
	err := c.cc.Invoke(ctx, RPCMiniBotApps_MessagesRequestAppWebView8C5A3B3C_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMiniBotAppsClient) MessagesRequestSimpleWebView299BEC8E(ctx context.Context, in *TLMessagesRequestSimpleWebView299BEC8E, opts ...grpc.CallOption) (*SimpleWebViewResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SimpleWebViewResult)
	err := c.cc.Invoke(ctx, RPCMiniBotApps_MessagesRequestSimpleWebView299BEC8E_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMiniBotAppsClient) MessagesRequestSimpleWebView6ABB2F73(ctx context.Context, in *TLMessagesRequestSimpleWebView6ABB2F73, opts ...grpc.CallOption) (*SimpleWebViewResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SimpleWebViewResult)
	err := c.cc.Invoke(ctx, RPCMiniBotApps_MessagesRequestSimpleWebView6ABB2F73_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCMiniBotAppsServer is the server API for RPCMiniBotApps service.
// All implementations should embed UnimplementedRPCMiniBotAppsServer
// for forward compatibility.
type RPCMiniBotAppsServer interface {
	MessagesRequestWebView(context.Context, *TLMessagesRequestWebView) (*WebViewResult, error)
	MessagesProlongWebView(context.Context, *TLMessagesProlongWebView) (*Bool, error)
	MessagesRequestSimpleWebView413A3E73(context.Context, *TLMessagesRequestSimpleWebView413A3E73) (*WebViewResult, error)
	MessagesSendWebViewResultMessage(context.Context, *TLMessagesSendWebViewResultMessage) (*WebViewMessageSent, error)
	MessagesSendWebViewData(context.Context, *TLMessagesSendWebViewData) (*Updates, error)
	MessagesGetBotApp(context.Context, *TLMessagesGetBotApp) (*Messages_BotApp, error)
	MessagesRequestAppWebView53618BCE(context.Context, *TLMessagesRequestAppWebView53618BCE) (*WebViewResult, error)
	BotsCanSendMessage(context.Context, *TLBotsCanSendMessage) (*Bool, error)
	BotsAllowSendMessage(context.Context, *TLBotsAllowSendMessage) (*Updates, error)
	BotsInvokeWebViewCustomMethod(context.Context, *TLBotsInvokeWebViewCustomMethod) (*DataJSON, error)
	BotsCheckDownloadFileParams(context.Context, *TLBotsCheckDownloadFileParams) (*Bool, error)
	MessagesRequestSimpleWebView1A46500A(context.Context, *TLMessagesRequestSimpleWebView1A46500A) (*SimpleWebViewResult, error)
	MessagesRequestAppWebView8C5A3B3C(context.Context, *TLMessagesRequestAppWebView8C5A3B3C) (*AppWebViewResult, error)
	MessagesRequestSimpleWebView299BEC8E(context.Context, *TLMessagesRequestSimpleWebView299BEC8E) (*SimpleWebViewResult, error)
	MessagesRequestSimpleWebView6ABB2F73(context.Context, *TLMessagesRequestSimpleWebView6ABB2F73) (*SimpleWebViewResult, error)
}

// UnimplementedRPCMiniBotAppsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCMiniBotAppsServer struct{}

func (UnimplementedRPCMiniBotAppsServer) MessagesRequestWebView(context.Context, *TLMessagesRequestWebView) (*WebViewResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesRequestWebView not implemented")
}
func (UnimplementedRPCMiniBotAppsServer) MessagesProlongWebView(context.Context, *TLMessagesProlongWebView) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesProlongWebView not implemented")
}
func (UnimplementedRPCMiniBotAppsServer) MessagesRequestSimpleWebView413A3E73(context.Context, *TLMessagesRequestSimpleWebView413A3E73) (*WebViewResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesRequestSimpleWebView413A3E73 not implemented")
}
func (UnimplementedRPCMiniBotAppsServer) MessagesSendWebViewResultMessage(context.Context, *TLMessagesSendWebViewResultMessage) (*WebViewMessageSent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendWebViewResultMessage not implemented")
}
func (UnimplementedRPCMiniBotAppsServer) MessagesSendWebViewData(context.Context, *TLMessagesSendWebViewData) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendWebViewData not implemented")
}
func (UnimplementedRPCMiniBotAppsServer) MessagesGetBotApp(context.Context, *TLMessagesGetBotApp) (*Messages_BotApp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetBotApp not implemented")
}
func (UnimplementedRPCMiniBotAppsServer) MessagesRequestAppWebView53618BCE(context.Context, *TLMessagesRequestAppWebView53618BCE) (*WebViewResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesRequestAppWebView53618BCE not implemented")
}
func (UnimplementedRPCMiniBotAppsServer) BotsCanSendMessage(context.Context, *TLBotsCanSendMessage) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotsCanSendMessage not implemented")
}
func (UnimplementedRPCMiniBotAppsServer) BotsAllowSendMessage(context.Context, *TLBotsAllowSendMessage) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotsAllowSendMessage not implemented")
}
func (UnimplementedRPCMiniBotAppsServer) BotsInvokeWebViewCustomMethod(context.Context, *TLBotsInvokeWebViewCustomMethod) (*DataJSON, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotsInvokeWebViewCustomMethod not implemented")
}
func (UnimplementedRPCMiniBotAppsServer) BotsCheckDownloadFileParams(context.Context, *TLBotsCheckDownloadFileParams) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotsCheckDownloadFileParams not implemented")
}
func (UnimplementedRPCMiniBotAppsServer) MessagesRequestSimpleWebView1A46500A(context.Context, *TLMessagesRequestSimpleWebView1A46500A) (*SimpleWebViewResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesRequestSimpleWebView1A46500A not implemented")
}
func (UnimplementedRPCMiniBotAppsServer) MessagesRequestAppWebView8C5A3B3C(context.Context, *TLMessagesRequestAppWebView8C5A3B3C) (*AppWebViewResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesRequestAppWebView8C5A3B3C not implemented")
}
func (UnimplementedRPCMiniBotAppsServer) MessagesRequestSimpleWebView299BEC8E(context.Context, *TLMessagesRequestSimpleWebView299BEC8E) (*SimpleWebViewResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesRequestSimpleWebView299BEC8E not implemented")
}
func (UnimplementedRPCMiniBotAppsServer) MessagesRequestSimpleWebView6ABB2F73(context.Context, *TLMessagesRequestSimpleWebView6ABB2F73) (*SimpleWebViewResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesRequestSimpleWebView6ABB2F73 not implemented")
}
func (UnimplementedRPCMiniBotAppsServer) testEmbeddedByValue() {}

// UnsafeRPCMiniBotAppsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCMiniBotAppsServer will
// result in compilation errors.
type UnsafeRPCMiniBotAppsServer interface {
	mustEmbedUnimplementedRPCMiniBotAppsServer()
}

func RegisterRPCMiniBotAppsServer(s grpc.ServiceRegistrar, srv RPCMiniBotAppsServer) {
	// If the following call pancis, it indicates UnimplementedRPCMiniBotAppsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCMiniBotApps_ServiceDesc, srv)
}

func _RPCMiniBotApps_MessagesRequestWebView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesRequestWebView)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMiniBotAppsServer).MessagesRequestWebView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMiniBotApps_MessagesRequestWebView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMiniBotAppsServer).MessagesRequestWebView(ctx, req.(*TLMessagesRequestWebView))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMiniBotApps_MessagesProlongWebView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesProlongWebView)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMiniBotAppsServer).MessagesProlongWebView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMiniBotApps_MessagesProlongWebView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMiniBotAppsServer).MessagesProlongWebView(ctx, req.(*TLMessagesProlongWebView))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMiniBotApps_MessagesRequestSimpleWebView413A3E73_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesRequestSimpleWebView413A3E73)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMiniBotAppsServer).MessagesRequestSimpleWebView413A3E73(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMiniBotApps_MessagesRequestSimpleWebView413A3E73_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMiniBotAppsServer).MessagesRequestSimpleWebView413A3E73(ctx, req.(*TLMessagesRequestSimpleWebView413A3E73))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMiniBotApps_MessagesSendWebViewResultMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendWebViewResultMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMiniBotAppsServer).MessagesSendWebViewResultMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMiniBotApps_MessagesSendWebViewResultMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMiniBotAppsServer).MessagesSendWebViewResultMessage(ctx, req.(*TLMessagesSendWebViewResultMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMiniBotApps_MessagesSendWebViewData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendWebViewData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMiniBotAppsServer).MessagesSendWebViewData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMiniBotApps_MessagesSendWebViewData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMiniBotAppsServer).MessagesSendWebViewData(ctx, req.(*TLMessagesSendWebViewData))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMiniBotApps_MessagesGetBotApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetBotApp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMiniBotAppsServer).MessagesGetBotApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMiniBotApps_MessagesGetBotApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMiniBotAppsServer).MessagesGetBotApp(ctx, req.(*TLMessagesGetBotApp))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMiniBotApps_MessagesRequestAppWebView53618BCE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesRequestAppWebView53618BCE)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMiniBotAppsServer).MessagesRequestAppWebView53618BCE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMiniBotApps_MessagesRequestAppWebView53618BCE_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMiniBotAppsServer).MessagesRequestAppWebView53618BCE(ctx, req.(*TLMessagesRequestAppWebView53618BCE))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMiniBotApps_BotsCanSendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLBotsCanSendMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMiniBotAppsServer).BotsCanSendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMiniBotApps_BotsCanSendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMiniBotAppsServer).BotsCanSendMessage(ctx, req.(*TLBotsCanSendMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMiniBotApps_BotsAllowSendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLBotsAllowSendMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMiniBotAppsServer).BotsAllowSendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMiniBotApps_BotsAllowSendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMiniBotAppsServer).BotsAllowSendMessage(ctx, req.(*TLBotsAllowSendMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMiniBotApps_BotsInvokeWebViewCustomMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLBotsInvokeWebViewCustomMethod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMiniBotAppsServer).BotsInvokeWebViewCustomMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMiniBotApps_BotsInvokeWebViewCustomMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMiniBotAppsServer).BotsInvokeWebViewCustomMethod(ctx, req.(*TLBotsInvokeWebViewCustomMethod))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMiniBotApps_BotsCheckDownloadFileParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLBotsCheckDownloadFileParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMiniBotAppsServer).BotsCheckDownloadFileParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMiniBotApps_BotsCheckDownloadFileParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMiniBotAppsServer).BotsCheckDownloadFileParams(ctx, req.(*TLBotsCheckDownloadFileParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMiniBotApps_MessagesRequestSimpleWebView1A46500A_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesRequestSimpleWebView1A46500A)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMiniBotAppsServer).MessagesRequestSimpleWebView1A46500A(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMiniBotApps_MessagesRequestSimpleWebView1A46500A_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMiniBotAppsServer).MessagesRequestSimpleWebView1A46500A(ctx, req.(*TLMessagesRequestSimpleWebView1A46500A))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMiniBotApps_MessagesRequestAppWebView8C5A3B3C_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesRequestAppWebView8C5A3B3C)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMiniBotAppsServer).MessagesRequestAppWebView8C5A3B3C(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMiniBotApps_MessagesRequestAppWebView8C5A3B3C_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMiniBotAppsServer).MessagesRequestAppWebView8C5A3B3C(ctx, req.(*TLMessagesRequestAppWebView8C5A3B3C))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMiniBotApps_MessagesRequestSimpleWebView299BEC8E_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesRequestSimpleWebView299BEC8E)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMiniBotAppsServer).MessagesRequestSimpleWebView299BEC8E(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMiniBotApps_MessagesRequestSimpleWebView299BEC8E_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMiniBotAppsServer).MessagesRequestSimpleWebView299BEC8E(ctx, req.(*TLMessagesRequestSimpleWebView299BEC8E))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMiniBotApps_MessagesRequestSimpleWebView6ABB2F73_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesRequestSimpleWebView6ABB2F73)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMiniBotAppsServer).MessagesRequestSimpleWebView6ABB2F73(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMiniBotApps_MessagesRequestSimpleWebView6ABB2F73_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMiniBotAppsServer).MessagesRequestSimpleWebView6ABB2F73(ctx, req.(*TLMessagesRequestSimpleWebView6ABB2F73))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCMiniBotApps_ServiceDesc is the grpc.ServiceDesc for RPCMiniBotApps service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCMiniBotApps_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCMiniBotApps",
	HandlerType: (*RPCMiniBotAppsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "messages_requestWebView",
			Handler:    _RPCMiniBotApps_MessagesRequestWebView_Handler,
		},
		{
			MethodName: "messages_prolongWebView",
			Handler:    _RPCMiniBotApps_MessagesProlongWebView_Handler,
		},
		{
			MethodName: "messages_requestSimpleWebView413A3E73",
			Handler:    _RPCMiniBotApps_MessagesRequestSimpleWebView413A3E73_Handler,
		},
		{
			MethodName: "messages_sendWebViewResultMessage",
			Handler:    _RPCMiniBotApps_MessagesSendWebViewResultMessage_Handler,
		},
		{
			MethodName: "messages_sendWebViewData",
			Handler:    _RPCMiniBotApps_MessagesSendWebViewData_Handler,
		},
		{
			MethodName: "messages_getBotApp",
			Handler:    _RPCMiniBotApps_MessagesGetBotApp_Handler,
		},
		{
			MethodName: "messages_requestAppWebView53618BCE",
			Handler:    _RPCMiniBotApps_MessagesRequestAppWebView53618BCE_Handler,
		},
		{
			MethodName: "bots_canSendMessage",
			Handler:    _RPCMiniBotApps_BotsCanSendMessage_Handler,
		},
		{
			MethodName: "bots_allowSendMessage",
			Handler:    _RPCMiniBotApps_BotsAllowSendMessage_Handler,
		},
		{
			MethodName: "bots_invokeWebViewCustomMethod",
			Handler:    _RPCMiniBotApps_BotsInvokeWebViewCustomMethod_Handler,
		},
		{
			MethodName: "bots_checkDownloadFileParams",
			Handler:    _RPCMiniBotApps_BotsCheckDownloadFileParams_Handler,
		},
		{
			MethodName: "messages_requestSimpleWebView1A46500A",
			Handler:    _RPCMiniBotApps_MessagesRequestSimpleWebView1A46500A_Handler,
		},
		{
			MethodName: "messages_requestAppWebView8C5A3B3C",
			Handler:    _RPCMiniBotApps_MessagesRequestAppWebView8C5A3B3C_Handler,
		},
		{
			MethodName: "messages_requestSimpleWebView299BEC8E",
			Handler:    _RPCMiniBotApps_MessagesRequestSimpleWebView299BEC8E_Handler,
		},
		{
			MethodName: "messages_requestSimpleWebView6ABB2F73",
			Handler:    _RPCMiniBotApps_MessagesRequestSimpleWebView6ABB2F73_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCMiscellaneous_HelpSaveAppLog_FullMethodName = "/mtproto.RPCMiscellaneous/help_saveAppLog"
	RPCMiscellaneous_HelpTest_FullMethodName       = "/mtproto.RPCMiscellaneous/help_test"
)

// RPCMiscellaneousClient is the client API for RPCMiscellaneous service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCMiscellaneousClient interface {
	HelpSaveAppLog(ctx context.Context, in *TLHelpSaveAppLog, opts ...grpc.CallOption) (*Bool, error)
	HelpTest(ctx context.Context, in *TLHelpTest, opts ...grpc.CallOption) (*Bool, error)
}

type rPCMiscellaneousClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCMiscellaneousClient(cc grpc.ClientConnInterface) RPCMiscellaneousClient {
	return &rPCMiscellaneousClient{cc}
}

func (c *rPCMiscellaneousClient) HelpSaveAppLog(ctx context.Context, in *TLHelpSaveAppLog, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCMiscellaneous_HelpSaveAppLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMiscellaneousClient) HelpTest(ctx context.Context, in *TLHelpTest, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCMiscellaneous_HelpTest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCMiscellaneousServer is the server API for RPCMiscellaneous service.
// All implementations should embed UnimplementedRPCMiscellaneousServer
// for forward compatibility.
type RPCMiscellaneousServer interface {
	HelpSaveAppLog(context.Context, *TLHelpSaveAppLog) (*Bool, error)
	HelpTest(context.Context, *TLHelpTest) (*Bool, error)
}

// UnimplementedRPCMiscellaneousServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCMiscellaneousServer struct{}

func (UnimplementedRPCMiscellaneousServer) HelpSaveAppLog(context.Context, *TLHelpSaveAppLog) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpSaveAppLog not implemented")
}
func (UnimplementedRPCMiscellaneousServer) HelpTest(context.Context, *TLHelpTest) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpTest not implemented")
}
func (UnimplementedRPCMiscellaneousServer) testEmbeddedByValue() {}

// UnsafeRPCMiscellaneousServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCMiscellaneousServer will
// result in compilation errors.
type UnsafeRPCMiscellaneousServer interface {
	mustEmbedUnimplementedRPCMiscellaneousServer()
}

func RegisterRPCMiscellaneousServer(s grpc.ServiceRegistrar, srv RPCMiscellaneousServer) {
	// If the following call pancis, it indicates UnimplementedRPCMiscellaneousServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCMiscellaneous_ServiceDesc, srv)
}

func _RPCMiscellaneous_HelpSaveAppLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpSaveAppLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMiscellaneousServer).HelpSaveAppLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMiscellaneous_HelpSaveAppLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMiscellaneousServer).HelpSaveAppLog(ctx, req.(*TLHelpSaveAppLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMiscellaneous_HelpTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpTest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMiscellaneousServer).HelpTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMiscellaneous_HelpTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMiscellaneousServer).HelpTest(ctx, req.(*TLHelpTest))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCMiscellaneous_ServiceDesc is the grpc.ServiceDesc for RPCMiscellaneous service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCMiscellaneous_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCMiscellaneous",
	HandlerType: (*RPCMiscellaneousServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "help_saveAppLog",
			Handler:    _RPCMiscellaneous_HelpSaveAppLog_Handler,
		},
		{
			MethodName: "help_test",
			Handler:    _RPCMiscellaneous_HelpTest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCNotification_AccountRegisterDevice_FullMethodName       = "/mtproto.RPCNotification/account_registerDevice"
	RPCNotification_AccountUnregisterDevice_FullMethodName     = "/mtproto.RPCNotification/account_unregisterDevice"
	RPCNotification_AccountUpdateNotifySettings_FullMethodName = "/mtproto.RPCNotification/account_updateNotifySettings"
	RPCNotification_AccountGetNotifySettings_FullMethodName    = "/mtproto.RPCNotification/account_getNotifySettings"
	RPCNotification_AccountResetNotifySettings_FullMethodName  = "/mtproto.RPCNotification/account_resetNotifySettings"
	RPCNotification_AccountUpdateDeviceLocked_FullMethodName   = "/mtproto.RPCNotification/account_updateDeviceLocked"
	RPCNotification_AccountGetNotifyExceptions_FullMethodName  = "/mtproto.RPCNotification/account_getNotifyExceptions"
)

// RPCNotificationClient is the client API for RPCNotification service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCNotificationClient interface {
	AccountRegisterDevice(ctx context.Context, in *TLAccountRegisterDevice, opts ...grpc.CallOption) (*Bool, error)
	AccountUnregisterDevice(ctx context.Context, in *TLAccountUnregisterDevice, opts ...grpc.CallOption) (*Bool, error)
	AccountUpdateNotifySettings(ctx context.Context, in *TLAccountUpdateNotifySettings, opts ...grpc.CallOption) (*Bool, error)
	AccountGetNotifySettings(ctx context.Context, in *TLAccountGetNotifySettings, opts ...grpc.CallOption) (*PeerNotifySettings, error)
	AccountResetNotifySettings(ctx context.Context, in *TLAccountResetNotifySettings, opts ...grpc.CallOption) (*Bool, error)
	AccountUpdateDeviceLocked(ctx context.Context, in *TLAccountUpdateDeviceLocked, opts ...grpc.CallOption) (*Bool, error)
	AccountGetNotifyExceptions(ctx context.Context, in *TLAccountGetNotifyExceptions, opts ...grpc.CallOption) (*Updates, error)
}

type rPCNotificationClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCNotificationClient(cc grpc.ClientConnInterface) RPCNotificationClient {
	return &rPCNotificationClient{cc}
}

func (c *rPCNotificationClient) AccountRegisterDevice(ctx context.Context, in *TLAccountRegisterDevice, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCNotification_AccountRegisterDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCNotificationClient) AccountUnregisterDevice(ctx context.Context, in *TLAccountUnregisterDevice, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCNotification_AccountUnregisterDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCNotificationClient) AccountUpdateNotifySettings(ctx context.Context, in *TLAccountUpdateNotifySettings, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCNotification_AccountUpdateNotifySettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCNotificationClient) AccountGetNotifySettings(ctx context.Context, in *TLAccountGetNotifySettings, opts ...grpc.CallOption) (*PeerNotifySettings, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PeerNotifySettings)
	err := c.cc.Invoke(ctx, RPCNotification_AccountGetNotifySettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCNotificationClient) AccountResetNotifySettings(ctx context.Context, in *TLAccountResetNotifySettings, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCNotification_AccountResetNotifySettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCNotificationClient) AccountUpdateDeviceLocked(ctx context.Context, in *TLAccountUpdateDeviceLocked, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCNotification_AccountUpdateDeviceLocked_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCNotificationClient) AccountGetNotifyExceptions(ctx context.Context, in *TLAccountGetNotifyExceptions, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCNotification_AccountGetNotifyExceptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCNotificationServer is the server API for RPCNotification service.
// All implementations should embed UnimplementedRPCNotificationServer
// for forward compatibility.
type RPCNotificationServer interface {
	AccountRegisterDevice(context.Context, *TLAccountRegisterDevice) (*Bool, error)
	AccountUnregisterDevice(context.Context, *TLAccountUnregisterDevice) (*Bool, error)
	AccountUpdateNotifySettings(context.Context, *TLAccountUpdateNotifySettings) (*Bool, error)
	AccountGetNotifySettings(context.Context, *TLAccountGetNotifySettings) (*PeerNotifySettings, error)
	AccountResetNotifySettings(context.Context, *TLAccountResetNotifySettings) (*Bool, error)
	AccountUpdateDeviceLocked(context.Context, *TLAccountUpdateDeviceLocked) (*Bool, error)
	AccountGetNotifyExceptions(context.Context, *TLAccountGetNotifyExceptions) (*Updates, error)
}

// UnimplementedRPCNotificationServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCNotificationServer struct{}

func (UnimplementedRPCNotificationServer) AccountRegisterDevice(context.Context, *TLAccountRegisterDevice) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountRegisterDevice not implemented")
}
func (UnimplementedRPCNotificationServer) AccountUnregisterDevice(context.Context, *TLAccountUnregisterDevice) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUnregisterDevice not implemented")
}
func (UnimplementedRPCNotificationServer) AccountUpdateNotifySettings(context.Context, *TLAccountUpdateNotifySettings) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUpdateNotifySettings not implemented")
}
func (UnimplementedRPCNotificationServer) AccountGetNotifySettings(context.Context, *TLAccountGetNotifySettings) (*PeerNotifySettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetNotifySettings not implemented")
}
func (UnimplementedRPCNotificationServer) AccountResetNotifySettings(context.Context, *TLAccountResetNotifySettings) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountResetNotifySettings not implemented")
}
func (UnimplementedRPCNotificationServer) AccountUpdateDeviceLocked(context.Context, *TLAccountUpdateDeviceLocked) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUpdateDeviceLocked not implemented")
}
func (UnimplementedRPCNotificationServer) AccountGetNotifyExceptions(context.Context, *TLAccountGetNotifyExceptions) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetNotifyExceptions not implemented")
}
func (UnimplementedRPCNotificationServer) testEmbeddedByValue() {}

// UnsafeRPCNotificationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCNotificationServer will
// result in compilation errors.
type UnsafeRPCNotificationServer interface {
	mustEmbedUnimplementedRPCNotificationServer()
}

func RegisterRPCNotificationServer(s grpc.ServiceRegistrar, srv RPCNotificationServer) {
	// If the following call pancis, it indicates UnimplementedRPCNotificationServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCNotification_ServiceDesc, srv)
}

func _RPCNotification_AccountRegisterDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountRegisterDevice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCNotificationServer).AccountRegisterDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCNotification_AccountRegisterDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCNotificationServer).AccountRegisterDevice(ctx, req.(*TLAccountRegisterDevice))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCNotification_AccountUnregisterDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUnregisterDevice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCNotificationServer).AccountUnregisterDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCNotification_AccountUnregisterDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCNotificationServer).AccountUnregisterDevice(ctx, req.(*TLAccountUnregisterDevice))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCNotification_AccountUpdateNotifySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUpdateNotifySettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCNotificationServer).AccountUpdateNotifySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCNotification_AccountUpdateNotifySettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCNotificationServer).AccountUpdateNotifySettings(ctx, req.(*TLAccountUpdateNotifySettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCNotification_AccountGetNotifySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetNotifySettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCNotificationServer).AccountGetNotifySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCNotification_AccountGetNotifySettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCNotificationServer).AccountGetNotifySettings(ctx, req.(*TLAccountGetNotifySettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCNotification_AccountResetNotifySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountResetNotifySettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCNotificationServer).AccountResetNotifySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCNotification_AccountResetNotifySettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCNotificationServer).AccountResetNotifySettings(ctx, req.(*TLAccountResetNotifySettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCNotification_AccountUpdateDeviceLocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUpdateDeviceLocked)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCNotificationServer).AccountUpdateDeviceLocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCNotification_AccountUpdateDeviceLocked_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCNotificationServer).AccountUpdateDeviceLocked(ctx, req.(*TLAccountUpdateDeviceLocked))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCNotification_AccountGetNotifyExceptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetNotifyExceptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCNotificationServer).AccountGetNotifyExceptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCNotification_AccountGetNotifyExceptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCNotificationServer).AccountGetNotifyExceptions(ctx, req.(*TLAccountGetNotifyExceptions))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCNotification_ServiceDesc is the grpc.ServiceDesc for RPCNotification service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCNotification_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCNotification",
	HandlerType: (*RPCNotificationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "account_registerDevice",
			Handler:    _RPCNotification_AccountRegisterDevice_Handler,
		},
		{
			MethodName: "account_unregisterDevice",
			Handler:    _RPCNotification_AccountUnregisterDevice_Handler,
		},
		{
			MethodName: "account_updateNotifySettings",
			Handler:    _RPCNotification_AccountUpdateNotifySettings_Handler,
		},
		{
			MethodName: "account_getNotifySettings",
			Handler:    _RPCNotification_AccountGetNotifySettings_Handler,
		},
		{
			MethodName: "account_resetNotifySettings",
			Handler:    _RPCNotification_AccountResetNotifySettings_Handler,
		},
		{
			MethodName: "account_updateDeviceLocked",
			Handler:    _RPCNotification_AccountUpdateDeviceLocked_Handler,
		},
		{
			MethodName: "account_getNotifyExceptions",
			Handler:    _RPCNotification_AccountGetNotifyExceptions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCNsfw_AccountSetContentSettings_FullMethodName = "/mtproto.RPCNsfw/account_setContentSettings"
	RPCNsfw_AccountGetContentSettings_FullMethodName = "/mtproto.RPCNsfw/account_getContentSettings"
)

// RPCNsfwClient is the client API for RPCNsfw service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCNsfwClient interface {
	AccountSetContentSettings(ctx context.Context, in *TLAccountSetContentSettings, opts ...grpc.CallOption) (*Bool, error)
	AccountGetContentSettings(ctx context.Context, in *TLAccountGetContentSettings, opts ...grpc.CallOption) (*Account_ContentSettings, error)
}

type rPCNsfwClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCNsfwClient(cc grpc.ClientConnInterface) RPCNsfwClient {
	return &rPCNsfwClient{cc}
}

func (c *rPCNsfwClient) AccountSetContentSettings(ctx context.Context, in *TLAccountSetContentSettings, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCNsfw_AccountSetContentSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCNsfwClient) AccountGetContentSettings(ctx context.Context, in *TLAccountGetContentSettings, opts ...grpc.CallOption) (*Account_ContentSettings, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account_ContentSettings)
	err := c.cc.Invoke(ctx, RPCNsfw_AccountGetContentSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCNsfwServer is the server API for RPCNsfw service.
// All implementations should embed UnimplementedRPCNsfwServer
// for forward compatibility.
type RPCNsfwServer interface {
	AccountSetContentSettings(context.Context, *TLAccountSetContentSettings) (*Bool, error)
	AccountGetContentSettings(context.Context, *TLAccountGetContentSettings) (*Account_ContentSettings, error)
}

// UnimplementedRPCNsfwServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCNsfwServer struct{}

func (UnimplementedRPCNsfwServer) AccountSetContentSettings(context.Context, *TLAccountSetContentSettings) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSetContentSettings not implemented")
}
func (UnimplementedRPCNsfwServer) AccountGetContentSettings(context.Context, *TLAccountGetContentSettings) (*Account_ContentSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetContentSettings not implemented")
}
func (UnimplementedRPCNsfwServer) testEmbeddedByValue() {}

// UnsafeRPCNsfwServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCNsfwServer will
// result in compilation errors.
type UnsafeRPCNsfwServer interface {
	mustEmbedUnimplementedRPCNsfwServer()
}

func RegisterRPCNsfwServer(s grpc.ServiceRegistrar, srv RPCNsfwServer) {
	// If the following call pancis, it indicates UnimplementedRPCNsfwServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCNsfw_ServiceDesc, srv)
}

func _RPCNsfw_AccountSetContentSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSetContentSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCNsfwServer).AccountSetContentSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCNsfw_AccountSetContentSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCNsfwServer).AccountSetContentSettings(ctx, req.(*TLAccountSetContentSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCNsfw_AccountGetContentSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetContentSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCNsfwServer).AccountGetContentSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCNsfw_AccountGetContentSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCNsfwServer).AccountGetContentSettings(ctx, req.(*TLAccountGetContentSettings))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCNsfw_ServiceDesc is the grpc.ServiceDesc for RPCNsfw service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCNsfw_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCNsfw",
	HandlerType: (*RPCNsfwServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "account_setContentSettings",
			Handler:    _RPCNsfw_AccountSetContentSettings_Handler,
		},
		{
			MethodName: "account_getContentSettings",
			Handler:    _RPCNsfw_AccountGetContentSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCPaidMedia_MessagesGetExtendedMedia_FullMethodName = "/mtproto.RPCPaidMedia/messages_getExtendedMedia"
)

// RPCPaidMediaClient is the client API for RPCPaidMedia service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCPaidMediaClient interface {
	MessagesGetExtendedMedia(ctx context.Context, in *TLMessagesGetExtendedMedia, opts ...grpc.CallOption) (*Updates, error)
}

type rPCPaidMediaClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCPaidMediaClient(cc grpc.ClientConnInterface) RPCPaidMediaClient {
	return &rPCPaidMediaClient{cc}
}

func (c *rPCPaidMediaClient) MessagesGetExtendedMedia(ctx context.Context, in *TLMessagesGetExtendedMedia, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCPaidMedia_MessagesGetExtendedMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCPaidMediaServer is the server API for RPCPaidMedia service.
// All implementations should embed UnimplementedRPCPaidMediaServer
// for forward compatibility.
type RPCPaidMediaServer interface {
	MessagesGetExtendedMedia(context.Context, *TLMessagesGetExtendedMedia) (*Updates, error)
}

// UnimplementedRPCPaidMediaServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCPaidMediaServer struct{}

func (UnimplementedRPCPaidMediaServer) MessagesGetExtendedMedia(context.Context, *TLMessagesGetExtendedMedia) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetExtendedMedia not implemented")
}
func (UnimplementedRPCPaidMediaServer) testEmbeddedByValue() {}

// UnsafeRPCPaidMediaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCPaidMediaServer will
// result in compilation errors.
type UnsafeRPCPaidMediaServer interface {
	mustEmbedUnimplementedRPCPaidMediaServer()
}

func RegisterRPCPaidMediaServer(s grpc.ServiceRegistrar, srv RPCPaidMediaServer) {
	// If the following call pancis, it indicates UnimplementedRPCPaidMediaServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCPaidMedia_ServiceDesc, srv)
}

func _RPCPaidMedia_MessagesGetExtendedMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetExtendedMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPaidMediaServer).MessagesGetExtendedMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPaidMedia_MessagesGetExtendedMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPaidMediaServer).MessagesGetExtendedMedia(ctx, req.(*TLMessagesGetExtendedMedia))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCPaidMedia_ServiceDesc is the grpc.ServiceDesc for RPCPaidMedia service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCPaidMedia_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCPaidMedia",
	HandlerType: (*RPCPaidMediaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "messages_getExtendedMedia",
			Handler:    _RPCPaidMedia_MessagesGetExtendedMedia_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCPaidMessage_AccountAddNoPaidMessagesException_FullMethodName = "/mtproto.RPCPaidMessage/account_addNoPaidMessagesException"
	RPCPaidMessage_AccountGetPaidMessagesRevenue_FullMethodName     = "/mtproto.RPCPaidMessage/account_getPaidMessagesRevenue"
	RPCPaidMessage_ChannelsUpdatePaidMessagesPrice_FullMethodName   = "/mtproto.RPCPaidMessage/channels_updatePaidMessagesPrice"
)

// RPCPaidMessageClient is the client API for RPCPaidMessage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCPaidMessageClient interface {
	AccountAddNoPaidMessagesException(ctx context.Context, in *TLAccountAddNoPaidMessagesException, opts ...grpc.CallOption) (*Bool, error)
	AccountGetPaidMessagesRevenue(ctx context.Context, in *TLAccountGetPaidMessagesRevenue, opts ...grpc.CallOption) (*Account_PaidMessagesRevenue, error)
	ChannelsUpdatePaidMessagesPrice(ctx context.Context, in *TLChannelsUpdatePaidMessagesPrice, opts ...grpc.CallOption) (*Updates, error)
}

type rPCPaidMessageClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCPaidMessageClient(cc grpc.ClientConnInterface) RPCPaidMessageClient {
	return &rPCPaidMessageClient{cc}
}

func (c *rPCPaidMessageClient) AccountAddNoPaidMessagesException(ctx context.Context, in *TLAccountAddNoPaidMessagesException, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCPaidMessage_AccountAddNoPaidMessagesException_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPaidMessageClient) AccountGetPaidMessagesRevenue(ctx context.Context, in *TLAccountGetPaidMessagesRevenue, opts ...grpc.CallOption) (*Account_PaidMessagesRevenue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account_PaidMessagesRevenue)
	err := c.cc.Invoke(ctx, RPCPaidMessage_AccountGetPaidMessagesRevenue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPaidMessageClient) ChannelsUpdatePaidMessagesPrice(ctx context.Context, in *TLChannelsUpdatePaidMessagesPrice, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCPaidMessage_ChannelsUpdatePaidMessagesPrice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCPaidMessageServer is the server API for RPCPaidMessage service.
// All implementations should embed UnimplementedRPCPaidMessageServer
// for forward compatibility.
type RPCPaidMessageServer interface {
	AccountAddNoPaidMessagesException(context.Context, *TLAccountAddNoPaidMessagesException) (*Bool, error)
	AccountGetPaidMessagesRevenue(context.Context, *TLAccountGetPaidMessagesRevenue) (*Account_PaidMessagesRevenue, error)
	ChannelsUpdatePaidMessagesPrice(context.Context, *TLChannelsUpdatePaidMessagesPrice) (*Updates, error)
}

// UnimplementedRPCPaidMessageServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCPaidMessageServer struct{}

func (UnimplementedRPCPaidMessageServer) AccountAddNoPaidMessagesException(context.Context, *TLAccountAddNoPaidMessagesException) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountAddNoPaidMessagesException not implemented")
}
func (UnimplementedRPCPaidMessageServer) AccountGetPaidMessagesRevenue(context.Context, *TLAccountGetPaidMessagesRevenue) (*Account_PaidMessagesRevenue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetPaidMessagesRevenue not implemented")
}
func (UnimplementedRPCPaidMessageServer) ChannelsUpdatePaidMessagesPrice(context.Context, *TLChannelsUpdatePaidMessagesPrice) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsUpdatePaidMessagesPrice not implemented")
}
func (UnimplementedRPCPaidMessageServer) testEmbeddedByValue() {}

// UnsafeRPCPaidMessageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCPaidMessageServer will
// result in compilation errors.
type UnsafeRPCPaidMessageServer interface {
	mustEmbedUnimplementedRPCPaidMessageServer()
}

func RegisterRPCPaidMessageServer(s grpc.ServiceRegistrar, srv RPCPaidMessageServer) {
	// If the following call pancis, it indicates UnimplementedRPCPaidMessageServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCPaidMessage_ServiceDesc, srv)
}

func _RPCPaidMessage_AccountAddNoPaidMessagesException_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountAddNoPaidMessagesException)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPaidMessageServer).AccountAddNoPaidMessagesException(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPaidMessage_AccountAddNoPaidMessagesException_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPaidMessageServer).AccountAddNoPaidMessagesException(ctx, req.(*TLAccountAddNoPaidMessagesException))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPaidMessage_AccountGetPaidMessagesRevenue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetPaidMessagesRevenue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPaidMessageServer).AccountGetPaidMessagesRevenue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPaidMessage_AccountGetPaidMessagesRevenue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPaidMessageServer).AccountGetPaidMessagesRevenue(ctx, req.(*TLAccountGetPaidMessagesRevenue))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPaidMessage_ChannelsUpdatePaidMessagesPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsUpdatePaidMessagesPrice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPaidMessageServer).ChannelsUpdatePaidMessagesPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPaidMessage_ChannelsUpdatePaidMessagesPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPaidMessageServer).ChannelsUpdatePaidMessagesPrice(ctx, req.(*TLChannelsUpdatePaidMessagesPrice))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCPaidMessage_ServiceDesc is the grpc.ServiceDesc for RPCPaidMessage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCPaidMessage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCPaidMessage",
	HandlerType: (*RPCPaidMessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "account_addNoPaidMessagesException",
			Handler:    _RPCPaidMessage_AccountAddNoPaidMessagesException_Handler,
		},
		{
			MethodName: "account_getPaidMessagesRevenue",
			Handler:    _RPCPaidMessage_AccountGetPaidMessagesRevenue_Handler,
		},
		{
			MethodName: "channels_updatePaidMessagesPrice",
			Handler:    _RPCPaidMessage_ChannelsUpdatePaidMessagesPrice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCPassport_AccountGetAuthorizations_FullMethodName    = "/mtproto.RPCPassport/account_getAuthorizations"
	RPCPassport_AccountGetAllSecureValues_FullMethodName   = "/mtproto.RPCPassport/account_getAllSecureValues"
	RPCPassport_AccountGetSecureValue_FullMethodName       = "/mtproto.RPCPassport/account_getSecureValue"
	RPCPassport_AccountSaveSecureValue_FullMethodName      = "/mtproto.RPCPassport/account_saveSecureValue"
	RPCPassport_AccountDeleteSecureValue_FullMethodName    = "/mtproto.RPCPassport/account_deleteSecureValue"
	RPCPassport_AccountGetAuthorizationForm_FullMethodName = "/mtproto.RPCPassport/account_getAuthorizationForm"
	RPCPassport_AccountAcceptAuthorization_FullMethodName  = "/mtproto.RPCPassport/account_acceptAuthorization"
	RPCPassport_AccountSendVerifyPhoneCode_FullMethodName  = "/mtproto.RPCPassport/account_sendVerifyPhoneCode"
	RPCPassport_AccountVerifyPhone_FullMethodName          = "/mtproto.RPCPassport/account_verifyPhone"
	RPCPassport_UsersSetSecureValueErrors_FullMethodName   = "/mtproto.RPCPassport/users_setSecureValueErrors"
	RPCPassport_HelpGetPassportConfig_FullMethodName       = "/mtproto.RPCPassport/help_getPassportConfig"
)

// RPCPassportClient is the client API for RPCPassport service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCPassportClient interface {
	AccountGetAuthorizations(ctx context.Context, in *TLAccountGetAuthorizations, opts ...grpc.CallOption) (*Account_Authorizations, error)
	AccountGetAllSecureValues(ctx context.Context, in *TLAccountGetAllSecureValues, opts ...grpc.CallOption) (*Vector_SecureValue, error)
	AccountGetSecureValue(ctx context.Context, in *TLAccountGetSecureValue, opts ...grpc.CallOption) (*Vector_SecureValue, error)
	AccountSaveSecureValue(ctx context.Context, in *TLAccountSaveSecureValue, opts ...grpc.CallOption) (*SecureValue, error)
	AccountDeleteSecureValue(ctx context.Context, in *TLAccountDeleteSecureValue, opts ...grpc.CallOption) (*Bool, error)
	AccountGetAuthorizationForm(ctx context.Context, in *TLAccountGetAuthorizationForm, opts ...grpc.CallOption) (*Account_AuthorizationForm, error)
	AccountAcceptAuthorization(ctx context.Context, in *TLAccountAcceptAuthorization, opts ...grpc.CallOption) (*Bool, error)
	AccountSendVerifyPhoneCode(ctx context.Context, in *TLAccountSendVerifyPhoneCode, opts ...grpc.CallOption) (*Auth_SentCode, error)
	AccountVerifyPhone(ctx context.Context, in *TLAccountVerifyPhone, opts ...grpc.CallOption) (*Bool, error)
	UsersSetSecureValueErrors(ctx context.Context, in *TLUsersSetSecureValueErrors, opts ...grpc.CallOption) (*Bool, error)
	HelpGetPassportConfig(ctx context.Context, in *TLHelpGetPassportConfig, opts ...grpc.CallOption) (*Help_PassportConfig, error)
}

type rPCPassportClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCPassportClient(cc grpc.ClientConnInterface) RPCPassportClient {
	return &rPCPassportClient{cc}
}

func (c *rPCPassportClient) AccountGetAuthorizations(ctx context.Context, in *TLAccountGetAuthorizations, opts ...grpc.CallOption) (*Account_Authorizations, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account_Authorizations)
	err := c.cc.Invoke(ctx, RPCPassport_AccountGetAuthorizations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPassportClient) AccountGetAllSecureValues(ctx context.Context, in *TLAccountGetAllSecureValues, opts ...grpc.CallOption) (*Vector_SecureValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_SecureValue)
	err := c.cc.Invoke(ctx, RPCPassport_AccountGetAllSecureValues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPassportClient) AccountGetSecureValue(ctx context.Context, in *TLAccountGetSecureValue, opts ...grpc.CallOption) (*Vector_SecureValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_SecureValue)
	err := c.cc.Invoke(ctx, RPCPassport_AccountGetSecureValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPassportClient) AccountSaveSecureValue(ctx context.Context, in *TLAccountSaveSecureValue, opts ...grpc.CallOption) (*SecureValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SecureValue)
	err := c.cc.Invoke(ctx, RPCPassport_AccountSaveSecureValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPassportClient) AccountDeleteSecureValue(ctx context.Context, in *TLAccountDeleteSecureValue, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCPassport_AccountDeleteSecureValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPassportClient) AccountGetAuthorizationForm(ctx context.Context, in *TLAccountGetAuthorizationForm, opts ...grpc.CallOption) (*Account_AuthorizationForm, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account_AuthorizationForm)
	err := c.cc.Invoke(ctx, RPCPassport_AccountGetAuthorizationForm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPassportClient) AccountAcceptAuthorization(ctx context.Context, in *TLAccountAcceptAuthorization, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCPassport_AccountAcceptAuthorization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPassportClient) AccountSendVerifyPhoneCode(ctx context.Context, in *TLAccountSendVerifyPhoneCode, opts ...grpc.CallOption) (*Auth_SentCode, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Auth_SentCode)
	err := c.cc.Invoke(ctx, RPCPassport_AccountSendVerifyPhoneCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPassportClient) AccountVerifyPhone(ctx context.Context, in *TLAccountVerifyPhone, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCPassport_AccountVerifyPhone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPassportClient) UsersSetSecureValueErrors(ctx context.Context, in *TLUsersSetSecureValueErrors, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCPassport_UsersSetSecureValueErrors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPassportClient) HelpGetPassportConfig(ctx context.Context, in *TLHelpGetPassportConfig, opts ...grpc.CallOption) (*Help_PassportConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Help_PassportConfig)
	err := c.cc.Invoke(ctx, RPCPassport_HelpGetPassportConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCPassportServer is the server API for RPCPassport service.
// All implementations should embed UnimplementedRPCPassportServer
// for forward compatibility.
type RPCPassportServer interface {
	AccountGetAuthorizations(context.Context, *TLAccountGetAuthorizations) (*Account_Authorizations, error)
	AccountGetAllSecureValues(context.Context, *TLAccountGetAllSecureValues) (*Vector_SecureValue, error)
	AccountGetSecureValue(context.Context, *TLAccountGetSecureValue) (*Vector_SecureValue, error)
	AccountSaveSecureValue(context.Context, *TLAccountSaveSecureValue) (*SecureValue, error)
	AccountDeleteSecureValue(context.Context, *TLAccountDeleteSecureValue) (*Bool, error)
	AccountGetAuthorizationForm(context.Context, *TLAccountGetAuthorizationForm) (*Account_AuthorizationForm, error)
	AccountAcceptAuthorization(context.Context, *TLAccountAcceptAuthorization) (*Bool, error)
	AccountSendVerifyPhoneCode(context.Context, *TLAccountSendVerifyPhoneCode) (*Auth_SentCode, error)
	AccountVerifyPhone(context.Context, *TLAccountVerifyPhone) (*Bool, error)
	UsersSetSecureValueErrors(context.Context, *TLUsersSetSecureValueErrors) (*Bool, error)
	HelpGetPassportConfig(context.Context, *TLHelpGetPassportConfig) (*Help_PassportConfig, error)
}

// UnimplementedRPCPassportServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCPassportServer struct{}

func (UnimplementedRPCPassportServer) AccountGetAuthorizations(context.Context, *TLAccountGetAuthorizations) (*Account_Authorizations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetAuthorizations not implemented")
}
func (UnimplementedRPCPassportServer) AccountGetAllSecureValues(context.Context, *TLAccountGetAllSecureValues) (*Vector_SecureValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetAllSecureValues not implemented")
}
func (UnimplementedRPCPassportServer) AccountGetSecureValue(context.Context, *TLAccountGetSecureValue) (*Vector_SecureValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetSecureValue not implemented")
}
func (UnimplementedRPCPassportServer) AccountSaveSecureValue(context.Context, *TLAccountSaveSecureValue) (*SecureValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSaveSecureValue not implemented")
}
func (UnimplementedRPCPassportServer) AccountDeleteSecureValue(context.Context, *TLAccountDeleteSecureValue) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountDeleteSecureValue not implemented")
}
func (UnimplementedRPCPassportServer) AccountGetAuthorizationForm(context.Context, *TLAccountGetAuthorizationForm) (*Account_AuthorizationForm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetAuthorizationForm not implemented")
}
func (UnimplementedRPCPassportServer) AccountAcceptAuthorization(context.Context, *TLAccountAcceptAuthorization) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountAcceptAuthorization not implemented")
}
func (UnimplementedRPCPassportServer) AccountSendVerifyPhoneCode(context.Context, *TLAccountSendVerifyPhoneCode) (*Auth_SentCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSendVerifyPhoneCode not implemented")
}
func (UnimplementedRPCPassportServer) AccountVerifyPhone(context.Context, *TLAccountVerifyPhone) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountVerifyPhone not implemented")
}
func (UnimplementedRPCPassportServer) UsersSetSecureValueErrors(context.Context, *TLUsersSetSecureValueErrors) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersSetSecureValueErrors not implemented")
}
func (UnimplementedRPCPassportServer) HelpGetPassportConfig(context.Context, *TLHelpGetPassportConfig) (*Help_PassportConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetPassportConfig not implemented")
}
func (UnimplementedRPCPassportServer) testEmbeddedByValue() {}

// UnsafeRPCPassportServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCPassportServer will
// result in compilation errors.
type UnsafeRPCPassportServer interface {
	mustEmbedUnimplementedRPCPassportServer()
}

func RegisterRPCPassportServer(s grpc.ServiceRegistrar, srv RPCPassportServer) {
	// If the following call pancis, it indicates UnimplementedRPCPassportServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCPassport_ServiceDesc, srv)
}

func _RPCPassport_AccountGetAuthorizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetAuthorizations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPassportServer).AccountGetAuthorizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPassport_AccountGetAuthorizations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPassportServer).AccountGetAuthorizations(ctx, req.(*TLAccountGetAuthorizations))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPassport_AccountGetAllSecureValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetAllSecureValues)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPassportServer).AccountGetAllSecureValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPassport_AccountGetAllSecureValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPassportServer).AccountGetAllSecureValues(ctx, req.(*TLAccountGetAllSecureValues))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPassport_AccountGetSecureValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetSecureValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPassportServer).AccountGetSecureValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPassport_AccountGetSecureValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPassportServer).AccountGetSecureValue(ctx, req.(*TLAccountGetSecureValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPassport_AccountSaveSecureValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSaveSecureValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPassportServer).AccountSaveSecureValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPassport_AccountSaveSecureValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPassportServer).AccountSaveSecureValue(ctx, req.(*TLAccountSaveSecureValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPassport_AccountDeleteSecureValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountDeleteSecureValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPassportServer).AccountDeleteSecureValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPassport_AccountDeleteSecureValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPassportServer).AccountDeleteSecureValue(ctx, req.(*TLAccountDeleteSecureValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPassport_AccountGetAuthorizationForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetAuthorizationForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPassportServer).AccountGetAuthorizationForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPassport_AccountGetAuthorizationForm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPassportServer).AccountGetAuthorizationForm(ctx, req.(*TLAccountGetAuthorizationForm))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPassport_AccountAcceptAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountAcceptAuthorization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPassportServer).AccountAcceptAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPassport_AccountAcceptAuthorization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPassportServer).AccountAcceptAuthorization(ctx, req.(*TLAccountAcceptAuthorization))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPassport_AccountSendVerifyPhoneCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSendVerifyPhoneCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPassportServer).AccountSendVerifyPhoneCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPassport_AccountSendVerifyPhoneCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPassportServer).AccountSendVerifyPhoneCode(ctx, req.(*TLAccountSendVerifyPhoneCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPassport_AccountVerifyPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountVerifyPhone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPassportServer).AccountVerifyPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPassport_AccountVerifyPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPassportServer).AccountVerifyPhone(ctx, req.(*TLAccountVerifyPhone))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPassport_UsersSetSecureValueErrors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUsersSetSecureValueErrors)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPassportServer).UsersSetSecureValueErrors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPassport_UsersSetSecureValueErrors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPassportServer).UsersSetSecureValueErrors(ctx, req.(*TLUsersSetSecureValueErrors))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPassport_HelpGetPassportConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetPassportConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPassportServer).HelpGetPassportConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPassport_HelpGetPassportConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPassportServer).HelpGetPassportConfig(ctx, req.(*TLHelpGetPassportConfig))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCPassport_ServiceDesc is the grpc.ServiceDesc for RPCPassport service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCPassport_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCPassport",
	HandlerType: (*RPCPassportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "account_getAuthorizations",
			Handler:    _RPCPassport_AccountGetAuthorizations_Handler,
		},
		{
			MethodName: "account_getAllSecureValues",
			Handler:    _RPCPassport_AccountGetAllSecureValues_Handler,
		},
		{
			MethodName: "account_getSecureValue",
			Handler:    _RPCPassport_AccountGetSecureValue_Handler,
		},
		{
			MethodName: "account_saveSecureValue",
			Handler:    _RPCPassport_AccountSaveSecureValue_Handler,
		},
		{
			MethodName: "account_deleteSecureValue",
			Handler:    _RPCPassport_AccountDeleteSecureValue_Handler,
		},
		{
			MethodName: "account_getAuthorizationForm",
			Handler:    _RPCPassport_AccountGetAuthorizationForm_Handler,
		},
		{
			MethodName: "account_acceptAuthorization",
			Handler:    _RPCPassport_AccountAcceptAuthorization_Handler,
		},
		{
			MethodName: "account_sendVerifyPhoneCode",
			Handler:    _RPCPassport_AccountSendVerifyPhoneCode_Handler,
		},
		{
			MethodName: "account_verifyPhone",
			Handler:    _RPCPassport_AccountVerifyPhone_Handler,
		},
		{
			MethodName: "users_setSecureValueErrors",
			Handler:    _RPCPassport_UsersSetSecureValueErrors_Handler,
		},
		{
			MethodName: "help_getPassportConfig",
			Handler:    _RPCPassport_HelpGetPassportConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCPayments_AccountGetTmpPassword_FullMethodName            = "/mtproto.RPCPayments/account_getTmpPassword"
	RPCPayments_MessagesSetBotShippingResults_FullMethodName    = "/mtproto.RPCPayments/messages_setBotShippingResults"
	RPCPayments_MessagesSetBotPrecheckoutResults_FullMethodName = "/mtproto.RPCPayments/messages_setBotPrecheckoutResults"
	RPCPayments_PaymentsGetPaymentForm_FullMethodName           = "/mtproto.RPCPayments/payments_getPaymentForm"
	RPCPayments_PaymentsGetPaymentReceipt_FullMethodName        = "/mtproto.RPCPayments/payments_getPaymentReceipt"
	RPCPayments_PaymentsValidateRequestedInfo_FullMethodName    = "/mtproto.RPCPayments/payments_validateRequestedInfo"
	RPCPayments_PaymentsSendPaymentForm_FullMethodName          = "/mtproto.RPCPayments/payments_sendPaymentForm"
	RPCPayments_PaymentsGetSavedInfo_FullMethodName             = "/mtproto.RPCPayments/payments_getSavedInfo"
	RPCPayments_PaymentsClearSavedInfo_FullMethodName           = "/mtproto.RPCPayments/payments_clearSavedInfo"
	RPCPayments_PaymentsGetBankCardData_FullMethodName          = "/mtproto.RPCPayments/payments_getBankCardData"
	RPCPayments_PaymentsExportInvoice_FullMethodName            = "/mtproto.RPCPayments/payments_exportInvoice"
	RPCPayments_PaymentsRequestRecurringPayment_FullMethodName  = "/mtproto.RPCPayments/payments_requestRecurringPayment"
	RPCPayments_PaymentsRestorePlayMarketReceipt_FullMethodName = "/mtproto.RPCPayments/payments_restorePlayMarketReceipt"
)

// RPCPaymentsClient is the client API for RPCPayments service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCPaymentsClient interface {
	AccountGetTmpPassword(ctx context.Context, in *TLAccountGetTmpPassword, opts ...grpc.CallOption) (*Account_TmpPassword, error)
	MessagesSetBotShippingResults(ctx context.Context, in *TLMessagesSetBotShippingResults, opts ...grpc.CallOption) (*Bool, error)
	MessagesSetBotPrecheckoutResults(ctx context.Context, in *TLMessagesSetBotPrecheckoutResults, opts ...grpc.CallOption) (*Bool, error)
	PaymentsGetPaymentForm(ctx context.Context, in *TLPaymentsGetPaymentForm, opts ...grpc.CallOption) (*Payments_PaymentForm, error)
	PaymentsGetPaymentReceipt(ctx context.Context, in *TLPaymentsGetPaymentReceipt, opts ...grpc.CallOption) (*Payments_PaymentReceipt, error)
	PaymentsValidateRequestedInfo(ctx context.Context, in *TLPaymentsValidateRequestedInfo, opts ...grpc.CallOption) (*Payments_ValidatedRequestedInfo, error)
	PaymentsSendPaymentForm(ctx context.Context, in *TLPaymentsSendPaymentForm, opts ...grpc.CallOption) (*Payments_PaymentResult, error)
	PaymentsGetSavedInfo(ctx context.Context, in *TLPaymentsGetSavedInfo, opts ...grpc.CallOption) (*Payments_SavedInfo, error)
	PaymentsClearSavedInfo(ctx context.Context, in *TLPaymentsClearSavedInfo, opts ...grpc.CallOption) (*Bool, error)
	PaymentsGetBankCardData(ctx context.Context, in *TLPaymentsGetBankCardData, opts ...grpc.CallOption) (*Payments_BankCardData, error)
	PaymentsExportInvoice(ctx context.Context, in *TLPaymentsExportInvoice, opts ...grpc.CallOption) (*Payments_ExportedInvoice, error)
	PaymentsRequestRecurringPayment(ctx context.Context, in *TLPaymentsRequestRecurringPayment, opts ...grpc.CallOption) (*Updates, error)
	PaymentsRestorePlayMarketReceipt(ctx context.Context, in *TLPaymentsRestorePlayMarketReceipt, opts ...grpc.CallOption) (*Updates, error)
}

type rPCPaymentsClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCPaymentsClient(cc grpc.ClientConnInterface) RPCPaymentsClient {
	return &rPCPaymentsClient{cc}
}

func (c *rPCPaymentsClient) AccountGetTmpPassword(ctx context.Context, in *TLAccountGetTmpPassword, opts ...grpc.CallOption) (*Account_TmpPassword, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account_TmpPassword)
	err := c.cc.Invoke(ctx, RPCPayments_AccountGetTmpPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPaymentsClient) MessagesSetBotShippingResults(ctx context.Context, in *TLMessagesSetBotShippingResults, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCPayments_MessagesSetBotShippingResults_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPaymentsClient) MessagesSetBotPrecheckoutResults(ctx context.Context, in *TLMessagesSetBotPrecheckoutResults, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCPayments_MessagesSetBotPrecheckoutResults_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPaymentsClient) PaymentsGetPaymentForm(ctx context.Context, in *TLPaymentsGetPaymentForm, opts ...grpc.CallOption) (*Payments_PaymentForm, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payments_PaymentForm)
	err := c.cc.Invoke(ctx, RPCPayments_PaymentsGetPaymentForm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPaymentsClient) PaymentsGetPaymentReceipt(ctx context.Context, in *TLPaymentsGetPaymentReceipt, opts ...grpc.CallOption) (*Payments_PaymentReceipt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payments_PaymentReceipt)
	err := c.cc.Invoke(ctx, RPCPayments_PaymentsGetPaymentReceipt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPaymentsClient) PaymentsValidateRequestedInfo(ctx context.Context, in *TLPaymentsValidateRequestedInfo, opts ...grpc.CallOption) (*Payments_ValidatedRequestedInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payments_ValidatedRequestedInfo)
	err := c.cc.Invoke(ctx, RPCPayments_PaymentsValidateRequestedInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPaymentsClient) PaymentsSendPaymentForm(ctx context.Context, in *TLPaymentsSendPaymentForm, opts ...grpc.CallOption) (*Payments_PaymentResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payments_PaymentResult)
	err := c.cc.Invoke(ctx, RPCPayments_PaymentsSendPaymentForm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPaymentsClient) PaymentsGetSavedInfo(ctx context.Context, in *TLPaymentsGetSavedInfo, opts ...grpc.CallOption) (*Payments_SavedInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payments_SavedInfo)
	err := c.cc.Invoke(ctx, RPCPayments_PaymentsGetSavedInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPaymentsClient) PaymentsClearSavedInfo(ctx context.Context, in *TLPaymentsClearSavedInfo, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCPayments_PaymentsClearSavedInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPaymentsClient) PaymentsGetBankCardData(ctx context.Context, in *TLPaymentsGetBankCardData, opts ...grpc.CallOption) (*Payments_BankCardData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payments_BankCardData)
	err := c.cc.Invoke(ctx, RPCPayments_PaymentsGetBankCardData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPaymentsClient) PaymentsExportInvoice(ctx context.Context, in *TLPaymentsExportInvoice, opts ...grpc.CallOption) (*Payments_ExportedInvoice, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payments_ExportedInvoice)
	err := c.cc.Invoke(ctx, RPCPayments_PaymentsExportInvoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPaymentsClient) PaymentsRequestRecurringPayment(ctx context.Context, in *TLPaymentsRequestRecurringPayment, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCPayments_PaymentsRequestRecurringPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPaymentsClient) PaymentsRestorePlayMarketReceipt(ctx context.Context, in *TLPaymentsRestorePlayMarketReceipt, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCPayments_PaymentsRestorePlayMarketReceipt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCPaymentsServer is the server API for RPCPayments service.
// All implementations should embed UnimplementedRPCPaymentsServer
// for forward compatibility.
type RPCPaymentsServer interface {
	AccountGetTmpPassword(context.Context, *TLAccountGetTmpPassword) (*Account_TmpPassword, error)
	MessagesSetBotShippingResults(context.Context, *TLMessagesSetBotShippingResults) (*Bool, error)
	MessagesSetBotPrecheckoutResults(context.Context, *TLMessagesSetBotPrecheckoutResults) (*Bool, error)
	PaymentsGetPaymentForm(context.Context, *TLPaymentsGetPaymentForm) (*Payments_PaymentForm, error)
	PaymentsGetPaymentReceipt(context.Context, *TLPaymentsGetPaymentReceipt) (*Payments_PaymentReceipt, error)
	PaymentsValidateRequestedInfo(context.Context, *TLPaymentsValidateRequestedInfo) (*Payments_ValidatedRequestedInfo, error)
	PaymentsSendPaymentForm(context.Context, *TLPaymentsSendPaymentForm) (*Payments_PaymentResult, error)
	PaymentsGetSavedInfo(context.Context, *TLPaymentsGetSavedInfo) (*Payments_SavedInfo, error)
	PaymentsClearSavedInfo(context.Context, *TLPaymentsClearSavedInfo) (*Bool, error)
	PaymentsGetBankCardData(context.Context, *TLPaymentsGetBankCardData) (*Payments_BankCardData, error)
	PaymentsExportInvoice(context.Context, *TLPaymentsExportInvoice) (*Payments_ExportedInvoice, error)
	PaymentsRequestRecurringPayment(context.Context, *TLPaymentsRequestRecurringPayment) (*Updates, error)
	PaymentsRestorePlayMarketReceipt(context.Context, *TLPaymentsRestorePlayMarketReceipt) (*Updates, error)
}

// UnimplementedRPCPaymentsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCPaymentsServer struct{}

func (UnimplementedRPCPaymentsServer) AccountGetTmpPassword(context.Context, *TLAccountGetTmpPassword) (*Account_TmpPassword, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetTmpPassword not implemented")
}
func (UnimplementedRPCPaymentsServer) MessagesSetBotShippingResults(context.Context, *TLMessagesSetBotShippingResults) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSetBotShippingResults not implemented")
}
func (UnimplementedRPCPaymentsServer) MessagesSetBotPrecheckoutResults(context.Context, *TLMessagesSetBotPrecheckoutResults) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSetBotPrecheckoutResults not implemented")
}
func (UnimplementedRPCPaymentsServer) PaymentsGetPaymentForm(context.Context, *TLPaymentsGetPaymentForm) (*Payments_PaymentForm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsGetPaymentForm not implemented")
}
func (UnimplementedRPCPaymentsServer) PaymentsGetPaymentReceipt(context.Context, *TLPaymentsGetPaymentReceipt) (*Payments_PaymentReceipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsGetPaymentReceipt not implemented")
}
func (UnimplementedRPCPaymentsServer) PaymentsValidateRequestedInfo(context.Context, *TLPaymentsValidateRequestedInfo) (*Payments_ValidatedRequestedInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsValidateRequestedInfo not implemented")
}
func (UnimplementedRPCPaymentsServer) PaymentsSendPaymentForm(context.Context, *TLPaymentsSendPaymentForm) (*Payments_PaymentResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsSendPaymentForm not implemented")
}
func (UnimplementedRPCPaymentsServer) PaymentsGetSavedInfo(context.Context, *TLPaymentsGetSavedInfo) (*Payments_SavedInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsGetSavedInfo not implemented")
}
func (UnimplementedRPCPaymentsServer) PaymentsClearSavedInfo(context.Context, *TLPaymentsClearSavedInfo) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsClearSavedInfo not implemented")
}
func (UnimplementedRPCPaymentsServer) PaymentsGetBankCardData(context.Context, *TLPaymentsGetBankCardData) (*Payments_BankCardData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsGetBankCardData not implemented")
}
func (UnimplementedRPCPaymentsServer) PaymentsExportInvoice(context.Context, *TLPaymentsExportInvoice) (*Payments_ExportedInvoice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsExportInvoice not implemented")
}
func (UnimplementedRPCPaymentsServer) PaymentsRequestRecurringPayment(context.Context, *TLPaymentsRequestRecurringPayment) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsRequestRecurringPayment not implemented")
}
func (UnimplementedRPCPaymentsServer) PaymentsRestorePlayMarketReceipt(context.Context, *TLPaymentsRestorePlayMarketReceipt) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsRestorePlayMarketReceipt not implemented")
}
func (UnimplementedRPCPaymentsServer) testEmbeddedByValue() {}

// UnsafeRPCPaymentsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCPaymentsServer will
// result in compilation errors.
type UnsafeRPCPaymentsServer interface {
	mustEmbedUnimplementedRPCPaymentsServer()
}

func RegisterRPCPaymentsServer(s grpc.ServiceRegistrar, srv RPCPaymentsServer) {
	// If the following call pancis, it indicates UnimplementedRPCPaymentsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCPayments_ServiceDesc, srv)
}

func _RPCPayments_AccountGetTmpPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetTmpPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPaymentsServer).AccountGetTmpPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPayments_AccountGetTmpPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPaymentsServer).AccountGetTmpPassword(ctx, req.(*TLAccountGetTmpPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPayments_MessagesSetBotShippingResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSetBotShippingResults)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPaymentsServer).MessagesSetBotShippingResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPayments_MessagesSetBotShippingResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPaymentsServer).MessagesSetBotShippingResults(ctx, req.(*TLMessagesSetBotShippingResults))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPayments_MessagesSetBotPrecheckoutResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSetBotPrecheckoutResults)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPaymentsServer).MessagesSetBotPrecheckoutResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPayments_MessagesSetBotPrecheckoutResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPaymentsServer).MessagesSetBotPrecheckoutResults(ctx, req.(*TLMessagesSetBotPrecheckoutResults))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPayments_PaymentsGetPaymentForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsGetPaymentForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPaymentsServer).PaymentsGetPaymentForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPayments_PaymentsGetPaymentForm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPaymentsServer).PaymentsGetPaymentForm(ctx, req.(*TLPaymentsGetPaymentForm))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPayments_PaymentsGetPaymentReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsGetPaymentReceipt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPaymentsServer).PaymentsGetPaymentReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPayments_PaymentsGetPaymentReceipt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPaymentsServer).PaymentsGetPaymentReceipt(ctx, req.(*TLPaymentsGetPaymentReceipt))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPayments_PaymentsValidateRequestedInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsValidateRequestedInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPaymentsServer).PaymentsValidateRequestedInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPayments_PaymentsValidateRequestedInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPaymentsServer).PaymentsValidateRequestedInfo(ctx, req.(*TLPaymentsValidateRequestedInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPayments_PaymentsSendPaymentForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsSendPaymentForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPaymentsServer).PaymentsSendPaymentForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPayments_PaymentsSendPaymentForm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPaymentsServer).PaymentsSendPaymentForm(ctx, req.(*TLPaymentsSendPaymentForm))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPayments_PaymentsGetSavedInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsGetSavedInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPaymentsServer).PaymentsGetSavedInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPayments_PaymentsGetSavedInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPaymentsServer).PaymentsGetSavedInfo(ctx, req.(*TLPaymentsGetSavedInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPayments_PaymentsClearSavedInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsClearSavedInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPaymentsServer).PaymentsClearSavedInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPayments_PaymentsClearSavedInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPaymentsServer).PaymentsClearSavedInfo(ctx, req.(*TLPaymentsClearSavedInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPayments_PaymentsGetBankCardData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsGetBankCardData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPaymentsServer).PaymentsGetBankCardData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPayments_PaymentsGetBankCardData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPaymentsServer).PaymentsGetBankCardData(ctx, req.(*TLPaymentsGetBankCardData))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPayments_PaymentsExportInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsExportInvoice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPaymentsServer).PaymentsExportInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPayments_PaymentsExportInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPaymentsServer).PaymentsExportInvoice(ctx, req.(*TLPaymentsExportInvoice))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPayments_PaymentsRequestRecurringPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsRequestRecurringPayment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPaymentsServer).PaymentsRequestRecurringPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPayments_PaymentsRequestRecurringPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPaymentsServer).PaymentsRequestRecurringPayment(ctx, req.(*TLPaymentsRequestRecurringPayment))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPayments_PaymentsRestorePlayMarketReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsRestorePlayMarketReceipt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPaymentsServer).PaymentsRestorePlayMarketReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPayments_PaymentsRestorePlayMarketReceipt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPaymentsServer).PaymentsRestorePlayMarketReceipt(ctx, req.(*TLPaymentsRestorePlayMarketReceipt))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCPayments_ServiceDesc is the grpc.ServiceDesc for RPCPayments service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCPayments_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCPayments",
	HandlerType: (*RPCPaymentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "account_getTmpPassword",
			Handler:    _RPCPayments_AccountGetTmpPassword_Handler,
		},
		{
			MethodName: "messages_setBotShippingResults",
			Handler:    _RPCPayments_MessagesSetBotShippingResults_Handler,
		},
		{
			MethodName: "messages_setBotPrecheckoutResults",
			Handler:    _RPCPayments_MessagesSetBotPrecheckoutResults_Handler,
		},
		{
			MethodName: "payments_getPaymentForm",
			Handler:    _RPCPayments_PaymentsGetPaymentForm_Handler,
		},
		{
			MethodName: "payments_getPaymentReceipt",
			Handler:    _RPCPayments_PaymentsGetPaymentReceipt_Handler,
		},
		{
			MethodName: "payments_validateRequestedInfo",
			Handler:    _RPCPayments_PaymentsValidateRequestedInfo_Handler,
		},
		{
			MethodName: "payments_sendPaymentForm",
			Handler:    _RPCPayments_PaymentsSendPaymentForm_Handler,
		},
		{
			MethodName: "payments_getSavedInfo",
			Handler:    _RPCPayments_PaymentsGetSavedInfo_Handler,
		},
		{
			MethodName: "payments_clearSavedInfo",
			Handler:    _RPCPayments_PaymentsClearSavedInfo_Handler,
		},
		{
			MethodName: "payments_getBankCardData",
			Handler:    _RPCPayments_PaymentsGetBankCardData_Handler,
		},
		{
			MethodName: "payments_exportInvoice",
			Handler:    _RPCPayments_PaymentsExportInvoice_Handler,
		},
		{
			MethodName: "payments_requestRecurringPayment",
			Handler:    _RPCPayments_PaymentsRequestRecurringPayment_Handler,
		},
		{
			MethodName: "payments_restorePlayMarketReceipt",
			Handler:    _RPCPayments_PaymentsRestorePlayMarketReceipt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCPolls_MessagesSendVote_FullMethodName       = "/mtproto.RPCPolls/messages_sendVote"
	RPCPolls_MessagesGetPollResults_FullMethodName = "/mtproto.RPCPolls/messages_getPollResults"
	RPCPolls_MessagesGetPollVotes_FullMethodName   = "/mtproto.RPCPolls/messages_getPollVotes"
)

// RPCPollsClient is the client API for RPCPolls service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCPollsClient interface {
	MessagesSendVote(ctx context.Context, in *TLMessagesSendVote, opts ...grpc.CallOption) (*Updates, error)
	MessagesGetPollResults(ctx context.Context, in *TLMessagesGetPollResults, opts ...grpc.CallOption) (*Updates, error)
	MessagesGetPollVotes(ctx context.Context, in *TLMessagesGetPollVotes, opts ...grpc.CallOption) (*Messages_VotesList, error)
}

type rPCPollsClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCPollsClient(cc grpc.ClientConnInterface) RPCPollsClient {
	return &rPCPollsClient{cc}
}

func (c *rPCPollsClient) MessagesSendVote(ctx context.Context, in *TLMessagesSendVote, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCPolls_MessagesSendVote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPollsClient) MessagesGetPollResults(ctx context.Context, in *TLMessagesGetPollResults, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCPolls_MessagesGetPollResults_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPollsClient) MessagesGetPollVotes(ctx context.Context, in *TLMessagesGetPollVotes, opts ...grpc.CallOption) (*Messages_VotesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_VotesList)
	err := c.cc.Invoke(ctx, RPCPolls_MessagesGetPollVotes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCPollsServer is the server API for RPCPolls service.
// All implementations should embed UnimplementedRPCPollsServer
// for forward compatibility.
type RPCPollsServer interface {
	MessagesSendVote(context.Context, *TLMessagesSendVote) (*Updates, error)
	MessagesGetPollResults(context.Context, *TLMessagesGetPollResults) (*Updates, error)
	MessagesGetPollVotes(context.Context, *TLMessagesGetPollVotes) (*Messages_VotesList, error)
}

// UnimplementedRPCPollsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCPollsServer struct{}

func (UnimplementedRPCPollsServer) MessagesSendVote(context.Context, *TLMessagesSendVote) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendVote not implemented")
}
func (UnimplementedRPCPollsServer) MessagesGetPollResults(context.Context, *TLMessagesGetPollResults) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetPollResults not implemented")
}
func (UnimplementedRPCPollsServer) MessagesGetPollVotes(context.Context, *TLMessagesGetPollVotes) (*Messages_VotesList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetPollVotes not implemented")
}
func (UnimplementedRPCPollsServer) testEmbeddedByValue() {}

// UnsafeRPCPollsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCPollsServer will
// result in compilation errors.
type UnsafeRPCPollsServer interface {
	mustEmbedUnimplementedRPCPollsServer()
}

func RegisterRPCPollsServer(s grpc.ServiceRegistrar, srv RPCPollsServer) {
	// If the following call pancis, it indicates UnimplementedRPCPollsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCPolls_ServiceDesc, srv)
}

func _RPCPolls_MessagesSendVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendVote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPollsServer).MessagesSendVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPolls_MessagesSendVote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPollsServer).MessagesSendVote(ctx, req.(*TLMessagesSendVote))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPolls_MessagesGetPollResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetPollResults)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPollsServer).MessagesGetPollResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPolls_MessagesGetPollResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPollsServer).MessagesGetPollResults(ctx, req.(*TLMessagesGetPollResults))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPolls_MessagesGetPollVotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetPollVotes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPollsServer).MessagesGetPollVotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPolls_MessagesGetPollVotes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPollsServer).MessagesGetPollVotes(ctx, req.(*TLMessagesGetPollVotes))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCPolls_ServiceDesc is the grpc.ServiceDesc for RPCPolls service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCPolls_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCPolls",
	HandlerType: (*RPCPollsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "messages_sendVote",
			Handler:    _RPCPolls_MessagesSendVote_Handler,
		},
		{
			MethodName: "messages_getPollResults",
			Handler:    _RPCPolls_MessagesGetPollResults_Handler,
		},
		{
			MethodName: "messages_getPollVotes",
			Handler:    _RPCPolls_MessagesGetPollVotes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCPredefined_PredefinedCreatePredefinedUser_FullMethodName     = "/mtproto.RPCPredefined/predefined_createPredefinedUser"
	RPCPredefined_PredefinedUpdatePredefinedUsername_FullMethodName = "/mtproto.RPCPredefined/predefined_updatePredefinedUsername"
	RPCPredefined_PredefinedUpdatePredefinedProfile_FullMethodName  = "/mtproto.RPCPredefined/predefined_updatePredefinedProfile"
	RPCPredefined_PredefinedUpdatePredefinedVerified_FullMethodName = "/mtproto.RPCPredefined/predefined_updatePredefinedVerified"
	RPCPredefined_PredefinedUpdatePredefinedCode_FullMethodName     = "/mtproto.RPCPredefined/predefined_updatePredefinedCode"
	RPCPredefined_PredefinedGetPredefinedUser_FullMethodName        = "/mtproto.RPCPredefined/predefined_getPredefinedUser"
	RPCPredefined_PredefinedGetPredefinedUsers_FullMethodName       = "/mtproto.RPCPredefined/predefined_getPredefinedUsers"
)

// RPCPredefinedClient is the client API for RPCPredefined service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCPredefinedClient interface {
	PredefinedCreatePredefinedUser(ctx context.Context, in *TLPredefinedCreatePredefinedUser, opts ...grpc.CallOption) (*PredefinedUser, error)
	PredefinedUpdatePredefinedUsername(ctx context.Context, in *TLPredefinedUpdatePredefinedUsername, opts ...grpc.CallOption) (*PredefinedUser, error)
	PredefinedUpdatePredefinedProfile(ctx context.Context, in *TLPredefinedUpdatePredefinedProfile, opts ...grpc.CallOption) (*PredefinedUser, error)
	PredefinedUpdatePredefinedVerified(ctx context.Context, in *TLPredefinedUpdatePredefinedVerified, opts ...grpc.CallOption) (*PredefinedUser, error)
	PredefinedUpdatePredefinedCode(ctx context.Context, in *TLPredefinedUpdatePredefinedCode, opts ...grpc.CallOption) (*PredefinedUser, error)
	PredefinedGetPredefinedUser(ctx context.Context, in *TLPredefinedGetPredefinedUser, opts ...grpc.CallOption) (*PredefinedUser, error)
	PredefinedGetPredefinedUsers(ctx context.Context, in *TLPredefinedGetPredefinedUsers, opts ...grpc.CallOption) (*Vector_PredefinedUser, error)
}

type rPCPredefinedClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCPredefinedClient(cc grpc.ClientConnInterface) RPCPredefinedClient {
	return &rPCPredefinedClient{cc}
}

func (c *rPCPredefinedClient) PredefinedCreatePredefinedUser(ctx context.Context, in *TLPredefinedCreatePredefinedUser, opts ...grpc.CallOption) (*PredefinedUser, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PredefinedUser)
	err := c.cc.Invoke(ctx, RPCPredefined_PredefinedCreatePredefinedUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPredefinedClient) PredefinedUpdatePredefinedUsername(ctx context.Context, in *TLPredefinedUpdatePredefinedUsername, opts ...grpc.CallOption) (*PredefinedUser, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PredefinedUser)
	err := c.cc.Invoke(ctx, RPCPredefined_PredefinedUpdatePredefinedUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPredefinedClient) PredefinedUpdatePredefinedProfile(ctx context.Context, in *TLPredefinedUpdatePredefinedProfile, opts ...grpc.CallOption) (*PredefinedUser, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PredefinedUser)
	err := c.cc.Invoke(ctx, RPCPredefined_PredefinedUpdatePredefinedProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPredefinedClient) PredefinedUpdatePredefinedVerified(ctx context.Context, in *TLPredefinedUpdatePredefinedVerified, opts ...grpc.CallOption) (*PredefinedUser, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PredefinedUser)
	err := c.cc.Invoke(ctx, RPCPredefined_PredefinedUpdatePredefinedVerified_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPredefinedClient) PredefinedUpdatePredefinedCode(ctx context.Context, in *TLPredefinedUpdatePredefinedCode, opts ...grpc.CallOption) (*PredefinedUser, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PredefinedUser)
	err := c.cc.Invoke(ctx, RPCPredefined_PredefinedUpdatePredefinedCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPredefinedClient) PredefinedGetPredefinedUser(ctx context.Context, in *TLPredefinedGetPredefinedUser, opts ...grpc.CallOption) (*PredefinedUser, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PredefinedUser)
	err := c.cc.Invoke(ctx, RPCPredefined_PredefinedGetPredefinedUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPredefinedClient) PredefinedGetPredefinedUsers(ctx context.Context, in *TLPredefinedGetPredefinedUsers, opts ...grpc.CallOption) (*Vector_PredefinedUser, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_PredefinedUser)
	err := c.cc.Invoke(ctx, RPCPredefined_PredefinedGetPredefinedUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCPredefinedServer is the server API for RPCPredefined service.
// All implementations should embed UnimplementedRPCPredefinedServer
// for forward compatibility.
type RPCPredefinedServer interface {
	PredefinedCreatePredefinedUser(context.Context, *TLPredefinedCreatePredefinedUser) (*PredefinedUser, error)
	PredefinedUpdatePredefinedUsername(context.Context, *TLPredefinedUpdatePredefinedUsername) (*PredefinedUser, error)
	PredefinedUpdatePredefinedProfile(context.Context, *TLPredefinedUpdatePredefinedProfile) (*PredefinedUser, error)
	PredefinedUpdatePredefinedVerified(context.Context, *TLPredefinedUpdatePredefinedVerified) (*PredefinedUser, error)
	PredefinedUpdatePredefinedCode(context.Context, *TLPredefinedUpdatePredefinedCode) (*PredefinedUser, error)
	PredefinedGetPredefinedUser(context.Context, *TLPredefinedGetPredefinedUser) (*PredefinedUser, error)
	PredefinedGetPredefinedUsers(context.Context, *TLPredefinedGetPredefinedUsers) (*Vector_PredefinedUser, error)
}

// UnimplementedRPCPredefinedServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCPredefinedServer struct{}

func (UnimplementedRPCPredefinedServer) PredefinedCreatePredefinedUser(context.Context, *TLPredefinedCreatePredefinedUser) (*PredefinedUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PredefinedCreatePredefinedUser not implemented")
}
func (UnimplementedRPCPredefinedServer) PredefinedUpdatePredefinedUsername(context.Context, *TLPredefinedUpdatePredefinedUsername) (*PredefinedUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PredefinedUpdatePredefinedUsername not implemented")
}
func (UnimplementedRPCPredefinedServer) PredefinedUpdatePredefinedProfile(context.Context, *TLPredefinedUpdatePredefinedProfile) (*PredefinedUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PredefinedUpdatePredefinedProfile not implemented")
}
func (UnimplementedRPCPredefinedServer) PredefinedUpdatePredefinedVerified(context.Context, *TLPredefinedUpdatePredefinedVerified) (*PredefinedUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PredefinedUpdatePredefinedVerified not implemented")
}
func (UnimplementedRPCPredefinedServer) PredefinedUpdatePredefinedCode(context.Context, *TLPredefinedUpdatePredefinedCode) (*PredefinedUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PredefinedUpdatePredefinedCode not implemented")
}
func (UnimplementedRPCPredefinedServer) PredefinedGetPredefinedUser(context.Context, *TLPredefinedGetPredefinedUser) (*PredefinedUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PredefinedGetPredefinedUser not implemented")
}
func (UnimplementedRPCPredefinedServer) PredefinedGetPredefinedUsers(context.Context, *TLPredefinedGetPredefinedUsers) (*Vector_PredefinedUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PredefinedGetPredefinedUsers not implemented")
}
func (UnimplementedRPCPredefinedServer) testEmbeddedByValue() {}

// UnsafeRPCPredefinedServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCPredefinedServer will
// result in compilation errors.
type UnsafeRPCPredefinedServer interface {
	mustEmbedUnimplementedRPCPredefinedServer()
}

func RegisterRPCPredefinedServer(s grpc.ServiceRegistrar, srv RPCPredefinedServer) {
	// If the following call pancis, it indicates UnimplementedRPCPredefinedServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCPredefined_ServiceDesc, srv)
}

func _RPCPredefined_PredefinedCreatePredefinedUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPredefinedCreatePredefinedUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPredefinedServer).PredefinedCreatePredefinedUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPredefined_PredefinedCreatePredefinedUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPredefinedServer).PredefinedCreatePredefinedUser(ctx, req.(*TLPredefinedCreatePredefinedUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPredefined_PredefinedUpdatePredefinedUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPredefinedUpdatePredefinedUsername)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPredefinedServer).PredefinedUpdatePredefinedUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPredefined_PredefinedUpdatePredefinedUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPredefinedServer).PredefinedUpdatePredefinedUsername(ctx, req.(*TLPredefinedUpdatePredefinedUsername))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPredefined_PredefinedUpdatePredefinedProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPredefinedUpdatePredefinedProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPredefinedServer).PredefinedUpdatePredefinedProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPredefined_PredefinedUpdatePredefinedProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPredefinedServer).PredefinedUpdatePredefinedProfile(ctx, req.(*TLPredefinedUpdatePredefinedProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPredefined_PredefinedUpdatePredefinedVerified_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPredefinedUpdatePredefinedVerified)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPredefinedServer).PredefinedUpdatePredefinedVerified(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPredefined_PredefinedUpdatePredefinedVerified_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPredefinedServer).PredefinedUpdatePredefinedVerified(ctx, req.(*TLPredefinedUpdatePredefinedVerified))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPredefined_PredefinedUpdatePredefinedCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPredefinedUpdatePredefinedCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPredefinedServer).PredefinedUpdatePredefinedCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPredefined_PredefinedUpdatePredefinedCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPredefinedServer).PredefinedUpdatePredefinedCode(ctx, req.(*TLPredefinedUpdatePredefinedCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPredefined_PredefinedGetPredefinedUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPredefinedGetPredefinedUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPredefinedServer).PredefinedGetPredefinedUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPredefined_PredefinedGetPredefinedUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPredefinedServer).PredefinedGetPredefinedUser(ctx, req.(*TLPredefinedGetPredefinedUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPredefined_PredefinedGetPredefinedUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPredefinedGetPredefinedUsers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPredefinedServer).PredefinedGetPredefinedUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPredefined_PredefinedGetPredefinedUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPredefinedServer).PredefinedGetPredefinedUsers(ctx, req.(*TLPredefinedGetPredefinedUsers))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCPredefined_ServiceDesc is the grpc.ServiceDesc for RPCPredefined service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCPredefined_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCPredefined",
	HandlerType: (*RPCPredefinedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "predefined_createPredefinedUser",
			Handler:    _RPCPredefined_PredefinedCreatePredefinedUser_Handler,
		},
		{
			MethodName: "predefined_updatePredefinedUsername",
			Handler:    _RPCPredefined_PredefinedUpdatePredefinedUsername_Handler,
		},
		{
			MethodName: "predefined_updatePredefinedProfile",
			Handler:    _RPCPredefined_PredefinedUpdatePredefinedProfile_Handler,
		},
		{
			MethodName: "predefined_updatePredefinedVerified",
			Handler:    _RPCPredefined_PredefinedUpdatePredefinedVerified_Handler,
		},
		{
			MethodName: "predefined_updatePredefinedCode",
			Handler:    _RPCPredefined_PredefinedUpdatePredefinedCode_Handler,
		},
		{
			MethodName: "predefined_getPredefinedUser",
			Handler:    _RPCPredefined_PredefinedGetPredefinedUser_Handler,
		},
		{
			MethodName: "predefined_getPredefinedUsers",
			Handler:    _RPCPredefined_PredefinedGetPredefinedUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCPremium_HelpGetPremiumPromo_FullMethodName                 = "/mtproto.RPCPremium/help_getPremiumPromo"
	RPCPremium_PaymentsAssignAppStoreTransaction_FullMethodName   = "/mtproto.RPCPremium/payments_assignAppStoreTransaction"
	RPCPremium_PaymentsAssignPlayMarketTransaction_FullMethodName = "/mtproto.RPCPremium/payments_assignPlayMarketTransaction"
	RPCPremium_PaymentsCanPurchaseStore_FullMethodName            = "/mtproto.RPCPremium/payments_canPurchaseStore"
	RPCPremium_PaymentsCanPurchasePremium_FullMethodName          = "/mtproto.RPCPremium/payments_canPurchasePremium"
)

// RPCPremiumClient is the client API for RPCPremium service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCPremiumClient interface {
	HelpGetPremiumPromo(ctx context.Context, in *TLHelpGetPremiumPromo, opts ...grpc.CallOption) (*Help_PremiumPromo, error)
	PaymentsAssignAppStoreTransaction(ctx context.Context, in *TLPaymentsAssignAppStoreTransaction, opts ...grpc.CallOption) (*Updates, error)
	PaymentsAssignPlayMarketTransaction(ctx context.Context, in *TLPaymentsAssignPlayMarketTransaction, opts ...grpc.CallOption) (*Updates, error)
	PaymentsCanPurchaseStore(ctx context.Context, in *TLPaymentsCanPurchaseStore, opts ...grpc.CallOption) (*Bool, error)
	PaymentsCanPurchasePremium(ctx context.Context, in *TLPaymentsCanPurchasePremium, opts ...grpc.CallOption) (*Bool, error)
}

type rPCPremiumClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCPremiumClient(cc grpc.ClientConnInterface) RPCPremiumClient {
	return &rPCPremiumClient{cc}
}

func (c *rPCPremiumClient) HelpGetPremiumPromo(ctx context.Context, in *TLHelpGetPremiumPromo, opts ...grpc.CallOption) (*Help_PremiumPromo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Help_PremiumPromo)
	err := c.cc.Invoke(ctx, RPCPremium_HelpGetPremiumPromo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPremiumClient) PaymentsAssignAppStoreTransaction(ctx context.Context, in *TLPaymentsAssignAppStoreTransaction, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCPremium_PaymentsAssignAppStoreTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPremiumClient) PaymentsAssignPlayMarketTransaction(ctx context.Context, in *TLPaymentsAssignPlayMarketTransaction, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCPremium_PaymentsAssignPlayMarketTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPremiumClient) PaymentsCanPurchaseStore(ctx context.Context, in *TLPaymentsCanPurchaseStore, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCPremium_PaymentsCanPurchaseStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPremiumClient) PaymentsCanPurchasePremium(ctx context.Context, in *TLPaymentsCanPurchasePremium, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCPremium_PaymentsCanPurchasePremium_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCPremiumServer is the server API for RPCPremium service.
// All implementations should embed UnimplementedRPCPremiumServer
// for forward compatibility.
type RPCPremiumServer interface {
	HelpGetPremiumPromo(context.Context, *TLHelpGetPremiumPromo) (*Help_PremiumPromo, error)
	PaymentsAssignAppStoreTransaction(context.Context, *TLPaymentsAssignAppStoreTransaction) (*Updates, error)
	PaymentsAssignPlayMarketTransaction(context.Context, *TLPaymentsAssignPlayMarketTransaction) (*Updates, error)
	PaymentsCanPurchaseStore(context.Context, *TLPaymentsCanPurchaseStore) (*Bool, error)
	PaymentsCanPurchasePremium(context.Context, *TLPaymentsCanPurchasePremium) (*Bool, error)
}

// UnimplementedRPCPremiumServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCPremiumServer struct{}

func (UnimplementedRPCPremiumServer) HelpGetPremiumPromo(context.Context, *TLHelpGetPremiumPromo) (*Help_PremiumPromo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetPremiumPromo not implemented")
}
func (UnimplementedRPCPremiumServer) PaymentsAssignAppStoreTransaction(context.Context, *TLPaymentsAssignAppStoreTransaction) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsAssignAppStoreTransaction not implemented")
}
func (UnimplementedRPCPremiumServer) PaymentsAssignPlayMarketTransaction(context.Context, *TLPaymentsAssignPlayMarketTransaction) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsAssignPlayMarketTransaction not implemented")
}
func (UnimplementedRPCPremiumServer) PaymentsCanPurchaseStore(context.Context, *TLPaymentsCanPurchaseStore) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsCanPurchaseStore not implemented")
}
func (UnimplementedRPCPremiumServer) PaymentsCanPurchasePremium(context.Context, *TLPaymentsCanPurchasePremium) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsCanPurchasePremium not implemented")
}
func (UnimplementedRPCPremiumServer) testEmbeddedByValue() {}

// UnsafeRPCPremiumServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCPremiumServer will
// result in compilation errors.
type UnsafeRPCPremiumServer interface {
	mustEmbedUnimplementedRPCPremiumServer()
}

func RegisterRPCPremiumServer(s grpc.ServiceRegistrar, srv RPCPremiumServer) {
	// If the following call pancis, it indicates UnimplementedRPCPremiumServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCPremium_ServiceDesc, srv)
}

func _RPCPremium_HelpGetPremiumPromo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetPremiumPromo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPremiumServer).HelpGetPremiumPromo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPremium_HelpGetPremiumPromo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPremiumServer).HelpGetPremiumPromo(ctx, req.(*TLHelpGetPremiumPromo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPremium_PaymentsAssignAppStoreTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsAssignAppStoreTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPremiumServer).PaymentsAssignAppStoreTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPremium_PaymentsAssignAppStoreTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPremiumServer).PaymentsAssignAppStoreTransaction(ctx, req.(*TLPaymentsAssignAppStoreTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPremium_PaymentsAssignPlayMarketTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsAssignPlayMarketTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPremiumServer).PaymentsAssignPlayMarketTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPremium_PaymentsAssignPlayMarketTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPremiumServer).PaymentsAssignPlayMarketTransaction(ctx, req.(*TLPaymentsAssignPlayMarketTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPremium_PaymentsCanPurchaseStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsCanPurchaseStore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPremiumServer).PaymentsCanPurchaseStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPremium_PaymentsCanPurchaseStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPremiumServer).PaymentsCanPurchaseStore(ctx, req.(*TLPaymentsCanPurchaseStore))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPremium_PaymentsCanPurchasePremium_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsCanPurchasePremium)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPremiumServer).PaymentsCanPurchasePremium(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPremium_PaymentsCanPurchasePremium_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPremiumServer).PaymentsCanPurchasePremium(ctx, req.(*TLPaymentsCanPurchasePremium))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCPremium_ServiceDesc is the grpc.ServiceDesc for RPCPremium service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCPremium_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCPremium",
	HandlerType: (*RPCPremiumServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "help_getPremiumPromo",
			Handler:    _RPCPremium_HelpGetPremiumPromo_Handler,
		},
		{
			MethodName: "payments_assignAppStoreTransaction",
			Handler:    _RPCPremium_PaymentsAssignAppStoreTransaction_Handler,
		},
		{
			MethodName: "payments_assignPlayMarketTransaction",
			Handler:    _RPCPremium_PaymentsAssignPlayMarketTransaction_Handler,
		},
		{
			MethodName: "payments_canPurchaseStore",
			Handler:    _RPCPremium_PaymentsCanPurchaseStore_Handler,
		},
		{
			MethodName: "payments_canPurchasePremium",
			Handler:    _RPCPremium_PaymentsCanPurchasePremium_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCPreparedInlineMessages_MessagesSavePreparedInlineMessage_FullMethodName = "/mtproto.RPCPreparedInlineMessages/messages_savePreparedInlineMessage"
	RPCPreparedInlineMessages_MessagesGetPreparedInlineMessage_FullMethodName  = "/mtproto.RPCPreparedInlineMessages/messages_getPreparedInlineMessage"
)

// RPCPreparedInlineMessagesClient is the client API for RPCPreparedInlineMessages service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCPreparedInlineMessagesClient interface {
	MessagesSavePreparedInlineMessage(ctx context.Context, in *TLMessagesSavePreparedInlineMessage, opts ...grpc.CallOption) (*Messages_BotPreparedInlineMessage, error)
	MessagesGetPreparedInlineMessage(ctx context.Context, in *TLMessagesGetPreparedInlineMessage, opts ...grpc.CallOption) (*Messages_PreparedInlineMessage, error)
}

type rPCPreparedInlineMessagesClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCPreparedInlineMessagesClient(cc grpc.ClientConnInterface) RPCPreparedInlineMessagesClient {
	return &rPCPreparedInlineMessagesClient{cc}
}

func (c *rPCPreparedInlineMessagesClient) MessagesSavePreparedInlineMessage(ctx context.Context, in *TLMessagesSavePreparedInlineMessage, opts ...grpc.CallOption) (*Messages_BotPreparedInlineMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_BotPreparedInlineMessage)
	err := c.cc.Invoke(ctx, RPCPreparedInlineMessages_MessagesSavePreparedInlineMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPreparedInlineMessagesClient) MessagesGetPreparedInlineMessage(ctx context.Context, in *TLMessagesGetPreparedInlineMessage, opts ...grpc.CallOption) (*Messages_PreparedInlineMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_PreparedInlineMessage)
	err := c.cc.Invoke(ctx, RPCPreparedInlineMessages_MessagesGetPreparedInlineMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCPreparedInlineMessagesServer is the server API for RPCPreparedInlineMessages service.
// All implementations should embed UnimplementedRPCPreparedInlineMessagesServer
// for forward compatibility.
type RPCPreparedInlineMessagesServer interface {
	MessagesSavePreparedInlineMessage(context.Context, *TLMessagesSavePreparedInlineMessage) (*Messages_BotPreparedInlineMessage, error)
	MessagesGetPreparedInlineMessage(context.Context, *TLMessagesGetPreparedInlineMessage) (*Messages_PreparedInlineMessage, error)
}

// UnimplementedRPCPreparedInlineMessagesServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCPreparedInlineMessagesServer struct{}

func (UnimplementedRPCPreparedInlineMessagesServer) MessagesSavePreparedInlineMessage(context.Context, *TLMessagesSavePreparedInlineMessage) (*Messages_BotPreparedInlineMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSavePreparedInlineMessage not implemented")
}
func (UnimplementedRPCPreparedInlineMessagesServer) MessagesGetPreparedInlineMessage(context.Context, *TLMessagesGetPreparedInlineMessage) (*Messages_PreparedInlineMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetPreparedInlineMessage not implemented")
}
func (UnimplementedRPCPreparedInlineMessagesServer) testEmbeddedByValue() {}

// UnsafeRPCPreparedInlineMessagesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCPreparedInlineMessagesServer will
// result in compilation errors.
type UnsafeRPCPreparedInlineMessagesServer interface {
	mustEmbedUnimplementedRPCPreparedInlineMessagesServer()
}

func RegisterRPCPreparedInlineMessagesServer(s grpc.ServiceRegistrar, srv RPCPreparedInlineMessagesServer) {
	// If the following call pancis, it indicates UnimplementedRPCPreparedInlineMessagesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCPreparedInlineMessages_ServiceDesc, srv)
}

func _RPCPreparedInlineMessages_MessagesSavePreparedInlineMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSavePreparedInlineMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPreparedInlineMessagesServer).MessagesSavePreparedInlineMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPreparedInlineMessages_MessagesSavePreparedInlineMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPreparedInlineMessagesServer).MessagesSavePreparedInlineMessage(ctx, req.(*TLMessagesSavePreparedInlineMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPreparedInlineMessages_MessagesGetPreparedInlineMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetPreparedInlineMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPreparedInlineMessagesServer).MessagesGetPreparedInlineMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPreparedInlineMessages_MessagesGetPreparedInlineMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPreparedInlineMessagesServer).MessagesGetPreparedInlineMessage(ctx, req.(*TLMessagesGetPreparedInlineMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCPreparedInlineMessages_ServiceDesc is the grpc.ServiceDesc for RPCPreparedInlineMessages service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCPreparedInlineMessages_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCPreparedInlineMessages",
	HandlerType: (*RPCPreparedInlineMessagesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "messages_savePreparedInlineMessage",
			Handler:    _RPCPreparedInlineMessages_MessagesSavePreparedInlineMessage_Handler,
		},
		{
			MethodName: "messages_getPreparedInlineMessage",
			Handler:    _RPCPreparedInlineMessages_MessagesGetPreparedInlineMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCPrivacySettings_AccountGetPrivacy_FullMethodName                  = "/mtproto.RPCPrivacySettings/account_getPrivacy"
	RPCPrivacySettings_AccountSetPrivacy_FullMethodName                  = "/mtproto.RPCPrivacySettings/account_setPrivacy"
	RPCPrivacySettings_AccountGetGlobalPrivacySettings_FullMethodName    = "/mtproto.RPCPrivacySettings/account_getGlobalPrivacySettings"
	RPCPrivacySettings_AccountSetGlobalPrivacySettings_FullMethodName    = "/mtproto.RPCPrivacySettings/account_setGlobalPrivacySettings"
	RPCPrivacySettings_UsersGetRequirementsToContact_FullMethodName      = "/mtproto.RPCPrivacySettings/users_getRequirementsToContact"
	RPCPrivacySettings_MessagesSetDefaultHistoryTTL_FullMethodName       = "/mtproto.RPCPrivacySettings/messages_setDefaultHistoryTTL"
	RPCPrivacySettings_MessagesGetDefaultHistoryTTL_FullMethodName       = "/mtproto.RPCPrivacySettings/messages_getDefaultHistoryTTL"
	RPCPrivacySettings_UsersGetIsPremiumRequiredToContact_FullMethodName = "/mtproto.RPCPrivacySettings/users_getIsPremiumRequiredToContact"
)

// RPCPrivacySettingsClient is the client API for RPCPrivacySettings service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCPrivacySettingsClient interface {
	AccountGetPrivacy(ctx context.Context, in *TLAccountGetPrivacy, opts ...grpc.CallOption) (*Account_PrivacyRules, error)
	AccountSetPrivacy(ctx context.Context, in *TLAccountSetPrivacy, opts ...grpc.CallOption) (*Account_PrivacyRules, error)
	AccountGetGlobalPrivacySettings(ctx context.Context, in *TLAccountGetGlobalPrivacySettings, opts ...grpc.CallOption) (*GlobalPrivacySettings, error)
	AccountSetGlobalPrivacySettings(ctx context.Context, in *TLAccountSetGlobalPrivacySettings, opts ...grpc.CallOption) (*GlobalPrivacySettings, error)
	UsersGetRequirementsToContact(ctx context.Context, in *TLUsersGetRequirementsToContact, opts ...grpc.CallOption) (*Vector_RequirementToContact, error)
	MessagesSetDefaultHistoryTTL(ctx context.Context, in *TLMessagesSetDefaultHistoryTTL, opts ...grpc.CallOption) (*Bool, error)
	MessagesGetDefaultHistoryTTL(ctx context.Context, in *TLMessagesGetDefaultHistoryTTL, opts ...grpc.CallOption) (*DefaultHistoryTTL, error)
	UsersGetIsPremiumRequiredToContact(ctx context.Context, in *TLUsersGetIsPremiumRequiredToContact, opts ...grpc.CallOption) (*Vector_Bool, error)
}

type rPCPrivacySettingsClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCPrivacySettingsClient(cc grpc.ClientConnInterface) RPCPrivacySettingsClient {
	return &rPCPrivacySettingsClient{cc}
}

func (c *rPCPrivacySettingsClient) AccountGetPrivacy(ctx context.Context, in *TLAccountGetPrivacy, opts ...grpc.CallOption) (*Account_PrivacyRules, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account_PrivacyRules)
	err := c.cc.Invoke(ctx, RPCPrivacySettings_AccountGetPrivacy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPrivacySettingsClient) AccountSetPrivacy(ctx context.Context, in *TLAccountSetPrivacy, opts ...grpc.CallOption) (*Account_PrivacyRules, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account_PrivacyRules)
	err := c.cc.Invoke(ctx, RPCPrivacySettings_AccountSetPrivacy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPrivacySettingsClient) AccountGetGlobalPrivacySettings(ctx context.Context, in *TLAccountGetGlobalPrivacySettings, opts ...grpc.CallOption) (*GlobalPrivacySettings, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GlobalPrivacySettings)
	err := c.cc.Invoke(ctx, RPCPrivacySettings_AccountGetGlobalPrivacySettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPrivacySettingsClient) AccountSetGlobalPrivacySettings(ctx context.Context, in *TLAccountSetGlobalPrivacySettings, opts ...grpc.CallOption) (*GlobalPrivacySettings, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GlobalPrivacySettings)
	err := c.cc.Invoke(ctx, RPCPrivacySettings_AccountSetGlobalPrivacySettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPrivacySettingsClient) UsersGetRequirementsToContact(ctx context.Context, in *TLUsersGetRequirementsToContact, opts ...grpc.CallOption) (*Vector_RequirementToContact, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_RequirementToContact)
	err := c.cc.Invoke(ctx, RPCPrivacySettings_UsersGetRequirementsToContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPrivacySettingsClient) MessagesSetDefaultHistoryTTL(ctx context.Context, in *TLMessagesSetDefaultHistoryTTL, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCPrivacySettings_MessagesSetDefaultHistoryTTL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPrivacySettingsClient) MessagesGetDefaultHistoryTTL(ctx context.Context, in *TLMessagesGetDefaultHistoryTTL, opts ...grpc.CallOption) (*DefaultHistoryTTL, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DefaultHistoryTTL)
	err := c.cc.Invoke(ctx, RPCPrivacySettings_MessagesGetDefaultHistoryTTL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPrivacySettingsClient) UsersGetIsPremiumRequiredToContact(ctx context.Context, in *TLUsersGetIsPremiumRequiredToContact, opts ...grpc.CallOption) (*Vector_Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_Bool)
	err := c.cc.Invoke(ctx, RPCPrivacySettings_UsersGetIsPremiumRequiredToContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCPrivacySettingsServer is the server API for RPCPrivacySettings service.
// All implementations should embed UnimplementedRPCPrivacySettingsServer
// for forward compatibility.
type RPCPrivacySettingsServer interface {
	AccountGetPrivacy(context.Context, *TLAccountGetPrivacy) (*Account_PrivacyRules, error)
	AccountSetPrivacy(context.Context, *TLAccountSetPrivacy) (*Account_PrivacyRules, error)
	AccountGetGlobalPrivacySettings(context.Context, *TLAccountGetGlobalPrivacySettings) (*GlobalPrivacySettings, error)
	AccountSetGlobalPrivacySettings(context.Context, *TLAccountSetGlobalPrivacySettings) (*GlobalPrivacySettings, error)
	UsersGetRequirementsToContact(context.Context, *TLUsersGetRequirementsToContact) (*Vector_RequirementToContact, error)
	MessagesSetDefaultHistoryTTL(context.Context, *TLMessagesSetDefaultHistoryTTL) (*Bool, error)
	MessagesGetDefaultHistoryTTL(context.Context, *TLMessagesGetDefaultHistoryTTL) (*DefaultHistoryTTL, error)
	UsersGetIsPremiumRequiredToContact(context.Context, *TLUsersGetIsPremiumRequiredToContact) (*Vector_Bool, error)
}

// UnimplementedRPCPrivacySettingsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCPrivacySettingsServer struct{}

func (UnimplementedRPCPrivacySettingsServer) AccountGetPrivacy(context.Context, *TLAccountGetPrivacy) (*Account_PrivacyRules, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetPrivacy not implemented")
}
func (UnimplementedRPCPrivacySettingsServer) AccountSetPrivacy(context.Context, *TLAccountSetPrivacy) (*Account_PrivacyRules, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSetPrivacy not implemented")
}
func (UnimplementedRPCPrivacySettingsServer) AccountGetGlobalPrivacySettings(context.Context, *TLAccountGetGlobalPrivacySettings) (*GlobalPrivacySettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetGlobalPrivacySettings not implemented")
}
func (UnimplementedRPCPrivacySettingsServer) AccountSetGlobalPrivacySettings(context.Context, *TLAccountSetGlobalPrivacySettings) (*GlobalPrivacySettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSetGlobalPrivacySettings not implemented")
}
func (UnimplementedRPCPrivacySettingsServer) UsersGetRequirementsToContact(context.Context, *TLUsersGetRequirementsToContact) (*Vector_RequirementToContact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersGetRequirementsToContact not implemented")
}
func (UnimplementedRPCPrivacySettingsServer) MessagesSetDefaultHistoryTTL(context.Context, *TLMessagesSetDefaultHistoryTTL) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSetDefaultHistoryTTL not implemented")
}
func (UnimplementedRPCPrivacySettingsServer) MessagesGetDefaultHistoryTTL(context.Context, *TLMessagesGetDefaultHistoryTTL) (*DefaultHistoryTTL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetDefaultHistoryTTL not implemented")
}
func (UnimplementedRPCPrivacySettingsServer) UsersGetIsPremiumRequiredToContact(context.Context, *TLUsersGetIsPremiumRequiredToContact) (*Vector_Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersGetIsPremiumRequiredToContact not implemented")
}
func (UnimplementedRPCPrivacySettingsServer) testEmbeddedByValue() {}

// UnsafeRPCPrivacySettingsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCPrivacySettingsServer will
// result in compilation errors.
type UnsafeRPCPrivacySettingsServer interface {
	mustEmbedUnimplementedRPCPrivacySettingsServer()
}

func RegisterRPCPrivacySettingsServer(s grpc.ServiceRegistrar, srv RPCPrivacySettingsServer) {
	// If the following call pancis, it indicates UnimplementedRPCPrivacySettingsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCPrivacySettings_ServiceDesc, srv)
}

func _RPCPrivacySettings_AccountGetPrivacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetPrivacy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPrivacySettingsServer).AccountGetPrivacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPrivacySettings_AccountGetPrivacy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPrivacySettingsServer).AccountGetPrivacy(ctx, req.(*TLAccountGetPrivacy))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPrivacySettings_AccountSetPrivacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSetPrivacy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPrivacySettingsServer).AccountSetPrivacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPrivacySettings_AccountSetPrivacy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPrivacySettingsServer).AccountSetPrivacy(ctx, req.(*TLAccountSetPrivacy))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPrivacySettings_AccountGetGlobalPrivacySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetGlobalPrivacySettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPrivacySettingsServer).AccountGetGlobalPrivacySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPrivacySettings_AccountGetGlobalPrivacySettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPrivacySettingsServer).AccountGetGlobalPrivacySettings(ctx, req.(*TLAccountGetGlobalPrivacySettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPrivacySettings_AccountSetGlobalPrivacySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSetGlobalPrivacySettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPrivacySettingsServer).AccountSetGlobalPrivacySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPrivacySettings_AccountSetGlobalPrivacySettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPrivacySettingsServer).AccountSetGlobalPrivacySettings(ctx, req.(*TLAccountSetGlobalPrivacySettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPrivacySettings_UsersGetRequirementsToContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUsersGetRequirementsToContact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPrivacySettingsServer).UsersGetRequirementsToContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPrivacySettings_UsersGetRequirementsToContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPrivacySettingsServer).UsersGetRequirementsToContact(ctx, req.(*TLUsersGetRequirementsToContact))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPrivacySettings_MessagesSetDefaultHistoryTTL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSetDefaultHistoryTTL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPrivacySettingsServer).MessagesSetDefaultHistoryTTL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPrivacySettings_MessagesSetDefaultHistoryTTL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPrivacySettingsServer).MessagesSetDefaultHistoryTTL(ctx, req.(*TLMessagesSetDefaultHistoryTTL))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPrivacySettings_MessagesGetDefaultHistoryTTL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetDefaultHistoryTTL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPrivacySettingsServer).MessagesGetDefaultHistoryTTL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPrivacySettings_MessagesGetDefaultHistoryTTL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPrivacySettingsServer).MessagesGetDefaultHistoryTTL(ctx, req.(*TLMessagesGetDefaultHistoryTTL))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPrivacySettings_UsersGetIsPremiumRequiredToContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUsersGetIsPremiumRequiredToContact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPrivacySettingsServer).UsersGetIsPremiumRequiredToContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPrivacySettings_UsersGetIsPremiumRequiredToContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPrivacySettingsServer).UsersGetIsPremiumRequiredToContact(ctx, req.(*TLUsersGetIsPremiumRequiredToContact))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCPrivacySettings_ServiceDesc is the grpc.ServiceDesc for RPCPrivacySettings service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCPrivacySettings_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCPrivacySettings",
	HandlerType: (*RPCPrivacySettingsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "account_getPrivacy",
			Handler:    _RPCPrivacySettings_AccountGetPrivacy_Handler,
		},
		{
			MethodName: "account_setPrivacy",
			Handler:    _RPCPrivacySettings_AccountSetPrivacy_Handler,
		},
		{
			MethodName: "account_getGlobalPrivacySettings",
			Handler:    _RPCPrivacySettings_AccountGetGlobalPrivacySettings_Handler,
		},
		{
			MethodName: "account_setGlobalPrivacySettings",
			Handler:    _RPCPrivacySettings_AccountSetGlobalPrivacySettings_Handler,
		},
		{
			MethodName: "users_getRequirementsToContact",
			Handler:    _RPCPrivacySettings_UsersGetRequirementsToContact_Handler,
		},
		{
			MethodName: "messages_setDefaultHistoryTTL",
			Handler:    _RPCPrivacySettings_MessagesSetDefaultHistoryTTL_Handler,
		},
		{
			MethodName: "messages_getDefaultHistoryTTL",
			Handler:    _RPCPrivacySettings_MessagesGetDefaultHistoryTTL_Handler,
		},
		{
			MethodName: "users_getIsPremiumRequiredToContact",
			Handler:    _RPCPrivacySettings_UsersGetIsPremiumRequiredToContact_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCProfileLinks_ContactsExportContactToken_FullMethodName = "/mtproto.RPCProfileLinks/contacts_exportContactToken"
	RPCProfileLinks_ContactsImportContactToken_FullMethodName = "/mtproto.RPCProfileLinks/contacts_importContactToken"
)

// RPCProfileLinksClient is the client API for RPCProfileLinks service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCProfileLinksClient interface {
	ContactsExportContactToken(ctx context.Context, in *TLContactsExportContactToken, opts ...grpc.CallOption) (*ExportedContactToken, error)
	ContactsImportContactToken(ctx context.Context, in *TLContactsImportContactToken, opts ...grpc.CallOption) (*User, error)
}

type rPCProfileLinksClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCProfileLinksClient(cc grpc.ClientConnInterface) RPCProfileLinksClient {
	return &rPCProfileLinksClient{cc}
}

func (c *rPCProfileLinksClient) ContactsExportContactToken(ctx context.Context, in *TLContactsExportContactToken, opts ...grpc.CallOption) (*ExportedContactToken, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportedContactToken)
	err := c.cc.Invoke(ctx, RPCProfileLinks_ContactsExportContactToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCProfileLinksClient) ContactsImportContactToken(ctx context.Context, in *TLContactsImportContactToken, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, RPCProfileLinks_ContactsImportContactToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCProfileLinksServer is the server API for RPCProfileLinks service.
// All implementations should embed UnimplementedRPCProfileLinksServer
// for forward compatibility.
type RPCProfileLinksServer interface {
	ContactsExportContactToken(context.Context, *TLContactsExportContactToken) (*ExportedContactToken, error)
	ContactsImportContactToken(context.Context, *TLContactsImportContactToken) (*User, error)
}

// UnimplementedRPCProfileLinksServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCProfileLinksServer struct{}

func (UnimplementedRPCProfileLinksServer) ContactsExportContactToken(context.Context, *TLContactsExportContactToken) (*ExportedContactToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsExportContactToken not implemented")
}
func (UnimplementedRPCProfileLinksServer) ContactsImportContactToken(context.Context, *TLContactsImportContactToken) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsImportContactToken not implemented")
}
func (UnimplementedRPCProfileLinksServer) testEmbeddedByValue() {}

// UnsafeRPCProfileLinksServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCProfileLinksServer will
// result in compilation errors.
type UnsafeRPCProfileLinksServer interface {
	mustEmbedUnimplementedRPCProfileLinksServer()
}

func RegisterRPCProfileLinksServer(s grpc.ServiceRegistrar, srv RPCProfileLinksServer) {
	// If the following call pancis, it indicates UnimplementedRPCProfileLinksServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCProfileLinks_ServiceDesc, srv)
}

func _RPCProfileLinks_ContactsExportContactToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsExportContactToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCProfileLinksServer).ContactsExportContactToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCProfileLinks_ContactsExportContactToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCProfileLinksServer).ContactsExportContactToken(ctx, req.(*TLContactsExportContactToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCProfileLinks_ContactsImportContactToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsImportContactToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCProfileLinksServer).ContactsImportContactToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCProfileLinks_ContactsImportContactToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCProfileLinksServer).ContactsImportContactToken(ctx, req.(*TLContactsImportContactToken))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCProfileLinks_ServiceDesc is the grpc.ServiceDesc for RPCProfileLinks service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCProfileLinks_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCProfileLinks",
	HandlerType: (*RPCProfileLinksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "contacts_exportContactToken",
			Handler:    _RPCProfileLinks_ContactsExportContactToken_Handler,
		},
		{
			MethodName: "contacts_importContactToken",
			Handler:    _RPCProfileLinks_ContactsImportContactToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCPromoData_HelpGetPromoData_FullMethodName  = "/mtproto.RPCPromoData/help_getPromoData"
	RPCPromoData_HelpHidePromoData_FullMethodName = "/mtproto.RPCPromoData/help_hidePromoData"
)

// RPCPromoDataClient is the client API for RPCPromoData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCPromoDataClient interface {
	HelpGetPromoData(ctx context.Context, in *TLHelpGetPromoData, opts ...grpc.CallOption) (*Help_PromoData, error)
	HelpHidePromoData(ctx context.Context, in *TLHelpHidePromoData, opts ...grpc.CallOption) (*Bool, error)
}

type rPCPromoDataClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCPromoDataClient(cc grpc.ClientConnInterface) RPCPromoDataClient {
	return &rPCPromoDataClient{cc}
}

func (c *rPCPromoDataClient) HelpGetPromoData(ctx context.Context, in *TLHelpGetPromoData, opts ...grpc.CallOption) (*Help_PromoData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Help_PromoData)
	err := c.cc.Invoke(ctx, RPCPromoData_HelpGetPromoData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPromoDataClient) HelpHidePromoData(ctx context.Context, in *TLHelpHidePromoData, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCPromoData_HelpHidePromoData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCPromoDataServer is the server API for RPCPromoData service.
// All implementations should embed UnimplementedRPCPromoDataServer
// for forward compatibility.
type RPCPromoDataServer interface {
	HelpGetPromoData(context.Context, *TLHelpGetPromoData) (*Help_PromoData, error)
	HelpHidePromoData(context.Context, *TLHelpHidePromoData) (*Bool, error)
}

// UnimplementedRPCPromoDataServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCPromoDataServer struct{}

func (UnimplementedRPCPromoDataServer) HelpGetPromoData(context.Context, *TLHelpGetPromoData) (*Help_PromoData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetPromoData not implemented")
}
func (UnimplementedRPCPromoDataServer) HelpHidePromoData(context.Context, *TLHelpHidePromoData) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpHidePromoData not implemented")
}
func (UnimplementedRPCPromoDataServer) testEmbeddedByValue() {}

// UnsafeRPCPromoDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCPromoDataServer will
// result in compilation errors.
type UnsafeRPCPromoDataServer interface {
	mustEmbedUnimplementedRPCPromoDataServer()
}

func RegisterRPCPromoDataServer(s grpc.ServiceRegistrar, srv RPCPromoDataServer) {
	// If the following call pancis, it indicates UnimplementedRPCPromoDataServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCPromoData_ServiceDesc, srv)
}

func _RPCPromoData_HelpGetPromoData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetPromoData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPromoDataServer).HelpGetPromoData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPromoData_HelpGetPromoData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPromoDataServer).HelpGetPromoData(ctx, req.(*TLHelpGetPromoData))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPromoData_HelpHidePromoData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpHidePromoData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPromoDataServer).HelpHidePromoData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPromoData_HelpHidePromoData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPromoDataServer).HelpHidePromoData(ctx, req.(*TLHelpHidePromoData))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCPromoData_ServiceDesc is the grpc.ServiceDesc for RPCPromoData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCPromoData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCPromoData",
	HandlerType: (*RPCPromoDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "help_getPromoData",
			Handler:    _RPCPromoData_HelpGetPromoData_Handler,
		},
		{
			MethodName: "help_hidePromoData",
			Handler:    _RPCPromoData_HelpHidePromoData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCQrCode_AuthExportLoginToken_FullMethodName = "/mtproto.RPCQrCode/auth_exportLoginToken"
	RPCQrCode_AuthImportLoginToken_FullMethodName = "/mtproto.RPCQrCode/auth_importLoginToken"
	RPCQrCode_AuthAcceptLoginToken_FullMethodName = "/mtproto.RPCQrCode/auth_acceptLoginToken"
)

// RPCQrCodeClient is the client API for RPCQrCode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCQrCodeClient interface {
	AuthExportLoginToken(ctx context.Context, in *TLAuthExportLoginToken, opts ...grpc.CallOption) (*Auth_LoginToken, error)
	AuthImportLoginToken(ctx context.Context, in *TLAuthImportLoginToken, opts ...grpc.CallOption) (*Auth_LoginToken, error)
	AuthAcceptLoginToken(ctx context.Context, in *TLAuthAcceptLoginToken, opts ...grpc.CallOption) (*Authorization, error)
}

type rPCQrCodeClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCQrCodeClient(cc grpc.ClientConnInterface) RPCQrCodeClient {
	return &rPCQrCodeClient{cc}
}

func (c *rPCQrCodeClient) AuthExportLoginToken(ctx context.Context, in *TLAuthExportLoginToken, opts ...grpc.CallOption) (*Auth_LoginToken, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Auth_LoginToken)
	err := c.cc.Invoke(ctx, RPCQrCode_AuthExportLoginToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCQrCodeClient) AuthImportLoginToken(ctx context.Context, in *TLAuthImportLoginToken, opts ...grpc.CallOption) (*Auth_LoginToken, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Auth_LoginToken)
	err := c.cc.Invoke(ctx, RPCQrCode_AuthImportLoginToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCQrCodeClient) AuthAcceptLoginToken(ctx context.Context, in *TLAuthAcceptLoginToken, opts ...grpc.CallOption) (*Authorization, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Authorization)
	err := c.cc.Invoke(ctx, RPCQrCode_AuthAcceptLoginToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCQrCodeServer is the server API for RPCQrCode service.
// All implementations should embed UnimplementedRPCQrCodeServer
// for forward compatibility.
type RPCQrCodeServer interface {
	AuthExportLoginToken(context.Context, *TLAuthExportLoginToken) (*Auth_LoginToken, error)
	AuthImportLoginToken(context.Context, *TLAuthImportLoginToken) (*Auth_LoginToken, error)
	AuthAcceptLoginToken(context.Context, *TLAuthAcceptLoginToken) (*Authorization, error)
}

// UnimplementedRPCQrCodeServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCQrCodeServer struct{}

func (UnimplementedRPCQrCodeServer) AuthExportLoginToken(context.Context, *TLAuthExportLoginToken) (*Auth_LoginToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthExportLoginToken not implemented")
}
func (UnimplementedRPCQrCodeServer) AuthImportLoginToken(context.Context, *TLAuthImportLoginToken) (*Auth_LoginToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthImportLoginToken not implemented")
}
func (UnimplementedRPCQrCodeServer) AuthAcceptLoginToken(context.Context, *TLAuthAcceptLoginToken) (*Authorization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthAcceptLoginToken not implemented")
}
func (UnimplementedRPCQrCodeServer) testEmbeddedByValue() {}

// UnsafeRPCQrCodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCQrCodeServer will
// result in compilation errors.
type UnsafeRPCQrCodeServer interface {
	mustEmbedUnimplementedRPCQrCodeServer()
}

func RegisterRPCQrCodeServer(s grpc.ServiceRegistrar, srv RPCQrCodeServer) {
	// If the following call pancis, it indicates UnimplementedRPCQrCodeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCQrCode_ServiceDesc, srv)
}

func _RPCQrCode_AuthExportLoginToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthExportLoginToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCQrCodeServer).AuthExportLoginToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCQrCode_AuthExportLoginToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCQrCodeServer).AuthExportLoginToken(ctx, req.(*TLAuthExportLoginToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCQrCode_AuthImportLoginToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthImportLoginToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCQrCodeServer).AuthImportLoginToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCQrCode_AuthImportLoginToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCQrCodeServer).AuthImportLoginToken(ctx, req.(*TLAuthImportLoginToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCQrCode_AuthAcceptLoginToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthAcceptLoginToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCQrCodeServer).AuthAcceptLoginToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCQrCode_AuthAcceptLoginToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCQrCodeServer).AuthAcceptLoginToken(ctx, req.(*TLAuthAcceptLoginToken))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCQrCode_ServiceDesc is the grpc.ServiceDesc for RPCQrCode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCQrCode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCQrCode",
	HandlerType: (*RPCQrCodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "auth_exportLoginToken",
			Handler:    _RPCQrCode_AuthExportLoginToken_Handler,
		},
		{
			MethodName: "auth_importLoginToken",
			Handler:    _RPCQrCode_AuthImportLoginToken_Handler,
		},
		{
			MethodName: "auth_acceptLoginToken",
			Handler:    _RPCQrCode_AuthAcceptLoginToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCReactionNotification_AccountGetReactionsNotifySettings_FullMethodName = "/mtproto.RPCReactionNotification/account_getReactionsNotifySettings"
	RPCReactionNotification_AccountSetReactionsNotifySettings_FullMethodName = "/mtproto.RPCReactionNotification/account_setReactionsNotifySettings"
)

// RPCReactionNotificationClient is the client API for RPCReactionNotification service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCReactionNotificationClient interface {
	AccountGetReactionsNotifySettings(ctx context.Context, in *TLAccountGetReactionsNotifySettings, opts ...grpc.CallOption) (*ReactionsNotifySettings, error)
	AccountSetReactionsNotifySettings(ctx context.Context, in *TLAccountSetReactionsNotifySettings, opts ...grpc.CallOption) (*ReactionsNotifySettings, error)
}

type rPCReactionNotificationClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCReactionNotificationClient(cc grpc.ClientConnInterface) RPCReactionNotificationClient {
	return &rPCReactionNotificationClient{cc}
}

func (c *rPCReactionNotificationClient) AccountGetReactionsNotifySettings(ctx context.Context, in *TLAccountGetReactionsNotifySettings, opts ...grpc.CallOption) (*ReactionsNotifySettings, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReactionsNotifySettings)
	err := c.cc.Invoke(ctx, RPCReactionNotification_AccountGetReactionsNotifySettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCReactionNotificationClient) AccountSetReactionsNotifySettings(ctx context.Context, in *TLAccountSetReactionsNotifySettings, opts ...grpc.CallOption) (*ReactionsNotifySettings, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReactionsNotifySettings)
	err := c.cc.Invoke(ctx, RPCReactionNotification_AccountSetReactionsNotifySettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCReactionNotificationServer is the server API for RPCReactionNotification service.
// All implementations should embed UnimplementedRPCReactionNotificationServer
// for forward compatibility.
type RPCReactionNotificationServer interface {
	AccountGetReactionsNotifySettings(context.Context, *TLAccountGetReactionsNotifySettings) (*ReactionsNotifySettings, error)
	AccountSetReactionsNotifySettings(context.Context, *TLAccountSetReactionsNotifySettings) (*ReactionsNotifySettings, error)
}

// UnimplementedRPCReactionNotificationServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCReactionNotificationServer struct{}

func (UnimplementedRPCReactionNotificationServer) AccountGetReactionsNotifySettings(context.Context, *TLAccountGetReactionsNotifySettings) (*ReactionsNotifySettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetReactionsNotifySettings not implemented")
}
func (UnimplementedRPCReactionNotificationServer) AccountSetReactionsNotifySettings(context.Context, *TLAccountSetReactionsNotifySettings) (*ReactionsNotifySettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSetReactionsNotifySettings not implemented")
}
func (UnimplementedRPCReactionNotificationServer) testEmbeddedByValue() {}

// UnsafeRPCReactionNotificationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCReactionNotificationServer will
// result in compilation errors.
type UnsafeRPCReactionNotificationServer interface {
	mustEmbedUnimplementedRPCReactionNotificationServer()
}

func RegisterRPCReactionNotificationServer(s grpc.ServiceRegistrar, srv RPCReactionNotificationServer) {
	// If the following call pancis, it indicates UnimplementedRPCReactionNotificationServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCReactionNotification_ServiceDesc, srv)
}

func _RPCReactionNotification_AccountGetReactionsNotifySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetReactionsNotifySettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCReactionNotificationServer).AccountGetReactionsNotifySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCReactionNotification_AccountGetReactionsNotifySettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCReactionNotificationServer).AccountGetReactionsNotifySettings(ctx, req.(*TLAccountGetReactionsNotifySettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCReactionNotification_AccountSetReactionsNotifySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSetReactionsNotifySettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCReactionNotificationServer).AccountSetReactionsNotifySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCReactionNotification_AccountSetReactionsNotifySettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCReactionNotificationServer).AccountSetReactionsNotifySettings(ctx, req.(*TLAccountSetReactionsNotifySettings))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCReactionNotification_ServiceDesc is the grpc.ServiceDesc for RPCReactionNotification service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCReactionNotification_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCReactionNotification",
	HandlerType: (*RPCReactionNotificationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "account_getReactionsNotifySettings",
			Handler:    _RPCReactionNotification_AccountGetReactionsNotifySettings_Handler,
		},
		{
			MethodName: "account_setReactionsNotifySettings",
			Handler:    _RPCReactionNotification_AccountSetReactionsNotifySettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCReactions_MessagesSendReaction_FullMethodName              = "/mtproto.RPCReactions/messages_sendReaction"
	RPCReactions_MessagesGetMessagesReactions_FullMethodName      = "/mtproto.RPCReactions/messages_getMessagesReactions"
	RPCReactions_MessagesGetMessageReactionsList_FullMethodName   = "/mtproto.RPCReactions/messages_getMessageReactionsList"
	RPCReactions_MessagesSetChatAvailableReactions_FullMethodName = "/mtproto.RPCReactions/messages_setChatAvailableReactions"
	RPCReactions_MessagesGetAvailableReactions_FullMethodName     = "/mtproto.RPCReactions/messages_getAvailableReactions"
	RPCReactions_MessagesSetDefaultReaction_FullMethodName        = "/mtproto.RPCReactions/messages_setDefaultReaction"
	RPCReactions_MessagesGetUnreadReactions_FullMethodName        = "/mtproto.RPCReactions/messages_getUnreadReactions"
	RPCReactions_MessagesReadReactions_FullMethodName             = "/mtproto.RPCReactions/messages_readReactions"
	RPCReactions_MessagesReportReaction_FullMethodName            = "/mtproto.RPCReactions/messages_reportReaction"
	RPCReactions_MessagesGetTopReactions_FullMethodName           = "/mtproto.RPCReactions/messages_getTopReactions"
	RPCReactions_MessagesGetRecentReactions_FullMethodName        = "/mtproto.RPCReactions/messages_getRecentReactions"
	RPCReactions_MessagesClearRecentReactions_FullMethodName      = "/mtproto.RPCReactions/messages_clearRecentReactions"
	RPCReactions_MessagesSendPaidReaction_FullMethodName          = "/mtproto.RPCReactions/messages_sendPaidReaction"
	RPCReactions_MessagesTogglePaidReactionPrivacy_FullMethodName = "/mtproto.RPCReactions/messages_togglePaidReactionPrivacy"
	RPCReactions_MessagesGetPaidReactionPrivacy_FullMethodName    = "/mtproto.RPCReactions/messages_getPaidReactionPrivacy"
)

// RPCReactionsClient is the client API for RPCReactions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCReactionsClient interface {
	MessagesSendReaction(ctx context.Context, in *TLMessagesSendReaction, opts ...grpc.CallOption) (*Updates, error)
	MessagesGetMessagesReactions(ctx context.Context, in *TLMessagesGetMessagesReactions, opts ...grpc.CallOption) (*Updates, error)
	MessagesGetMessageReactionsList(ctx context.Context, in *TLMessagesGetMessageReactionsList, opts ...grpc.CallOption) (*Messages_MessageReactionsList, error)
	MessagesSetChatAvailableReactions(ctx context.Context, in *TLMessagesSetChatAvailableReactions, opts ...grpc.CallOption) (*Updates, error)
	MessagesGetAvailableReactions(ctx context.Context, in *TLMessagesGetAvailableReactions, opts ...grpc.CallOption) (*Messages_AvailableReactions, error)
	MessagesSetDefaultReaction(ctx context.Context, in *TLMessagesSetDefaultReaction, opts ...grpc.CallOption) (*Bool, error)
	MessagesGetUnreadReactions(ctx context.Context, in *TLMessagesGetUnreadReactions, opts ...grpc.CallOption) (*Messages_Messages, error)
	MessagesReadReactions(ctx context.Context, in *TLMessagesReadReactions, opts ...grpc.CallOption) (*Messages_AffectedHistory, error)
	MessagesReportReaction(ctx context.Context, in *TLMessagesReportReaction, opts ...grpc.CallOption) (*Bool, error)
	MessagesGetTopReactions(ctx context.Context, in *TLMessagesGetTopReactions, opts ...grpc.CallOption) (*Messages_Reactions, error)
	MessagesGetRecentReactions(ctx context.Context, in *TLMessagesGetRecentReactions, opts ...grpc.CallOption) (*Messages_Reactions, error)
	MessagesClearRecentReactions(ctx context.Context, in *TLMessagesClearRecentReactions, opts ...grpc.CallOption) (*Bool, error)
	MessagesSendPaidReaction(ctx context.Context, in *TLMessagesSendPaidReaction, opts ...grpc.CallOption) (*Updates, error)
	MessagesTogglePaidReactionPrivacy(ctx context.Context, in *TLMessagesTogglePaidReactionPrivacy, opts ...grpc.CallOption) (*Bool, error)
	MessagesGetPaidReactionPrivacy(ctx context.Context, in *TLMessagesGetPaidReactionPrivacy, opts ...grpc.CallOption) (*Updates, error)
}

type rPCReactionsClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCReactionsClient(cc grpc.ClientConnInterface) RPCReactionsClient {
	return &rPCReactionsClient{cc}
}

func (c *rPCReactionsClient) MessagesSendReaction(ctx context.Context, in *TLMessagesSendReaction, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCReactions_MessagesSendReaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCReactionsClient) MessagesGetMessagesReactions(ctx context.Context, in *TLMessagesGetMessagesReactions, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCReactions_MessagesGetMessagesReactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCReactionsClient) MessagesGetMessageReactionsList(ctx context.Context, in *TLMessagesGetMessageReactionsList, opts ...grpc.CallOption) (*Messages_MessageReactionsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_MessageReactionsList)
	err := c.cc.Invoke(ctx, RPCReactions_MessagesGetMessageReactionsList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCReactionsClient) MessagesSetChatAvailableReactions(ctx context.Context, in *TLMessagesSetChatAvailableReactions, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCReactions_MessagesSetChatAvailableReactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCReactionsClient) MessagesGetAvailableReactions(ctx context.Context, in *TLMessagesGetAvailableReactions, opts ...grpc.CallOption) (*Messages_AvailableReactions, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_AvailableReactions)
	err := c.cc.Invoke(ctx, RPCReactions_MessagesGetAvailableReactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCReactionsClient) MessagesSetDefaultReaction(ctx context.Context, in *TLMessagesSetDefaultReaction, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCReactions_MessagesSetDefaultReaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCReactionsClient) MessagesGetUnreadReactions(ctx context.Context, in *TLMessagesGetUnreadReactions, opts ...grpc.CallOption) (*Messages_Messages, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, RPCReactions_MessagesGetUnreadReactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCReactionsClient) MessagesReadReactions(ctx context.Context, in *TLMessagesReadReactions, opts ...grpc.CallOption) (*Messages_AffectedHistory, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_AffectedHistory)
	err := c.cc.Invoke(ctx, RPCReactions_MessagesReadReactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCReactionsClient) MessagesReportReaction(ctx context.Context, in *TLMessagesReportReaction, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCReactions_MessagesReportReaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCReactionsClient) MessagesGetTopReactions(ctx context.Context, in *TLMessagesGetTopReactions, opts ...grpc.CallOption) (*Messages_Reactions, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_Reactions)
	err := c.cc.Invoke(ctx, RPCReactions_MessagesGetTopReactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCReactionsClient) MessagesGetRecentReactions(ctx context.Context, in *TLMessagesGetRecentReactions, opts ...grpc.CallOption) (*Messages_Reactions, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_Reactions)
	err := c.cc.Invoke(ctx, RPCReactions_MessagesGetRecentReactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCReactionsClient) MessagesClearRecentReactions(ctx context.Context, in *TLMessagesClearRecentReactions, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCReactions_MessagesClearRecentReactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCReactionsClient) MessagesSendPaidReaction(ctx context.Context, in *TLMessagesSendPaidReaction, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCReactions_MessagesSendPaidReaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCReactionsClient) MessagesTogglePaidReactionPrivacy(ctx context.Context, in *TLMessagesTogglePaidReactionPrivacy, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCReactions_MessagesTogglePaidReactionPrivacy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCReactionsClient) MessagesGetPaidReactionPrivacy(ctx context.Context, in *TLMessagesGetPaidReactionPrivacy, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCReactions_MessagesGetPaidReactionPrivacy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCReactionsServer is the server API for RPCReactions service.
// All implementations should embed UnimplementedRPCReactionsServer
// for forward compatibility.
type RPCReactionsServer interface {
	MessagesSendReaction(context.Context, *TLMessagesSendReaction) (*Updates, error)
	MessagesGetMessagesReactions(context.Context, *TLMessagesGetMessagesReactions) (*Updates, error)
	MessagesGetMessageReactionsList(context.Context, *TLMessagesGetMessageReactionsList) (*Messages_MessageReactionsList, error)
	MessagesSetChatAvailableReactions(context.Context, *TLMessagesSetChatAvailableReactions) (*Updates, error)
	MessagesGetAvailableReactions(context.Context, *TLMessagesGetAvailableReactions) (*Messages_AvailableReactions, error)
	MessagesSetDefaultReaction(context.Context, *TLMessagesSetDefaultReaction) (*Bool, error)
	MessagesGetUnreadReactions(context.Context, *TLMessagesGetUnreadReactions) (*Messages_Messages, error)
	MessagesReadReactions(context.Context, *TLMessagesReadReactions) (*Messages_AffectedHistory, error)
	MessagesReportReaction(context.Context, *TLMessagesReportReaction) (*Bool, error)
	MessagesGetTopReactions(context.Context, *TLMessagesGetTopReactions) (*Messages_Reactions, error)
	MessagesGetRecentReactions(context.Context, *TLMessagesGetRecentReactions) (*Messages_Reactions, error)
	MessagesClearRecentReactions(context.Context, *TLMessagesClearRecentReactions) (*Bool, error)
	MessagesSendPaidReaction(context.Context, *TLMessagesSendPaidReaction) (*Updates, error)
	MessagesTogglePaidReactionPrivacy(context.Context, *TLMessagesTogglePaidReactionPrivacy) (*Bool, error)
	MessagesGetPaidReactionPrivacy(context.Context, *TLMessagesGetPaidReactionPrivacy) (*Updates, error)
}

// UnimplementedRPCReactionsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCReactionsServer struct{}

func (UnimplementedRPCReactionsServer) MessagesSendReaction(context.Context, *TLMessagesSendReaction) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendReaction not implemented")
}
func (UnimplementedRPCReactionsServer) MessagesGetMessagesReactions(context.Context, *TLMessagesGetMessagesReactions) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetMessagesReactions not implemented")
}
func (UnimplementedRPCReactionsServer) MessagesGetMessageReactionsList(context.Context, *TLMessagesGetMessageReactionsList) (*Messages_MessageReactionsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetMessageReactionsList not implemented")
}
func (UnimplementedRPCReactionsServer) MessagesSetChatAvailableReactions(context.Context, *TLMessagesSetChatAvailableReactions) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSetChatAvailableReactions not implemented")
}
func (UnimplementedRPCReactionsServer) MessagesGetAvailableReactions(context.Context, *TLMessagesGetAvailableReactions) (*Messages_AvailableReactions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetAvailableReactions not implemented")
}
func (UnimplementedRPCReactionsServer) MessagesSetDefaultReaction(context.Context, *TLMessagesSetDefaultReaction) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSetDefaultReaction not implemented")
}
func (UnimplementedRPCReactionsServer) MessagesGetUnreadReactions(context.Context, *TLMessagesGetUnreadReactions) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetUnreadReactions not implemented")
}
func (UnimplementedRPCReactionsServer) MessagesReadReactions(context.Context, *TLMessagesReadReactions) (*Messages_AffectedHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReadReactions not implemented")
}
func (UnimplementedRPCReactionsServer) MessagesReportReaction(context.Context, *TLMessagesReportReaction) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReportReaction not implemented")
}
func (UnimplementedRPCReactionsServer) MessagesGetTopReactions(context.Context, *TLMessagesGetTopReactions) (*Messages_Reactions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetTopReactions not implemented")
}
func (UnimplementedRPCReactionsServer) MessagesGetRecentReactions(context.Context, *TLMessagesGetRecentReactions) (*Messages_Reactions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetRecentReactions not implemented")
}
func (UnimplementedRPCReactionsServer) MessagesClearRecentReactions(context.Context, *TLMessagesClearRecentReactions) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesClearRecentReactions not implemented")
}
func (UnimplementedRPCReactionsServer) MessagesSendPaidReaction(context.Context, *TLMessagesSendPaidReaction) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendPaidReaction not implemented")
}
func (UnimplementedRPCReactionsServer) MessagesTogglePaidReactionPrivacy(context.Context, *TLMessagesTogglePaidReactionPrivacy) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesTogglePaidReactionPrivacy not implemented")
}
func (UnimplementedRPCReactionsServer) MessagesGetPaidReactionPrivacy(context.Context, *TLMessagesGetPaidReactionPrivacy) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetPaidReactionPrivacy not implemented")
}
func (UnimplementedRPCReactionsServer) testEmbeddedByValue() {}

// UnsafeRPCReactionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCReactionsServer will
// result in compilation errors.
type UnsafeRPCReactionsServer interface {
	mustEmbedUnimplementedRPCReactionsServer()
}

func RegisterRPCReactionsServer(s grpc.ServiceRegistrar, srv RPCReactionsServer) {
	// If the following call pancis, it indicates UnimplementedRPCReactionsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCReactions_ServiceDesc, srv)
}

func _RPCReactions_MessagesSendReaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendReaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCReactionsServer).MessagesSendReaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCReactions_MessagesSendReaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCReactionsServer).MessagesSendReaction(ctx, req.(*TLMessagesSendReaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCReactions_MessagesGetMessagesReactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetMessagesReactions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCReactionsServer).MessagesGetMessagesReactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCReactions_MessagesGetMessagesReactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCReactionsServer).MessagesGetMessagesReactions(ctx, req.(*TLMessagesGetMessagesReactions))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCReactions_MessagesGetMessageReactionsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetMessageReactionsList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCReactionsServer).MessagesGetMessageReactionsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCReactions_MessagesGetMessageReactionsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCReactionsServer).MessagesGetMessageReactionsList(ctx, req.(*TLMessagesGetMessageReactionsList))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCReactions_MessagesSetChatAvailableReactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSetChatAvailableReactions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCReactionsServer).MessagesSetChatAvailableReactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCReactions_MessagesSetChatAvailableReactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCReactionsServer).MessagesSetChatAvailableReactions(ctx, req.(*TLMessagesSetChatAvailableReactions))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCReactions_MessagesGetAvailableReactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetAvailableReactions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCReactionsServer).MessagesGetAvailableReactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCReactions_MessagesGetAvailableReactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCReactionsServer).MessagesGetAvailableReactions(ctx, req.(*TLMessagesGetAvailableReactions))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCReactions_MessagesSetDefaultReaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSetDefaultReaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCReactionsServer).MessagesSetDefaultReaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCReactions_MessagesSetDefaultReaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCReactionsServer).MessagesSetDefaultReaction(ctx, req.(*TLMessagesSetDefaultReaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCReactions_MessagesGetUnreadReactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetUnreadReactions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCReactionsServer).MessagesGetUnreadReactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCReactions_MessagesGetUnreadReactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCReactionsServer).MessagesGetUnreadReactions(ctx, req.(*TLMessagesGetUnreadReactions))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCReactions_MessagesReadReactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReadReactions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCReactionsServer).MessagesReadReactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCReactions_MessagesReadReactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCReactionsServer).MessagesReadReactions(ctx, req.(*TLMessagesReadReactions))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCReactions_MessagesReportReaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReportReaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCReactionsServer).MessagesReportReaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCReactions_MessagesReportReaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCReactionsServer).MessagesReportReaction(ctx, req.(*TLMessagesReportReaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCReactions_MessagesGetTopReactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetTopReactions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCReactionsServer).MessagesGetTopReactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCReactions_MessagesGetTopReactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCReactionsServer).MessagesGetTopReactions(ctx, req.(*TLMessagesGetTopReactions))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCReactions_MessagesGetRecentReactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetRecentReactions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCReactionsServer).MessagesGetRecentReactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCReactions_MessagesGetRecentReactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCReactionsServer).MessagesGetRecentReactions(ctx, req.(*TLMessagesGetRecentReactions))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCReactions_MessagesClearRecentReactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesClearRecentReactions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCReactionsServer).MessagesClearRecentReactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCReactions_MessagesClearRecentReactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCReactionsServer).MessagesClearRecentReactions(ctx, req.(*TLMessagesClearRecentReactions))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCReactions_MessagesSendPaidReaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendPaidReaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCReactionsServer).MessagesSendPaidReaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCReactions_MessagesSendPaidReaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCReactionsServer).MessagesSendPaidReaction(ctx, req.(*TLMessagesSendPaidReaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCReactions_MessagesTogglePaidReactionPrivacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesTogglePaidReactionPrivacy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCReactionsServer).MessagesTogglePaidReactionPrivacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCReactions_MessagesTogglePaidReactionPrivacy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCReactionsServer).MessagesTogglePaidReactionPrivacy(ctx, req.(*TLMessagesTogglePaidReactionPrivacy))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCReactions_MessagesGetPaidReactionPrivacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetPaidReactionPrivacy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCReactionsServer).MessagesGetPaidReactionPrivacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCReactions_MessagesGetPaidReactionPrivacy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCReactionsServer).MessagesGetPaidReactionPrivacy(ctx, req.(*TLMessagesGetPaidReactionPrivacy))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCReactions_ServiceDesc is the grpc.ServiceDesc for RPCReactions service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCReactions_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCReactions",
	HandlerType: (*RPCReactionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "messages_sendReaction",
			Handler:    _RPCReactions_MessagesSendReaction_Handler,
		},
		{
			MethodName: "messages_getMessagesReactions",
			Handler:    _RPCReactions_MessagesGetMessagesReactions_Handler,
		},
		{
			MethodName: "messages_getMessageReactionsList",
			Handler:    _RPCReactions_MessagesGetMessageReactionsList_Handler,
		},
		{
			MethodName: "messages_setChatAvailableReactions",
			Handler:    _RPCReactions_MessagesSetChatAvailableReactions_Handler,
		},
		{
			MethodName: "messages_getAvailableReactions",
			Handler:    _RPCReactions_MessagesGetAvailableReactions_Handler,
		},
		{
			MethodName: "messages_setDefaultReaction",
			Handler:    _RPCReactions_MessagesSetDefaultReaction_Handler,
		},
		{
			MethodName: "messages_getUnreadReactions",
			Handler:    _RPCReactions_MessagesGetUnreadReactions_Handler,
		},
		{
			MethodName: "messages_readReactions",
			Handler:    _RPCReactions_MessagesReadReactions_Handler,
		},
		{
			MethodName: "messages_reportReaction",
			Handler:    _RPCReactions_MessagesReportReaction_Handler,
		},
		{
			MethodName: "messages_getTopReactions",
			Handler:    _RPCReactions_MessagesGetTopReactions_Handler,
		},
		{
			MethodName: "messages_getRecentReactions",
			Handler:    _RPCReactions_MessagesGetRecentReactions_Handler,
		},
		{
			MethodName: "messages_clearRecentReactions",
			Handler:    _RPCReactions_MessagesClearRecentReactions_Handler,
		},
		{
			MethodName: "messages_sendPaidReaction",
			Handler:    _RPCReactions_MessagesSendPaidReaction_Handler,
		},
		{
			MethodName: "messages_togglePaidReactionPrivacy",
			Handler:    _RPCReactions_MessagesTogglePaidReactionPrivacy_Handler,
		},
		{
			MethodName: "messages_getPaidReactionPrivacy",
			Handler:    _RPCReactions_MessagesGetPaidReactionPrivacy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCReports_AccountReportPeer_FullMethodName           = "/mtproto.RPCReports/account_reportPeer"
	RPCReports_AccountReportProfilePhoto_FullMethodName   = "/mtproto.RPCReports/account_reportProfilePhoto"
	RPCReports_MessagesReportSpam_FullMethodName          = "/mtproto.RPCReports/messages_reportSpam"
	RPCReports_MessagesReportFC78AF9B_FullMethodName      = "/mtproto.RPCReports/messages_reportFC78AF9B"
	RPCReports_MessagesReportEncryptedSpam_FullMethodName = "/mtproto.RPCReports/messages_reportEncryptedSpam"
	RPCReports_ChannelsReportSpam_FullMethodName          = "/mtproto.RPCReports/channels_reportSpam"
	RPCReports_MessagesReport8953AB4E_FullMethodName      = "/mtproto.RPCReports/messages_report8953AB4E"
)

// RPCReportsClient is the client API for RPCReports service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCReportsClient interface {
	AccountReportPeer(ctx context.Context, in *TLAccountReportPeer, opts ...grpc.CallOption) (*Bool, error)
	AccountReportProfilePhoto(ctx context.Context, in *TLAccountReportProfilePhoto, opts ...grpc.CallOption) (*Bool, error)
	MessagesReportSpam(ctx context.Context, in *TLMessagesReportSpam, opts ...grpc.CallOption) (*Bool, error)
	MessagesReportFC78AF9B(ctx context.Context, in *TLMessagesReportFC78AF9B, opts ...grpc.CallOption) (*ReportResult, error)
	MessagesReportEncryptedSpam(ctx context.Context, in *TLMessagesReportEncryptedSpam, opts ...grpc.CallOption) (*Bool, error)
	ChannelsReportSpam(ctx context.Context, in *TLChannelsReportSpam, opts ...grpc.CallOption) (*Bool, error)
	MessagesReport8953AB4E(ctx context.Context, in *TLMessagesReport8953AB4E, opts ...grpc.CallOption) (*Bool, error)
}

type rPCReportsClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCReportsClient(cc grpc.ClientConnInterface) RPCReportsClient {
	return &rPCReportsClient{cc}
}

func (c *rPCReportsClient) AccountReportPeer(ctx context.Context, in *TLAccountReportPeer, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCReports_AccountReportPeer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCReportsClient) AccountReportProfilePhoto(ctx context.Context, in *TLAccountReportProfilePhoto, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCReports_AccountReportProfilePhoto_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCReportsClient) MessagesReportSpam(ctx context.Context, in *TLMessagesReportSpam, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCReports_MessagesReportSpam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCReportsClient) MessagesReportFC78AF9B(ctx context.Context, in *TLMessagesReportFC78AF9B, opts ...grpc.CallOption) (*ReportResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportResult)
	err := c.cc.Invoke(ctx, RPCReports_MessagesReportFC78AF9B_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCReportsClient) MessagesReportEncryptedSpam(ctx context.Context, in *TLMessagesReportEncryptedSpam, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCReports_MessagesReportEncryptedSpam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCReportsClient) ChannelsReportSpam(ctx context.Context, in *TLChannelsReportSpam, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCReports_ChannelsReportSpam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCReportsClient) MessagesReport8953AB4E(ctx context.Context, in *TLMessagesReport8953AB4E, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCReports_MessagesReport8953AB4E_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCReportsServer is the server API for RPCReports service.
// All implementations should embed UnimplementedRPCReportsServer
// for forward compatibility.
type RPCReportsServer interface {
	AccountReportPeer(context.Context, *TLAccountReportPeer) (*Bool, error)
	AccountReportProfilePhoto(context.Context, *TLAccountReportProfilePhoto) (*Bool, error)
	MessagesReportSpam(context.Context, *TLMessagesReportSpam) (*Bool, error)
	MessagesReportFC78AF9B(context.Context, *TLMessagesReportFC78AF9B) (*ReportResult, error)
	MessagesReportEncryptedSpam(context.Context, *TLMessagesReportEncryptedSpam) (*Bool, error)
	ChannelsReportSpam(context.Context, *TLChannelsReportSpam) (*Bool, error)
	MessagesReport8953AB4E(context.Context, *TLMessagesReport8953AB4E) (*Bool, error)
}

// UnimplementedRPCReportsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCReportsServer struct{}

func (UnimplementedRPCReportsServer) AccountReportPeer(context.Context, *TLAccountReportPeer) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountReportPeer not implemented")
}
func (UnimplementedRPCReportsServer) AccountReportProfilePhoto(context.Context, *TLAccountReportProfilePhoto) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountReportProfilePhoto not implemented")
}
func (UnimplementedRPCReportsServer) MessagesReportSpam(context.Context, *TLMessagesReportSpam) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReportSpam not implemented")
}
func (UnimplementedRPCReportsServer) MessagesReportFC78AF9B(context.Context, *TLMessagesReportFC78AF9B) (*ReportResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReportFC78AF9B not implemented")
}
func (UnimplementedRPCReportsServer) MessagesReportEncryptedSpam(context.Context, *TLMessagesReportEncryptedSpam) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReportEncryptedSpam not implemented")
}
func (UnimplementedRPCReportsServer) ChannelsReportSpam(context.Context, *TLChannelsReportSpam) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsReportSpam not implemented")
}
func (UnimplementedRPCReportsServer) MessagesReport8953AB4E(context.Context, *TLMessagesReport8953AB4E) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReport8953AB4E not implemented")
}
func (UnimplementedRPCReportsServer) testEmbeddedByValue() {}

// UnsafeRPCReportsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCReportsServer will
// result in compilation errors.
type UnsafeRPCReportsServer interface {
	mustEmbedUnimplementedRPCReportsServer()
}

func RegisterRPCReportsServer(s grpc.ServiceRegistrar, srv RPCReportsServer) {
	// If the following call pancis, it indicates UnimplementedRPCReportsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCReports_ServiceDesc, srv)
}

func _RPCReports_AccountReportPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountReportPeer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCReportsServer).AccountReportPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCReports_AccountReportPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCReportsServer).AccountReportPeer(ctx, req.(*TLAccountReportPeer))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCReports_AccountReportProfilePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountReportProfilePhoto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCReportsServer).AccountReportProfilePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCReports_AccountReportProfilePhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCReportsServer).AccountReportProfilePhoto(ctx, req.(*TLAccountReportProfilePhoto))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCReports_MessagesReportSpam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReportSpam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCReportsServer).MessagesReportSpam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCReports_MessagesReportSpam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCReportsServer).MessagesReportSpam(ctx, req.(*TLMessagesReportSpam))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCReports_MessagesReportFC78AF9B_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReportFC78AF9B)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCReportsServer).MessagesReportFC78AF9B(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCReports_MessagesReportFC78AF9B_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCReportsServer).MessagesReportFC78AF9B(ctx, req.(*TLMessagesReportFC78AF9B))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCReports_MessagesReportEncryptedSpam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReportEncryptedSpam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCReportsServer).MessagesReportEncryptedSpam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCReports_MessagesReportEncryptedSpam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCReportsServer).MessagesReportEncryptedSpam(ctx, req.(*TLMessagesReportEncryptedSpam))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCReports_ChannelsReportSpam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsReportSpam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCReportsServer).ChannelsReportSpam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCReports_ChannelsReportSpam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCReportsServer).ChannelsReportSpam(ctx, req.(*TLChannelsReportSpam))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCReports_MessagesReport8953AB4E_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReport8953AB4E)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCReportsServer).MessagesReport8953AB4E(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCReports_MessagesReport8953AB4E_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCReportsServer).MessagesReport8953AB4E(ctx, req.(*TLMessagesReport8953AB4E))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCReports_ServiceDesc is the grpc.ServiceDesc for RPCReports service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCReports_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCReports",
	HandlerType: (*RPCReportsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "account_reportPeer",
			Handler:    _RPCReports_AccountReportPeer_Handler,
		},
		{
			MethodName: "account_reportProfilePhoto",
			Handler:    _RPCReports_AccountReportProfilePhoto_Handler,
		},
		{
			MethodName: "messages_reportSpam",
			Handler:    _RPCReports_MessagesReportSpam_Handler,
		},
		{
			MethodName: "messages_reportFC78AF9B",
			Handler:    _RPCReports_MessagesReportFC78AF9B_Handler,
		},
		{
			MethodName: "messages_reportEncryptedSpam",
			Handler:    _RPCReports_MessagesReportEncryptedSpam_Handler,
		},
		{
			MethodName: "channels_reportSpam",
			Handler:    _RPCReports_ChannelsReportSpam_Handler,
		},
		{
			MethodName: "messages_report8953AB4E",
			Handler:    _RPCReports_MessagesReport8953AB4E_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCRingtone_AccountGetSavedRingtones_FullMethodName = "/mtproto.RPCRingtone/account_getSavedRingtones"
	RPCRingtone_AccountSaveRingtone_FullMethodName      = "/mtproto.RPCRingtone/account_saveRingtone"
	RPCRingtone_AccountUploadRingtone_FullMethodName    = "/mtproto.RPCRingtone/account_uploadRingtone"
)

// RPCRingtoneClient is the client API for RPCRingtone service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCRingtoneClient interface {
	AccountGetSavedRingtones(ctx context.Context, in *TLAccountGetSavedRingtones, opts ...grpc.CallOption) (*Account_SavedRingtones, error)
	AccountSaveRingtone(ctx context.Context, in *TLAccountSaveRingtone, opts ...grpc.CallOption) (*Account_SavedRingtone, error)
	AccountUploadRingtone(ctx context.Context, in *TLAccountUploadRingtone, opts ...grpc.CallOption) (*Document, error)
}

type rPCRingtoneClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCRingtoneClient(cc grpc.ClientConnInterface) RPCRingtoneClient {
	return &rPCRingtoneClient{cc}
}

func (c *rPCRingtoneClient) AccountGetSavedRingtones(ctx context.Context, in *TLAccountGetSavedRingtones, opts ...grpc.CallOption) (*Account_SavedRingtones, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account_SavedRingtones)
	err := c.cc.Invoke(ctx, RPCRingtone_AccountGetSavedRingtones_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCRingtoneClient) AccountSaveRingtone(ctx context.Context, in *TLAccountSaveRingtone, opts ...grpc.CallOption) (*Account_SavedRingtone, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account_SavedRingtone)
	err := c.cc.Invoke(ctx, RPCRingtone_AccountSaveRingtone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCRingtoneClient) AccountUploadRingtone(ctx context.Context, in *TLAccountUploadRingtone, opts ...grpc.CallOption) (*Document, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Document)
	err := c.cc.Invoke(ctx, RPCRingtone_AccountUploadRingtone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCRingtoneServer is the server API for RPCRingtone service.
// All implementations should embed UnimplementedRPCRingtoneServer
// for forward compatibility.
type RPCRingtoneServer interface {
	AccountGetSavedRingtones(context.Context, *TLAccountGetSavedRingtones) (*Account_SavedRingtones, error)
	AccountSaveRingtone(context.Context, *TLAccountSaveRingtone) (*Account_SavedRingtone, error)
	AccountUploadRingtone(context.Context, *TLAccountUploadRingtone) (*Document, error)
}

// UnimplementedRPCRingtoneServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCRingtoneServer struct{}

func (UnimplementedRPCRingtoneServer) AccountGetSavedRingtones(context.Context, *TLAccountGetSavedRingtones) (*Account_SavedRingtones, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetSavedRingtones not implemented")
}
func (UnimplementedRPCRingtoneServer) AccountSaveRingtone(context.Context, *TLAccountSaveRingtone) (*Account_SavedRingtone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSaveRingtone not implemented")
}
func (UnimplementedRPCRingtoneServer) AccountUploadRingtone(context.Context, *TLAccountUploadRingtone) (*Document, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUploadRingtone not implemented")
}
func (UnimplementedRPCRingtoneServer) testEmbeddedByValue() {}

// UnsafeRPCRingtoneServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCRingtoneServer will
// result in compilation errors.
type UnsafeRPCRingtoneServer interface {
	mustEmbedUnimplementedRPCRingtoneServer()
}

func RegisterRPCRingtoneServer(s grpc.ServiceRegistrar, srv RPCRingtoneServer) {
	// If the following call pancis, it indicates UnimplementedRPCRingtoneServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCRingtone_ServiceDesc, srv)
}

func _RPCRingtone_AccountGetSavedRingtones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetSavedRingtones)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCRingtoneServer).AccountGetSavedRingtones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCRingtone_AccountGetSavedRingtones_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCRingtoneServer).AccountGetSavedRingtones(ctx, req.(*TLAccountGetSavedRingtones))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCRingtone_AccountSaveRingtone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSaveRingtone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCRingtoneServer).AccountSaveRingtone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCRingtone_AccountSaveRingtone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCRingtoneServer).AccountSaveRingtone(ctx, req.(*TLAccountSaveRingtone))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCRingtone_AccountUploadRingtone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUploadRingtone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCRingtoneServer).AccountUploadRingtone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCRingtone_AccountUploadRingtone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCRingtoneServer).AccountUploadRingtone(ctx, req.(*TLAccountUploadRingtone))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCRingtone_ServiceDesc is the grpc.ServiceDesc for RPCRingtone service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCRingtone_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCRingtone",
	HandlerType: (*RPCRingtoneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "account_getSavedRingtones",
			Handler:    _RPCRingtone_AccountGetSavedRingtones_Handler,
		},
		{
			MethodName: "account_saveRingtone",
			Handler:    _RPCRingtone_AccountSaveRingtone_Handler,
		},
		{
			MethodName: "account_uploadRingtone",
			Handler:    _RPCRingtone_AccountUploadRingtone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCSavedMessageDialogs_MessagesGetSavedDialogs_FullMethodName           = "/mtproto.RPCSavedMessageDialogs/messages_getSavedDialogs"
	RPCSavedMessageDialogs_MessagesGetSavedHistory_FullMethodName           = "/mtproto.RPCSavedMessageDialogs/messages_getSavedHistory"
	RPCSavedMessageDialogs_MessagesDeleteSavedHistory_FullMethodName        = "/mtproto.RPCSavedMessageDialogs/messages_deleteSavedHistory"
	RPCSavedMessageDialogs_MessagesGetPinnedSavedDialogs_FullMethodName     = "/mtproto.RPCSavedMessageDialogs/messages_getPinnedSavedDialogs"
	RPCSavedMessageDialogs_MessagesToggleSavedDialogPin_FullMethodName      = "/mtproto.RPCSavedMessageDialogs/messages_toggleSavedDialogPin"
	RPCSavedMessageDialogs_MessagesReorderPinnedSavedDialogs_FullMethodName = "/mtproto.RPCSavedMessageDialogs/messages_reorderPinnedSavedDialogs"
)

// RPCSavedMessageDialogsClient is the client API for RPCSavedMessageDialogs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCSavedMessageDialogsClient interface {
	MessagesGetSavedDialogs(ctx context.Context, in *TLMessagesGetSavedDialogs, opts ...grpc.CallOption) (*Messages_SavedDialogs, error)
	MessagesGetSavedHistory(ctx context.Context, in *TLMessagesGetSavedHistory, opts ...grpc.CallOption) (*Messages_Messages, error)
	MessagesDeleteSavedHistory(ctx context.Context, in *TLMessagesDeleteSavedHistory, opts ...grpc.CallOption) (*Messages_AffectedHistory, error)
	MessagesGetPinnedSavedDialogs(ctx context.Context, in *TLMessagesGetPinnedSavedDialogs, opts ...grpc.CallOption) (*Messages_SavedDialogs, error)
	MessagesToggleSavedDialogPin(ctx context.Context, in *TLMessagesToggleSavedDialogPin, opts ...grpc.CallOption) (*Bool, error)
	MessagesReorderPinnedSavedDialogs(ctx context.Context, in *TLMessagesReorderPinnedSavedDialogs, opts ...grpc.CallOption) (*Bool, error)
}

type rPCSavedMessageDialogsClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCSavedMessageDialogsClient(cc grpc.ClientConnInterface) RPCSavedMessageDialogsClient {
	return &rPCSavedMessageDialogsClient{cc}
}

func (c *rPCSavedMessageDialogsClient) MessagesGetSavedDialogs(ctx context.Context, in *TLMessagesGetSavedDialogs, opts ...grpc.CallOption) (*Messages_SavedDialogs, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_SavedDialogs)
	err := c.cc.Invoke(ctx, RPCSavedMessageDialogs_MessagesGetSavedDialogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSavedMessageDialogsClient) MessagesGetSavedHistory(ctx context.Context, in *TLMessagesGetSavedHistory, opts ...grpc.CallOption) (*Messages_Messages, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, RPCSavedMessageDialogs_MessagesGetSavedHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSavedMessageDialogsClient) MessagesDeleteSavedHistory(ctx context.Context, in *TLMessagesDeleteSavedHistory, opts ...grpc.CallOption) (*Messages_AffectedHistory, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_AffectedHistory)
	err := c.cc.Invoke(ctx, RPCSavedMessageDialogs_MessagesDeleteSavedHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSavedMessageDialogsClient) MessagesGetPinnedSavedDialogs(ctx context.Context, in *TLMessagesGetPinnedSavedDialogs, opts ...grpc.CallOption) (*Messages_SavedDialogs, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_SavedDialogs)
	err := c.cc.Invoke(ctx, RPCSavedMessageDialogs_MessagesGetPinnedSavedDialogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSavedMessageDialogsClient) MessagesToggleSavedDialogPin(ctx context.Context, in *TLMessagesToggleSavedDialogPin, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCSavedMessageDialogs_MessagesToggleSavedDialogPin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSavedMessageDialogsClient) MessagesReorderPinnedSavedDialogs(ctx context.Context, in *TLMessagesReorderPinnedSavedDialogs, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCSavedMessageDialogs_MessagesReorderPinnedSavedDialogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCSavedMessageDialogsServer is the server API for RPCSavedMessageDialogs service.
// All implementations should embed UnimplementedRPCSavedMessageDialogsServer
// for forward compatibility.
type RPCSavedMessageDialogsServer interface {
	MessagesGetSavedDialogs(context.Context, *TLMessagesGetSavedDialogs) (*Messages_SavedDialogs, error)
	MessagesGetSavedHistory(context.Context, *TLMessagesGetSavedHistory) (*Messages_Messages, error)
	MessagesDeleteSavedHistory(context.Context, *TLMessagesDeleteSavedHistory) (*Messages_AffectedHistory, error)
	MessagesGetPinnedSavedDialogs(context.Context, *TLMessagesGetPinnedSavedDialogs) (*Messages_SavedDialogs, error)
	MessagesToggleSavedDialogPin(context.Context, *TLMessagesToggleSavedDialogPin) (*Bool, error)
	MessagesReorderPinnedSavedDialogs(context.Context, *TLMessagesReorderPinnedSavedDialogs) (*Bool, error)
}

// UnimplementedRPCSavedMessageDialogsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCSavedMessageDialogsServer struct{}

func (UnimplementedRPCSavedMessageDialogsServer) MessagesGetSavedDialogs(context.Context, *TLMessagesGetSavedDialogs) (*Messages_SavedDialogs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetSavedDialogs not implemented")
}
func (UnimplementedRPCSavedMessageDialogsServer) MessagesGetSavedHistory(context.Context, *TLMessagesGetSavedHistory) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetSavedHistory not implemented")
}
func (UnimplementedRPCSavedMessageDialogsServer) MessagesDeleteSavedHistory(context.Context, *TLMessagesDeleteSavedHistory) (*Messages_AffectedHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesDeleteSavedHistory not implemented")
}
func (UnimplementedRPCSavedMessageDialogsServer) MessagesGetPinnedSavedDialogs(context.Context, *TLMessagesGetPinnedSavedDialogs) (*Messages_SavedDialogs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetPinnedSavedDialogs not implemented")
}
func (UnimplementedRPCSavedMessageDialogsServer) MessagesToggleSavedDialogPin(context.Context, *TLMessagesToggleSavedDialogPin) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesToggleSavedDialogPin not implemented")
}
func (UnimplementedRPCSavedMessageDialogsServer) MessagesReorderPinnedSavedDialogs(context.Context, *TLMessagesReorderPinnedSavedDialogs) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReorderPinnedSavedDialogs not implemented")
}
func (UnimplementedRPCSavedMessageDialogsServer) testEmbeddedByValue() {}

// UnsafeRPCSavedMessageDialogsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCSavedMessageDialogsServer will
// result in compilation errors.
type UnsafeRPCSavedMessageDialogsServer interface {
	mustEmbedUnimplementedRPCSavedMessageDialogsServer()
}

func RegisterRPCSavedMessageDialogsServer(s grpc.ServiceRegistrar, srv RPCSavedMessageDialogsServer) {
	// If the following call pancis, it indicates UnimplementedRPCSavedMessageDialogsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCSavedMessageDialogs_ServiceDesc, srv)
}

func _RPCSavedMessageDialogs_MessagesGetSavedDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetSavedDialogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSavedMessageDialogsServer).MessagesGetSavedDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCSavedMessageDialogs_MessagesGetSavedDialogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSavedMessageDialogsServer).MessagesGetSavedDialogs(ctx, req.(*TLMessagesGetSavedDialogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSavedMessageDialogs_MessagesGetSavedHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetSavedHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSavedMessageDialogsServer).MessagesGetSavedHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCSavedMessageDialogs_MessagesGetSavedHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSavedMessageDialogsServer).MessagesGetSavedHistory(ctx, req.(*TLMessagesGetSavedHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSavedMessageDialogs_MessagesDeleteSavedHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesDeleteSavedHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSavedMessageDialogsServer).MessagesDeleteSavedHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCSavedMessageDialogs_MessagesDeleteSavedHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSavedMessageDialogsServer).MessagesDeleteSavedHistory(ctx, req.(*TLMessagesDeleteSavedHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSavedMessageDialogs_MessagesGetPinnedSavedDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetPinnedSavedDialogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSavedMessageDialogsServer).MessagesGetPinnedSavedDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCSavedMessageDialogs_MessagesGetPinnedSavedDialogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSavedMessageDialogsServer).MessagesGetPinnedSavedDialogs(ctx, req.(*TLMessagesGetPinnedSavedDialogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSavedMessageDialogs_MessagesToggleSavedDialogPin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesToggleSavedDialogPin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSavedMessageDialogsServer).MessagesToggleSavedDialogPin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCSavedMessageDialogs_MessagesToggleSavedDialogPin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSavedMessageDialogsServer).MessagesToggleSavedDialogPin(ctx, req.(*TLMessagesToggleSavedDialogPin))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSavedMessageDialogs_MessagesReorderPinnedSavedDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReorderPinnedSavedDialogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSavedMessageDialogsServer).MessagesReorderPinnedSavedDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCSavedMessageDialogs_MessagesReorderPinnedSavedDialogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSavedMessageDialogsServer).MessagesReorderPinnedSavedDialogs(ctx, req.(*TLMessagesReorderPinnedSavedDialogs))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCSavedMessageDialogs_ServiceDesc is the grpc.ServiceDesc for RPCSavedMessageDialogs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCSavedMessageDialogs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCSavedMessageDialogs",
	HandlerType: (*RPCSavedMessageDialogsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "messages_getSavedDialogs",
			Handler:    _RPCSavedMessageDialogs_MessagesGetSavedDialogs_Handler,
		},
		{
			MethodName: "messages_getSavedHistory",
			Handler:    _RPCSavedMessageDialogs_MessagesGetSavedHistory_Handler,
		},
		{
			MethodName: "messages_deleteSavedHistory",
			Handler:    _RPCSavedMessageDialogs_MessagesDeleteSavedHistory_Handler,
		},
		{
			MethodName: "messages_getPinnedSavedDialogs",
			Handler:    _RPCSavedMessageDialogs_MessagesGetPinnedSavedDialogs_Handler,
		},
		{
			MethodName: "messages_toggleSavedDialogPin",
			Handler:    _RPCSavedMessageDialogs_MessagesToggleSavedDialogPin_Handler,
		},
		{
			MethodName: "messages_reorderPinnedSavedDialogs",
			Handler:    _RPCSavedMessageDialogs_MessagesReorderPinnedSavedDialogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCSavedMessageTags_MessagesGetSavedReactionTags_FullMethodName   = "/mtproto.RPCSavedMessageTags/messages_getSavedReactionTags"
	RPCSavedMessageTags_MessagesUpdateSavedReactionTag_FullMethodName = "/mtproto.RPCSavedMessageTags/messages_updateSavedReactionTag"
	RPCSavedMessageTags_MessagesGetDefaultTagReactions_FullMethodName = "/mtproto.RPCSavedMessageTags/messages_getDefaultTagReactions"
)

// RPCSavedMessageTagsClient is the client API for RPCSavedMessageTags service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCSavedMessageTagsClient interface {
	MessagesGetSavedReactionTags(ctx context.Context, in *TLMessagesGetSavedReactionTags, opts ...grpc.CallOption) (*Messages_SavedReactionTags, error)
	MessagesUpdateSavedReactionTag(ctx context.Context, in *TLMessagesUpdateSavedReactionTag, opts ...grpc.CallOption) (*Bool, error)
	MessagesGetDefaultTagReactions(ctx context.Context, in *TLMessagesGetDefaultTagReactions, opts ...grpc.CallOption) (*Messages_Reactions, error)
}

type rPCSavedMessageTagsClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCSavedMessageTagsClient(cc grpc.ClientConnInterface) RPCSavedMessageTagsClient {
	return &rPCSavedMessageTagsClient{cc}
}

func (c *rPCSavedMessageTagsClient) MessagesGetSavedReactionTags(ctx context.Context, in *TLMessagesGetSavedReactionTags, opts ...grpc.CallOption) (*Messages_SavedReactionTags, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_SavedReactionTags)
	err := c.cc.Invoke(ctx, RPCSavedMessageTags_MessagesGetSavedReactionTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSavedMessageTagsClient) MessagesUpdateSavedReactionTag(ctx context.Context, in *TLMessagesUpdateSavedReactionTag, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCSavedMessageTags_MessagesUpdateSavedReactionTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSavedMessageTagsClient) MessagesGetDefaultTagReactions(ctx context.Context, in *TLMessagesGetDefaultTagReactions, opts ...grpc.CallOption) (*Messages_Reactions, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_Reactions)
	err := c.cc.Invoke(ctx, RPCSavedMessageTags_MessagesGetDefaultTagReactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCSavedMessageTagsServer is the server API for RPCSavedMessageTags service.
// All implementations should embed UnimplementedRPCSavedMessageTagsServer
// for forward compatibility.
type RPCSavedMessageTagsServer interface {
	MessagesGetSavedReactionTags(context.Context, *TLMessagesGetSavedReactionTags) (*Messages_SavedReactionTags, error)
	MessagesUpdateSavedReactionTag(context.Context, *TLMessagesUpdateSavedReactionTag) (*Bool, error)
	MessagesGetDefaultTagReactions(context.Context, *TLMessagesGetDefaultTagReactions) (*Messages_Reactions, error)
}

// UnimplementedRPCSavedMessageTagsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCSavedMessageTagsServer struct{}

func (UnimplementedRPCSavedMessageTagsServer) MessagesGetSavedReactionTags(context.Context, *TLMessagesGetSavedReactionTags) (*Messages_SavedReactionTags, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetSavedReactionTags not implemented")
}
func (UnimplementedRPCSavedMessageTagsServer) MessagesUpdateSavedReactionTag(context.Context, *TLMessagesUpdateSavedReactionTag) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesUpdateSavedReactionTag not implemented")
}
func (UnimplementedRPCSavedMessageTagsServer) MessagesGetDefaultTagReactions(context.Context, *TLMessagesGetDefaultTagReactions) (*Messages_Reactions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetDefaultTagReactions not implemented")
}
func (UnimplementedRPCSavedMessageTagsServer) testEmbeddedByValue() {}

// UnsafeRPCSavedMessageTagsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCSavedMessageTagsServer will
// result in compilation errors.
type UnsafeRPCSavedMessageTagsServer interface {
	mustEmbedUnimplementedRPCSavedMessageTagsServer()
}

func RegisterRPCSavedMessageTagsServer(s grpc.ServiceRegistrar, srv RPCSavedMessageTagsServer) {
	// If the following call pancis, it indicates UnimplementedRPCSavedMessageTagsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCSavedMessageTags_ServiceDesc, srv)
}

func _RPCSavedMessageTags_MessagesGetSavedReactionTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetSavedReactionTags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSavedMessageTagsServer).MessagesGetSavedReactionTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCSavedMessageTags_MessagesGetSavedReactionTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSavedMessageTagsServer).MessagesGetSavedReactionTags(ctx, req.(*TLMessagesGetSavedReactionTags))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSavedMessageTags_MessagesUpdateSavedReactionTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesUpdateSavedReactionTag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSavedMessageTagsServer).MessagesUpdateSavedReactionTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCSavedMessageTags_MessagesUpdateSavedReactionTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSavedMessageTagsServer).MessagesUpdateSavedReactionTag(ctx, req.(*TLMessagesUpdateSavedReactionTag))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSavedMessageTags_MessagesGetDefaultTagReactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetDefaultTagReactions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSavedMessageTagsServer).MessagesGetDefaultTagReactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCSavedMessageTags_MessagesGetDefaultTagReactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSavedMessageTagsServer).MessagesGetDefaultTagReactions(ctx, req.(*TLMessagesGetDefaultTagReactions))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCSavedMessageTags_ServiceDesc is the grpc.ServiceDesc for RPCSavedMessageTags service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCSavedMessageTags_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCSavedMessageTags",
	HandlerType: (*RPCSavedMessageTagsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "messages_getSavedReactionTags",
			Handler:    _RPCSavedMessageTags_MessagesGetSavedReactionTags_Handler,
		},
		{
			MethodName: "messages_updateSavedReactionTag",
			Handler:    _RPCSavedMessageTags_MessagesUpdateSavedReactionTag_Handler,
		},
		{
			MethodName: "messages_getDefaultTagReactions",
			Handler:    _RPCSavedMessageTags_MessagesGetDefaultTagReactions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCScheduledMessages_MessagesGetScheduledHistory_FullMethodName     = "/mtproto.RPCScheduledMessages/messages_getScheduledHistory"
	RPCScheduledMessages_MessagesGetScheduledMessages_FullMethodName    = "/mtproto.RPCScheduledMessages/messages_getScheduledMessages"
	RPCScheduledMessages_MessagesSendScheduledMessages_FullMethodName   = "/mtproto.RPCScheduledMessages/messages_sendScheduledMessages"
	RPCScheduledMessages_MessagesDeleteScheduledMessages_FullMethodName = "/mtproto.RPCScheduledMessages/messages_deleteScheduledMessages"
)

// RPCScheduledMessagesClient is the client API for RPCScheduledMessages service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCScheduledMessagesClient interface {
	MessagesGetScheduledHistory(ctx context.Context, in *TLMessagesGetScheduledHistory, opts ...grpc.CallOption) (*Messages_Messages, error)
	MessagesGetScheduledMessages(ctx context.Context, in *TLMessagesGetScheduledMessages, opts ...grpc.CallOption) (*Messages_Messages, error)
	MessagesSendScheduledMessages(ctx context.Context, in *TLMessagesSendScheduledMessages, opts ...grpc.CallOption) (*Updates, error)
	MessagesDeleteScheduledMessages(ctx context.Context, in *TLMessagesDeleteScheduledMessages, opts ...grpc.CallOption) (*Updates, error)
}

type rPCScheduledMessagesClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCScheduledMessagesClient(cc grpc.ClientConnInterface) RPCScheduledMessagesClient {
	return &rPCScheduledMessagesClient{cc}
}

func (c *rPCScheduledMessagesClient) MessagesGetScheduledHistory(ctx context.Context, in *TLMessagesGetScheduledHistory, opts ...grpc.CallOption) (*Messages_Messages, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, RPCScheduledMessages_MessagesGetScheduledHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCScheduledMessagesClient) MessagesGetScheduledMessages(ctx context.Context, in *TLMessagesGetScheduledMessages, opts ...grpc.CallOption) (*Messages_Messages, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, RPCScheduledMessages_MessagesGetScheduledMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCScheduledMessagesClient) MessagesSendScheduledMessages(ctx context.Context, in *TLMessagesSendScheduledMessages, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCScheduledMessages_MessagesSendScheduledMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCScheduledMessagesClient) MessagesDeleteScheduledMessages(ctx context.Context, in *TLMessagesDeleteScheduledMessages, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCScheduledMessages_MessagesDeleteScheduledMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCScheduledMessagesServer is the server API for RPCScheduledMessages service.
// All implementations should embed UnimplementedRPCScheduledMessagesServer
// for forward compatibility.
type RPCScheduledMessagesServer interface {
	MessagesGetScheduledHistory(context.Context, *TLMessagesGetScheduledHistory) (*Messages_Messages, error)
	MessagesGetScheduledMessages(context.Context, *TLMessagesGetScheduledMessages) (*Messages_Messages, error)
	MessagesSendScheduledMessages(context.Context, *TLMessagesSendScheduledMessages) (*Updates, error)
	MessagesDeleteScheduledMessages(context.Context, *TLMessagesDeleteScheduledMessages) (*Updates, error)
}

// UnimplementedRPCScheduledMessagesServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCScheduledMessagesServer struct{}

func (UnimplementedRPCScheduledMessagesServer) MessagesGetScheduledHistory(context.Context, *TLMessagesGetScheduledHistory) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetScheduledHistory not implemented")
}
func (UnimplementedRPCScheduledMessagesServer) MessagesGetScheduledMessages(context.Context, *TLMessagesGetScheduledMessages) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetScheduledMessages not implemented")
}
func (UnimplementedRPCScheduledMessagesServer) MessagesSendScheduledMessages(context.Context, *TLMessagesSendScheduledMessages) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendScheduledMessages not implemented")
}
func (UnimplementedRPCScheduledMessagesServer) MessagesDeleteScheduledMessages(context.Context, *TLMessagesDeleteScheduledMessages) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesDeleteScheduledMessages not implemented")
}
func (UnimplementedRPCScheduledMessagesServer) testEmbeddedByValue() {}

// UnsafeRPCScheduledMessagesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCScheduledMessagesServer will
// result in compilation errors.
type UnsafeRPCScheduledMessagesServer interface {
	mustEmbedUnimplementedRPCScheduledMessagesServer()
}

func RegisterRPCScheduledMessagesServer(s grpc.ServiceRegistrar, srv RPCScheduledMessagesServer) {
	// If the following call pancis, it indicates UnimplementedRPCScheduledMessagesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCScheduledMessages_ServiceDesc, srv)
}

func _RPCScheduledMessages_MessagesGetScheduledHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetScheduledHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCScheduledMessagesServer).MessagesGetScheduledHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCScheduledMessages_MessagesGetScheduledHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCScheduledMessagesServer).MessagesGetScheduledHistory(ctx, req.(*TLMessagesGetScheduledHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCScheduledMessages_MessagesGetScheduledMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetScheduledMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCScheduledMessagesServer).MessagesGetScheduledMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCScheduledMessages_MessagesGetScheduledMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCScheduledMessagesServer).MessagesGetScheduledMessages(ctx, req.(*TLMessagesGetScheduledMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCScheduledMessages_MessagesSendScheduledMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendScheduledMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCScheduledMessagesServer).MessagesSendScheduledMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCScheduledMessages_MessagesSendScheduledMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCScheduledMessagesServer).MessagesSendScheduledMessages(ctx, req.(*TLMessagesSendScheduledMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCScheduledMessages_MessagesDeleteScheduledMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesDeleteScheduledMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCScheduledMessagesServer).MessagesDeleteScheduledMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCScheduledMessages_MessagesDeleteScheduledMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCScheduledMessagesServer).MessagesDeleteScheduledMessages(ctx, req.(*TLMessagesDeleteScheduledMessages))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCScheduledMessages_ServiceDesc is the grpc.ServiceDesc for RPCScheduledMessages service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCScheduledMessages_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCScheduledMessages",
	HandlerType: (*RPCScheduledMessagesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "messages_getScheduledHistory",
			Handler:    _RPCScheduledMessages_MessagesGetScheduledHistory_Handler,
		},
		{
			MethodName: "messages_getScheduledMessages",
			Handler:    _RPCScheduledMessages_MessagesGetScheduledMessages_Handler,
		},
		{
			MethodName: "messages_sendScheduledMessages",
			Handler:    _RPCScheduledMessages_MessagesSendScheduledMessages_Handler,
		},
		{
			MethodName: "messages_deleteScheduledMessages",
			Handler:    _RPCScheduledMessages_MessagesDeleteScheduledMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCSeamless_AccountGetWebAuthorizations_FullMethodName   = "/mtproto.RPCSeamless/account_getWebAuthorizations"
	RPCSeamless_AccountResetWebAuthorization_FullMethodName  = "/mtproto.RPCSeamless/account_resetWebAuthorization"
	RPCSeamless_AccountResetWebAuthorizations_FullMethodName = "/mtproto.RPCSeamless/account_resetWebAuthorizations"
	RPCSeamless_MessagesRequestUrlAuth_FullMethodName        = "/mtproto.RPCSeamless/messages_requestUrlAuth"
	RPCSeamless_MessagesAcceptUrlAuth_FullMethodName         = "/mtproto.RPCSeamless/messages_acceptUrlAuth"
)

// RPCSeamlessClient is the client API for RPCSeamless service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCSeamlessClient interface {
	AccountGetWebAuthorizations(ctx context.Context, in *TLAccountGetWebAuthorizations, opts ...grpc.CallOption) (*Account_WebAuthorizations, error)
	AccountResetWebAuthorization(ctx context.Context, in *TLAccountResetWebAuthorization, opts ...grpc.CallOption) (*Bool, error)
	AccountResetWebAuthorizations(ctx context.Context, in *TLAccountResetWebAuthorizations, opts ...grpc.CallOption) (*Bool, error)
	MessagesRequestUrlAuth(ctx context.Context, in *TLMessagesRequestUrlAuth, opts ...grpc.CallOption) (*UrlAuthResult, error)
	MessagesAcceptUrlAuth(ctx context.Context, in *TLMessagesAcceptUrlAuth, opts ...grpc.CallOption) (*UrlAuthResult, error)
}

type rPCSeamlessClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCSeamlessClient(cc grpc.ClientConnInterface) RPCSeamlessClient {
	return &rPCSeamlessClient{cc}
}

func (c *rPCSeamlessClient) AccountGetWebAuthorizations(ctx context.Context, in *TLAccountGetWebAuthorizations, opts ...grpc.CallOption) (*Account_WebAuthorizations, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account_WebAuthorizations)
	err := c.cc.Invoke(ctx, RPCSeamless_AccountGetWebAuthorizations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSeamlessClient) AccountResetWebAuthorization(ctx context.Context, in *TLAccountResetWebAuthorization, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCSeamless_AccountResetWebAuthorization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSeamlessClient) AccountResetWebAuthorizations(ctx context.Context, in *TLAccountResetWebAuthorizations, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCSeamless_AccountResetWebAuthorizations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSeamlessClient) MessagesRequestUrlAuth(ctx context.Context, in *TLMessagesRequestUrlAuth, opts ...grpc.CallOption) (*UrlAuthResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UrlAuthResult)
	err := c.cc.Invoke(ctx, RPCSeamless_MessagesRequestUrlAuth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSeamlessClient) MessagesAcceptUrlAuth(ctx context.Context, in *TLMessagesAcceptUrlAuth, opts ...grpc.CallOption) (*UrlAuthResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UrlAuthResult)
	err := c.cc.Invoke(ctx, RPCSeamless_MessagesAcceptUrlAuth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCSeamlessServer is the server API for RPCSeamless service.
// All implementations should embed UnimplementedRPCSeamlessServer
// for forward compatibility.
type RPCSeamlessServer interface {
	AccountGetWebAuthorizations(context.Context, *TLAccountGetWebAuthorizations) (*Account_WebAuthorizations, error)
	AccountResetWebAuthorization(context.Context, *TLAccountResetWebAuthorization) (*Bool, error)
	AccountResetWebAuthorizations(context.Context, *TLAccountResetWebAuthorizations) (*Bool, error)
	MessagesRequestUrlAuth(context.Context, *TLMessagesRequestUrlAuth) (*UrlAuthResult, error)
	MessagesAcceptUrlAuth(context.Context, *TLMessagesAcceptUrlAuth) (*UrlAuthResult, error)
}

// UnimplementedRPCSeamlessServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCSeamlessServer struct{}

func (UnimplementedRPCSeamlessServer) AccountGetWebAuthorizations(context.Context, *TLAccountGetWebAuthorizations) (*Account_WebAuthorizations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetWebAuthorizations not implemented")
}
func (UnimplementedRPCSeamlessServer) AccountResetWebAuthorization(context.Context, *TLAccountResetWebAuthorization) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountResetWebAuthorization not implemented")
}
func (UnimplementedRPCSeamlessServer) AccountResetWebAuthorizations(context.Context, *TLAccountResetWebAuthorizations) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountResetWebAuthorizations not implemented")
}
func (UnimplementedRPCSeamlessServer) MessagesRequestUrlAuth(context.Context, *TLMessagesRequestUrlAuth) (*UrlAuthResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesRequestUrlAuth not implemented")
}
func (UnimplementedRPCSeamlessServer) MessagesAcceptUrlAuth(context.Context, *TLMessagesAcceptUrlAuth) (*UrlAuthResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesAcceptUrlAuth not implemented")
}
func (UnimplementedRPCSeamlessServer) testEmbeddedByValue() {}

// UnsafeRPCSeamlessServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCSeamlessServer will
// result in compilation errors.
type UnsafeRPCSeamlessServer interface {
	mustEmbedUnimplementedRPCSeamlessServer()
}

func RegisterRPCSeamlessServer(s grpc.ServiceRegistrar, srv RPCSeamlessServer) {
	// If the following call pancis, it indicates UnimplementedRPCSeamlessServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCSeamless_ServiceDesc, srv)
}

func _RPCSeamless_AccountGetWebAuthorizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetWebAuthorizations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSeamlessServer).AccountGetWebAuthorizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCSeamless_AccountGetWebAuthorizations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSeamlessServer).AccountGetWebAuthorizations(ctx, req.(*TLAccountGetWebAuthorizations))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSeamless_AccountResetWebAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountResetWebAuthorization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSeamlessServer).AccountResetWebAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCSeamless_AccountResetWebAuthorization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSeamlessServer).AccountResetWebAuthorization(ctx, req.(*TLAccountResetWebAuthorization))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSeamless_AccountResetWebAuthorizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountResetWebAuthorizations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSeamlessServer).AccountResetWebAuthorizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCSeamless_AccountResetWebAuthorizations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSeamlessServer).AccountResetWebAuthorizations(ctx, req.(*TLAccountResetWebAuthorizations))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSeamless_MessagesRequestUrlAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesRequestUrlAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSeamlessServer).MessagesRequestUrlAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCSeamless_MessagesRequestUrlAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSeamlessServer).MessagesRequestUrlAuth(ctx, req.(*TLMessagesRequestUrlAuth))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSeamless_MessagesAcceptUrlAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesAcceptUrlAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSeamlessServer).MessagesAcceptUrlAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCSeamless_MessagesAcceptUrlAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSeamlessServer).MessagesAcceptUrlAuth(ctx, req.(*TLMessagesAcceptUrlAuth))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCSeamless_ServiceDesc is the grpc.ServiceDesc for RPCSeamless service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCSeamless_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCSeamless",
	HandlerType: (*RPCSeamlessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "account_getWebAuthorizations",
			Handler:    _RPCSeamless_AccountGetWebAuthorizations_Handler,
		},
		{
			MethodName: "account_resetWebAuthorization",
			Handler:    _RPCSeamless_AccountResetWebAuthorization_Handler,
		},
		{
			MethodName: "account_resetWebAuthorizations",
			Handler:    _RPCSeamless_AccountResetWebAuthorizations_Handler,
		},
		{
			MethodName: "messages_requestUrlAuth",
			Handler:    _RPCSeamless_MessagesRequestUrlAuth_Handler,
		},
		{
			MethodName: "messages_acceptUrlAuth",
			Handler:    _RPCSeamless_MessagesAcceptUrlAuth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCSecretChats_MessagesGetDhConfig_FullMethodName          = "/mtproto.RPCSecretChats/messages_getDhConfig"
	RPCSecretChats_MessagesRequestEncryption_FullMethodName    = "/mtproto.RPCSecretChats/messages_requestEncryption"
	RPCSecretChats_MessagesAcceptEncryption_FullMethodName     = "/mtproto.RPCSecretChats/messages_acceptEncryption"
	RPCSecretChats_MessagesDiscardEncryption_FullMethodName    = "/mtproto.RPCSecretChats/messages_discardEncryption"
	RPCSecretChats_MessagesSetEncryptedTyping_FullMethodName   = "/mtproto.RPCSecretChats/messages_setEncryptedTyping"
	RPCSecretChats_MessagesReadEncryptedHistory_FullMethodName = "/mtproto.RPCSecretChats/messages_readEncryptedHistory"
	RPCSecretChats_MessagesSendEncrypted_FullMethodName        = "/mtproto.RPCSecretChats/messages_sendEncrypted"
	RPCSecretChats_MessagesSendEncryptedFile_FullMethodName    = "/mtproto.RPCSecretChats/messages_sendEncryptedFile"
	RPCSecretChats_MessagesSendEncryptedService_FullMethodName = "/mtproto.RPCSecretChats/messages_sendEncryptedService"
	RPCSecretChats_MessagesReceivedQueue_FullMethodName        = "/mtproto.RPCSecretChats/messages_receivedQueue"
)

// RPCSecretChatsClient is the client API for RPCSecretChats service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCSecretChatsClient interface {
	MessagesGetDhConfig(ctx context.Context, in *TLMessagesGetDhConfig, opts ...grpc.CallOption) (*Messages_DhConfig, error)
	MessagesRequestEncryption(ctx context.Context, in *TLMessagesRequestEncryption, opts ...grpc.CallOption) (*EncryptedChat, error)
	MessagesAcceptEncryption(ctx context.Context, in *TLMessagesAcceptEncryption, opts ...grpc.CallOption) (*EncryptedChat, error)
	MessagesDiscardEncryption(ctx context.Context, in *TLMessagesDiscardEncryption, opts ...grpc.CallOption) (*Bool, error)
	MessagesSetEncryptedTyping(ctx context.Context, in *TLMessagesSetEncryptedTyping, opts ...grpc.CallOption) (*Bool, error)
	MessagesReadEncryptedHistory(ctx context.Context, in *TLMessagesReadEncryptedHistory, opts ...grpc.CallOption) (*Bool, error)
	MessagesSendEncrypted(ctx context.Context, in *TLMessagesSendEncrypted, opts ...grpc.CallOption) (*Messages_SentEncryptedMessage, error)
	MessagesSendEncryptedFile(ctx context.Context, in *TLMessagesSendEncryptedFile, opts ...grpc.CallOption) (*Messages_SentEncryptedMessage, error)
	MessagesSendEncryptedService(ctx context.Context, in *TLMessagesSendEncryptedService, opts ...grpc.CallOption) (*Messages_SentEncryptedMessage, error)
	MessagesReceivedQueue(ctx context.Context, in *TLMessagesReceivedQueue, opts ...grpc.CallOption) (*Vector_Long, error)
}

type rPCSecretChatsClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCSecretChatsClient(cc grpc.ClientConnInterface) RPCSecretChatsClient {
	return &rPCSecretChatsClient{cc}
}

func (c *rPCSecretChatsClient) MessagesGetDhConfig(ctx context.Context, in *TLMessagesGetDhConfig, opts ...grpc.CallOption) (*Messages_DhConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_DhConfig)
	err := c.cc.Invoke(ctx, RPCSecretChats_MessagesGetDhConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSecretChatsClient) MessagesRequestEncryption(ctx context.Context, in *TLMessagesRequestEncryption, opts ...grpc.CallOption) (*EncryptedChat, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EncryptedChat)
	err := c.cc.Invoke(ctx, RPCSecretChats_MessagesRequestEncryption_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSecretChatsClient) MessagesAcceptEncryption(ctx context.Context, in *TLMessagesAcceptEncryption, opts ...grpc.CallOption) (*EncryptedChat, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EncryptedChat)
	err := c.cc.Invoke(ctx, RPCSecretChats_MessagesAcceptEncryption_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSecretChatsClient) MessagesDiscardEncryption(ctx context.Context, in *TLMessagesDiscardEncryption, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCSecretChats_MessagesDiscardEncryption_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSecretChatsClient) MessagesSetEncryptedTyping(ctx context.Context, in *TLMessagesSetEncryptedTyping, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCSecretChats_MessagesSetEncryptedTyping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSecretChatsClient) MessagesReadEncryptedHistory(ctx context.Context, in *TLMessagesReadEncryptedHistory, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCSecretChats_MessagesReadEncryptedHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSecretChatsClient) MessagesSendEncrypted(ctx context.Context, in *TLMessagesSendEncrypted, opts ...grpc.CallOption) (*Messages_SentEncryptedMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_SentEncryptedMessage)
	err := c.cc.Invoke(ctx, RPCSecretChats_MessagesSendEncrypted_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSecretChatsClient) MessagesSendEncryptedFile(ctx context.Context, in *TLMessagesSendEncryptedFile, opts ...grpc.CallOption) (*Messages_SentEncryptedMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_SentEncryptedMessage)
	err := c.cc.Invoke(ctx, RPCSecretChats_MessagesSendEncryptedFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSecretChatsClient) MessagesSendEncryptedService(ctx context.Context, in *TLMessagesSendEncryptedService, opts ...grpc.CallOption) (*Messages_SentEncryptedMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_SentEncryptedMessage)
	err := c.cc.Invoke(ctx, RPCSecretChats_MessagesSendEncryptedService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSecretChatsClient) MessagesReceivedQueue(ctx context.Context, in *TLMessagesReceivedQueue, opts ...grpc.CallOption) (*Vector_Long, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_Long)
	err := c.cc.Invoke(ctx, RPCSecretChats_MessagesReceivedQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCSecretChatsServer is the server API for RPCSecretChats service.
// All implementations should embed UnimplementedRPCSecretChatsServer
// for forward compatibility.
type RPCSecretChatsServer interface {
	MessagesGetDhConfig(context.Context, *TLMessagesGetDhConfig) (*Messages_DhConfig, error)
	MessagesRequestEncryption(context.Context, *TLMessagesRequestEncryption) (*EncryptedChat, error)
	MessagesAcceptEncryption(context.Context, *TLMessagesAcceptEncryption) (*EncryptedChat, error)
	MessagesDiscardEncryption(context.Context, *TLMessagesDiscardEncryption) (*Bool, error)
	MessagesSetEncryptedTyping(context.Context, *TLMessagesSetEncryptedTyping) (*Bool, error)
	MessagesReadEncryptedHistory(context.Context, *TLMessagesReadEncryptedHistory) (*Bool, error)
	MessagesSendEncrypted(context.Context, *TLMessagesSendEncrypted) (*Messages_SentEncryptedMessage, error)
	MessagesSendEncryptedFile(context.Context, *TLMessagesSendEncryptedFile) (*Messages_SentEncryptedMessage, error)
	MessagesSendEncryptedService(context.Context, *TLMessagesSendEncryptedService) (*Messages_SentEncryptedMessage, error)
	MessagesReceivedQueue(context.Context, *TLMessagesReceivedQueue) (*Vector_Long, error)
}

// UnimplementedRPCSecretChatsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCSecretChatsServer struct{}

func (UnimplementedRPCSecretChatsServer) MessagesGetDhConfig(context.Context, *TLMessagesGetDhConfig) (*Messages_DhConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetDhConfig not implemented")
}
func (UnimplementedRPCSecretChatsServer) MessagesRequestEncryption(context.Context, *TLMessagesRequestEncryption) (*EncryptedChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesRequestEncryption not implemented")
}
func (UnimplementedRPCSecretChatsServer) MessagesAcceptEncryption(context.Context, *TLMessagesAcceptEncryption) (*EncryptedChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesAcceptEncryption not implemented")
}
func (UnimplementedRPCSecretChatsServer) MessagesDiscardEncryption(context.Context, *TLMessagesDiscardEncryption) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesDiscardEncryption not implemented")
}
func (UnimplementedRPCSecretChatsServer) MessagesSetEncryptedTyping(context.Context, *TLMessagesSetEncryptedTyping) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSetEncryptedTyping not implemented")
}
func (UnimplementedRPCSecretChatsServer) MessagesReadEncryptedHistory(context.Context, *TLMessagesReadEncryptedHistory) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReadEncryptedHistory not implemented")
}
func (UnimplementedRPCSecretChatsServer) MessagesSendEncrypted(context.Context, *TLMessagesSendEncrypted) (*Messages_SentEncryptedMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendEncrypted not implemented")
}
func (UnimplementedRPCSecretChatsServer) MessagesSendEncryptedFile(context.Context, *TLMessagesSendEncryptedFile) (*Messages_SentEncryptedMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendEncryptedFile not implemented")
}
func (UnimplementedRPCSecretChatsServer) MessagesSendEncryptedService(context.Context, *TLMessagesSendEncryptedService) (*Messages_SentEncryptedMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendEncryptedService not implemented")
}
func (UnimplementedRPCSecretChatsServer) MessagesReceivedQueue(context.Context, *TLMessagesReceivedQueue) (*Vector_Long, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReceivedQueue not implemented")
}
func (UnimplementedRPCSecretChatsServer) testEmbeddedByValue() {}

// UnsafeRPCSecretChatsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCSecretChatsServer will
// result in compilation errors.
type UnsafeRPCSecretChatsServer interface {
	mustEmbedUnimplementedRPCSecretChatsServer()
}

func RegisterRPCSecretChatsServer(s grpc.ServiceRegistrar, srv RPCSecretChatsServer) {
	// If the following call pancis, it indicates UnimplementedRPCSecretChatsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCSecretChats_ServiceDesc, srv)
}

func _RPCSecretChats_MessagesGetDhConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetDhConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSecretChatsServer).MessagesGetDhConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCSecretChats_MessagesGetDhConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSecretChatsServer).MessagesGetDhConfig(ctx, req.(*TLMessagesGetDhConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSecretChats_MessagesRequestEncryption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesRequestEncryption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSecretChatsServer).MessagesRequestEncryption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCSecretChats_MessagesRequestEncryption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSecretChatsServer).MessagesRequestEncryption(ctx, req.(*TLMessagesRequestEncryption))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSecretChats_MessagesAcceptEncryption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesAcceptEncryption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSecretChatsServer).MessagesAcceptEncryption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCSecretChats_MessagesAcceptEncryption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSecretChatsServer).MessagesAcceptEncryption(ctx, req.(*TLMessagesAcceptEncryption))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSecretChats_MessagesDiscardEncryption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesDiscardEncryption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSecretChatsServer).MessagesDiscardEncryption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCSecretChats_MessagesDiscardEncryption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSecretChatsServer).MessagesDiscardEncryption(ctx, req.(*TLMessagesDiscardEncryption))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSecretChats_MessagesSetEncryptedTyping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSetEncryptedTyping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSecretChatsServer).MessagesSetEncryptedTyping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCSecretChats_MessagesSetEncryptedTyping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSecretChatsServer).MessagesSetEncryptedTyping(ctx, req.(*TLMessagesSetEncryptedTyping))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSecretChats_MessagesReadEncryptedHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReadEncryptedHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSecretChatsServer).MessagesReadEncryptedHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCSecretChats_MessagesReadEncryptedHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSecretChatsServer).MessagesReadEncryptedHistory(ctx, req.(*TLMessagesReadEncryptedHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSecretChats_MessagesSendEncrypted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendEncrypted)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSecretChatsServer).MessagesSendEncrypted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCSecretChats_MessagesSendEncrypted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSecretChatsServer).MessagesSendEncrypted(ctx, req.(*TLMessagesSendEncrypted))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSecretChats_MessagesSendEncryptedFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendEncryptedFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSecretChatsServer).MessagesSendEncryptedFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCSecretChats_MessagesSendEncryptedFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSecretChatsServer).MessagesSendEncryptedFile(ctx, req.(*TLMessagesSendEncryptedFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSecretChats_MessagesSendEncryptedService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendEncryptedService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSecretChatsServer).MessagesSendEncryptedService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCSecretChats_MessagesSendEncryptedService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSecretChatsServer).MessagesSendEncryptedService(ctx, req.(*TLMessagesSendEncryptedService))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSecretChats_MessagesReceivedQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReceivedQueue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSecretChatsServer).MessagesReceivedQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCSecretChats_MessagesReceivedQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSecretChatsServer).MessagesReceivedQueue(ctx, req.(*TLMessagesReceivedQueue))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCSecretChats_ServiceDesc is the grpc.ServiceDesc for RPCSecretChats service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCSecretChats_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCSecretChats",
	HandlerType: (*RPCSecretChatsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "messages_getDhConfig",
			Handler:    _RPCSecretChats_MessagesGetDhConfig_Handler,
		},
		{
			MethodName: "messages_requestEncryption",
			Handler:    _RPCSecretChats_MessagesRequestEncryption_Handler,
		},
		{
			MethodName: "messages_acceptEncryption",
			Handler:    _RPCSecretChats_MessagesAcceptEncryption_Handler,
		},
		{
			MethodName: "messages_discardEncryption",
			Handler:    _RPCSecretChats_MessagesDiscardEncryption_Handler,
		},
		{
			MethodName: "messages_setEncryptedTyping",
			Handler:    _RPCSecretChats_MessagesSetEncryptedTyping_Handler,
		},
		{
			MethodName: "messages_readEncryptedHistory",
			Handler:    _RPCSecretChats_MessagesReadEncryptedHistory_Handler,
		},
		{
			MethodName: "messages_sendEncrypted",
			Handler:    _RPCSecretChats_MessagesSendEncrypted_Handler,
		},
		{
			MethodName: "messages_sendEncryptedFile",
			Handler:    _RPCSecretChats_MessagesSendEncryptedFile_Handler,
		},
		{
			MethodName: "messages_sendEncryptedService",
			Handler:    _RPCSecretChats_MessagesSendEncryptedService_Handler,
		},
		{
			MethodName: "messages_receivedQueue",
			Handler:    _RPCSecretChats_MessagesReceivedQueue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCSmsjobs_SmsjobsIsEligibleToJoin_FullMethodName = "/mtproto.RPCSmsjobs/smsjobs_isEligibleToJoin"
	RPCSmsjobs_SmsjobsJoin_FullMethodName             = "/mtproto.RPCSmsjobs/smsjobs_join"
	RPCSmsjobs_SmsjobsLeave_FullMethodName            = "/mtproto.RPCSmsjobs/smsjobs_leave"
	RPCSmsjobs_SmsjobsUpdateSettings_FullMethodName   = "/mtproto.RPCSmsjobs/smsjobs_updateSettings"
	RPCSmsjobs_SmsjobsGetStatus_FullMethodName        = "/mtproto.RPCSmsjobs/smsjobs_getStatus"
	RPCSmsjobs_SmsjobsGetSmsJob_FullMethodName        = "/mtproto.RPCSmsjobs/smsjobs_getSmsJob"
	RPCSmsjobs_SmsjobsFinishJob_FullMethodName        = "/mtproto.RPCSmsjobs/smsjobs_finishJob"
)

// RPCSmsjobsClient is the client API for RPCSmsjobs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCSmsjobsClient interface {
	SmsjobsIsEligibleToJoin(ctx context.Context, in *TLSmsjobsIsEligibleToJoin, opts ...grpc.CallOption) (*Smsjobs_EligibilityToJoin, error)
	SmsjobsJoin(ctx context.Context, in *TLSmsjobsJoin, opts ...grpc.CallOption) (*Bool, error)
	SmsjobsLeave(ctx context.Context, in *TLSmsjobsLeave, opts ...grpc.CallOption) (*Bool, error)
	SmsjobsUpdateSettings(ctx context.Context, in *TLSmsjobsUpdateSettings, opts ...grpc.CallOption) (*Bool, error)
	SmsjobsGetStatus(ctx context.Context, in *TLSmsjobsGetStatus, opts ...grpc.CallOption) (*Smsjobs_Status, error)
	SmsjobsGetSmsJob(ctx context.Context, in *TLSmsjobsGetSmsJob, opts ...grpc.CallOption) (*SmsJob, error)
	SmsjobsFinishJob(ctx context.Context, in *TLSmsjobsFinishJob, opts ...grpc.CallOption) (*Bool, error)
}

type rPCSmsjobsClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCSmsjobsClient(cc grpc.ClientConnInterface) RPCSmsjobsClient {
	return &rPCSmsjobsClient{cc}
}

func (c *rPCSmsjobsClient) SmsjobsIsEligibleToJoin(ctx context.Context, in *TLSmsjobsIsEligibleToJoin, opts ...grpc.CallOption) (*Smsjobs_EligibilityToJoin, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Smsjobs_EligibilityToJoin)
	err := c.cc.Invoke(ctx, RPCSmsjobs_SmsjobsIsEligibleToJoin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSmsjobsClient) SmsjobsJoin(ctx context.Context, in *TLSmsjobsJoin, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCSmsjobs_SmsjobsJoin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSmsjobsClient) SmsjobsLeave(ctx context.Context, in *TLSmsjobsLeave, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCSmsjobs_SmsjobsLeave_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSmsjobsClient) SmsjobsUpdateSettings(ctx context.Context, in *TLSmsjobsUpdateSettings, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCSmsjobs_SmsjobsUpdateSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSmsjobsClient) SmsjobsGetStatus(ctx context.Context, in *TLSmsjobsGetStatus, opts ...grpc.CallOption) (*Smsjobs_Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Smsjobs_Status)
	err := c.cc.Invoke(ctx, RPCSmsjobs_SmsjobsGetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSmsjobsClient) SmsjobsGetSmsJob(ctx context.Context, in *TLSmsjobsGetSmsJob, opts ...grpc.CallOption) (*SmsJob, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SmsJob)
	err := c.cc.Invoke(ctx, RPCSmsjobs_SmsjobsGetSmsJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSmsjobsClient) SmsjobsFinishJob(ctx context.Context, in *TLSmsjobsFinishJob, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCSmsjobs_SmsjobsFinishJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCSmsjobsServer is the server API for RPCSmsjobs service.
// All implementations should embed UnimplementedRPCSmsjobsServer
// for forward compatibility.
type RPCSmsjobsServer interface {
	SmsjobsIsEligibleToJoin(context.Context, *TLSmsjobsIsEligibleToJoin) (*Smsjobs_EligibilityToJoin, error)
	SmsjobsJoin(context.Context, *TLSmsjobsJoin) (*Bool, error)
	SmsjobsLeave(context.Context, *TLSmsjobsLeave) (*Bool, error)
	SmsjobsUpdateSettings(context.Context, *TLSmsjobsUpdateSettings) (*Bool, error)
	SmsjobsGetStatus(context.Context, *TLSmsjobsGetStatus) (*Smsjobs_Status, error)
	SmsjobsGetSmsJob(context.Context, *TLSmsjobsGetSmsJob) (*SmsJob, error)
	SmsjobsFinishJob(context.Context, *TLSmsjobsFinishJob) (*Bool, error)
}

// UnimplementedRPCSmsjobsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCSmsjobsServer struct{}

func (UnimplementedRPCSmsjobsServer) SmsjobsIsEligibleToJoin(context.Context, *TLSmsjobsIsEligibleToJoin) (*Smsjobs_EligibilityToJoin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SmsjobsIsEligibleToJoin not implemented")
}
func (UnimplementedRPCSmsjobsServer) SmsjobsJoin(context.Context, *TLSmsjobsJoin) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SmsjobsJoin not implemented")
}
func (UnimplementedRPCSmsjobsServer) SmsjobsLeave(context.Context, *TLSmsjobsLeave) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SmsjobsLeave not implemented")
}
func (UnimplementedRPCSmsjobsServer) SmsjobsUpdateSettings(context.Context, *TLSmsjobsUpdateSettings) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SmsjobsUpdateSettings not implemented")
}
func (UnimplementedRPCSmsjobsServer) SmsjobsGetStatus(context.Context, *TLSmsjobsGetStatus) (*Smsjobs_Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SmsjobsGetStatus not implemented")
}
func (UnimplementedRPCSmsjobsServer) SmsjobsGetSmsJob(context.Context, *TLSmsjobsGetSmsJob) (*SmsJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SmsjobsGetSmsJob not implemented")
}
func (UnimplementedRPCSmsjobsServer) SmsjobsFinishJob(context.Context, *TLSmsjobsFinishJob) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SmsjobsFinishJob not implemented")
}
func (UnimplementedRPCSmsjobsServer) testEmbeddedByValue() {}

// UnsafeRPCSmsjobsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCSmsjobsServer will
// result in compilation errors.
type UnsafeRPCSmsjobsServer interface {
	mustEmbedUnimplementedRPCSmsjobsServer()
}

func RegisterRPCSmsjobsServer(s grpc.ServiceRegistrar, srv RPCSmsjobsServer) {
	// If the following call pancis, it indicates UnimplementedRPCSmsjobsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCSmsjobs_ServiceDesc, srv)
}

func _RPCSmsjobs_SmsjobsIsEligibleToJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLSmsjobsIsEligibleToJoin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSmsjobsServer).SmsjobsIsEligibleToJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCSmsjobs_SmsjobsIsEligibleToJoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSmsjobsServer).SmsjobsIsEligibleToJoin(ctx, req.(*TLSmsjobsIsEligibleToJoin))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSmsjobs_SmsjobsJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLSmsjobsJoin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSmsjobsServer).SmsjobsJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCSmsjobs_SmsjobsJoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSmsjobsServer).SmsjobsJoin(ctx, req.(*TLSmsjobsJoin))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSmsjobs_SmsjobsLeave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLSmsjobsLeave)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSmsjobsServer).SmsjobsLeave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCSmsjobs_SmsjobsLeave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSmsjobsServer).SmsjobsLeave(ctx, req.(*TLSmsjobsLeave))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSmsjobs_SmsjobsUpdateSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLSmsjobsUpdateSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSmsjobsServer).SmsjobsUpdateSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCSmsjobs_SmsjobsUpdateSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSmsjobsServer).SmsjobsUpdateSettings(ctx, req.(*TLSmsjobsUpdateSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSmsjobs_SmsjobsGetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLSmsjobsGetStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSmsjobsServer).SmsjobsGetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCSmsjobs_SmsjobsGetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSmsjobsServer).SmsjobsGetStatus(ctx, req.(*TLSmsjobsGetStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSmsjobs_SmsjobsGetSmsJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLSmsjobsGetSmsJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSmsjobsServer).SmsjobsGetSmsJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCSmsjobs_SmsjobsGetSmsJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSmsjobsServer).SmsjobsGetSmsJob(ctx, req.(*TLSmsjobsGetSmsJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSmsjobs_SmsjobsFinishJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLSmsjobsFinishJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSmsjobsServer).SmsjobsFinishJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCSmsjobs_SmsjobsFinishJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSmsjobsServer).SmsjobsFinishJob(ctx, req.(*TLSmsjobsFinishJob))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCSmsjobs_ServiceDesc is the grpc.ServiceDesc for RPCSmsjobs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCSmsjobs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCSmsjobs",
	HandlerType: (*RPCSmsjobsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "smsjobs_isEligibleToJoin",
			Handler:    _RPCSmsjobs_SmsjobsIsEligibleToJoin_Handler,
		},
		{
			MethodName: "smsjobs_join",
			Handler:    _RPCSmsjobs_SmsjobsJoin_Handler,
		},
		{
			MethodName: "smsjobs_leave",
			Handler:    _RPCSmsjobs_SmsjobsLeave_Handler,
		},
		{
			MethodName: "smsjobs_updateSettings",
			Handler:    _RPCSmsjobs_SmsjobsUpdateSettings_Handler,
		},
		{
			MethodName: "smsjobs_getStatus",
			Handler:    _RPCSmsjobs_SmsjobsGetStatus_Handler,
		},
		{
			MethodName: "smsjobs_getSmsJob",
			Handler:    _RPCSmsjobs_SmsjobsGetSmsJob_Handler,
		},
		{
			MethodName: "smsjobs_finishJob",
			Handler:    _RPCSmsjobs_SmsjobsFinishJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCSponsoredMessages_AccountToggleSponsoredMessages_FullMethodName    = "/mtproto.RPCSponsoredMessages/account_toggleSponsoredMessages"
	RPCSponsoredMessages_ContactsGetSponsoredPeers_FullMethodName         = "/mtproto.RPCSponsoredMessages/contacts_getSponsoredPeers"
	RPCSponsoredMessages_MessagesViewSponsoredMessage_FullMethodName      = "/mtproto.RPCSponsoredMessages/messages_viewSponsoredMessage"
	RPCSponsoredMessages_MessagesClickSponsoredMessage_FullMethodName     = "/mtproto.RPCSponsoredMessages/messages_clickSponsoredMessage"
	RPCSponsoredMessages_MessagesReportSponsoredMessage_FullMethodName    = "/mtproto.RPCSponsoredMessages/messages_reportSponsoredMessage"
	RPCSponsoredMessages_MessagesGetSponsoredMessages_FullMethodName      = "/mtproto.RPCSponsoredMessages/messages_getSponsoredMessages"
	RPCSponsoredMessages_ChannelsRestrictSponsoredMessages_FullMethodName = "/mtproto.RPCSponsoredMessages/channels_restrictSponsoredMessages"
	RPCSponsoredMessages_ChannelsViewSponsoredMessage_FullMethodName      = "/mtproto.RPCSponsoredMessages/channels_viewSponsoredMessage"
	RPCSponsoredMessages_ChannelsGetSponsoredMessages_FullMethodName      = "/mtproto.RPCSponsoredMessages/channels_getSponsoredMessages"
	RPCSponsoredMessages_ChannelsClickSponsoredMessage_FullMethodName     = "/mtproto.RPCSponsoredMessages/channels_clickSponsoredMessage"
	RPCSponsoredMessages_ChannelsReportSponsoredMessage_FullMethodName    = "/mtproto.RPCSponsoredMessages/channels_reportSponsoredMessage"
)

// RPCSponsoredMessagesClient is the client API for RPCSponsoredMessages service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCSponsoredMessagesClient interface {
	AccountToggleSponsoredMessages(ctx context.Context, in *TLAccountToggleSponsoredMessages, opts ...grpc.CallOption) (*Bool, error)
	ContactsGetSponsoredPeers(ctx context.Context, in *TLContactsGetSponsoredPeers, opts ...grpc.CallOption) (*Contacts_SponsoredPeers, error)
	MessagesViewSponsoredMessage(ctx context.Context, in *TLMessagesViewSponsoredMessage, opts ...grpc.CallOption) (*Bool, error)
	MessagesClickSponsoredMessage(ctx context.Context, in *TLMessagesClickSponsoredMessage, opts ...grpc.CallOption) (*Bool, error)
	MessagesReportSponsoredMessage(ctx context.Context, in *TLMessagesReportSponsoredMessage, opts ...grpc.CallOption) (*Channels_SponsoredMessageReportResult, error)
	MessagesGetSponsoredMessages(ctx context.Context, in *TLMessagesGetSponsoredMessages, opts ...grpc.CallOption) (*Messages_SponsoredMessages, error)
	ChannelsRestrictSponsoredMessages(ctx context.Context, in *TLChannelsRestrictSponsoredMessages, opts ...grpc.CallOption) (*Updates, error)
	ChannelsViewSponsoredMessage(ctx context.Context, in *TLChannelsViewSponsoredMessage, opts ...grpc.CallOption) (*Bool, error)
	ChannelsGetSponsoredMessages(ctx context.Context, in *TLChannelsGetSponsoredMessages, opts ...grpc.CallOption) (*Messages_SponsoredMessages, error)
	ChannelsClickSponsoredMessage(ctx context.Context, in *TLChannelsClickSponsoredMessage, opts ...grpc.CallOption) (*Bool, error)
	ChannelsReportSponsoredMessage(ctx context.Context, in *TLChannelsReportSponsoredMessage, opts ...grpc.CallOption) (*Channels_SponsoredMessageReportResult, error)
}

type rPCSponsoredMessagesClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCSponsoredMessagesClient(cc grpc.ClientConnInterface) RPCSponsoredMessagesClient {
	return &rPCSponsoredMessagesClient{cc}
}

func (c *rPCSponsoredMessagesClient) AccountToggleSponsoredMessages(ctx context.Context, in *TLAccountToggleSponsoredMessages, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCSponsoredMessages_AccountToggleSponsoredMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSponsoredMessagesClient) ContactsGetSponsoredPeers(ctx context.Context, in *TLContactsGetSponsoredPeers, opts ...grpc.CallOption) (*Contacts_SponsoredPeers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Contacts_SponsoredPeers)
	err := c.cc.Invoke(ctx, RPCSponsoredMessages_ContactsGetSponsoredPeers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSponsoredMessagesClient) MessagesViewSponsoredMessage(ctx context.Context, in *TLMessagesViewSponsoredMessage, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCSponsoredMessages_MessagesViewSponsoredMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSponsoredMessagesClient) MessagesClickSponsoredMessage(ctx context.Context, in *TLMessagesClickSponsoredMessage, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCSponsoredMessages_MessagesClickSponsoredMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSponsoredMessagesClient) MessagesReportSponsoredMessage(ctx context.Context, in *TLMessagesReportSponsoredMessage, opts ...grpc.CallOption) (*Channels_SponsoredMessageReportResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Channels_SponsoredMessageReportResult)
	err := c.cc.Invoke(ctx, RPCSponsoredMessages_MessagesReportSponsoredMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSponsoredMessagesClient) MessagesGetSponsoredMessages(ctx context.Context, in *TLMessagesGetSponsoredMessages, opts ...grpc.CallOption) (*Messages_SponsoredMessages, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_SponsoredMessages)
	err := c.cc.Invoke(ctx, RPCSponsoredMessages_MessagesGetSponsoredMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSponsoredMessagesClient) ChannelsRestrictSponsoredMessages(ctx context.Context, in *TLChannelsRestrictSponsoredMessages, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCSponsoredMessages_ChannelsRestrictSponsoredMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSponsoredMessagesClient) ChannelsViewSponsoredMessage(ctx context.Context, in *TLChannelsViewSponsoredMessage, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCSponsoredMessages_ChannelsViewSponsoredMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSponsoredMessagesClient) ChannelsGetSponsoredMessages(ctx context.Context, in *TLChannelsGetSponsoredMessages, opts ...grpc.CallOption) (*Messages_SponsoredMessages, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_SponsoredMessages)
	err := c.cc.Invoke(ctx, RPCSponsoredMessages_ChannelsGetSponsoredMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSponsoredMessagesClient) ChannelsClickSponsoredMessage(ctx context.Context, in *TLChannelsClickSponsoredMessage, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCSponsoredMessages_ChannelsClickSponsoredMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSponsoredMessagesClient) ChannelsReportSponsoredMessage(ctx context.Context, in *TLChannelsReportSponsoredMessage, opts ...grpc.CallOption) (*Channels_SponsoredMessageReportResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Channels_SponsoredMessageReportResult)
	err := c.cc.Invoke(ctx, RPCSponsoredMessages_ChannelsReportSponsoredMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCSponsoredMessagesServer is the server API for RPCSponsoredMessages service.
// All implementations should embed UnimplementedRPCSponsoredMessagesServer
// for forward compatibility.
type RPCSponsoredMessagesServer interface {
	AccountToggleSponsoredMessages(context.Context, *TLAccountToggleSponsoredMessages) (*Bool, error)
	ContactsGetSponsoredPeers(context.Context, *TLContactsGetSponsoredPeers) (*Contacts_SponsoredPeers, error)
	MessagesViewSponsoredMessage(context.Context, *TLMessagesViewSponsoredMessage) (*Bool, error)
	MessagesClickSponsoredMessage(context.Context, *TLMessagesClickSponsoredMessage) (*Bool, error)
	MessagesReportSponsoredMessage(context.Context, *TLMessagesReportSponsoredMessage) (*Channels_SponsoredMessageReportResult, error)
	MessagesGetSponsoredMessages(context.Context, *TLMessagesGetSponsoredMessages) (*Messages_SponsoredMessages, error)
	ChannelsRestrictSponsoredMessages(context.Context, *TLChannelsRestrictSponsoredMessages) (*Updates, error)
	ChannelsViewSponsoredMessage(context.Context, *TLChannelsViewSponsoredMessage) (*Bool, error)
	ChannelsGetSponsoredMessages(context.Context, *TLChannelsGetSponsoredMessages) (*Messages_SponsoredMessages, error)
	ChannelsClickSponsoredMessage(context.Context, *TLChannelsClickSponsoredMessage) (*Bool, error)
	ChannelsReportSponsoredMessage(context.Context, *TLChannelsReportSponsoredMessage) (*Channels_SponsoredMessageReportResult, error)
}

// UnimplementedRPCSponsoredMessagesServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCSponsoredMessagesServer struct{}

func (UnimplementedRPCSponsoredMessagesServer) AccountToggleSponsoredMessages(context.Context, *TLAccountToggleSponsoredMessages) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountToggleSponsoredMessages not implemented")
}
func (UnimplementedRPCSponsoredMessagesServer) ContactsGetSponsoredPeers(context.Context, *TLContactsGetSponsoredPeers) (*Contacts_SponsoredPeers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsGetSponsoredPeers not implemented")
}
func (UnimplementedRPCSponsoredMessagesServer) MessagesViewSponsoredMessage(context.Context, *TLMessagesViewSponsoredMessage) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesViewSponsoredMessage not implemented")
}
func (UnimplementedRPCSponsoredMessagesServer) MessagesClickSponsoredMessage(context.Context, *TLMessagesClickSponsoredMessage) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesClickSponsoredMessage not implemented")
}
func (UnimplementedRPCSponsoredMessagesServer) MessagesReportSponsoredMessage(context.Context, *TLMessagesReportSponsoredMessage) (*Channels_SponsoredMessageReportResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReportSponsoredMessage not implemented")
}
func (UnimplementedRPCSponsoredMessagesServer) MessagesGetSponsoredMessages(context.Context, *TLMessagesGetSponsoredMessages) (*Messages_SponsoredMessages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetSponsoredMessages not implemented")
}
func (UnimplementedRPCSponsoredMessagesServer) ChannelsRestrictSponsoredMessages(context.Context, *TLChannelsRestrictSponsoredMessages) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsRestrictSponsoredMessages not implemented")
}
func (UnimplementedRPCSponsoredMessagesServer) ChannelsViewSponsoredMessage(context.Context, *TLChannelsViewSponsoredMessage) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsViewSponsoredMessage not implemented")
}
func (UnimplementedRPCSponsoredMessagesServer) ChannelsGetSponsoredMessages(context.Context, *TLChannelsGetSponsoredMessages) (*Messages_SponsoredMessages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetSponsoredMessages not implemented")
}
func (UnimplementedRPCSponsoredMessagesServer) ChannelsClickSponsoredMessage(context.Context, *TLChannelsClickSponsoredMessage) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsClickSponsoredMessage not implemented")
}
func (UnimplementedRPCSponsoredMessagesServer) ChannelsReportSponsoredMessage(context.Context, *TLChannelsReportSponsoredMessage) (*Channels_SponsoredMessageReportResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsReportSponsoredMessage not implemented")
}
func (UnimplementedRPCSponsoredMessagesServer) testEmbeddedByValue() {}

// UnsafeRPCSponsoredMessagesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCSponsoredMessagesServer will
// result in compilation errors.
type UnsafeRPCSponsoredMessagesServer interface {
	mustEmbedUnimplementedRPCSponsoredMessagesServer()
}

func RegisterRPCSponsoredMessagesServer(s grpc.ServiceRegistrar, srv RPCSponsoredMessagesServer) {
	// If the following call pancis, it indicates UnimplementedRPCSponsoredMessagesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCSponsoredMessages_ServiceDesc, srv)
}

func _RPCSponsoredMessages_AccountToggleSponsoredMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountToggleSponsoredMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSponsoredMessagesServer).AccountToggleSponsoredMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCSponsoredMessages_AccountToggleSponsoredMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSponsoredMessagesServer).AccountToggleSponsoredMessages(ctx, req.(*TLAccountToggleSponsoredMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSponsoredMessages_ContactsGetSponsoredPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsGetSponsoredPeers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSponsoredMessagesServer).ContactsGetSponsoredPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCSponsoredMessages_ContactsGetSponsoredPeers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSponsoredMessagesServer).ContactsGetSponsoredPeers(ctx, req.(*TLContactsGetSponsoredPeers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSponsoredMessages_MessagesViewSponsoredMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesViewSponsoredMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSponsoredMessagesServer).MessagesViewSponsoredMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCSponsoredMessages_MessagesViewSponsoredMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSponsoredMessagesServer).MessagesViewSponsoredMessage(ctx, req.(*TLMessagesViewSponsoredMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSponsoredMessages_MessagesClickSponsoredMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesClickSponsoredMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSponsoredMessagesServer).MessagesClickSponsoredMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCSponsoredMessages_MessagesClickSponsoredMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSponsoredMessagesServer).MessagesClickSponsoredMessage(ctx, req.(*TLMessagesClickSponsoredMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSponsoredMessages_MessagesReportSponsoredMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReportSponsoredMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSponsoredMessagesServer).MessagesReportSponsoredMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCSponsoredMessages_MessagesReportSponsoredMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSponsoredMessagesServer).MessagesReportSponsoredMessage(ctx, req.(*TLMessagesReportSponsoredMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSponsoredMessages_MessagesGetSponsoredMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetSponsoredMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSponsoredMessagesServer).MessagesGetSponsoredMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCSponsoredMessages_MessagesGetSponsoredMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSponsoredMessagesServer).MessagesGetSponsoredMessages(ctx, req.(*TLMessagesGetSponsoredMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSponsoredMessages_ChannelsRestrictSponsoredMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsRestrictSponsoredMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSponsoredMessagesServer).ChannelsRestrictSponsoredMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCSponsoredMessages_ChannelsRestrictSponsoredMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSponsoredMessagesServer).ChannelsRestrictSponsoredMessages(ctx, req.(*TLChannelsRestrictSponsoredMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSponsoredMessages_ChannelsViewSponsoredMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsViewSponsoredMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSponsoredMessagesServer).ChannelsViewSponsoredMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCSponsoredMessages_ChannelsViewSponsoredMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSponsoredMessagesServer).ChannelsViewSponsoredMessage(ctx, req.(*TLChannelsViewSponsoredMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSponsoredMessages_ChannelsGetSponsoredMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetSponsoredMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSponsoredMessagesServer).ChannelsGetSponsoredMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCSponsoredMessages_ChannelsGetSponsoredMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSponsoredMessagesServer).ChannelsGetSponsoredMessages(ctx, req.(*TLChannelsGetSponsoredMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSponsoredMessages_ChannelsClickSponsoredMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsClickSponsoredMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSponsoredMessagesServer).ChannelsClickSponsoredMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCSponsoredMessages_ChannelsClickSponsoredMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSponsoredMessagesServer).ChannelsClickSponsoredMessage(ctx, req.(*TLChannelsClickSponsoredMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSponsoredMessages_ChannelsReportSponsoredMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsReportSponsoredMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSponsoredMessagesServer).ChannelsReportSponsoredMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCSponsoredMessages_ChannelsReportSponsoredMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSponsoredMessagesServer).ChannelsReportSponsoredMessage(ctx, req.(*TLChannelsReportSponsoredMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCSponsoredMessages_ServiceDesc is the grpc.ServiceDesc for RPCSponsoredMessages service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCSponsoredMessages_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCSponsoredMessages",
	HandlerType: (*RPCSponsoredMessagesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "account_toggleSponsoredMessages",
			Handler:    _RPCSponsoredMessages_AccountToggleSponsoredMessages_Handler,
		},
		{
			MethodName: "contacts_getSponsoredPeers",
			Handler:    _RPCSponsoredMessages_ContactsGetSponsoredPeers_Handler,
		},
		{
			MethodName: "messages_viewSponsoredMessage",
			Handler:    _RPCSponsoredMessages_MessagesViewSponsoredMessage_Handler,
		},
		{
			MethodName: "messages_clickSponsoredMessage",
			Handler:    _RPCSponsoredMessages_MessagesClickSponsoredMessage_Handler,
		},
		{
			MethodName: "messages_reportSponsoredMessage",
			Handler:    _RPCSponsoredMessages_MessagesReportSponsoredMessage_Handler,
		},
		{
			MethodName: "messages_getSponsoredMessages",
			Handler:    _RPCSponsoredMessages_MessagesGetSponsoredMessages_Handler,
		},
		{
			MethodName: "channels_restrictSponsoredMessages",
			Handler:    _RPCSponsoredMessages_ChannelsRestrictSponsoredMessages_Handler,
		},
		{
			MethodName: "channels_viewSponsoredMessage",
			Handler:    _RPCSponsoredMessages_ChannelsViewSponsoredMessage_Handler,
		},
		{
			MethodName: "channels_getSponsoredMessages",
			Handler:    _RPCSponsoredMessages_ChannelsGetSponsoredMessages_Handler,
		},
		{
			MethodName: "channels_clickSponsoredMessage",
			Handler:    _RPCSponsoredMessages_ChannelsClickSponsoredMessage_Handler,
		},
		{
			MethodName: "channels_reportSponsoredMessage",
			Handler:    _RPCSponsoredMessages_ChannelsReportSponsoredMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCStarSubscriptions_PaymentsGetStarsSubscriptions_FullMethodName      = "/mtproto.RPCStarSubscriptions/payments_getStarsSubscriptions"
	RPCStarSubscriptions_PaymentsChangeStarsSubscription_FullMethodName    = "/mtproto.RPCStarSubscriptions/payments_changeStarsSubscription"
	RPCStarSubscriptions_PaymentsFulfillStarsSubscription_FullMethodName   = "/mtproto.RPCStarSubscriptions/payments_fulfillStarsSubscription"
	RPCStarSubscriptions_PaymentsBotCancelStarsSubscription_FullMethodName = "/mtproto.RPCStarSubscriptions/payments_botCancelStarsSubscription"
)

// RPCStarSubscriptionsClient is the client API for RPCStarSubscriptions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCStarSubscriptionsClient interface {
	PaymentsGetStarsSubscriptions(ctx context.Context, in *TLPaymentsGetStarsSubscriptions, opts ...grpc.CallOption) (*Payments_StarsStatus, error)
	PaymentsChangeStarsSubscription(ctx context.Context, in *TLPaymentsChangeStarsSubscription, opts ...grpc.CallOption) (*Bool, error)
	PaymentsFulfillStarsSubscription(ctx context.Context, in *TLPaymentsFulfillStarsSubscription, opts ...grpc.CallOption) (*Bool, error)
	PaymentsBotCancelStarsSubscription(ctx context.Context, in *TLPaymentsBotCancelStarsSubscription, opts ...grpc.CallOption) (*Bool, error)
}

type rPCStarSubscriptionsClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCStarSubscriptionsClient(cc grpc.ClientConnInterface) RPCStarSubscriptionsClient {
	return &rPCStarSubscriptionsClient{cc}
}

func (c *rPCStarSubscriptionsClient) PaymentsGetStarsSubscriptions(ctx context.Context, in *TLPaymentsGetStarsSubscriptions, opts ...grpc.CallOption) (*Payments_StarsStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payments_StarsStatus)
	err := c.cc.Invoke(ctx, RPCStarSubscriptions_PaymentsGetStarsSubscriptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStarSubscriptionsClient) PaymentsChangeStarsSubscription(ctx context.Context, in *TLPaymentsChangeStarsSubscription, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCStarSubscriptions_PaymentsChangeStarsSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStarSubscriptionsClient) PaymentsFulfillStarsSubscription(ctx context.Context, in *TLPaymentsFulfillStarsSubscription, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCStarSubscriptions_PaymentsFulfillStarsSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStarSubscriptionsClient) PaymentsBotCancelStarsSubscription(ctx context.Context, in *TLPaymentsBotCancelStarsSubscription, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCStarSubscriptions_PaymentsBotCancelStarsSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCStarSubscriptionsServer is the server API for RPCStarSubscriptions service.
// All implementations should embed UnimplementedRPCStarSubscriptionsServer
// for forward compatibility.
type RPCStarSubscriptionsServer interface {
	PaymentsGetStarsSubscriptions(context.Context, *TLPaymentsGetStarsSubscriptions) (*Payments_StarsStatus, error)
	PaymentsChangeStarsSubscription(context.Context, *TLPaymentsChangeStarsSubscription) (*Bool, error)
	PaymentsFulfillStarsSubscription(context.Context, *TLPaymentsFulfillStarsSubscription) (*Bool, error)
	PaymentsBotCancelStarsSubscription(context.Context, *TLPaymentsBotCancelStarsSubscription) (*Bool, error)
}

// UnimplementedRPCStarSubscriptionsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCStarSubscriptionsServer struct{}

func (UnimplementedRPCStarSubscriptionsServer) PaymentsGetStarsSubscriptions(context.Context, *TLPaymentsGetStarsSubscriptions) (*Payments_StarsStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsGetStarsSubscriptions not implemented")
}
func (UnimplementedRPCStarSubscriptionsServer) PaymentsChangeStarsSubscription(context.Context, *TLPaymentsChangeStarsSubscription) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsChangeStarsSubscription not implemented")
}
func (UnimplementedRPCStarSubscriptionsServer) PaymentsFulfillStarsSubscription(context.Context, *TLPaymentsFulfillStarsSubscription) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsFulfillStarsSubscription not implemented")
}
func (UnimplementedRPCStarSubscriptionsServer) PaymentsBotCancelStarsSubscription(context.Context, *TLPaymentsBotCancelStarsSubscription) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsBotCancelStarsSubscription not implemented")
}
func (UnimplementedRPCStarSubscriptionsServer) testEmbeddedByValue() {}

// UnsafeRPCStarSubscriptionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCStarSubscriptionsServer will
// result in compilation errors.
type UnsafeRPCStarSubscriptionsServer interface {
	mustEmbedUnimplementedRPCStarSubscriptionsServer()
}

func RegisterRPCStarSubscriptionsServer(s grpc.ServiceRegistrar, srv RPCStarSubscriptionsServer) {
	// If the following call pancis, it indicates UnimplementedRPCStarSubscriptionsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCStarSubscriptions_ServiceDesc, srv)
}

func _RPCStarSubscriptions_PaymentsGetStarsSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsGetStarsSubscriptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStarSubscriptionsServer).PaymentsGetStarsSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStarSubscriptions_PaymentsGetStarsSubscriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStarSubscriptionsServer).PaymentsGetStarsSubscriptions(ctx, req.(*TLPaymentsGetStarsSubscriptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStarSubscriptions_PaymentsChangeStarsSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsChangeStarsSubscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStarSubscriptionsServer).PaymentsChangeStarsSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStarSubscriptions_PaymentsChangeStarsSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStarSubscriptionsServer).PaymentsChangeStarsSubscription(ctx, req.(*TLPaymentsChangeStarsSubscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStarSubscriptions_PaymentsFulfillStarsSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsFulfillStarsSubscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStarSubscriptionsServer).PaymentsFulfillStarsSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStarSubscriptions_PaymentsFulfillStarsSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStarSubscriptionsServer).PaymentsFulfillStarsSubscription(ctx, req.(*TLPaymentsFulfillStarsSubscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStarSubscriptions_PaymentsBotCancelStarsSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsBotCancelStarsSubscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStarSubscriptionsServer).PaymentsBotCancelStarsSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStarSubscriptions_PaymentsBotCancelStarsSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStarSubscriptionsServer).PaymentsBotCancelStarsSubscription(ctx, req.(*TLPaymentsBotCancelStarsSubscription))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCStarSubscriptions_ServiceDesc is the grpc.ServiceDesc for RPCStarSubscriptions service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCStarSubscriptions_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCStarSubscriptions",
	HandlerType: (*RPCStarSubscriptionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "payments_getStarsSubscriptions",
			Handler:    _RPCStarSubscriptions_PaymentsGetStarsSubscriptions_Handler,
		},
		{
			MethodName: "payments_changeStarsSubscription",
			Handler:    _RPCStarSubscriptions_PaymentsChangeStarsSubscription_Handler,
		},
		{
			MethodName: "payments_fulfillStarsSubscription",
			Handler:    _RPCStarSubscriptions_PaymentsFulfillStarsSubscription_Handler,
		},
		{
			MethodName: "payments_botCancelStarsSubscription",
			Handler:    _RPCStarSubscriptions_PaymentsBotCancelStarsSubscription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCStars_PaymentsGetStarsTopupOptions_FullMethodName         = "/mtproto.RPCStars/payments_getStarsTopupOptions"
	RPCStars_PaymentsGetStarsStatus_FullMethodName               = "/mtproto.RPCStars/payments_getStarsStatus"
	RPCStars_PaymentsGetStarsTransactions_FullMethodName         = "/mtproto.RPCStars/payments_getStarsTransactions"
	RPCStars_PaymentsSendStarsForm_FullMethodName                = "/mtproto.RPCStars/payments_sendStarsForm"
	RPCStars_PaymentsRefundStarsCharge_FullMethodName            = "/mtproto.RPCStars/payments_refundStarsCharge"
	RPCStars_PaymentsGetStarsRevenueStats_FullMethodName         = "/mtproto.RPCStars/payments_getStarsRevenueStats"
	RPCStars_PaymentsGetStarsRevenueWithdrawalUrl_FullMethodName = "/mtproto.RPCStars/payments_getStarsRevenueWithdrawalUrl"
	RPCStars_PaymentsGetStarsRevenueAdsAccountUrl_FullMethodName = "/mtproto.RPCStars/payments_getStarsRevenueAdsAccountUrl"
	RPCStars_PaymentsGetStarsTransactionsByID_FullMethodName     = "/mtproto.RPCStars/payments_getStarsTransactionsByID"
	RPCStars_PaymentsGetStarsGiftOptions_FullMethodName          = "/mtproto.RPCStars/payments_getStarsGiftOptions"
)

// RPCStarsClient is the client API for RPCStars service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCStarsClient interface {
	PaymentsGetStarsTopupOptions(ctx context.Context, in *TLPaymentsGetStarsTopupOptions, opts ...grpc.CallOption) (*Vector_StarsTopupOption, error)
	PaymentsGetStarsStatus(ctx context.Context, in *TLPaymentsGetStarsStatus, opts ...grpc.CallOption) (*Payments_StarsStatus, error)
	PaymentsGetStarsTransactions(ctx context.Context, in *TLPaymentsGetStarsTransactions, opts ...grpc.CallOption) (*Payments_StarsStatus, error)
	PaymentsSendStarsForm(ctx context.Context, in *TLPaymentsSendStarsForm, opts ...grpc.CallOption) (*Payments_PaymentResult, error)
	PaymentsRefundStarsCharge(ctx context.Context, in *TLPaymentsRefundStarsCharge, opts ...grpc.CallOption) (*Updates, error)
	PaymentsGetStarsRevenueStats(ctx context.Context, in *TLPaymentsGetStarsRevenueStats, opts ...grpc.CallOption) (*Payments_StarsRevenueStats, error)
	PaymentsGetStarsRevenueWithdrawalUrl(ctx context.Context, in *TLPaymentsGetStarsRevenueWithdrawalUrl, opts ...grpc.CallOption) (*Payments_StarsRevenueWithdrawalUrl, error)
	PaymentsGetStarsRevenueAdsAccountUrl(ctx context.Context, in *TLPaymentsGetStarsRevenueAdsAccountUrl, opts ...grpc.CallOption) (*Payments_StarsRevenueAdsAccountUrl, error)
	PaymentsGetStarsTransactionsByID(ctx context.Context, in *TLPaymentsGetStarsTransactionsByID, opts ...grpc.CallOption) (*Payments_StarsStatus, error)
	PaymentsGetStarsGiftOptions(ctx context.Context, in *TLPaymentsGetStarsGiftOptions, opts ...grpc.CallOption) (*Vector_StarsGiftOption, error)
}

type rPCStarsClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCStarsClient(cc grpc.ClientConnInterface) RPCStarsClient {
	return &rPCStarsClient{cc}
}

func (c *rPCStarsClient) PaymentsGetStarsTopupOptions(ctx context.Context, in *TLPaymentsGetStarsTopupOptions, opts ...grpc.CallOption) (*Vector_StarsTopupOption, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_StarsTopupOption)
	err := c.cc.Invoke(ctx, RPCStars_PaymentsGetStarsTopupOptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStarsClient) PaymentsGetStarsStatus(ctx context.Context, in *TLPaymentsGetStarsStatus, opts ...grpc.CallOption) (*Payments_StarsStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payments_StarsStatus)
	err := c.cc.Invoke(ctx, RPCStars_PaymentsGetStarsStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStarsClient) PaymentsGetStarsTransactions(ctx context.Context, in *TLPaymentsGetStarsTransactions, opts ...grpc.CallOption) (*Payments_StarsStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payments_StarsStatus)
	err := c.cc.Invoke(ctx, RPCStars_PaymentsGetStarsTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStarsClient) PaymentsSendStarsForm(ctx context.Context, in *TLPaymentsSendStarsForm, opts ...grpc.CallOption) (*Payments_PaymentResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payments_PaymentResult)
	err := c.cc.Invoke(ctx, RPCStars_PaymentsSendStarsForm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStarsClient) PaymentsRefundStarsCharge(ctx context.Context, in *TLPaymentsRefundStarsCharge, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCStars_PaymentsRefundStarsCharge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStarsClient) PaymentsGetStarsRevenueStats(ctx context.Context, in *TLPaymentsGetStarsRevenueStats, opts ...grpc.CallOption) (*Payments_StarsRevenueStats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payments_StarsRevenueStats)
	err := c.cc.Invoke(ctx, RPCStars_PaymentsGetStarsRevenueStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStarsClient) PaymentsGetStarsRevenueWithdrawalUrl(ctx context.Context, in *TLPaymentsGetStarsRevenueWithdrawalUrl, opts ...grpc.CallOption) (*Payments_StarsRevenueWithdrawalUrl, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payments_StarsRevenueWithdrawalUrl)
	err := c.cc.Invoke(ctx, RPCStars_PaymentsGetStarsRevenueWithdrawalUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStarsClient) PaymentsGetStarsRevenueAdsAccountUrl(ctx context.Context, in *TLPaymentsGetStarsRevenueAdsAccountUrl, opts ...grpc.CallOption) (*Payments_StarsRevenueAdsAccountUrl, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payments_StarsRevenueAdsAccountUrl)
	err := c.cc.Invoke(ctx, RPCStars_PaymentsGetStarsRevenueAdsAccountUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStarsClient) PaymentsGetStarsTransactionsByID(ctx context.Context, in *TLPaymentsGetStarsTransactionsByID, opts ...grpc.CallOption) (*Payments_StarsStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payments_StarsStatus)
	err := c.cc.Invoke(ctx, RPCStars_PaymentsGetStarsTransactionsByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStarsClient) PaymentsGetStarsGiftOptions(ctx context.Context, in *TLPaymentsGetStarsGiftOptions, opts ...grpc.CallOption) (*Vector_StarsGiftOption, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_StarsGiftOption)
	err := c.cc.Invoke(ctx, RPCStars_PaymentsGetStarsGiftOptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCStarsServer is the server API for RPCStars service.
// All implementations should embed UnimplementedRPCStarsServer
// for forward compatibility.
type RPCStarsServer interface {
	PaymentsGetStarsTopupOptions(context.Context, *TLPaymentsGetStarsTopupOptions) (*Vector_StarsTopupOption, error)
	PaymentsGetStarsStatus(context.Context, *TLPaymentsGetStarsStatus) (*Payments_StarsStatus, error)
	PaymentsGetStarsTransactions(context.Context, *TLPaymentsGetStarsTransactions) (*Payments_StarsStatus, error)
	PaymentsSendStarsForm(context.Context, *TLPaymentsSendStarsForm) (*Payments_PaymentResult, error)
	PaymentsRefundStarsCharge(context.Context, *TLPaymentsRefundStarsCharge) (*Updates, error)
	PaymentsGetStarsRevenueStats(context.Context, *TLPaymentsGetStarsRevenueStats) (*Payments_StarsRevenueStats, error)
	PaymentsGetStarsRevenueWithdrawalUrl(context.Context, *TLPaymentsGetStarsRevenueWithdrawalUrl) (*Payments_StarsRevenueWithdrawalUrl, error)
	PaymentsGetStarsRevenueAdsAccountUrl(context.Context, *TLPaymentsGetStarsRevenueAdsAccountUrl) (*Payments_StarsRevenueAdsAccountUrl, error)
	PaymentsGetStarsTransactionsByID(context.Context, *TLPaymentsGetStarsTransactionsByID) (*Payments_StarsStatus, error)
	PaymentsGetStarsGiftOptions(context.Context, *TLPaymentsGetStarsGiftOptions) (*Vector_StarsGiftOption, error)
}

// UnimplementedRPCStarsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCStarsServer struct{}

func (UnimplementedRPCStarsServer) PaymentsGetStarsTopupOptions(context.Context, *TLPaymentsGetStarsTopupOptions) (*Vector_StarsTopupOption, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsGetStarsTopupOptions not implemented")
}
func (UnimplementedRPCStarsServer) PaymentsGetStarsStatus(context.Context, *TLPaymentsGetStarsStatus) (*Payments_StarsStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsGetStarsStatus not implemented")
}
func (UnimplementedRPCStarsServer) PaymentsGetStarsTransactions(context.Context, *TLPaymentsGetStarsTransactions) (*Payments_StarsStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsGetStarsTransactions not implemented")
}
func (UnimplementedRPCStarsServer) PaymentsSendStarsForm(context.Context, *TLPaymentsSendStarsForm) (*Payments_PaymentResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsSendStarsForm not implemented")
}
func (UnimplementedRPCStarsServer) PaymentsRefundStarsCharge(context.Context, *TLPaymentsRefundStarsCharge) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsRefundStarsCharge not implemented")
}
func (UnimplementedRPCStarsServer) PaymentsGetStarsRevenueStats(context.Context, *TLPaymentsGetStarsRevenueStats) (*Payments_StarsRevenueStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsGetStarsRevenueStats not implemented")
}
func (UnimplementedRPCStarsServer) PaymentsGetStarsRevenueWithdrawalUrl(context.Context, *TLPaymentsGetStarsRevenueWithdrawalUrl) (*Payments_StarsRevenueWithdrawalUrl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsGetStarsRevenueWithdrawalUrl not implemented")
}
func (UnimplementedRPCStarsServer) PaymentsGetStarsRevenueAdsAccountUrl(context.Context, *TLPaymentsGetStarsRevenueAdsAccountUrl) (*Payments_StarsRevenueAdsAccountUrl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsGetStarsRevenueAdsAccountUrl not implemented")
}
func (UnimplementedRPCStarsServer) PaymentsGetStarsTransactionsByID(context.Context, *TLPaymentsGetStarsTransactionsByID) (*Payments_StarsStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsGetStarsTransactionsByID not implemented")
}
func (UnimplementedRPCStarsServer) PaymentsGetStarsGiftOptions(context.Context, *TLPaymentsGetStarsGiftOptions) (*Vector_StarsGiftOption, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsGetStarsGiftOptions not implemented")
}
func (UnimplementedRPCStarsServer) testEmbeddedByValue() {}

// UnsafeRPCStarsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCStarsServer will
// result in compilation errors.
type UnsafeRPCStarsServer interface {
	mustEmbedUnimplementedRPCStarsServer()
}

func RegisterRPCStarsServer(s grpc.ServiceRegistrar, srv RPCStarsServer) {
	// If the following call pancis, it indicates UnimplementedRPCStarsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCStars_ServiceDesc, srv)
}

func _RPCStars_PaymentsGetStarsTopupOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsGetStarsTopupOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStarsServer).PaymentsGetStarsTopupOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStars_PaymentsGetStarsTopupOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStarsServer).PaymentsGetStarsTopupOptions(ctx, req.(*TLPaymentsGetStarsTopupOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStars_PaymentsGetStarsStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsGetStarsStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStarsServer).PaymentsGetStarsStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStars_PaymentsGetStarsStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStarsServer).PaymentsGetStarsStatus(ctx, req.(*TLPaymentsGetStarsStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStars_PaymentsGetStarsTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsGetStarsTransactions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStarsServer).PaymentsGetStarsTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStars_PaymentsGetStarsTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStarsServer).PaymentsGetStarsTransactions(ctx, req.(*TLPaymentsGetStarsTransactions))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStars_PaymentsSendStarsForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsSendStarsForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStarsServer).PaymentsSendStarsForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStars_PaymentsSendStarsForm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStarsServer).PaymentsSendStarsForm(ctx, req.(*TLPaymentsSendStarsForm))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStars_PaymentsRefundStarsCharge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsRefundStarsCharge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStarsServer).PaymentsRefundStarsCharge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStars_PaymentsRefundStarsCharge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStarsServer).PaymentsRefundStarsCharge(ctx, req.(*TLPaymentsRefundStarsCharge))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStars_PaymentsGetStarsRevenueStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsGetStarsRevenueStats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStarsServer).PaymentsGetStarsRevenueStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStars_PaymentsGetStarsRevenueStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStarsServer).PaymentsGetStarsRevenueStats(ctx, req.(*TLPaymentsGetStarsRevenueStats))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStars_PaymentsGetStarsRevenueWithdrawalUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsGetStarsRevenueWithdrawalUrl)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStarsServer).PaymentsGetStarsRevenueWithdrawalUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStars_PaymentsGetStarsRevenueWithdrawalUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStarsServer).PaymentsGetStarsRevenueWithdrawalUrl(ctx, req.(*TLPaymentsGetStarsRevenueWithdrawalUrl))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStars_PaymentsGetStarsRevenueAdsAccountUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsGetStarsRevenueAdsAccountUrl)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStarsServer).PaymentsGetStarsRevenueAdsAccountUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStars_PaymentsGetStarsRevenueAdsAccountUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStarsServer).PaymentsGetStarsRevenueAdsAccountUrl(ctx, req.(*TLPaymentsGetStarsRevenueAdsAccountUrl))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStars_PaymentsGetStarsTransactionsByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsGetStarsTransactionsByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStarsServer).PaymentsGetStarsTransactionsByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStars_PaymentsGetStarsTransactionsByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStarsServer).PaymentsGetStarsTransactionsByID(ctx, req.(*TLPaymentsGetStarsTransactionsByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStars_PaymentsGetStarsGiftOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsGetStarsGiftOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStarsServer).PaymentsGetStarsGiftOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStars_PaymentsGetStarsGiftOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStarsServer).PaymentsGetStarsGiftOptions(ctx, req.(*TLPaymentsGetStarsGiftOptions))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCStars_ServiceDesc is the grpc.ServiceDesc for RPCStars service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCStars_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCStars",
	HandlerType: (*RPCStarsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "payments_getStarsTopupOptions",
			Handler:    _RPCStars_PaymentsGetStarsTopupOptions_Handler,
		},
		{
			MethodName: "payments_getStarsStatus",
			Handler:    _RPCStars_PaymentsGetStarsStatus_Handler,
		},
		{
			MethodName: "payments_getStarsTransactions",
			Handler:    _RPCStars_PaymentsGetStarsTransactions_Handler,
		},
		{
			MethodName: "payments_sendStarsForm",
			Handler:    _RPCStars_PaymentsSendStarsForm_Handler,
		},
		{
			MethodName: "payments_refundStarsCharge",
			Handler:    _RPCStars_PaymentsRefundStarsCharge_Handler,
		},
		{
			MethodName: "payments_getStarsRevenueStats",
			Handler:    _RPCStars_PaymentsGetStarsRevenueStats_Handler,
		},
		{
			MethodName: "payments_getStarsRevenueWithdrawalUrl",
			Handler:    _RPCStars_PaymentsGetStarsRevenueWithdrawalUrl_Handler,
		},
		{
			MethodName: "payments_getStarsRevenueAdsAccountUrl",
			Handler:    _RPCStars_PaymentsGetStarsRevenueAdsAccountUrl_Handler,
		},
		{
			MethodName: "payments_getStarsTransactionsByID",
			Handler:    _RPCStars_PaymentsGetStarsTransactionsByID_Handler,
		},
		{
			MethodName: "payments_getStarsGiftOptions",
			Handler:    _RPCStars_PaymentsGetStarsGiftOptions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCStatistics_StatsGetBroadcastStats_FullMethodName                = "/mtproto.RPCStatistics/stats_getBroadcastStats"
	RPCStatistics_StatsLoadAsyncGraph_FullMethodName                   = "/mtproto.RPCStatistics/stats_loadAsyncGraph"
	RPCStatistics_StatsGetMegagroupStats_FullMethodName                = "/mtproto.RPCStatistics/stats_getMegagroupStats"
	RPCStatistics_StatsGetMessagePublicForwards5F150144_FullMethodName = "/mtproto.RPCStatistics/stats_getMessagePublicForwards5F150144"
	RPCStatistics_StatsGetMessageStats_FullMethodName                  = "/mtproto.RPCStatistics/stats_getMessageStats"
	RPCStatistics_StatsGetStoryStats_FullMethodName                    = "/mtproto.RPCStatistics/stats_getStoryStats"
	RPCStatistics_StatsGetStoryPublicForwards_FullMethodName           = "/mtproto.RPCStatistics/stats_getStoryPublicForwards"
	RPCStatistics_StatsGetMessagePublicForwards5630281B_FullMethodName = "/mtproto.RPCStatistics/stats_getMessagePublicForwards5630281B"
)

// RPCStatisticsClient is the client API for RPCStatistics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCStatisticsClient interface {
	StatsGetBroadcastStats(ctx context.Context, in *TLStatsGetBroadcastStats, opts ...grpc.CallOption) (*Stats_BroadcastStats, error)
	StatsLoadAsyncGraph(ctx context.Context, in *TLStatsLoadAsyncGraph, opts ...grpc.CallOption) (*StatsGraph, error)
	StatsGetMegagroupStats(ctx context.Context, in *TLStatsGetMegagroupStats, opts ...grpc.CallOption) (*Stats_MegagroupStats, error)
	StatsGetMessagePublicForwards5F150144(ctx context.Context, in *TLStatsGetMessagePublicForwards5F150144, opts ...grpc.CallOption) (*Stats_PublicForwards, error)
	StatsGetMessageStats(ctx context.Context, in *TLStatsGetMessageStats, opts ...grpc.CallOption) (*Stats_MessageStats, error)
	StatsGetStoryStats(ctx context.Context, in *TLStatsGetStoryStats, opts ...grpc.CallOption) (*Stats_StoryStats, error)
	StatsGetStoryPublicForwards(ctx context.Context, in *TLStatsGetStoryPublicForwards, opts ...grpc.CallOption) (*Stats_PublicForwards, error)
	StatsGetMessagePublicForwards5630281B(ctx context.Context, in *TLStatsGetMessagePublicForwards5630281B, opts ...grpc.CallOption) (*Messages_Messages, error)
}

type rPCStatisticsClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCStatisticsClient(cc grpc.ClientConnInterface) RPCStatisticsClient {
	return &rPCStatisticsClient{cc}
}

func (c *rPCStatisticsClient) StatsGetBroadcastStats(ctx context.Context, in *TLStatsGetBroadcastStats, opts ...grpc.CallOption) (*Stats_BroadcastStats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Stats_BroadcastStats)
	err := c.cc.Invoke(ctx, RPCStatistics_StatsGetBroadcastStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStatisticsClient) StatsLoadAsyncGraph(ctx context.Context, in *TLStatsLoadAsyncGraph, opts ...grpc.CallOption) (*StatsGraph, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatsGraph)
	err := c.cc.Invoke(ctx, RPCStatistics_StatsLoadAsyncGraph_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStatisticsClient) StatsGetMegagroupStats(ctx context.Context, in *TLStatsGetMegagroupStats, opts ...grpc.CallOption) (*Stats_MegagroupStats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Stats_MegagroupStats)
	err := c.cc.Invoke(ctx, RPCStatistics_StatsGetMegagroupStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStatisticsClient) StatsGetMessagePublicForwards5F150144(ctx context.Context, in *TLStatsGetMessagePublicForwards5F150144, opts ...grpc.CallOption) (*Stats_PublicForwards, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Stats_PublicForwards)
	err := c.cc.Invoke(ctx, RPCStatistics_StatsGetMessagePublicForwards5F150144_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStatisticsClient) StatsGetMessageStats(ctx context.Context, in *TLStatsGetMessageStats, opts ...grpc.CallOption) (*Stats_MessageStats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Stats_MessageStats)
	err := c.cc.Invoke(ctx, RPCStatistics_StatsGetMessageStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStatisticsClient) StatsGetStoryStats(ctx context.Context, in *TLStatsGetStoryStats, opts ...grpc.CallOption) (*Stats_StoryStats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Stats_StoryStats)
	err := c.cc.Invoke(ctx, RPCStatistics_StatsGetStoryStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStatisticsClient) StatsGetStoryPublicForwards(ctx context.Context, in *TLStatsGetStoryPublicForwards, opts ...grpc.CallOption) (*Stats_PublicForwards, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Stats_PublicForwards)
	err := c.cc.Invoke(ctx, RPCStatistics_StatsGetStoryPublicForwards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStatisticsClient) StatsGetMessagePublicForwards5630281B(ctx context.Context, in *TLStatsGetMessagePublicForwards5630281B, opts ...grpc.CallOption) (*Messages_Messages, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, RPCStatistics_StatsGetMessagePublicForwards5630281B_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCStatisticsServer is the server API for RPCStatistics service.
// All implementations should embed UnimplementedRPCStatisticsServer
// for forward compatibility.
type RPCStatisticsServer interface {
	StatsGetBroadcastStats(context.Context, *TLStatsGetBroadcastStats) (*Stats_BroadcastStats, error)
	StatsLoadAsyncGraph(context.Context, *TLStatsLoadAsyncGraph) (*StatsGraph, error)
	StatsGetMegagroupStats(context.Context, *TLStatsGetMegagroupStats) (*Stats_MegagroupStats, error)
	StatsGetMessagePublicForwards5F150144(context.Context, *TLStatsGetMessagePublicForwards5F150144) (*Stats_PublicForwards, error)
	StatsGetMessageStats(context.Context, *TLStatsGetMessageStats) (*Stats_MessageStats, error)
	StatsGetStoryStats(context.Context, *TLStatsGetStoryStats) (*Stats_StoryStats, error)
	StatsGetStoryPublicForwards(context.Context, *TLStatsGetStoryPublicForwards) (*Stats_PublicForwards, error)
	StatsGetMessagePublicForwards5630281B(context.Context, *TLStatsGetMessagePublicForwards5630281B) (*Messages_Messages, error)
}

// UnimplementedRPCStatisticsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCStatisticsServer struct{}

func (UnimplementedRPCStatisticsServer) StatsGetBroadcastStats(context.Context, *TLStatsGetBroadcastStats) (*Stats_BroadcastStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatsGetBroadcastStats not implemented")
}
func (UnimplementedRPCStatisticsServer) StatsLoadAsyncGraph(context.Context, *TLStatsLoadAsyncGraph) (*StatsGraph, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatsLoadAsyncGraph not implemented")
}
func (UnimplementedRPCStatisticsServer) StatsGetMegagroupStats(context.Context, *TLStatsGetMegagroupStats) (*Stats_MegagroupStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatsGetMegagroupStats not implemented")
}
func (UnimplementedRPCStatisticsServer) StatsGetMessagePublicForwards5F150144(context.Context, *TLStatsGetMessagePublicForwards5F150144) (*Stats_PublicForwards, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatsGetMessagePublicForwards5F150144 not implemented")
}
func (UnimplementedRPCStatisticsServer) StatsGetMessageStats(context.Context, *TLStatsGetMessageStats) (*Stats_MessageStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatsGetMessageStats not implemented")
}
func (UnimplementedRPCStatisticsServer) StatsGetStoryStats(context.Context, *TLStatsGetStoryStats) (*Stats_StoryStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatsGetStoryStats not implemented")
}
func (UnimplementedRPCStatisticsServer) StatsGetStoryPublicForwards(context.Context, *TLStatsGetStoryPublicForwards) (*Stats_PublicForwards, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatsGetStoryPublicForwards not implemented")
}
func (UnimplementedRPCStatisticsServer) StatsGetMessagePublicForwards5630281B(context.Context, *TLStatsGetMessagePublicForwards5630281B) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatsGetMessagePublicForwards5630281B not implemented")
}
func (UnimplementedRPCStatisticsServer) testEmbeddedByValue() {}

// UnsafeRPCStatisticsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCStatisticsServer will
// result in compilation errors.
type UnsafeRPCStatisticsServer interface {
	mustEmbedUnimplementedRPCStatisticsServer()
}

func RegisterRPCStatisticsServer(s grpc.ServiceRegistrar, srv RPCStatisticsServer) {
	// If the following call pancis, it indicates UnimplementedRPCStatisticsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCStatistics_ServiceDesc, srv)
}

func _RPCStatistics_StatsGetBroadcastStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStatsGetBroadcastStats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStatisticsServer).StatsGetBroadcastStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStatistics_StatsGetBroadcastStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStatisticsServer).StatsGetBroadcastStats(ctx, req.(*TLStatsGetBroadcastStats))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStatistics_StatsLoadAsyncGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStatsLoadAsyncGraph)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStatisticsServer).StatsLoadAsyncGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStatistics_StatsLoadAsyncGraph_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStatisticsServer).StatsLoadAsyncGraph(ctx, req.(*TLStatsLoadAsyncGraph))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStatistics_StatsGetMegagroupStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStatsGetMegagroupStats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStatisticsServer).StatsGetMegagroupStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStatistics_StatsGetMegagroupStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStatisticsServer).StatsGetMegagroupStats(ctx, req.(*TLStatsGetMegagroupStats))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStatistics_StatsGetMessagePublicForwards5F150144_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStatsGetMessagePublicForwards5F150144)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStatisticsServer).StatsGetMessagePublicForwards5F150144(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStatistics_StatsGetMessagePublicForwards5F150144_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStatisticsServer).StatsGetMessagePublicForwards5F150144(ctx, req.(*TLStatsGetMessagePublicForwards5F150144))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStatistics_StatsGetMessageStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStatsGetMessageStats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStatisticsServer).StatsGetMessageStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStatistics_StatsGetMessageStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStatisticsServer).StatsGetMessageStats(ctx, req.(*TLStatsGetMessageStats))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStatistics_StatsGetStoryStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStatsGetStoryStats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStatisticsServer).StatsGetStoryStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStatistics_StatsGetStoryStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStatisticsServer).StatsGetStoryStats(ctx, req.(*TLStatsGetStoryStats))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStatistics_StatsGetStoryPublicForwards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStatsGetStoryPublicForwards)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStatisticsServer).StatsGetStoryPublicForwards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStatistics_StatsGetStoryPublicForwards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStatisticsServer).StatsGetStoryPublicForwards(ctx, req.(*TLStatsGetStoryPublicForwards))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStatistics_StatsGetMessagePublicForwards5630281B_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStatsGetMessagePublicForwards5630281B)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStatisticsServer).StatsGetMessagePublicForwards5630281B(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStatistics_StatsGetMessagePublicForwards5630281B_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStatisticsServer).StatsGetMessagePublicForwards5630281B(ctx, req.(*TLStatsGetMessagePublicForwards5630281B))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCStatistics_ServiceDesc is the grpc.ServiceDesc for RPCStatistics service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCStatistics_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCStatistics",
	HandlerType: (*RPCStatisticsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "stats_getBroadcastStats",
			Handler:    _RPCStatistics_StatsGetBroadcastStats_Handler,
		},
		{
			MethodName: "stats_loadAsyncGraph",
			Handler:    _RPCStatistics_StatsLoadAsyncGraph_Handler,
		},
		{
			MethodName: "stats_getMegagroupStats",
			Handler:    _RPCStatistics_StatsGetMegagroupStats_Handler,
		},
		{
			MethodName: "stats_getMessagePublicForwards5F150144",
			Handler:    _RPCStatistics_StatsGetMessagePublicForwards5F150144_Handler,
		},
		{
			MethodName: "stats_getMessageStats",
			Handler:    _RPCStatistics_StatsGetMessageStats_Handler,
		},
		{
			MethodName: "stats_getStoryStats",
			Handler:    _RPCStatistics_StatsGetStoryStats_Handler,
		},
		{
			MethodName: "stats_getStoryPublicForwards",
			Handler:    _RPCStatistics_StatsGetStoryPublicForwards_Handler,
		},
		{
			MethodName: "stats_getMessagePublicForwards5630281B",
			Handler:    _RPCStatistics_StatsGetMessagePublicForwards5630281B_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCStickers_MessagesGetStickers_FullMethodName            = "/mtproto.RPCStickers/messages_getStickers"
	RPCStickers_MessagesGetAllStickers_FullMethodName         = "/mtproto.RPCStickers/messages_getAllStickers"
	RPCStickers_MessagesGetStickerSet_FullMethodName          = "/mtproto.RPCStickers/messages_getStickerSet"
	RPCStickers_MessagesInstallStickerSet_FullMethodName      = "/mtproto.RPCStickers/messages_installStickerSet"
	RPCStickers_MessagesUninstallStickerSet_FullMethodName    = "/mtproto.RPCStickers/messages_uninstallStickerSet"
	RPCStickers_MessagesReorderStickerSets_FullMethodName     = "/mtproto.RPCStickers/messages_reorderStickerSets"
	RPCStickers_MessagesGetFeaturedStickers_FullMethodName    = "/mtproto.RPCStickers/messages_getFeaturedStickers"
	RPCStickers_MessagesReadFeaturedStickers_FullMethodName   = "/mtproto.RPCStickers/messages_readFeaturedStickers"
	RPCStickers_MessagesGetRecentStickers_FullMethodName      = "/mtproto.RPCStickers/messages_getRecentStickers"
	RPCStickers_MessagesSaveRecentSticker_FullMethodName      = "/mtproto.RPCStickers/messages_saveRecentSticker"
	RPCStickers_MessagesClearRecentStickers_FullMethodName    = "/mtproto.RPCStickers/messages_clearRecentStickers"
	RPCStickers_MessagesGetArchivedStickers_FullMethodName    = "/mtproto.RPCStickers/messages_getArchivedStickers"
	RPCStickers_MessagesGetMaskStickers_FullMethodName        = "/mtproto.RPCStickers/messages_getMaskStickers"
	RPCStickers_MessagesGetAttachedStickers_FullMethodName    = "/mtproto.RPCStickers/messages_getAttachedStickers"
	RPCStickers_MessagesGetFavedStickers_FullMethodName       = "/mtproto.RPCStickers/messages_getFavedStickers"
	RPCStickers_MessagesFaveSticker_FullMethodName            = "/mtproto.RPCStickers/messages_faveSticker"
	RPCStickers_MessagesSearchStickerSets_FullMethodName      = "/mtproto.RPCStickers/messages_searchStickerSets"
	RPCStickers_MessagesToggleStickerSets_FullMethodName      = "/mtproto.RPCStickers/messages_toggleStickerSets"
	RPCStickers_MessagesGetOldFeaturedStickers_FullMethodName = "/mtproto.RPCStickers/messages_getOldFeaturedStickers"
	RPCStickers_MessagesSearchEmojiStickerSets_FullMethodName = "/mtproto.RPCStickers/messages_searchEmojiStickerSets"
	RPCStickers_MessagesGetMyStickers_FullMethodName          = "/mtproto.RPCStickers/messages_getMyStickers"
	RPCStickers_MessagesSearchStickers_FullMethodName         = "/mtproto.RPCStickers/messages_searchStickers"
	RPCStickers_StickersCreateStickerSet_FullMethodName       = "/mtproto.RPCStickers/stickers_createStickerSet"
	RPCStickers_StickersRemoveStickerFromSet_FullMethodName   = "/mtproto.RPCStickers/stickers_removeStickerFromSet"
	RPCStickers_StickersChangeStickerPosition_FullMethodName  = "/mtproto.RPCStickers/stickers_changeStickerPosition"
	RPCStickers_StickersAddStickerToSet_FullMethodName        = "/mtproto.RPCStickers/stickers_addStickerToSet"
	RPCStickers_StickersSetStickerSetThumb_FullMethodName     = "/mtproto.RPCStickers/stickers_setStickerSetThumb"
	RPCStickers_StickersCheckShortName_FullMethodName         = "/mtproto.RPCStickers/stickers_checkShortName"
	RPCStickers_StickersSuggestShortName_FullMethodName       = "/mtproto.RPCStickers/stickers_suggestShortName"
	RPCStickers_StickersChangeSticker_FullMethodName          = "/mtproto.RPCStickers/stickers_changeSticker"
	RPCStickers_StickersRenameStickerSet_FullMethodName       = "/mtproto.RPCStickers/stickers_renameStickerSet"
	RPCStickers_StickersDeleteStickerSet_FullMethodName       = "/mtproto.RPCStickers/stickers_deleteStickerSet"
	RPCStickers_StickersReplaceSticker_FullMethodName         = "/mtproto.RPCStickers/stickers_replaceSticker"
)

// RPCStickersClient is the client API for RPCStickers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCStickersClient interface {
	MessagesGetStickers(ctx context.Context, in *TLMessagesGetStickers, opts ...grpc.CallOption) (*Messages_Stickers, error)
	MessagesGetAllStickers(ctx context.Context, in *TLMessagesGetAllStickers, opts ...grpc.CallOption) (*Messages_AllStickers, error)
	MessagesGetStickerSet(ctx context.Context, in *TLMessagesGetStickerSet, opts ...grpc.CallOption) (*Messages_StickerSet, error)
	MessagesInstallStickerSet(ctx context.Context, in *TLMessagesInstallStickerSet, opts ...grpc.CallOption) (*Messages_StickerSetInstallResult, error)
	MessagesUninstallStickerSet(ctx context.Context, in *TLMessagesUninstallStickerSet, opts ...grpc.CallOption) (*Bool, error)
	MessagesReorderStickerSets(ctx context.Context, in *TLMessagesReorderStickerSets, opts ...grpc.CallOption) (*Bool, error)
	MessagesGetFeaturedStickers(ctx context.Context, in *TLMessagesGetFeaturedStickers, opts ...grpc.CallOption) (*Messages_FeaturedStickers, error)
	MessagesReadFeaturedStickers(ctx context.Context, in *TLMessagesReadFeaturedStickers, opts ...grpc.CallOption) (*Bool, error)
	MessagesGetRecentStickers(ctx context.Context, in *TLMessagesGetRecentStickers, opts ...grpc.CallOption) (*Messages_RecentStickers, error)
	MessagesSaveRecentSticker(ctx context.Context, in *TLMessagesSaveRecentSticker, opts ...grpc.CallOption) (*Bool, error)
	MessagesClearRecentStickers(ctx context.Context, in *TLMessagesClearRecentStickers, opts ...grpc.CallOption) (*Bool, error)
	MessagesGetArchivedStickers(ctx context.Context, in *TLMessagesGetArchivedStickers, opts ...grpc.CallOption) (*Messages_ArchivedStickers, error)
	MessagesGetMaskStickers(ctx context.Context, in *TLMessagesGetMaskStickers, opts ...grpc.CallOption) (*Messages_AllStickers, error)
	MessagesGetAttachedStickers(ctx context.Context, in *TLMessagesGetAttachedStickers, opts ...grpc.CallOption) (*Vector_StickerSetCovered, error)
	MessagesGetFavedStickers(ctx context.Context, in *TLMessagesGetFavedStickers, opts ...grpc.CallOption) (*Messages_FavedStickers, error)
	MessagesFaveSticker(ctx context.Context, in *TLMessagesFaveSticker, opts ...grpc.CallOption) (*Bool, error)
	MessagesSearchStickerSets(ctx context.Context, in *TLMessagesSearchStickerSets, opts ...grpc.CallOption) (*Messages_FoundStickerSets, error)
	MessagesToggleStickerSets(ctx context.Context, in *TLMessagesToggleStickerSets, opts ...grpc.CallOption) (*Bool, error)
	MessagesGetOldFeaturedStickers(ctx context.Context, in *TLMessagesGetOldFeaturedStickers, opts ...grpc.CallOption) (*Messages_FeaturedStickers, error)
	MessagesSearchEmojiStickerSets(ctx context.Context, in *TLMessagesSearchEmojiStickerSets, opts ...grpc.CallOption) (*Messages_FoundStickerSets, error)
	MessagesGetMyStickers(ctx context.Context, in *TLMessagesGetMyStickers, opts ...grpc.CallOption) (*Messages_MyStickers, error)
	MessagesSearchStickers(ctx context.Context, in *TLMessagesSearchStickers, opts ...grpc.CallOption) (*Messages_FoundStickers, error)
	StickersCreateStickerSet(ctx context.Context, in *TLStickersCreateStickerSet, opts ...grpc.CallOption) (*Messages_StickerSet, error)
	StickersRemoveStickerFromSet(ctx context.Context, in *TLStickersRemoveStickerFromSet, opts ...grpc.CallOption) (*Messages_StickerSet, error)
	StickersChangeStickerPosition(ctx context.Context, in *TLStickersChangeStickerPosition, opts ...grpc.CallOption) (*Messages_StickerSet, error)
	StickersAddStickerToSet(ctx context.Context, in *TLStickersAddStickerToSet, opts ...grpc.CallOption) (*Messages_StickerSet, error)
	StickersSetStickerSetThumb(ctx context.Context, in *TLStickersSetStickerSetThumb, opts ...grpc.CallOption) (*Messages_StickerSet, error)
	StickersCheckShortName(ctx context.Context, in *TLStickersCheckShortName, opts ...grpc.CallOption) (*Bool, error)
	StickersSuggestShortName(ctx context.Context, in *TLStickersSuggestShortName, opts ...grpc.CallOption) (*Stickers_SuggestedShortName, error)
	StickersChangeSticker(ctx context.Context, in *TLStickersChangeSticker, opts ...grpc.CallOption) (*Messages_StickerSet, error)
	StickersRenameStickerSet(ctx context.Context, in *TLStickersRenameStickerSet, opts ...grpc.CallOption) (*Messages_StickerSet, error)
	StickersDeleteStickerSet(ctx context.Context, in *TLStickersDeleteStickerSet, opts ...grpc.CallOption) (*Bool, error)
	StickersReplaceSticker(ctx context.Context, in *TLStickersReplaceSticker, opts ...grpc.CallOption) (*Messages_StickerSet, error)
}

type rPCStickersClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCStickersClient(cc grpc.ClientConnInterface) RPCStickersClient {
	return &rPCStickersClient{cc}
}

func (c *rPCStickersClient) MessagesGetStickers(ctx context.Context, in *TLMessagesGetStickers, opts ...grpc.CallOption) (*Messages_Stickers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_Stickers)
	err := c.cc.Invoke(ctx, RPCStickers_MessagesGetStickers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStickersClient) MessagesGetAllStickers(ctx context.Context, in *TLMessagesGetAllStickers, opts ...grpc.CallOption) (*Messages_AllStickers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_AllStickers)
	err := c.cc.Invoke(ctx, RPCStickers_MessagesGetAllStickers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStickersClient) MessagesGetStickerSet(ctx context.Context, in *TLMessagesGetStickerSet, opts ...grpc.CallOption) (*Messages_StickerSet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_StickerSet)
	err := c.cc.Invoke(ctx, RPCStickers_MessagesGetStickerSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStickersClient) MessagesInstallStickerSet(ctx context.Context, in *TLMessagesInstallStickerSet, opts ...grpc.CallOption) (*Messages_StickerSetInstallResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_StickerSetInstallResult)
	err := c.cc.Invoke(ctx, RPCStickers_MessagesInstallStickerSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStickersClient) MessagesUninstallStickerSet(ctx context.Context, in *TLMessagesUninstallStickerSet, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCStickers_MessagesUninstallStickerSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStickersClient) MessagesReorderStickerSets(ctx context.Context, in *TLMessagesReorderStickerSets, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCStickers_MessagesReorderStickerSets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStickersClient) MessagesGetFeaturedStickers(ctx context.Context, in *TLMessagesGetFeaturedStickers, opts ...grpc.CallOption) (*Messages_FeaturedStickers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_FeaturedStickers)
	err := c.cc.Invoke(ctx, RPCStickers_MessagesGetFeaturedStickers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStickersClient) MessagesReadFeaturedStickers(ctx context.Context, in *TLMessagesReadFeaturedStickers, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCStickers_MessagesReadFeaturedStickers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStickersClient) MessagesGetRecentStickers(ctx context.Context, in *TLMessagesGetRecentStickers, opts ...grpc.CallOption) (*Messages_RecentStickers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_RecentStickers)
	err := c.cc.Invoke(ctx, RPCStickers_MessagesGetRecentStickers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStickersClient) MessagesSaveRecentSticker(ctx context.Context, in *TLMessagesSaveRecentSticker, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCStickers_MessagesSaveRecentSticker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStickersClient) MessagesClearRecentStickers(ctx context.Context, in *TLMessagesClearRecentStickers, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCStickers_MessagesClearRecentStickers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStickersClient) MessagesGetArchivedStickers(ctx context.Context, in *TLMessagesGetArchivedStickers, opts ...grpc.CallOption) (*Messages_ArchivedStickers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_ArchivedStickers)
	err := c.cc.Invoke(ctx, RPCStickers_MessagesGetArchivedStickers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStickersClient) MessagesGetMaskStickers(ctx context.Context, in *TLMessagesGetMaskStickers, opts ...grpc.CallOption) (*Messages_AllStickers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_AllStickers)
	err := c.cc.Invoke(ctx, RPCStickers_MessagesGetMaskStickers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStickersClient) MessagesGetAttachedStickers(ctx context.Context, in *TLMessagesGetAttachedStickers, opts ...grpc.CallOption) (*Vector_StickerSetCovered, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_StickerSetCovered)
	err := c.cc.Invoke(ctx, RPCStickers_MessagesGetAttachedStickers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStickersClient) MessagesGetFavedStickers(ctx context.Context, in *TLMessagesGetFavedStickers, opts ...grpc.CallOption) (*Messages_FavedStickers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_FavedStickers)
	err := c.cc.Invoke(ctx, RPCStickers_MessagesGetFavedStickers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStickersClient) MessagesFaveSticker(ctx context.Context, in *TLMessagesFaveSticker, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCStickers_MessagesFaveSticker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStickersClient) MessagesSearchStickerSets(ctx context.Context, in *TLMessagesSearchStickerSets, opts ...grpc.CallOption) (*Messages_FoundStickerSets, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_FoundStickerSets)
	err := c.cc.Invoke(ctx, RPCStickers_MessagesSearchStickerSets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStickersClient) MessagesToggleStickerSets(ctx context.Context, in *TLMessagesToggleStickerSets, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCStickers_MessagesToggleStickerSets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStickersClient) MessagesGetOldFeaturedStickers(ctx context.Context, in *TLMessagesGetOldFeaturedStickers, opts ...grpc.CallOption) (*Messages_FeaturedStickers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_FeaturedStickers)
	err := c.cc.Invoke(ctx, RPCStickers_MessagesGetOldFeaturedStickers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStickersClient) MessagesSearchEmojiStickerSets(ctx context.Context, in *TLMessagesSearchEmojiStickerSets, opts ...grpc.CallOption) (*Messages_FoundStickerSets, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_FoundStickerSets)
	err := c.cc.Invoke(ctx, RPCStickers_MessagesSearchEmojiStickerSets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStickersClient) MessagesGetMyStickers(ctx context.Context, in *TLMessagesGetMyStickers, opts ...grpc.CallOption) (*Messages_MyStickers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_MyStickers)
	err := c.cc.Invoke(ctx, RPCStickers_MessagesGetMyStickers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStickersClient) MessagesSearchStickers(ctx context.Context, in *TLMessagesSearchStickers, opts ...grpc.CallOption) (*Messages_FoundStickers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_FoundStickers)
	err := c.cc.Invoke(ctx, RPCStickers_MessagesSearchStickers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStickersClient) StickersCreateStickerSet(ctx context.Context, in *TLStickersCreateStickerSet, opts ...grpc.CallOption) (*Messages_StickerSet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_StickerSet)
	err := c.cc.Invoke(ctx, RPCStickers_StickersCreateStickerSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStickersClient) StickersRemoveStickerFromSet(ctx context.Context, in *TLStickersRemoveStickerFromSet, opts ...grpc.CallOption) (*Messages_StickerSet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_StickerSet)
	err := c.cc.Invoke(ctx, RPCStickers_StickersRemoveStickerFromSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStickersClient) StickersChangeStickerPosition(ctx context.Context, in *TLStickersChangeStickerPosition, opts ...grpc.CallOption) (*Messages_StickerSet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_StickerSet)
	err := c.cc.Invoke(ctx, RPCStickers_StickersChangeStickerPosition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStickersClient) StickersAddStickerToSet(ctx context.Context, in *TLStickersAddStickerToSet, opts ...grpc.CallOption) (*Messages_StickerSet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_StickerSet)
	err := c.cc.Invoke(ctx, RPCStickers_StickersAddStickerToSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStickersClient) StickersSetStickerSetThumb(ctx context.Context, in *TLStickersSetStickerSetThumb, opts ...grpc.CallOption) (*Messages_StickerSet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_StickerSet)
	err := c.cc.Invoke(ctx, RPCStickers_StickersSetStickerSetThumb_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStickersClient) StickersCheckShortName(ctx context.Context, in *TLStickersCheckShortName, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCStickers_StickersCheckShortName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStickersClient) StickersSuggestShortName(ctx context.Context, in *TLStickersSuggestShortName, opts ...grpc.CallOption) (*Stickers_SuggestedShortName, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Stickers_SuggestedShortName)
	err := c.cc.Invoke(ctx, RPCStickers_StickersSuggestShortName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStickersClient) StickersChangeSticker(ctx context.Context, in *TLStickersChangeSticker, opts ...grpc.CallOption) (*Messages_StickerSet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_StickerSet)
	err := c.cc.Invoke(ctx, RPCStickers_StickersChangeSticker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStickersClient) StickersRenameStickerSet(ctx context.Context, in *TLStickersRenameStickerSet, opts ...grpc.CallOption) (*Messages_StickerSet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_StickerSet)
	err := c.cc.Invoke(ctx, RPCStickers_StickersRenameStickerSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStickersClient) StickersDeleteStickerSet(ctx context.Context, in *TLStickersDeleteStickerSet, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCStickers_StickersDeleteStickerSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStickersClient) StickersReplaceSticker(ctx context.Context, in *TLStickersReplaceSticker, opts ...grpc.CallOption) (*Messages_StickerSet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_StickerSet)
	err := c.cc.Invoke(ctx, RPCStickers_StickersReplaceSticker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCStickersServer is the server API for RPCStickers service.
// All implementations should embed UnimplementedRPCStickersServer
// for forward compatibility.
type RPCStickersServer interface {
	MessagesGetStickers(context.Context, *TLMessagesGetStickers) (*Messages_Stickers, error)
	MessagesGetAllStickers(context.Context, *TLMessagesGetAllStickers) (*Messages_AllStickers, error)
	MessagesGetStickerSet(context.Context, *TLMessagesGetStickerSet) (*Messages_StickerSet, error)
	MessagesInstallStickerSet(context.Context, *TLMessagesInstallStickerSet) (*Messages_StickerSetInstallResult, error)
	MessagesUninstallStickerSet(context.Context, *TLMessagesUninstallStickerSet) (*Bool, error)
	MessagesReorderStickerSets(context.Context, *TLMessagesReorderStickerSets) (*Bool, error)
	MessagesGetFeaturedStickers(context.Context, *TLMessagesGetFeaturedStickers) (*Messages_FeaturedStickers, error)
	MessagesReadFeaturedStickers(context.Context, *TLMessagesReadFeaturedStickers) (*Bool, error)
	MessagesGetRecentStickers(context.Context, *TLMessagesGetRecentStickers) (*Messages_RecentStickers, error)
	MessagesSaveRecentSticker(context.Context, *TLMessagesSaveRecentSticker) (*Bool, error)
	MessagesClearRecentStickers(context.Context, *TLMessagesClearRecentStickers) (*Bool, error)
	MessagesGetArchivedStickers(context.Context, *TLMessagesGetArchivedStickers) (*Messages_ArchivedStickers, error)
	MessagesGetMaskStickers(context.Context, *TLMessagesGetMaskStickers) (*Messages_AllStickers, error)
	MessagesGetAttachedStickers(context.Context, *TLMessagesGetAttachedStickers) (*Vector_StickerSetCovered, error)
	MessagesGetFavedStickers(context.Context, *TLMessagesGetFavedStickers) (*Messages_FavedStickers, error)
	MessagesFaveSticker(context.Context, *TLMessagesFaveSticker) (*Bool, error)
	MessagesSearchStickerSets(context.Context, *TLMessagesSearchStickerSets) (*Messages_FoundStickerSets, error)
	MessagesToggleStickerSets(context.Context, *TLMessagesToggleStickerSets) (*Bool, error)
	MessagesGetOldFeaturedStickers(context.Context, *TLMessagesGetOldFeaturedStickers) (*Messages_FeaturedStickers, error)
	MessagesSearchEmojiStickerSets(context.Context, *TLMessagesSearchEmojiStickerSets) (*Messages_FoundStickerSets, error)
	MessagesGetMyStickers(context.Context, *TLMessagesGetMyStickers) (*Messages_MyStickers, error)
	MessagesSearchStickers(context.Context, *TLMessagesSearchStickers) (*Messages_FoundStickers, error)
	StickersCreateStickerSet(context.Context, *TLStickersCreateStickerSet) (*Messages_StickerSet, error)
	StickersRemoveStickerFromSet(context.Context, *TLStickersRemoveStickerFromSet) (*Messages_StickerSet, error)
	StickersChangeStickerPosition(context.Context, *TLStickersChangeStickerPosition) (*Messages_StickerSet, error)
	StickersAddStickerToSet(context.Context, *TLStickersAddStickerToSet) (*Messages_StickerSet, error)
	StickersSetStickerSetThumb(context.Context, *TLStickersSetStickerSetThumb) (*Messages_StickerSet, error)
	StickersCheckShortName(context.Context, *TLStickersCheckShortName) (*Bool, error)
	StickersSuggestShortName(context.Context, *TLStickersSuggestShortName) (*Stickers_SuggestedShortName, error)
	StickersChangeSticker(context.Context, *TLStickersChangeSticker) (*Messages_StickerSet, error)
	StickersRenameStickerSet(context.Context, *TLStickersRenameStickerSet) (*Messages_StickerSet, error)
	StickersDeleteStickerSet(context.Context, *TLStickersDeleteStickerSet) (*Bool, error)
	StickersReplaceSticker(context.Context, *TLStickersReplaceSticker) (*Messages_StickerSet, error)
}

// UnimplementedRPCStickersServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCStickersServer struct{}

func (UnimplementedRPCStickersServer) MessagesGetStickers(context.Context, *TLMessagesGetStickers) (*Messages_Stickers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetStickers not implemented")
}
func (UnimplementedRPCStickersServer) MessagesGetAllStickers(context.Context, *TLMessagesGetAllStickers) (*Messages_AllStickers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetAllStickers not implemented")
}
func (UnimplementedRPCStickersServer) MessagesGetStickerSet(context.Context, *TLMessagesGetStickerSet) (*Messages_StickerSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetStickerSet not implemented")
}
func (UnimplementedRPCStickersServer) MessagesInstallStickerSet(context.Context, *TLMessagesInstallStickerSet) (*Messages_StickerSetInstallResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesInstallStickerSet not implemented")
}
func (UnimplementedRPCStickersServer) MessagesUninstallStickerSet(context.Context, *TLMessagesUninstallStickerSet) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesUninstallStickerSet not implemented")
}
func (UnimplementedRPCStickersServer) MessagesReorderStickerSets(context.Context, *TLMessagesReorderStickerSets) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReorderStickerSets not implemented")
}
func (UnimplementedRPCStickersServer) MessagesGetFeaturedStickers(context.Context, *TLMessagesGetFeaturedStickers) (*Messages_FeaturedStickers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetFeaturedStickers not implemented")
}
func (UnimplementedRPCStickersServer) MessagesReadFeaturedStickers(context.Context, *TLMessagesReadFeaturedStickers) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReadFeaturedStickers not implemented")
}
func (UnimplementedRPCStickersServer) MessagesGetRecentStickers(context.Context, *TLMessagesGetRecentStickers) (*Messages_RecentStickers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetRecentStickers not implemented")
}
func (UnimplementedRPCStickersServer) MessagesSaveRecentSticker(context.Context, *TLMessagesSaveRecentSticker) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSaveRecentSticker not implemented")
}
func (UnimplementedRPCStickersServer) MessagesClearRecentStickers(context.Context, *TLMessagesClearRecentStickers) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesClearRecentStickers not implemented")
}
func (UnimplementedRPCStickersServer) MessagesGetArchivedStickers(context.Context, *TLMessagesGetArchivedStickers) (*Messages_ArchivedStickers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetArchivedStickers not implemented")
}
func (UnimplementedRPCStickersServer) MessagesGetMaskStickers(context.Context, *TLMessagesGetMaskStickers) (*Messages_AllStickers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetMaskStickers not implemented")
}
func (UnimplementedRPCStickersServer) MessagesGetAttachedStickers(context.Context, *TLMessagesGetAttachedStickers) (*Vector_StickerSetCovered, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetAttachedStickers not implemented")
}
func (UnimplementedRPCStickersServer) MessagesGetFavedStickers(context.Context, *TLMessagesGetFavedStickers) (*Messages_FavedStickers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetFavedStickers not implemented")
}
func (UnimplementedRPCStickersServer) MessagesFaveSticker(context.Context, *TLMessagesFaveSticker) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesFaveSticker not implemented")
}
func (UnimplementedRPCStickersServer) MessagesSearchStickerSets(context.Context, *TLMessagesSearchStickerSets) (*Messages_FoundStickerSets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSearchStickerSets not implemented")
}
func (UnimplementedRPCStickersServer) MessagesToggleStickerSets(context.Context, *TLMessagesToggleStickerSets) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesToggleStickerSets not implemented")
}
func (UnimplementedRPCStickersServer) MessagesGetOldFeaturedStickers(context.Context, *TLMessagesGetOldFeaturedStickers) (*Messages_FeaturedStickers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetOldFeaturedStickers not implemented")
}
func (UnimplementedRPCStickersServer) MessagesSearchEmojiStickerSets(context.Context, *TLMessagesSearchEmojiStickerSets) (*Messages_FoundStickerSets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSearchEmojiStickerSets not implemented")
}
func (UnimplementedRPCStickersServer) MessagesGetMyStickers(context.Context, *TLMessagesGetMyStickers) (*Messages_MyStickers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetMyStickers not implemented")
}
func (UnimplementedRPCStickersServer) MessagesSearchStickers(context.Context, *TLMessagesSearchStickers) (*Messages_FoundStickers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSearchStickers not implemented")
}
func (UnimplementedRPCStickersServer) StickersCreateStickerSet(context.Context, *TLStickersCreateStickerSet) (*Messages_StickerSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StickersCreateStickerSet not implemented")
}
func (UnimplementedRPCStickersServer) StickersRemoveStickerFromSet(context.Context, *TLStickersRemoveStickerFromSet) (*Messages_StickerSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StickersRemoveStickerFromSet not implemented")
}
func (UnimplementedRPCStickersServer) StickersChangeStickerPosition(context.Context, *TLStickersChangeStickerPosition) (*Messages_StickerSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StickersChangeStickerPosition not implemented")
}
func (UnimplementedRPCStickersServer) StickersAddStickerToSet(context.Context, *TLStickersAddStickerToSet) (*Messages_StickerSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StickersAddStickerToSet not implemented")
}
func (UnimplementedRPCStickersServer) StickersSetStickerSetThumb(context.Context, *TLStickersSetStickerSetThumb) (*Messages_StickerSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StickersSetStickerSetThumb not implemented")
}
func (UnimplementedRPCStickersServer) StickersCheckShortName(context.Context, *TLStickersCheckShortName) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StickersCheckShortName not implemented")
}
func (UnimplementedRPCStickersServer) StickersSuggestShortName(context.Context, *TLStickersSuggestShortName) (*Stickers_SuggestedShortName, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StickersSuggestShortName not implemented")
}
func (UnimplementedRPCStickersServer) StickersChangeSticker(context.Context, *TLStickersChangeSticker) (*Messages_StickerSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StickersChangeSticker not implemented")
}
func (UnimplementedRPCStickersServer) StickersRenameStickerSet(context.Context, *TLStickersRenameStickerSet) (*Messages_StickerSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StickersRenameStickerSet not implemented")
}
func (UnimplementedRPCStickersServer) StickersDeleteStickerSet(context.Context, *TLStickersDeleteStickerSet) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StickersDeleteStickerSet not implemented")
}
func (UnimplementedRPCStickersServer) StickersReplaceSticker(context.Context, *TLStickersReplaceSticker) (*Messages_StickerSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StickersReplaceSticker not implemented")
}
func (UnimplementedRPCStickersServer) testEmbeddedByValue() {}

// UnsafeRPCStickersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCStickersServer will
// result in compilation errors.
type UnsafeRPCStickersServer interface {
	mustEmbedUnimplementedRPCStickersServer()
}

func RegisterRPCStickersServer(s grpc.ServiceRegistrar, srv RPCStickersServer) {
	// If the following call pancis, it indicates UnimplementedRPCStickersServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCStickers_ServiceDesc, srv)
}

func _RPCStickers_MessagesGetStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStickersServer).MessagesGetStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStickers_MessagesGetStickers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStickersServer).MessagesGetStickers(ctx, req.(*TLMessagesGetStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStickers_MessagesGetAllStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetAllStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStickersServer).MessagesGetAllStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStickers_MessagesGetAllStickers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStickersServer).MessagesGetAllStickers(ctx, req.(*TLMessagesGetAllStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStickers_MessagesGetStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetStickerSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStickersServer).MessagesGetStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStickers_MessagesGetStickerSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStickersServer).MessagesGetStickerSet(ctx, req.(*TLMessagesGetStickerSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStickers_MessagesInstallStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesInstallStickerSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStickersServer).MessagesInstallStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStickers_MessagesInstallStickerSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStickersServer).MessagesInstallStickerSet(ctx, req.(*TLMessagesInstallStickerSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStickers_MessagesUninstallStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesUninstallStickerSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStickersServer).MessagesUninstallStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStickers_MessagesUninstallStickerSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStickersServer).MessagesUninstallStickerSet(ctx, req.(*TLMessagesUninstallStickerSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStickers_MessagesReorderStickerSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReorderStickerSets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStickersServer).MessagesReorderStickerSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStickers_MessagesReorderStickerSets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStickersServer).MessagesReorderStickerSets(ctx, req.(*TLMessagesReorderStickerSets))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStickers_MessagesGetFeaturedStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetFeaturedStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStickersServer).MessagesGetFeaturedStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStickers_MessagesGetFeaturedStickers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStickersServer).MessagesGetFeaturedStickers(ctx, req.(*TLMessagesGetFeaturedStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStickers_MessagesReadFeaturedStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReadFeaturedStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStickersServer).MessagesReadFeaturedStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStickers_MessagesReadFeaturedStickers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStickersServer).MessagesReadFeaturedStickers(ctx, req.(*TLMessagesReadFeaturedStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStickers_MessagesGetRecentStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetRecentStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStickersServer).MessagesGetRecentStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStickers_MessagesGetRecentStickers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStickersServer).MessagesGetRecentStickers(ctx, req.(*TLMessagesGetRecentStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStickers_MessagesSaveRecentSticker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSaveRecentSticker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStickersServer).MessagesSaveRecentSticker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStickers_MessagesSaveRecentSticker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStickersServer).MessagesSaveRecentSticker(ctx, req.(*TLMessagesSaveRecentSticker))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStickers_MessagesClearRecentStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesClearRecentStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStickersServer).MessagesClearRecentStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStickers_MessagesClearRecentStickers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStickersServer).MessagesClearRecentStickers(ctx, req.(*TLMessagesClearRecentStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStickers_MessagesGetArchivedStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetArchivedStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStickersServer).MessagesGetArchivedStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStickers_MessagesGetArchivedStickers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStickersServer).MessagesGetArchivedStickers(ctx, req.(*TLMessagesGetArchivedStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStickers_MessagesGetMaskStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetMaskStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStickersServer).MessagesGetMaskStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStickers_MessagesGetMaskStickers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStickersServer).MessagesGetMaskStickers(ctx, req.(*TLMessagesGetMaskStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStickers_MessagesGetAttachedStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetAttachedStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStickersServer).MessagesGetAttachedStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStickers_MessagesGetAttachedStickers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStickersServer).MessagesGetAttachedStickers(ctx, req.(*TLMessagesGetAttachedStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStickers_MessagesGetFavedStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetFavedStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStickersServer).MessagesGetFavedStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStickers_MessagesGetFavedStickers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStickersServer).MessagesGetFavedStickers(ctx, req.(*TLMessagesGetFavedStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStickers_MessagesFaveSticker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesFaveSticker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStickersServer).MessagesFaveSticker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStickers_MessagesFaveSticker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStickersServer).MessagesFaveSticker(ctx, req.(*TLMessagesFaveSticker))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStickers_MessagesSearchStickerSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSearchStickerSets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStickersServer).MessagesSearchStickerSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStickers_MessagesSearchStickerSets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStickersServer).MessagesSearchStickerSets(ctx, req.(*TLMessagesSearchStickerSets))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStickers_MessagesToggleStickerSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesToggleStickerSets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStickersServer).MessagesToggleStickerSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStickers_MessagesToggleStickerSets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStickersServer).MessagesToggleStickerSets(ctx, req.(*TLMessagesToggleStickerSets))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStickers_MessagesGetOldFeaturedStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetOldFeaturedStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStickersServer).MessagesGetOldFeaturedStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStickers_MessagesGetOldFeaturedStickers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStickersServer).MessagesGetOldFeaturedStickers(ctx, req.(*TLMessagesGetOldFeaturedStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStickers_MessagesSearchEmojiStickerSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSearchEmojiStickerSets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStickersServer).MessagesSearchEmojiStickerSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStickers_MessagesSearchEmojiStickerSets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStickersServer).MessagesSearchEmojiStickerSets(ctx, req.(*TLMessagesSearchEmojiStickerSets))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStickers_MessagesGetMyStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetMyStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStickersServer).MessagesGetMyStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStickers_MessagesGetMyStickers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStickersServer).MessagesGetMyStickers(ctx, req.(*TLMessagesGetMyStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStickers_MessagesSearchStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSearchStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStickersServer).MessagesSearchStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStickers_MessagesSearchStickers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStickersServer).MessagesSearchStickers(ctx, req.(*TLMessagesSearchStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStickers_StickersCreateStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStickersCreateStickerSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStickersServer).StickersCreateStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStickers_StickersCreateStickerSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStickersServer).StickersCreateStickerSet(ctx, req.(*TLStickersCreateStickerSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStickers_StickersRemoveStickerFromSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStickersRemoveStickerFromSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStickersServer).StickersRemoveStickerFromSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStickers_StickersRemoveStickerFromSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStickersServer).StickersRemoveStickerFromSet(ctx, req.(*TLStickersRemoveStickerFromSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStickers_StickersChangeStickerPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStickersChangeStickerPosition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStickersServer).StickersChangeStickerPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStickers_StickersChangeStickerPosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStickersServer).StickersChangeStickerPosition(ctx, req.(*TLStickersChangeStickerPosition))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStickers_StickersAddStickerToSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStickersAddStickerToSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStickersServer).StickersAddStickerToSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStickers_StickersAddStickerToSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStickersServer).StickersAddStickerToSet(ctx, req.(*TLStickersAddStickerToSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStickers_StickersSetStickerSetThumb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStickersSetStickerSetThumb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStickersServer).StickersSetStickerSetThumb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStickers_StickersSetStickerSetThumb_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStickersServer).StickersSetStickerSetThumb(ctx, req.(*TLStickersSetStickerSetThumb))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStickers_StickersCheckShortName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStickersCheckShortName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStickersServer).StickersCheckShortName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStickers_StickersCheckShortName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStickersServer).StickersCheckShortName(ctx, req.(*TLStickersCheckShortName))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStickers_StickersSuggestShortName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStickersSuggestShortName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStickersServer).StickersSuggestShortName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStickers_StickersSuggestShortName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStickersServer).StickersSuggestShortName(ctx, req.(*TLStickersSuggestShortName))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStickers_StickersChangeSticker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStickersChangeSticker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStickersServer).StickersChangeSticker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStickers_StickersChangeSticker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStickersServer).StickersChangeSticker(ctx, req.(*TLStickersChangeSticker))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStickers_StickersRenameStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStickersRenameStickerSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStickersServer).StickersRenameStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStickers_StickersRenameStickerSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStickersServer).StickersRenameStickerSet(ctx, req.(*TLStickersRenameStickerSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStickers_StickersDeleteStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStickersDeleteStickerSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStickersServer).StickersDeleteStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStickers_StickersDeleteStickerSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStickersServer).StickersDeleteStickerSet(ctx, req.(*TLStickersDeleteStickerSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStickers_StickersReplaceSticker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStickersReplaceSticker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStickersServer).StickersReplaceSticker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStickers_StickersReplaceSticker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStickersServer).StickersReplaceSticker(ctx, req.(*TLStickersReplaceSticker))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCStickers_ServiceDesc is the grpc.ServiceDesc for RPCStickers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCStickers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCStickers",
	HandlerType: (*RPCStickersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "messages_getStickers",
			Handler:    _RPCStickers_MessagesGetStickers_Handler,
		},
		{
			MethodName: "messages_getAllStickers",
			Handler:    _RPCStickers_MessagesGetAllStickers_Handler,
		},
		{
			MethodName: "messages_getStickerSet",
			Handler:    _RPCStickers_MessagesGetStickerSet_Handler,
		},
		{
			MethodName: "messages_installStickerSet",
			Handler:    _RPCStickers_MessagesInstallStickerSet_Handler,
		},
		{
			MethodName: "messages_uninstallStickerSet",
			Handler:    _RPCStickers_MessagesUninstallStickerSet_Handler,
		},
		{
			MethodName: "messages_reorderStickerSets",
			Handler:    _RPCStickers_MessagesReorderStickerSets_Handler,
		},
		{
			MethodName: "messages_getFeaturedStickers",
			Handler:    _RPCStickers_MessagesGetFeaturedStickers_Handler,
		},
		{
			MethodName: "messages_readFeaturedStickers",
			Handler:    _RPCStickers_MessagesReadFeaturedStickers_Handler,
		},
		{
			MethodName: "messages_getRecentStickers",
			Handler:    _RPCStickers_MessagesGetRecentStickers_Handler,
		},
		{
			MethodName: "messages_saveRecentSticker",
			Handler:    _RPCStickers_MessagesSaveRecentSticker_Handler,
		},
		{
			MethodName: "messages_clearRecentStickers",
			Handler:    _RPCStickers_MessagesClearRecentStickers_Handler,
		},
		{
			MethodName: "messages_getArchivedStickers",
			Handler:    _RPCStickers_MessagesGetArchivedStickers_Handler,
		},
		{
			MethodName: "messages_getMaskStickers",
			Handler:    _RPCStickers_MessagesGetMaskStickers_Handler,
		},
		{
			MethodName: "messages_getAttachedStickers",
			Handler:    _RPCStickers_MessagesGetAttachedStickers_Handler,
		},
		{
			MethodName: "messages_getFavedStickers",
			Handler:    _RPCStickers_MessagesGetFavedStickers_Handler,
		},
		{
			MethodName: "messages_faveSticker",
			Handler:    _RPCStickers_MessagesFaveSticker_Handler,
		},
		{
			MethodName: "messages_searchStickerSets",
			Handler:    _RPCStickers_MessagesSearchStickerSets_Handler,
		},
		{
			MethodName: "messages_toggleStickerSets",
			Handler:    _RPCStickers_MessagesToggleStickerSets_Handler,
		},
		{
			MethodName: "messages_getOldFeaturedStickers",
			Handler:    _RPCStickers_MessagesGetOldFeaturedStickers_Handler,
		},
		{
			MethodName: "messages_searchEmojiStickerSets",
			Handler:    _RPCStickers_MessagesSearchEmojiStickerSets_Handler,
		},
		{
			MethodName: "messages_getMyStickers",
			Handler:    _RPCStickers_MessagesGetMyStickers_Handler,
		},
		{
			MethodName: "messages_searchStickers",
			Handler:    _RPCStickers_MessagesSearchStickers_Handler,
		},
		{
			MethodName: "stickers_createStickerSet",
			Handler:    _RPCStickers_StickersCreateStickerSet_Handler,
		},
		{
			MethodName: "stickers_removeStickerFromSet",
			Handler:    _RPCStickers_StickersRemoveStickerFromSet_Handler,
		},
		{
			MethodName: "stickers_changeStickerPosition",
			Handler:    _RPCStickers_StickersChangeStickerPosition_Handler,
		},
		{
			MethodName: "stickers_addStickerToSet",
			Handler:    _RPCStickers_StickersAddStickerToSet_Handler,
		},
		{
			MethodName: "stickers_setStickerSetThumb",
			Handler:    _RPCStickers_StickersSetStickerSetThumb_Handler,
		},
		{
			MethodName: "stickers_checkShortName",
			Handler:    _RPCStickers_StickersCheckShortName_Handler,
		},
		{
			MethodName: "stickers_suggestShortName",
			Handler:    _RPCStickers_StickersSuggestShortName_Handler,
		},
		{
			MethodName: "stickers_changeSticker",
			Handler:    _RPCStickers_StickersChangeSticker_Handler,
		},
		{
			MethodName: "stickers_renameStickerSet",
			Handler:    _RPCStickers_StickersRenameStickerSet_Handler,
		},
		{
			MethodName: "stickers_deleteStickerSet",
			Handler:    _RPCStickers_StickersDeleteStickerSet_Handler,
		},
		{
			MethodName: "stickers_replaceSticker",
			Handler:    _RPCStickers_StickersReplaceSticker_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCStories_StoriesCanSendStory_FullMethodName            = "/mtproto.RPCStories/stories_canSendStory"
	RPCStories_StoriesSendStory_FullMethodName               = "/mtproto.RPCStories/stories_sendStory"
	RPCStories_StoriesEditStory_FullMethodName               = "/mtproto.RPCStories/stories_editStory"
	RPCStories_StoriesDeleteStories_FullMethodName           = "/mtproto.RPCStories/stories_deleteStories"
	RPCStories_StoriesTogglePinned_FullMethodName            = "/mtproto.RPCStories/stories_togglePinned"
	RPCStories_StoriesGetAllStories_FullMethodName           = "/mtproto.RPCStories/stories_getAllStories"
	RPCStories_StoriesGetPinnedStories_FullMethodName        = "/mtproto.RPCStories/stories_getPinnedStories"
	RPCStories_StoriesGetStoriesArchive_FullMethodName       = "/mtproto.RPCStories/stories_getStoriesArchive"
	RPCStories_StoriesGetStoriesByID_FullMethodName          = "/mtproto.RPCStories/stories_getStoriesByID"
	RPCStories_StoriesToggleAllStoriesHidden_FullMethodName  = "/mtproto.RPCStories/stories_toggleAllStoriesHidden"
	RPCStories_StoriesReadStories_FullMethodName             = "/mtproto.RPCStories/stories_readStories"
	RPCStories_StoriesIncrementStoryViews_FullMethodName     = "/mtproto.RPCStories/stories_incrementStoryViews"
	RPCStories_StoriesGetStoryViewsList_FullMethodName       = "/mtproto.RPCStories/stories_getStoryViewsList"
	RPCStories_StoriesGetStoriesViews_FullMethodName         = "/mtproto.RPCStories/stories_getStoriesViews"
	RPCStories_StoriesExportStoryLink_FullMethodName         = "/mtproto.RPCStories/stories_exportStoryLink"
	RPCStories_StoriesReport19D8EB45_FullMethodName          = "/mtproto.RPCStories/stories_report19D8EB45"
	RPCStories_StoriesActivateStealthMode_FullMethodName     = "/mtproto.RPCStories/stories_activateStealthMode"
	RPCStories_StoriesSendReaction_FullMethodName            = "/mtproto.RPCStories/stories_sendReaction"
	RPCStories_StoriesGetPeerStories_FullMethodName          = "/mtproto.RPCStories/stories_getPeerStories"
	RPCStories_StoriesGetAllReadPeerStories_FullMethodName   = "/mtproto.RPCStories/stories_getAllReadPeerStories"
	RPCStories_StoriesGetPeerMaxIDs_FullMethodName           = "/mtproto.RPCStories/stories_getPeerMaxIDs"
	RPCStories_StoriesGetChatsToSend_FullMethodName          = "/mtproto.RPCStories/stories_getChatsToSend"
	RPCStories_StoriesTogglePeerStoriesHidden_FullMethodName = "/mtproto.RPCStories/stories_togglePeerStoriesHidden"
	RPCStories_StoriesGetStoryReactionsList_FullMethodName   = "/mtproto.RPCStories/stories_getStoryReactionsList"
	RPCStories_StoriesTogglePinnedToTop_FullMethodName       = "/mtproto.RPCStories/stories_togglePinnedToTop"
	RPCStories_StoriesSearchPosts_FullMethodName             = "/mtproto.RPCStories/stories_searchPosts"
	RPCStories_StoriesReport1923FA8C_FullMethodName          = "/mtproto.RPCStories/stories_report1923FA8C"
	RPCStories_UsersGetStoriesMaxIDs_FullMethodName          = "/mtproto.RPCStories/users_getStoriesMaxIDs"
	RPCStories_ContactsToggleStoriesHidden_FullMethodName    = "/mtproto.RPCStories/contacts_toggleStoriesHidden"
	RPCStories_StoriesGetUserStories_FullMethodName          = "/mtproto.RPCStories/stories_getUserStories"
	RPCStories_StoriesGetAllReadUserStories_FullMethodName   = "/mtproto.RPCStories/stories_getAllReadUserStories"
	RPCStories_StoriesReportC95BE06A_FullMethodName          = "/mtproto.RPCStories/stories_reportC95BE06A"
)

// RPCStoriesClient is the client API for RPCStories service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCStoriesClient interface {
	StoriesCanSendStory(ctx context.Context, in *TLStoriesCanSendStory, opts ...grpc.CallOption) (*Bool, error)
	StoriesSendStory(ctx context.Context, in *TLStoriesSendStory, opts ...grpc.CallOption) (*Updates, error)
	StoriesEditStory(ctx context.Context, in *TLStoriesEditStory, opts ...grpc.CallOption) (*Updates, error)
	StoriesDeleteStories(ctx context.Context, in *TLStoriesDeleteStories, opts ...grpc.CallOption) (*Vector_Int, error)
	StoriesTogglePinned(ctx context.Context, in *TLStoriesTogglePinned, opts ...grpc.CallOption) (*Vector_Int, error)
	StoriesGetAllStories(ctx context.Context, in *TLStoriesGetAllStories, opts ...grpc.CallOption) (*Stories_AllStories, error)
	StoriesGetPinnedStories(ctx context.Context, in *TLStoriesGetPinnedStories, opts ...grpc.CallOption) (*Stories_Stories, error)
	StoriesGetStoriesArchive(ctx context.Context, in *TLStoriesGetStoriesArchive, opts ...grpc.CallOption) (*Stories_Stories, error)
	StoriesGetStoriesByID(ctx context.Context, in *TLStoriesGetStoriesByID, opts ...grpc.CallOption) (*Stories_Stories, error)
	StoriesToggleAllStoriesHidden(ctx context.Context, in *TLStoriesToggleAllStoriesHidden, opts ...grpc.CallOption) (*Bool, error)
	StoriesReadStories(ctx context.Context, in *TLStoriesReadStories, opts ...grpc.CallOption) (*Vector_Int, error)
	StoriesIncrementStoryViews(ctx context.Context, in *TLStoriesIncrementStoryViews, opts ...grpc.CallOption) (*Bool, error)
	StoriesGetStoryViewsList(ctx context.Context, in *TLStoriesGetStoryViewsList, opts ...grpc.CallOption) (*Stories_StoryViewsList, error)
	StoriesGetStoriesViews(ctx context.Context, in *TLStoriesGetStoriesViews, opts ...grpc.CallOption) (*Stories_StoryViews, error)
	StoriesExportStoryLink(ctx context.Context, in *TLStoriesExportStoryLink, opts ...grpc.CallOption) (*ExportedStoryLink, error)
	StoriesReport19D8EB45(ctx context.Context, in *TLStoriesReport19D8EB45, opts ...grpc.CallOption) (*ReportResult, error)
	StoriesActivateStealthMode(ctx context.Context, in *TLStoriesActivateStealthMode, opts ...grpc.CallOption) (*Updates, error)
	StoriesSendReaction(ctx context.Context, in *TLStoriesSendReaction, opts ...grpc.CallOption) (*Updates, error)
	StoriesGetPeerStories(ctx context.Context, in *TLStoriesGetPeerStories, opts ...grpc.CallOption) (*Stories_PeerStories, error)
	StoriesGetAllReadPeerStories(ctx context.Context, in *TLStoriesGetAllReadPeerStories, opts ...grpc.CallOption) (*Updates, error)
	StoriesGetPeerMaxIDs(ctx context.Context, in *TLStoriesGetPeerMaxIDs, opts ...grpc.CallOption) (*Vector_Int, error)
	StoriesGetChatsToSend(ctx context.Context, in *TLStoriesGetChatsToSend, opts ...grpc.CallOption) (*Messages_Chats, error)
	StoriesTogglePeerStoriesHidden(ctx context.Context, in *TLStoriesTogglePeerStoriesHidden, opts ...grpc.CallOption) (*Bool, error)
	StoriesGetStoryReactionsList(ctx context.Context, in *TLStoriesGetStoryReactionsList, opts ...grpc.CallOption) (*Stories_StoryReactionsList, error)
	StoriesTogglePinnedToTop(ctx context.Context, in *TLStoriesTogglePinnedToTop, opts ...grpc.CallOption) (*Bool, error)
	StoriesSearchPosts(ctx context.Context, in *TLStoriesSearchPosts, opts ...grpc.CallOption) (*Stories_FoundStories, error)
	StoriesReport1923FA8C(ctx context.Context, in *TLStoriesReport1923FA8C, opts ...grpc.CallOption) (*Bool, error)
	UsersGetStoriesMaxIDs(ctx context.Context, in *TLUsersGetStoriesMaxIDs, opts ...grpc.CallOption) (*Vector_Int, error)
	ContactsToggleStoriesHidden(ctx context.Context, in *TLContactsToggleStoriesHidden, opts ...grpc.CallOption) (*Bool, error)
	StoriesGetUserStories(ctx context.Context, in *TLStoriesGetUserStories, opts ...grpc.CallOption) (*Stories_UserStories, error)
	StoriesGetAllReadUserStories(ctx context.Context, in *TLStoriesGetAllReadUserStories, opts ...grpc.CallOption) (*Updates, error)
	StoriesReportC95BE06A(ctx context.Context, in *TLStoriesReportC95BE06A, opts ...grpc.CallOption) (*Bool, error)
}

type rPCStoriesClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCStoriesClient(cc grpc.ClientConnInterface) RPCStoriesClient {
	return &rPCStoriesClient{cc}
}

func (c *rPCStoriesClient) StoriesCanSendStory(ctx context.Context, in *TLStoriesCanSendStory, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCStories_StoriesCanSendStory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStoriesClient) StoriesSendStory(ctx context.Context, in *TLStoriesSendStory, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCStories_StoriesSendStory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStoriesClient) StoriesEditStory(ctx context.Context, in *TLStoriesEditStory, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCStories_StoriesEditStory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStoriesClient) StoriesDeleteStories(ctx context.Context, in *TLStoriesDeleteStories, opts ...grpc.CallOption) (*Vector_Int, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_Int)
	err := c.cc.Invoke(ctx, RPCStories_StoriesDeleteStories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStoriesClient) StoriesTogglePinned(ctx context.Context, in *TLStoriesTogglePinned, opts ...grpc.CallOption) (*Vector_Int, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_Int)
	err := c.cc.Invoke(ctx, RPCStories_StoriesTogglePinned_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStoriesClient) StoriesGetAllStories(ctx context.Context, in *TLStoriesGetAllStories, opts ...grpc.CallOption) (*Stories_AllStories, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Stories_AllStories)
	err := c.cc.Invoke(ctx, RPCStories_StoriesGetAllStories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStoriesClient) StoriesGetPinnedStories(ctx context.Context, in *TLStoriesGetPinnedStories, opts ...grpc.CallOption) (*Stories_Stories, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Stories_Stories)
	err := c.cc.Invoke(ctx, RPCStories_StoriesGetPinnedStories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStoriesClient) StoriesGetStoriesArchive(ctx context.Context, in *TLStoriesGetStoriesArchive, opts ...grpc.CallOption) (*Stories_Stories, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Stories_Stories)
	err := c.cc.Invoke(ctx, RPCStories_StoriesGetStoriesArchive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStoriesClient) StoriesGetStoriesByID(ctx context.Context, in *TLStoriesGetStoriesByID, opts ...grpc.CallOption) (*Stories_Stories, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Stories_Stories)
	err := c.cc.Invoke(ctx, RPCStories_StoriesGetStoriesByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStoriesClient) StoriesToggleAllStoriesHidden(ctx context.Context, in *TLStoriesToggleAllStoriesHidden, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCStories_StoriesToggleAllStoriesHidden_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStoriesClient) StoriesReadStories(ctx context.Context, in *TLStoriesReadStories, opts ...grpc.CallOption) (*Vector_Int, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_Int)
	err := c.cc.Invoke(ctx, RPCStories_StoriesReadStories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStoriesClient) StoriesIncrementStoryViews(ctx context.Context, in *TLStoriesIncrementStoryViews, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCStories_StoriesIncrementStoryViews_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStoriesClient) StoriesGetStoryViewsList(ctx context.Context, in *TLStoriesGetStoryViewsList, opts ...grpc.CallOption) (*Stories_StoryViewsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Stories_StoryViewsList)
	err := c.cc.Invoke(ctx, RPCStories_StoriesGetStoryViewsList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStoriesClient) StoriesGetStoriesViews(ctx context.Context, in *TLStoriesGetStoriesViews, opts ...grpc.CallOption) (*Stories_StoryViews, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Stories_StoryViews)
	err := c.cc.Invoke(ctx, RPCStories_StoriesGetStoriesViews_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStoriesClient) StoriesExportStoryLink(ctx context.Context, in *TLStoriesExportStoryLink, opts ...grpc.CallOption) (*ExportedStoryLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportedStoryLink)
	err := c.cc.Invoke(ctx, RPCStories_StoriesExportStoryLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStoriesClient) StoriesReport19D8EB45(ctx context.Context, in *TLStoriesReport19D8EB45, opts ...grpc.CallOption) (*ReportResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportResult)
	err := c.cc.Invoke(ctx, RPCStories_StoriesReport19D8EB45_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStoriesClient) StoriesActivateStealthMode(ctx context.Context, in *TLStoriesActivateStealthMode, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCStories_StoriesActivateStealthMode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStoriesClient) StoriesSendReaction(ctx context.Context, in *TLStoriesSendReaction, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCStories_StoriesSendReaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStoriesClient) StoriesGetPeerStories(ctx context.Context, in *TLStoriesGetPeerStories, opts ...grpc.CallOption) (*Stories_PeerStories, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Stories_PeerStories)
	err := c.cc.Invoke(ctx, RPCStories_StoriesGetPeerStories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStoriesClient) StoriesGetAllReadPeerStories(ctx context.Context, in *TLStoriesGetAllReadPeerStories, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCStories_StoriesGetAllReadPeerStories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStoriesClient) StoriesGetPeerMaxIDs(ctx context.Context, in *TLStoriesGetPeerMaxIDs, opts ...grpc.CallOption) (*Vector_Int, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_Int)
	err := c.cc.Invoke(ctx, RPCStories_StoriesGetPeerMaxIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStoriesClient) StoriesGetChatsToSend(ctx context.Context, in *TLStoriesGetChatsToSend, opts ...grpc.CallOption) (*Messages_Chats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_Chats)
	err := c.cc.Invoke(ctx, RPCStories_StoriesGetChatsToSend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStoriesClient) StoriesTogglePeerStoriesHidden(ctx context.Context, in *TLStoriesTogglePeerStoriesHidden, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCStories_StoriesTogglePeerStoriesHidden_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStoriesClient) StoriesGetStoryReactionsList(ctx context.Context, in *TLStoriesGetStoryReactionsList, opts ...grpc.CallOption) (*Stories_StoryReactionsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Stories_StoryReactionsList)
	err := c.cc.Invoke(ctx, RPCStories_StoriesGetStoryReactionsList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStoriesClient) StoriesTogglePinnedToTop(ctx context.Context, in *TLStoriesTogglePinnedToTop, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCStories_StoriesTogglePinnedToTop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStoriesClient) StoriesSearchPosts(ctx context.Context, in *TLStoriesSearchPosts, opts ...grpc.CallOption) (*Stories_FoundStories, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Stories_FoundStories)
	err := c.cc.Invoke(ctx, RPCStories_StoriesSearchPosts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStoriesClient) StoriesReport1923FA8C(ctx context.Context, in *TLStoriesReport1923FA8C, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCStories_StoriesReport1923FA8C_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStoriesClient) UsersGetStoriesMaxIDs(ctx context.Context, in *TLUsersGetStoriesMaxIDs, opts ...grpc.CallOption) (*Vector_Int, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_Int)
	err := c.cc.Invoke(ctx, RPCStories_UsersGetStoriesMaxIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStoriesClient) ContactsToggleStoriesHidden(ctx context.Context, in *TLContactsToggleStoriesHidden, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCStories_ContactsToggleStoriesHidden_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStoriesClient) StoriesGetUserStories(ctx context.Context, in *TLStoriesGetUserStories, opts ...grpc.CallOption) (*Stories_UserStories, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Stories_UserStories)
	err := c.cc.Invoke(ctx, RPCStories_StoriesGetUserStories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStoriesClient) StoriesGetAllReadUserStories(ctx context.Context, in *TLStoriesGetAllReadUserStories, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCStories_StoriesGetAllReadUserStories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStoriesClient) StoriesReportC95BE06A(ctx context.Context, in *TLStoriesReportC95BE06A, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCStories_StoriesReportC95BE06A_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCStoriesServer is the server API for RPCStories service.
// All implementations should embed UnimplementedRPCStoriesServer
// for forward compatibility.
type RPCStoriesServer interface {
	StoriesCanSendStory(context.Context, *TLStoriesCanSendStory) (*Bool, error)
	StoriesSendStory(context.Context, *TLStoriesSendStory) (*Updates, error)
	StoriesEditStory(context.Context, *TLStoriesEditStory) (*Updates, error)
	StoriesDeleteStories(context.Context, *TLStoriesDeleteStories) (*Vector_Int, error)
	StoriesTogglePinned(context.Context, *TLStoriesTogglePinned) (*Vector_Int, error)
	StoriesGetAllStories(context.Context, *TLStoriesGetAllStories) (*Stories_AllStories, error)
	StoriesGetPinnedStories(context.Context, *TLStoriesGetPinnedStories) (*Stories_Stories, error)
	StoriesGetStoriesArchive(context.Context, *TLStoriesGetStoriesArchive) (*Stories_Stories, error)
	StoriesGetStoriesByID(context.Context, *TLStoriesGetStoriesByID) (*Stories_Stories, error)
	StoriesToggleAllStoriesHidden(context.Context, *TLStoriesToggleAllStoriesHidden) (*Bool, error)
	StoriesReadStories(context.Context, *TLStoriesReadStories) (*Vector_Int, error)
	StoriesIncrementStoryViews(context.Context, *TLStoriesIncrementStoryViews) (*Bool, error)
	StoriesGetStoryViewsList(context.Context, *TLStoriesGetStoryViewsList) (*Stories_StoryViewsList, error)
	StoriesGetStoriesViews(context.Context, *TLStoriesGetStoriesViews) (*Stories_StoryViews, error)
	StoriesExportStoryLink(context.Context, *TLStoriesExportStoryLink) (*ExportedStoryLink, error)
	StoriesReport19D8EB45(context.Context, *TLStoriesReport19D8EB45) (*ReportResult, error)
	StoriesActivateStealthMode(context.Context, *TLStoriesActivateStealthMode) (*Updates, error)
	StoriesSendReaction(context.Context, *TLStoriesSendReaction) (*Updates, error)
	StoriesGetPeerStories(context.Context, *TLStoriesGetPeerStories) (*Stories_PeerStories, error)
	StoriesGetAllReadPeerStories(context.Context, *TLStoriesGetAllReadPeerStories) (*Updates, error)
	StoriesGetPeerMaxIDs(context.Context, *TLStoriesGetPeerMaxIDs) (*Vector_Int, error)
	StoriesGetChatsToSend(context.Context, *TLStoriesGetChatsToSend) (*Messages_Chats, error)
	StoriesTogglePeerStoriesHidden(context.Context, *TLStoriesTogglePeerStoriesHidden) (*Bool, error)
	StoriesGetStoryReactionsList(context.Context, *TLStoriesGetStoryReactionsList) (*Stories_StoryReactionsList, error)
	StoriesTogglePinnedToTop(context.Context, *TLStoriesTogglePinnedToTop) (*Bool, error)
	StoriesSearchPosts(context.Context, *TLStoriesSearchPosts) (*Stories_FoundStories, error)
	StoriesReport1923FA8C(context.Context, *TLStoriesReport1923FA8C) (*Bool, error)
	UsersGetStoriesMaxIDs(context.Context, *TLUsersGetStoriesMaxIDs) (*Vector_Int, error)
	ContactsToggleStoriesHidden(context.Context, *TLContactsToggleStoriesHidden) (*Bool, error)
	StoriesGetUserStories(context.Context, *TLStoriesGetUserStories) (*Stories_UserStories, error)
	StoriesGetAllReadUserStories(context.Context, *TLStoriesGetAllReadUserStories) (*Updates, error)
	StoriesReportC95BE06A(context.Context, *TLStoriesReportC95BE06A) (*Bool, error)
}

// UnimplementedRPCStoriesServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCStoriesServer struct{}

func (UnimplementedRPCStoriesServer) StoriesCanSendStory(context.Context, *TLStoriesCanSendStory) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoriesCanSendStory not implemented")
}
func (UnimplementedRPCStoriesServer) StoriesSendStory(context.Context, *TLStoriesSendStory) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoriesSendStory not implemented")
}
func (UnimplementedRPCStoriesServer) StoriesEditStory(context.Context, *TLStoriesEditStory) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoriesEditStory not implemented")
}
func (UnimplementedRPCStoriesServer) StoriesDeleteStories(context.Context, *TLStoriesDeleteStories) (*Vector_Int, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoriesDeleteStories not implemented")
}
func (UnimplementedRPCStoriesServer) StoriesTogglePinned(context.Context, *TLStoriesTogglePinned) (*Vector_Int, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoriesTogglePinned not implemented")
}
func (UnimplementedRPCStoriesServer) StoriesGetAllStories(context.Context, *TLStoriesGetAllStories) (*Stories_AllStories, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoriesGetAllStories not implemented")
}
func (UnimplementedRPCStoriesServer) StoriesGetPinnedStories(context.Context, *TLStoriesGetPinnedStories) (*Stories_Stories, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoriesGetPinnedStories not implemented")
}
func (UnimplementedRPCStoriesServer) StoriesGetStoriesArchive(context.Context, *TLStoriesGetStoriesArchive) (*Stories_Stories, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoriesGetStoriesArchive not implemented")
}
func (UnimplementedRPCStoriesServer) StoriesGetStoriesByID(context.Context, *TLStoriesGetStoriesByID) (*Stories_Stories, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoriesGetStoriesByID not implemented")
}
func (UnimplementedRPCStoriesServer) StoriesToggleAllStoriesHidden(context.Context, *TLStoriesToggleAllStoriesHidden) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoriesToggleAllStoriesHidden not implemented")
}
func (UnimplementedRPCStoriesServer) StoriesReadStories(context.Context, *TLStoriesReadStories) (*Vector_Int, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoriesReadStories not implemented")
}
func (UnimplementedRPCStoriesServer) StoriesIncrementStoryViews(context.Context, *TLStoriesIncrementStoryViews) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoriesIncrementStoryViews not implemented")
}
func (UnimplementedRPCStoriesServer) StoriesGetStoryViewsList(context.Context, *TLStoriesGetStoryViewsList) (*Stories_StoryViewsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoriesGetStoryViewsList not implemented")
}
func (UnimplementedRPCStoriesServer) StoriesGetStoriesViews(context.Context, *TLStoriesGetStoriesViews) (*Stories_StoryViews, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoriesGetStoriesViews not implemented")
}
func (UnimplementedRPCStoriesServer) StoriesExportStoryLink(context.Context, *TLStoriesExportStoryLink) (*ExportedStoryLink, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoriesExportStoryLink not implemented")
}
func (UnimplementedRPCStoriesServer) StoriesReport19D8EB45(context.Context, *TLStoriesReport19D8EB45) (*ReportResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoriesReport19D8EB45 not implemented")
}
func (UnimplementedRPCStoriesServer) StoriesActivateStealthMode(context.Context, *TLStoriesActivateStealthMode) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoriesActivateStealthMode not implemented")
}
func (UnimplementedRPCStoriesServer) StoriesSendReaction(context.Context, *TLStoriesSendReaction) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoriesSendReaction not implemented")
}
func (UnimplementedRPCStoriesServer) StoriesGetPeerStories(context.Context, *TLStoriesGetPeerStories) (*Stories_PeerStories, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoriesGetPeerStories not implemented")
}
func (UnimplementedRPCStoriesServer) StoriesGetAllReadPeerStories(context.Context, *TLStoriesGetAllReadPeerStories) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoriesGetAllReadPeerStories not implemented")
}
func (UnimplementedRPCStoriesServer) StoriesGetPeerMaxIDs(context.Context, *TLStoriesGetPeerMaxIDs) (*Vector_Int, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoriesGetPeerMaxIDs not implemented")
}
func (UnimplementedRPCStoriesServer) StoriesGetChatsToSend(context.Context, *TLStoriesGetChatsToSend) (*Messages_Chats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoriesGetChatsToSend not implemented")
}
func (UnimplementedRPCStoriesServer) StoriesTogglePeerStoriesHidden(context.Context, *TLStoriesTogglePeerStoriesHidden) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoriesTogglePeerStoriesHidden not implemented")
}
func (UnimplementedRPCStoriesServer) StoriesGetStoryReactionsList(context.Context, *TLStoriesGetStoryReactionsList) (*Stories_StoryReactionsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoriesGetStoryReactionsList not implemented")
}
func (UnimplementedRPCStoriesServer) StoriesTogglePinnedToTop(context.Context, *TLStoriesTogglePinnedToTop) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoriesTogglePinnedToTop not implemented")
}
func (UnimplementedRPCStoriesServer) StoriesSearchPosts(context.Context, *TLStoriesSearchPosts) (*Stories_FoundStories, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoriesSearchPosts not implemented")
}
func (UnimplementedRPCStoriesServer) StoriesReport1923FA8C(context.Context, *TLStoriesReport1923FA8C) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoriesReport1923FA8C not implemented")
}
func (UnimplementedRPCStoriesServer) UsersGetStoriesMaxIDs(context.Context, *TLUsersGetStoriesMaxIDs) (*Vector_Int, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersGetStoriesMaxIDs not implemented")
}
func (UnimplementedRPCStoriesServer) ContactsToggleStoriesHidden(context.Context, *TLContactsToggleStoriesHidden) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsToggleStoriesHidden not implemented")
}
func (UnimplementedRPCStoriesServer) StoriesGetUserStories(context.Context, *TLStoriesGetUserStories) (*Stories_UserStories, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoriesGetUserStories not implemented")
}
func (UnimplementedRPCStoriesServer) StoriesGetAllReadUserStories(context.Context, *TLStoriesGetAllReadUserStories) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoriesGetAllReadUserStories not implemented")
}
func (UnimplementedRPCStoriesServer) StoriesReportC95BE06A(context.Context, *TLStoriesReportC95BE06A) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoriesReportC95BE06A not implemented")
}
func (UnimplementedRPCStoriesServer) testEmbeddedByValue() {}

// UnsafeRPCStoriesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCStoriesServer will
// result in compilation errors.
type UnsafeRPCStoriesServer interface {
	mustEmbedUnimplementedRPCStoriesServer()
}

func RegisterRPCStoriesServer(s grpc.ServiceRegistrar, srv RPCStoriesServer) {
	// If the following call pancis, it indicates UnimplementedRPCStoriesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCStories_ServiceDesc, srv)
}

func _RPCStories_StoriesCanSendStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStoriesCanSendStory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStoriesServer).StoriesCanSendStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStories_StoriesCanSendStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStoriesServer).StoriesCanSendStory(ctx, req.(*TLStoriesCanSendStory))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStories_StoriesSendStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStoriesSendStory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStoriesServer).StoriesSendStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStories_StoriesSendStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStoriesServer).StoriesSendStory(ctx, req.(*TLStoriesSendStory))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStories_StoriesEditStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStoriesEditStory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStoriesServer).StoriesEditStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStories_StoriesEditStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStoriesServer).StoriesEditStory(ctx, req.(*TLStoriesEditStory))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStories_StoriesDeleteStories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStoriesDeleteStories)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStoriesServer).StoriesDeleteStories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStories_StoriesDeleteStories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStoriesServer).StoriesDeleteStories(ctx, req.(*TLStoriesDeleteStories))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStories_StoriesTogglePinned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStoriesTogglePinned)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStoriesServer).StoriesTogglePinned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStories_StoriesTogglePinned_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStoriesServer).StoriesTogglePinned(ctx, req.(*TLStoriesTogglePinned))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStories_StoriesGetAllStories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStoriesGetAllStories)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStoriesServer).StoriesGetAllStories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStories_StoriesGetAllStories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStoriesServer).StoriesGetAllStories(ctx, req.(*TLStoriesGetAllStories))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStories_StoriesGetPinnedStories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStoriesGetPinnedStories)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStoriesServer).StoriesGetPinnedStories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStories_StoriesGetPinnedStories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStoriesServer).StoriesGetPinnedStories(ctx, req.(*TLStoriesGetPinnedStories))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStories_StoriesGetStoriesArchive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStoriesGetStoriesArchive)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStoriesServer).StoriesGetStoriesArchive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStories_StoriesGetStoriesArchive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStoriesServer).StoriesGetStoriesArchive(ctx, req.(*TLStoriesGetStoriesArchive))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStories_StoriesGetStoriesByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStoriesGetStoriesByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStoriesServer).StoriesGetStoriesByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStories_StoriesGetStoriesByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStoriesServer).StoriesGetStoriesByID(ctx, req.(*TLStoriesGetStoriesByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStories_StoriesToggleAllStoriesHidden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStoriesToggleAllStoriesHidden)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStoriesServer).StoriesToggleAllStoriesHidden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStories_StoriesToggleAllStoriesHidden_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStoriesServer).StoriesToggleAllStoriesHidden(ctx, req.(*TLStoriesToggleAllStoriesHidden))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStories_StoriesReadStories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStoriesReadStories)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStoriesServer).StoriesReadStories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStories_StoriesReadStories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStoriesServer).StoriesReadStories(ctx, req.(*TLStoriesReadStories))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStories_StoriesIncrementStoryViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStoriesIncrementStoryViews)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStoriesServer).StoriesIncrementStoryViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStories_StoriesIncrementStoryViews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStoriesServer).StoriesIncrementStoryViews(ctx, req.(*TLStoriesIncrementStoryViews))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStories_StoriesGetStoryViewsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStoriesGetStoryViewsList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStoriesServer).StoriesGetStoryViewsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStories_StoriesGetStoryViewsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStoriesServer).StoriesGetStoryViewsList(ctx, req.(*TLStoriesGetStoryViewsList))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStories_StoriesGetStoriesViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStoriesGetStoriesViews)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStoriesServer).StoriesGetStoriesViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStories_StoriesGetStoriesViews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStoriesServer).StoriesGetStoriesViews(ctx, req.(*TLStoriesGetStoriesViews))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStories_StoriesExportStoryLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStoriesExportStoryLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStoriesServer).StoriesExportStoryLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStories_StoriesExportStoryLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStoriesServer).StoriesExportStoryLink(ctx, req.(*TLStoriesExportStoryLink))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStories_StoriesReport19D8EB45_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStoriesReport19D8EB45)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStoriesServer).StoriesReport19D8EB45(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStories_StoriesReport19D8EB45_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStoriesServer).StoriesReport19D8EB45(ctx, req.(*TLStoriesReport19D8EB45))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStories_StoriesActivateStealthMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStoriesActivateStealthMode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStoriesServer).StoriesActivateStealthMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStories_StoriesActivateStealthMode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStoriesServer).StoriesActivateStealthMode(ctx, req.(*TLStoriesActivateStealthMode))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStories_StoriesSendReaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStoriesSendReaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStoriesServer).StoriesSendReaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStories_StoriesSendReaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStoriesServer).StoriesSendReaction(ctx, req.(*TLStoriesSendReaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStories_StoriesGetPeerStories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStoriesGetPeerStories)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStoriesServer).StoriesGetPeerStories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStories_StoriesGetPeerStories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStoriesServer).StoriesGetPeerStories(ctx, req.(*TLStoriesGetPeerStories))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStories_StoriesGetAllReadPeerStories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStoriesGetAllReadPeerStories)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStoriesServer).StoriesGetAllReadPeerStories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStories_StoriesGetAllReadPeerStories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStoriesServer).StoriesGetAllReadPeerStories(ctx, req.(*TLStoriesGetAllReadPeerStories))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStories_StoriesGetPeerMaxIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStoriesGetPeerMaxIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStoriesServer).StoriesGetPeerMaxIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStories_StoriesGetPeerMaxIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStoriesServer).StoriesGetPeerMaxIDs(ctx, req.(*TLStoriesGetPeerMaxIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStories_StoriesGetChatsToSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStoriesGetChatsToSend)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStoriesServer).StoriesGetChatsToSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStories_StoriesGetChatsToSend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStoriesServer).StoriesGetChatsToSend(ctx, req.(*TLStoriesGetChatsToSend))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStories_StoriesTogglePeerStoriesHidden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStoriesTogglePeerStoriesHidden)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStoriesServer).StoriesTogglePeerStoriesHidden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStories_StoriesTogglePeerStoriesHidden_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStoriesServer).StoriesTogglePeerStoriesHidden(ctx, req.(*TLStoriesTogglePeerStoriesHidden))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStories_StoriesGetStoryReactionsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStoriesGetStoryReactionsList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStoriesServer).StoriesGetStoryReactionsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStories_StoriesGetStoryReactionsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStoriesServer).StoriesGetStoryReactionsList(ctx, req.(*TLStoriesGetStoryReactionsList))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStories_StoriesTogglePinnedToTop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStoriesTogglePinnedToTop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStoriesServer).StoriesTogglePinnedToTop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStories_StoriesTogglePinnedToTop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStoriesServer).StoriesTogglePinnedToTop(ctx, req.(*TLStoriesTogglePinnedToTop))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStories_StoriesSearchPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStoriesSearchPosts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStoriesServer).StoriesSearchPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStories_StoriesSearchPosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStoriesServer).StoriesSearchPosts(ctx, req.(*TLStoriesSearchPosts))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStories_StoriesReport1923FA8C_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStoriesReport1923FA8C)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStoriesServer).StoriesReport1923FA8C(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStories_StoriesReport1923FA8C_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStoriesServer).StoriesReport1923FA8C(ctx, req.(*TLStoriesReport1923FA8C))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStories_UsersGetStoriesMaxIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUsersGetStoriesMaxIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStoriesServer).UsersGetStoriesMaxIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStories_UsersGetStoriesMaxIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStoriesServer).UsersGetStoriesMaxIDs(ctx, req.(*TLUsersGetStoriesMaxIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStories_ContactsToggleStoriesHidden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsToggleStoriesHidden)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStoriesServer).ContactsToggleStoriesHidden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStories_ContactsToggleStoriesHidden_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStoriesServer).ContactsToggleStoriesHidden(ctx, req.(*TLContactsToggleStoriesHidden))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStories_StoriesGetUserStories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStoriesGetUserStories)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStoriesServer).StoriesGetUserStories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStories_StoriesGetUserStories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStoriesServer).StoriesGetUserStories(ctx, req.(*TLStoriesGetUserStories))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStories_StoriesGetAllReadUserStories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStoriesGetAllReadUserStories)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStoriesServer).StoriesGetAllReadUserStories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStories_StoriesGetAllReadUserStories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStoriesServer).StoriesGetAllReadUserStories(ctx, req.(*TLStoriesGetAllReadUserStories))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStories_StoriesReportC95BE06A_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStoriesReportC95BE06A)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStoriesServer).StoriesReportC95BE06A(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStories_StoriesReportC95BE06A_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStoriesServer).StoriesReportC95BE06A(ctx, req.(*TLStoriesReportC95BE06A))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCStories_ServiceDesc is the grpc.ServiceDesc for RPCStories service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCStories_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCStories",
	HandlerType: (*RPCStoriesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "stories_canSendStory",
			Handler:    _RPCStories_StoriesCanSendStory_Handler,
		},
		{
			MethodName: "stories_sendStory",
			Handler:    _RPCStories_StoriesSendStory_Handler,
		},
		{
			MethodName: "stories_editStory",
			Handler:    _RPCStories_StoriesEditStory_Handler,
		},
		{
			MethodName: "stories_deleteStories",
			Handler:    _RPCStories_StoriesDeleteStories_Handler,
		},
		{
			MethodName: "stories_togglePinned",
			Handler:    _RPCStories_StoriesTogglePinned_Handler,
		},
		{
			MethodName: "stories_getAllStories",
			Handler:    _RPCStories_StoriesGetAllStories_Handler,
		},
		{
			MethodName: "stories_getPinnedStories",
			Handler:    _RPCStories_StoriesGetPinnedStories_Handler,
		},
		{
			MethodName: "stories_getStoriesArchive",
			Handler:    _RPCStories_StoriesGetStoriesArchive_Handler,
		},
		{
			MethodName: "stories_getStoriesByID",
			Handler:    _RPCStories_StoriesGetStoriesByID_Handler,
		},
		{
			MethodName: "stories_toggleAllStoriesHidden",
			Handler:    _RPCStories_StoriesToggleAllStoriesHidden_Handler,
		},
		{
			MethodName: "stories_readStories",
			Handler:    _RPCStories_StoriesReadStories_Handler,
		},
		{
			MethodName: "stories_incrementStoryViews",
			Handler:    _RPCStories_StoriesIncrementStoryViews_Handler,
		},
		{
			MethodName: "stories_getStoryViewsList",
			Handler:    _RPCStories_StoriesGetStoryViewsList_Handler,
		},
		{
			MethodName: "stories_getStoriesViews",
			Handler:    _RPCStories_StoriesGetStoriesViews_Handler,
		},
		{
			MethodName: "stories_exportStoryLink",
			Handler:    _RPCStories_StoriesExportStoryLink_Handler,
		},
		{
			MethodName: "stories_report19D8EB45",
			Handler:    _RPCStories_StoriesReport19D8EB45_Handler,
		},
		{
			MethodName: "stories_activateStealthMode",
			Handler:    _RPCStories_StoriesActivateStealthMode_Handler,
		},
		{
			MethodName: "stories_sendReaction",
			Handler:    _RPCStories_StoriesSendReaction_Handler,
		},
		{
			MethodName: "stories_getPeerStories",
			Handler:    _RPCStories_StoriesGetPeerStories_Handler,
		},
		{
			MethodName: "stories_getAllReadPeerStories",
			Handler:    _RPCStories_StoriesGetAllReadPeerStories_Handler,
		},
		{
			MethodName: "stories_getPeerMaxIDs",
			Handler:    _RPCStories_StoriesGetPeerMaxIDs_Handler,
		},
		{
			MethodName: "stories_getChatsToSend",
			Handler:    _RPCStories_StoriesGetChatsToSend_Handler,
		},
		{
			MethodName: "stories_togglePeerStoriesHidden",
			Handler:    _RPCStories_StoriesTogglePeerStoriesHidden_Handler,
		},
		{
			MethodName: "stories_getStoryReactionsList",
			Handler:    _RPCStories_StoriesGetStoryReactionsList_Handler,
		},
		{
			MethodName: "stories_togglePinnedToTop",
			Handler:    _RPCStories_StoriesTogglePinnedToTop_Handler,
		},
		{
			MethodName: "stories_searchPosts",
			Handler:    _RPCStories_StoriesSearchPosts_Handler,
		},
		{
			MethodName: "stories_report1923FA8C",
			Handler:    _RPCStories_StoriesReport1923FA8C_Handler,
		},
		{
			MethodName: "users_getStoriesMaxIDs",
			Handler:    _RPCStories_UsersGetStoriesMaxIDs_Handler,
		},
		{
			MethodName: "contacts_toggleStoriesHidden",
			Handler:    _RPCStories_ContactsToggleStoriesHidden_Handler,
		},
		{
			MethodName: "stories_getUserStories",
			Handler:    _RPCStories_StoriesGetUserStories_Handler,
		},
		{
			MethodName: "stories_getAllReadUserStories",
			Handler:    _RPCStories_StoriesGetAllReadUserStories_Handler,
		},
		{
			MethodName: "stories_reportC95BE06A",
			Handler:    _RPCStories_StoriesReportC95BE06A_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCTakeout_AccountInitTakeoutSession_FullMethodName   = "/mtproto.RPCTakeout/account_initTakeoutSession"
	RPCTakeout_AccountFinishTakeoutSession_FullMethodName = "/mtproto.RPCTakeout/account_finishTakeoutSession"
	RPCTakeout_MessagesGetSplitRanges_FullMethodName      = "/mtproto.RPCTakeout/messages_getSplitRanges"
	RPCTakeout_ChannelsGetLeftChannels_FullMethodName     = "/mtproto.RPCTakeout/channels_getLeftChannels"
)

// RPCTakeoutClient is the client API for RPCTakeout service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCTakeoutClient interface {
	AccountInitTakeoutSession(ctx context.Context, in *TLAccountInitTakeoutSession, opts ...grpc.CallOption) (*Account_Takeout, error)
	AccountFinishTakeoutSession(ctx context.Context, in *TLAccountFinishTakeoutSession, opts ...grpc.CallOption) (*Bool, error)
	MessagesGetSplitRanges(ctx context.Context, in *TLMessagesGetSplitRanges, opts ...grpc.CallOption) (*Vector_MessageRange, error)
	ChannelsGetLeftChannels(ctx context.Context, in *TLChannelsGetLeftChannels, opts ...grpc.CallOption) (*Messages_Chats, error)
}

type rPCTakeoutClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCTakeoutClient(cc grpc.ClientConnInterface) RPCTakeoutClient {
	return &rPCTakeoutClient{cc}
}

func (c *rPCTakeoutClient) AccountInitTakeoutSession(ctx context.Context, in *TLAccountInitTakeoutSession, opts ...grpc.CallOption) (*Account_Takeout, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account_Takeout)
	err := c.cc.Invoke(ctx, RPCTakeout_AccountInitTakeoutSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCTakeoutClient) AccountFinishTakeoutSession(ctx context.Context, in *TLAccountFinishTakeoutSession, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCTakeout_AccountFinishTakeoutSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCTakeoutClient) MessagesGetSplitRanges(ctx context.Context, in *TLMessagesGetSplitRanges, opts ...grpc.CallOption) (*Vector_MessageRange, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_MessageRange)
	err := c.cc.Invoke(ctx, RPCTakeout_MessagesGetSplitRanges_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCTakeoutClient) ChannelsGetLeftChannels(ctx context.Context, in *TLChannelsGetLeftChannels, opts ...grpc.CallOption) (*Messages_Chats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_Chats)
	err := c.cc.Invoke(ctx, RPCTakeout_ChannelsGetLeftChannels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCTakeoutServer is the server API for RPCTakeout service.
// All implementations should embed UnimplementedRPCTakeoutServer
// for forward compatibility.
type RPCTakeoutServer interface {
	AccountInitTakeoutSession(context.Context, *TLAccountInitTakeoutSession) (*Account_Takeout, error)
	AccountFinishTakeoutSession(context.Context, *TLAccountFinishTakeoutSession) (*Bool, error)
	MessagesGetSplitRanges(context.Context, *TLMessagesGetSplitRanges) (*Vector_MessageRange, error)
	ChannelsGetLeftChannels(context.Context, *TLChannelsGetLeftChannels) (*Messages_Chats, error)
}

// UnimplementedRPCTakeoutServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCTakeoutServer struct{}

func (UnimplementedRPCTakeoutServer) AccountInitTakeoutSession(context.Context, *TLAccountInitTakeoutSession) (*Account_Takeout, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountInitTakeoutSession not implemented")
}
func (UnimplementedRPCTakeoutServer) AccountFinishTakeoutSession(context.Context, *TLAccountFinishTakeoutSession) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountFinishTakeoutSession not implemented")
}
func (UnimplementedRPCTakeoutServer) MessagesGetSplitRanges(context.Context, *TLMessagesGetSplitRanges) (*Vector_MessageRange, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetSplitRanges not implemented")
}
func (UnimplementedRPCTakeoutServer) ChannelsGetLeftChannels(context.Context, *TLChannelsGetLeftChannels) (*Messages_Chats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetLeftChannels not implemented")
}
func (UnimplementedRPCTakeoutServer) testEmbeddedByValue() {}

// UnsafeRPCTakeoutServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCTakeoutServer will
// result in compilation errors.
type UnsafeRPCTakeoutServer interface {
	mustEmbedUnimplementedRPCTakeoutServer()
}

func RegisterRPCTakeoutServer(s grpc.ServiceRegistrar, srv RPCTakeoutServer) {
	// If the following call pancis, it indicates UnimplementedRPCTakeoutServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCTakeout_ServiceDesc, srv)
}

func _RPCTakeout_AccountInitTakeoutSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountInitTakeoutSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCTakeoutServer).AccountInitTakeoutSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCTakeout_AccountInitTakeoutSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCTakeoutServer).AccountInitTakeoutSession(ctx, req.(*TLAccountInitTakeoutSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCTakeout_AccountFinishTakeoutSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountFinishTakeoutSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCTakeoutServer).AccountFinishTakeoutSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCTakeout_AccountFinishTakeoutSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCTakeoutServer).AccountFinishTakeoutSession(ctx, req.(*TLAccountFinishTakeoutSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCTakeout_MessagesGetSplitRanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetSplitRanges)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCTakeoutServer).MessagesGetSplitRanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCTakeout_MessagesGetSplitRanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCTakeoutServer).MessagesGetSplitRanges(ctx, req.(*TLMessagesGetSplitRanges))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCTakeout_ChannelsGetLeftChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetLeftChannels)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCTakeoutServer).ChannelsGetLeftChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCTakeout_ChannelsGetLeftChannels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCTakeoutServer).ChannelsGetLeftChannels(ctx, req.(*TLChannelsGetLeftChannels))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCTakeout_ServiceDesc is the grpc.ServiceDesc for RPCTakeout service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCTakeout_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCTakeout",
	HandlerType: (*RPCTakeoutServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "account_initTakeoutSession",
			Handler:    _RPCTakeout_AccountInitTakeoutSession_Handler,
		},
		{
			MethodName: "account_finishTakeoutSession",
			Handler:    _RPCTakeout_AccountFinishTakeoutSession_Handler,
		},
		{
			MethodName: "messages_getSplitRanges",
			Handler:    _RPCTakeout_MessagesGetSplitRanges_Handler,
		},
		{
			MethodName: "channels_getLeftChannels",
			Handler:    _RPCTakeout_ChannelsGetLeftChannels_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCThemes_AccountUploadTheme_FullMethodName   = "/mtproto.RPCThemes/account_uploadTheme"
	RPCThemes_AccountCreateTheme_FullMethodName   = "/mtproto.RPCThemes/account_createTheme"
	RPCThemes_AccountUpdateTheme_FullMethodName   = "/mtproto.RPCThemes/account_updateTheme"
	RPCThemes_AccountSaveTheme_FullMethodName     = "/mtproto.RPCThemes/account_saveTheme"
	RPCThemes_AccountInstallTheme_FullMethodName  = "/mtproto.RPCThemes/account_installTheme"
	RPCThemes_AccountGetTheme_FullMethodName      = "/mtproto.RPCThemes/account_getTheme"
	RPCThemes_AccountGetThemes_FullMethodName     = "/mtproto.RPCThemes/account_getThemes"
	RPCThemes_AccountGetChatThemes_FullMethodName = "/mtproto.RPCThemes/account_getChatThemes"
	RPCThemes_MessagesSetChatTheme_FullMethodName = "/mtproto.RPCThemes/messages_setChatTheme"
)

// RPCThemesClient is the client API for RPCThemes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCThemesClient interface {
	AccountUploadTheme(ctx context.Context, in *TLAccountUploadTheme, opts ...grpc.CallOption) (*Document, error)
	AccountCreateTheme(ctx context.Context, in *TLAccountCreateTheme, opts ...grpc.CallOption) (*Theme, error)
	AccountUpdateTheme(ctx context.Context, in *TLAccountUpdateTheme, opts ...grpc.CallOption) (*Theme, error)
	AccountSaveTheme(ctx context.Context, in *TLAccountSaveTheme, opts ...grpc.CallOption) (*Bool, error)
	AccountInstallTheme(ctx context.Context, in *TLAccountInstallTheme, opts ...grpc.CallOption) (*Bool, error)
	AccountGetTheme(ctx context.Context, in *TLAccountGetTheme, opts ...grpc.CallOption) (*Theme, error)
	AccountGetThemes(ctx context.Context, in *TLAccountGetThemes, opts ...grpc.CallOption) (*Account_Themes, error)
	AccountGetChatThemes(ctx context.Context, in *TLAccountGetChatThemes, opts ...grpc.CallOption) (*Account_Themes, error)
	MessagesSetChatTheme(ctx context.Context, in *TLMessagesSetChatTheme, opts ...grpc.CallOption) (*Updates, error)
}

type rPCThemesClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCThemesClient(cc grpc.ClientConnInterface) RPCThemesClient {
	return &rPCThemesClient{cc}
}

func (c *rPCThemesClient) AccountUploadTheme(ctx context.Context, in *TLAccountUploadTheme, opts ...grpc.CallOption) (*Document, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Document)
	err := c.cc.Invoke(ctx, RPCThemes_AccountUploadTheme_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCThemesClient) AccountCreateTheme(ctx context.Context, in *TLAccountCreateTheme, opts ...grpc.CallOption) (*Theme, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Theme)
	err := c.cc.Invoke(ctx, RPCThemes_AccountCreateTheme_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCThemesClient) AccountUpdateTheme(ctx context.Context, in *TLAccountUpdateTheme, opts ...grpc.CallOption) (*Theme, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Theme)
	err := c.cc.Invoke(ctx, RPCThemes_AccountUpdateTheme_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCThemesClient) AccountSaveTheme(ctx context.Context, in *TLAccountSaveTheme, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCThemes_AccountSaveTheme_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCThemesClient) AccountInstallTheme(ctx context.Context, in *TLAccountInstallTheme, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCThemes_AccountInstallTheme_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCThemesClient) AccountGetTheme(ctx context.Context, in *TLAccountGetTheme, opts ...grpc.CallOption) (*Theme, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Theme)
	err := c.cc.Invoke(ctx, RPCThemes_AccountGetTheme_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCThemesClient) AccountGetThemes(ctx context.Context, in *TLAccountGetThemes, opts ...grpc.CallOption) (*Account_Themes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account_Themes)
	err := c.cc.Invoke(ctx, RPCThemes_AccountGetThemes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCThemesClient) AccountGetChatThemes(ctx context.Context, in *TLAccountGetChatThemes, opts ...grpc.CallOption) (*Account_Themes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account_Themes)
	err := c.cc.Invoke(ctx, RPCThemes_AccountGetChatThemes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCThemesClient) MessagesSetChatTheme(ctx context.Context, in *TLMessagesSetChatTheme, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCThemes_MessagesSetChatTheme_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCThemesServer is the server API for RPCThemes service.
// All implementations should embed UnimplementedRPCThemesServer
// for forward compatibility.
type RPCThemesServer interface {
	AccountUploadTheme(context.Context, *TLAccountUploadTheme) (*Document, error)
	AccountCreateTheme(context.Context, *TLAccountCreateTheme) (*Theme, error)
	AccountUpdateTheme(context.Context, *TLAccountUpdateTheme) (*Theme, error)
	AccountSaveTheme(context.Context, *TLAccountSaveTheme) (*Bool, error)
	AccountInstallTheme(context.Context, *TLAccountInstallTheme) (*Bool, error)
	AccountGetTheme(context.Context, *TLAccountGetTheme) (*Theme, error)
	AccountGetThemes(context.Context, *TLAccountGetThemes) (*Account_Themes, error)
	AccountGetChatThemes(context.Context, *TLAccountGetChatThemes) (*Account_Themes, error)
	MessagesSetChatTheme(context.Context, *TLMessagesSetChatTheme) (*Updates, error)
}

// UnimplementedRPCThemesServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCThemesServer struct{}

func (UnimplementedRPCThemesServer) AccountUploadTheme(context.Context, *TLAccountUploadTheme) (*Document, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUploadTheme not implemented")
}
func (UnimplementedRPCThemesServer) AccountCreateTheme(context.Context, *TLAccountCreateTheme) (*Theme, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountCreateTheme not implemented")
}
func (UnimplementedRPCThemesServer) AccountUpdateTheme(context.Context, *TLAccountUpdateTheme) (*Theme, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUpdateTheme not implemented")
}
func (UnimplementedRPCThemesServer) AccountSaveTheme(context.Context, *TLAccountSaveTheme) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSaveTheme not implemented")
}
func (UnimplementedRPCThemesServer) AccountInstallTheme(context.Context, *TLAccountInstallTheme) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountInstallTheme not implemented")
}
func (UnimplementedRPCThemesServer) AccountGetTheme(context.Context, *TLAccountGetTheme) (*Theme, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetTheme not implemented")
}
func (UnimplementedRPCThemesServer) AccountGetThemes(context.Context, *TLAccountGetThemes) (*Account_Themes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetThemes not implemented")
}
func (UnimplementedRPCThemesServer) AccountGetChatThemes(context.Context, *TLAccountGetChatThemes) (*Account_Themes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetChatThemes not implemented")
}
func (UnimplementedRPCThemesServer) MessagesSetChatTheme(context.Context, *TLMessagesSetChatTheme) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSetChatTheme not implemented")
}
func (UnimplementedRPCThemesServer) testEmbeddedByValue() {}

// UnsafeRPCThemesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCThemesServer will
// result in compilation errors.
type UnsafeRPCThemesServer interface {
	mustEmbedUnimplementedRPCThemesServer()
}

func RegisterRPCThemesServer(s grpc.ServiceRegistrar, srv RPCThemesServer) {
	// If the following call pancis, it indicates UnimplementedRPCThemesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCThemes_ServiceDesc, srv)
}

func _RPCThemes_AccountUploadTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUploadTheme)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCThemesServer).AccountUploadTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCThemes_AccountUploadTheme_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCThemesServer).AccountUploadTheme(ctx, req.(*TLAccountUploadTheme))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCThemes_AccountCreateTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountCreateTheme)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCThemesServer).AccountCreateTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCThemes_AccountCreateTheme_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCThemesServer).AccountCreateTheme(ctx, req.(*TLAccountCreateTheme))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCThemes_AccountUpdateTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUpdateTheme)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCThemesServer).AccountUpdateTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCThemes_AccountUpdateTheme_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCThemesServer).AccountUpdateTheme(ctx, req.(*TLAccountUpdateTheme))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCThemes_AccountSaveTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSaveTheme)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCThemesServer).AccountSaveTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCThemes_AccountSaveTheme_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCThemesServer).AccountSaveTheme(ctx, req.(*TLAccountSaveTheme))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCThemes_AccountInstallTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountInstallTheme)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCThemesServer).AccountInstallTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCThemes_AccountInstallTheme_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCThemesServer).AccountInstallTheme(ctx, req.(*TLAccountInstallTheme))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCThemes_AccountGetTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetTheme)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCThemesServer).AccountGetTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCThemes_AccountGetTheme_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCThemesServer).AccountGetTheme(ctx, req.(*TLAccountGetTheme))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCThemes_AccountGetThemes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetThemes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCThemesServer).AccountGetThemes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCThemes_AccountGetThemes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCThemesServer).AccountGetThemes(ctx, req.(*TLAccountGetThemes))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCThemes_AccountGetChatThemes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetChatThemes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCThemesServer).AccountGetChatThemes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCThemes_AccountGetChatThemes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCThemesServer).AccountGetChatThemes(ctx, req.(*TLAccountGetChatThemes))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCThemes_MessagesSetChatTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSetChatTheme)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCThemesServer).MessagesSetChatTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCThemes_MessagesSetChatTheme_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCThemesServer).MessagesSetChatTheme(ctx, req.(*TLMessagesSetChatTheme))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCThemes_ServiceDesc is the grpc.ServiceDesc for RPCThemes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCThemes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCThemes",
	HandlerType: (*RPCThemesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "account_uploadTheme",
			Handler:    _RPCThemes_AccountUploadTheme_Handler,
		},
		{
			MethodName: "account_createTheme",
			Handler:    _RPCThemes_AccountCreateTheme_Handler,
		},
		{
			MethodName: "account_updateTheme",
			Handler:    _RPCThemes_AccountUpdateTheme_Handler,
		},
		{
			MethodName: "account_saveTheme",
			Handler:    _RPCThemes_AccountSaveTheme_Handler,
		},
		{
			MethodName: "account_installTheme",
			Handler:    _RPCThemes_AccountInstallTheme_Handler,
		},
		{
			MethodName: "account_getTheme",
			Handler:    _RPCThemes_AccountGetTheme_Handler,
		},
		{
			MethodName: "account_getThemes",
			Handler:    _RPCThemes_AccountGetThemes_Handler,
		},
		{
			MethodName: "account_getChatThemes",
			Handler:    _RPCThemes_AccountGetChatThemes_Handler,
		},
		{
			MethodName: "messages_setChatTheme",
			Handler:    _RPCThemes_MessagesSetChatTheme_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCTimezones_HelpGetTimezonesList_FullMethodName = "/mtproto.RPCTimezones/help_getTimezonesList"
)

// RPCTimezonesClient is the client API for RPCTimezones service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCTimezonesClient interface {
	HelpGetTimezonesList(ctx context.Context, in *TLHelpGetTimezonesList, opts ...grpc.CallOption) (*Help_TimezonesList, error)
}

type rPCTimezonesClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCTimezonesClient(cc grpc.ClientConnInterface) RPCTimezonesClient {
	return &rPCTimezonesClient{cc}
}

func (c *rPCTimezonesClient) HelpGetTimezonesList(ctx context.Context, in *TLHelpGetTimezonesList, opts ...grpc.CallOption) (*Help_TimezonesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Help_TimezonesList)
	err := c.cc.Invoke(ctx, RPCTimezones_HelpGetTimezonesList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCTimezonesServer is the server API for RPCTimezones service.
// All implementations should embed UnimplementedRPCTimezonesServer
// for forward compatibility.
type RPCTimezonesServer interface {
	HelpGetTimezonesList(context.Context, *TLHelpGetTimezonesList) (*Help_TimezonesList, error)
}

// UnimplementedRPCTimezonesServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCTimezonesServer struct{}

func (UnimplementedRPCTimezonesServer) HelpGetTimezonesList(context.Context, *TLHelpGetTimezonesList) (*Help_TimezonesList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetTimezonesList not implemented")
}
func (UnimplementedRPCTimezonesServer) testEmbeddedByValue() {}

// UnsafeRPCTimezonesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCTimezonesServer will
// result in compilation errors.
type UnsafeRPCTimezonesServer interface {
	mustEmbedUnimplementedRPCTimezonesServer()
}

func RegisterRPCTimezonesServer(s grpc.ServiceRegistrar, srv RPCTimezonesServer) {
	// If the following call pancis, it indicates UnimplementedRPCTimezonesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCTimezones_ServiceDesc, srv)
}

func _RPCTimezones_HelpGetTimezonesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetTimezonesList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCTimezonesServer).HelpGetTimezonesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCTimezones_HelpGetTimezonesList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCTimezonesServer).HelpGetTimezonesList(ctx, req.(*TLHelpGetTimezonesList))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCTimezones_ServiceDesc is the grpc.ServiceDesc for RPCTimezones service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCTimezones_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCTimezones",
	HandlerType: (*RPCTimezonesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "help_getTimezonesList",
			Handler:    _RPCTimezones_HelpGetTimezonesList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCTos_HelpGetTermsOfServiceUpdate_FullMethodName = "/mtproto.RPCTos/help_getTermsOfServiceUpdate"
	RPCTos_HelpAcceptTermsOfService_FullMethodName    = "/mtproto.RPCTos/help_acceptTermsOfService"
)

// RPCTosClient is the client API for RPCTos service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCTosClient interface {
	HelpGetTermsOfServiceUpdate(ctx context.Context, in *TLHelpGetTermsOfServiceUpdate, opts ...grpc.CallOption) (*Help_TermsOfServiceUpdate, error)
	HelpAcceptTermsOfService(ctx context.Context, in *TLHelpAcceptTermsOfService, opts ...grpc.CallOption) (*Bool, error)
}

type rPCTosClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCTosClient(cc grpc.ClientConnInterface) RPCTosClient {
	return &rPCTosClient{cc}
}

func (c *rPCTosClient) HelpGetTermsOfServiceUpdate(ctx context.Context, in *TLHelpGetTermsOfServiceUpdate, opts ...grpc.CallOption) (*Help_TermsOfServiceUpdate, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Help_TermsOfServiceUpdate)
	err := c.cc.Invoke(ctx, RPCTos_HelpGetTermsOfServiceUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCTosClient) HelpAcceptTermsOfService(ctx context.Context, in *TLHelpAcceptTermsOfService, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCTos_HelpAcceptTermsOfService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCTosServer is the server API for RPCTos service.
// All implementations should embed UnimplementedRPCTosServer
// for forward compatibility.
type RPCTosServer interface {
	HelpGetTermsOfServiceUpdate(context.Context, *TLHelpGetTermsOfServiceUpdate) (*Help_TermsOfServiceUpdate, error)
	HelpAcceptTermsOfService(context.Context, *TLHelpAcceptTermsOfService) (*Bool, error)
}

// UnimplementedRPCTosServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCTosServer struct{}

func (UnimplementedRPCTosServer) HelpGetTermsOfServiceUpdate(context.Context, *TLHelpGetTermsOfServiceUpdate) (*Help_TermsOfServiceUpdate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetTermsOfServiceUpdate not implemented")
}
func (UnimplementedRPCTosServer) HelpAcceptTermsOfService(context.Context, *TLHelpAcceptTermsOfService) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpAcceptTermsOfService not implemented")
}
func (UnimplementedRPCTosServer) testEmbeddedByValue() {}

// UnsafeRPCTosServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCTosServer will
// result in compilation errors.
type UnsafeRPCTosServer interface {
	mustEmbedUnimplementedRPCTosServer()
}

func RegisterRPCTosServer(s grpc.ServiceRegistrar, srv RPCTosServer) {
	// If the following call pancis, it indicates UnimplementedRPCTosServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCTos_ServiceDesc, srv)
}

func _RPCTos_HelpGetTermsOfServiceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetTermsOfServiceUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCTosServer).HelpGetTermsOfServiceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCTos_HelpGetTermsOfServiceUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCTosServer).HelpGetTermsOfServiceUpdate(ctx, req.(*TLHelpGetTermsOfServiceUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCTos_HelpAcceptTermsOfService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpAcceptTermsOfService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCTosServer).HelpAcceptTermsOfService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCTos_HelpAcceptTermsOfService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCTosServer).HelpAcceptTermsOfService(ctx, req.(*TLHelpAcceptTermsOfService))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCTos_ServiceDesc is the grpc.ServiceDesc for RPCTos service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCTos_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCTos",
	HandlerType: (*RPCTosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "help_getTermsOfServiceUpdate",
			Handler:    _RPCTos_HelpGetTermsOfServiceUpdate_Handler,
		},
		{
			MethodName: "help_acceptTermsOfService",
			Handler:    _RPCTos_HelpAcceptTermsOfService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCTranscription_MessagesTranscribeAudio_FullMethodName      = "/mtproto.RPCTranscription/messages_transcribeAudio"
	RPCTranscription_MessagesRateTranscribedAudio_FullMethodName = "/mtproto.RPCTranscription/messages_rateTranscribedAudio"
)

// RPCTranscriptionClient is the client API for RPCTranscription service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCTranscriptionClient interface {
	MessagesTranscribeAudio(ctx context.Context, in *TLMessagesTranscribeAudio, opts ...grpc.CallOption) (*Messages_TranscribedAudio, error)
	MessagesRateTranscribedAudio(ctx context.Context, in *TLMessagesRateTranscribedAudio, opts ...grpc.CallOption) (*Bool, error)
}

type rPCTranscriptionClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCTranscriptionClient(cc grpc.ClientConnInterface) RPCTranscriptionClient {
	return &rPCTranscriptionClient{cc}
}

func (c *rPCTranscriptionClient) MessagesTranscribeAudio(ctx context.Context, in *TLMessagesTranscribeAudio, opts ...grpc.CallOption) (*Messages_TranscribedAudio, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_TranscribedAudio)
	err := c.cc.Invoke(ctx, RPCTranscription_MessagesTranscribeAudio_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCTranscriptionClient) MessagesRateTranscribedAudio(ctx context.Context, in *TLMessagesRateTranscribedAudio, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCTranscription_MessagesRateTranscribedAudio_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCTranscriptionServer is the server API for RPCTranscription service.
// All implementations should embed UnimplementedRPCTranscriptionServer
// for forward compatibility.
type RPCTranscriptionServer interface {
	MessagesTranscribeAudio(context.Context, *TLMessagesTranscribeAudio) (*Messages_TranscribedAudio, error)
	MessagesRateTranscribedAudio(context.Context, *TLMessagesRateTranscribedAudio) (*Bool, error)
}

// UnimplementedRPCTranscriptionServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCTranscriptionServer struct{}

func (UnimplementedRPCTranscriptionServer) MessagesTranscribeAudio(context.Context, *TLMessagesTranscribeAudio) (*Messages_TranscribedAudio, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesTranscribeAudio not implemented")
}
func (UnimplementedRPCTranscriptionServer) MessagesRateTranscribedAudio(context.Context, *TLMessagesRateTranscribedAudio) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesRateTranscribedAudio not implemented")
}
func (UnimplementedRPCTranscriptionServer) testEmbeddedByValue() {}

// UnsafeRPCTranscriptionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCTranscriptionServer will
// result in compilation errors.
type UnsafeRPCTranscriptionServer interface {
	mustEmbedUnimplementedRPCTranscriptionServer()
}

func RegisterRPCTranscriptionServer(s grpc.ServiceRegistrar, srv RPCTranscriptionServer) {
	// If the following call pancis, it indicates UnimplementedRPCTranscriptionServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCTranscription_ServiceDesc, srv)
}

func _RPCTranscription_MessagesTranscribeAudio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesTranscribeAudio)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCTranscriptionServer).MessagesTranscribeAudio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCTranscription_MessagesTranscribeAudio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCTranscriptionServer).MessagesTranscribeAudio(ctx, req.(*TLMessagesTranscribeAudio))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCTranscription_MessagesRateTranscribedAudio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesRateTranscribedAudio)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCTranscriptionServer).MessagesRateTranscribedAudio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCTranscription_MessagesRateTranscribedAudio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCTranscriptionServer).MessagesRateTranscribedAudio(ctx, req.(*TLMessagesRateTranscribedAudio))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCTranscription_ServiceDesc is the grpc.ServiceDesc for RPCTranscription service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCTranscription_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCTranscription",
	HandlerType: (*RPCTranscriptionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "messages_transcribeAudio",
			Handler:    _RPCTranscription_MessagesTranscribeAudio_Handler,
		},
		{
			MethodName: "messages_rateTranscribedAudio",
			Handler:    _RPCTranscription_MessagesRateTranscribedAudio_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCTranslation_MessagesTranslateText_FullMethodName          = "/mtproto.RPCTranslation/messages_translateText"
	RPCTranslation_MessagesTogglePeerTranslations_FullMethodName = "/mtproto.RPCTranslation/messages_togglePeerTranslations"
)

// RPCTranslationClient is the client API for RPCTranslation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCTranslationClient interface {
	MessagesTranslateText(ctx context.Context, in *TLMessagesTranslateText, opts ...grpc.CallOption) (*Messages_TranslatedText, error)
	MessagesTogglePeerTranslations(ctx context.Context, in *TLMessagesTogglePeerTranslations, opts ...grpc.CallOption) (*Bool, error)
}

type rPCTranslationClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCTranslationClient(cc grpc.ClientConnInterface) RPCTranslationClient {
	return &rPCTranslationClient{cc}
}

func (c *rPCTranslationClient) MessagesTranslateText(ctx context.Context, in *TLMessagesTranslateText, opts ...grpc.CallOption) (*Messages_TranslatedText, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_TranslatedText)
	err := c.cc.Invoke(ctx, RPCTranslation_MessagesTranslateText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCTranslationClient) MessagesTogglePeerTranslations(ctx context.Context, in *TLMessagesTogglePeerTranslations, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCTranslation_MessagesTogglePeerTranslations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCTranslationServer is the server API for RPCTranslation service.
// All implementations should embed UnimplementedRPCTranslationServer
// for forward compatibility.
type RPCTranslationServer interface {
	MessagesTranslateText(context.Context, *TLMessagesTranslateText) (*Messages_TranslatedText, error)
	MessagesTogglePeerTranslations(context.Context, *TLMessagesTogglePeerTranslations) (*Bool, error)
}

// UnimplementedRPCTranslationServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCTranslationServer struct{}

func (UnimplementedRPCTranslationServer) MessagesTranslateText(context.Context, *TLMessagesTranslateText) (*Messages_TranslatedText, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesTranslateText not implemented")
}
func (UnimplementedRPCTranslationServer) MessagesTogglePeerTranslations(context.Context, *TLMessagesTogglePeerTranslations) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesTogglePeerTranslations not implemented")
}
func (UnimplementedRPCTranslationServer) testEmbeddedByValue() {}

// UnsafeRPCTranslationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCTranslationServer will
// result in compilation errors.
type UnsafeRPCTranslationServer interface {
	mustEmbedUnimplementedRPCTranslationServer()
}

func RegisterRPCTranslationServer(s grpc.ServiceRegistrar, srv RPCTranslationServer) {
	// If the following call pancis, it indicates UnimplementedRPCTranslationServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCTranslation_ServiceDesc, srv)
}

func _RPCTranslation_MessagesTranslateText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesTranslateText)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCTranslationServer).MessagesTranslateText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCTranslation_MessagesTranslateText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCTranslationServer).MessagesTranslateText(ctx, req.(*TLMessagesTranslateText))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCTranslation_MessagesTogglePeerTranslations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesTogglePeerTranslations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCTranslationServer).MessagesTogglePeerTranslations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCTranslation_MessagesTogglePeerTranslations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCTranslationServer).MessagesTogglePeerTranslations(ctx, req.(*TLMessagesTogglePeerTranslations))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCTranslation_ServiceDesc is the grpc.ServiceDesc for RPCTranslation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCTranslation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCTranslation",
	HandlerType: (*RPCTranslationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "messages_translateText",
			Handler:    _RPCTranslation_MessagesTranslateText_Handler,
		},
		{
			MethodName: "messages_togglePeerTranslations",
			Handler:    _RPCTranslation_MessagesTogglePeerTranslations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCTsf_HelpGetUserInfo_FullMethodName  = "/mtproto.RPCTsf/help_getUserInfo"
	RPCTsf_HelpEditUserInfo_FullMethodName = "/mtproto.RPCTsf/help_editUserInfo"
)

// RPCTsfClient is the client API for RPCTsf service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCTsfClient interface {
	HelpGetUserInfo(ctx context.Context, in *TLHelpGetUserInfo, opts ...grpc.CallOption) (*Help_UserInfo, error)
	HelpEditUserInfo(ctx context.Context, in *TLHelpEditUserInfo, opts ...grpc.CallOption) (*Help_UserInfo, error)
}

type rPCTsfClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCTsfClient(cc grpc.ClientConnInterface) RPCTsfClient {
	return &rPCTsfClient{cc}
}

func (c *rPCTsfClient) HelpGetUserInfo(ctx context.Context, in *TLHelpGetUserInfo, opts ...grpc.CallOption) (*Help_UserInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Help_UserInfo)
	err := c.cc.Invoke(ctx, RPCTsf_HelpGetUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCTsfClient) HelpEditUserInfo(ctx context.Context, in *TLHelpEditUserInfo, opts ...grpc.CallOption) (*Help_UserInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Help_UserInfo)
	err := c.cc.Invoke(ctx, RPCTsf_HelpEditUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCTsfServer is the server API for RPCTsf service.
// All implementations should embed UnimplementedRPCTsfServer
// for forward compatibility.
type RPCTsfServer interface {
	HelpGetUserInfo(context.Context, *TLHelpGetUserInfo) (*Help_UserInfo, error)
	HelpEditUserInfo(context.Context, *TLHelpEditUserInfo) (*Help_UserInfo, error)
}

// UnimplementedRPCTsfServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCTsfServer struct{}

func (UnimplementedRPCTsfServer) HelpGetUserInfo(context.Context, *TLHelpGetUserInfo) (*Help_UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetUserInfo not implemented")
}
func (UnimplementedRPCTsfServer) HelpEditUserInfo(context.Context, *TLHelpEditUserInfo) (*Help_UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpEditUserInfo not implemented")
}
func (UnimplementedRPCTsfServer) testEmbeddedByValue() {}

// UnsafeRPCTsfServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCTsfServer will
// result in compilation errors.
type UnsafeRPCTsfServer interface {
	mustEmbedUnimplementedRPCTsfServer()
}

func RegisterRPCTsfServer(s grpc.ServiceRegistrar, srv RPCTsfServer) {
	// If the following call pancis, it indicates UnimplementedRPCTsfServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCTsf_ServiceDesc, srv)
}

func _RPCTsf_HelpGetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetUserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCTsfServer).HelpGetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCTsf_HelpGetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCTsfServer).HelpGetUserInfo(ctx, req.(*TLHelpGetUserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCTsf_HelpEditUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpEditUserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCTsfServer).HelpEditUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCTsf_HelpEditUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCTsfServer).HelpEditUserInfo(ctx, req.(*TLHelpEditUserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCTsf_ServiceDesc is the grpc.ServiceDesc for RPCTsf service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCTsf_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCTsf",
	HandlerType: (*RPCTsfServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "help_getUserInfo",
			Handler:    _RPCTsf_HelpGetUserInfo_Handler,
		},
		{
			MethodName: "help_editUserInfo",
			Handler:    _RPCTsf_HelpEditUserInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCTwoFa_AccountGetPassword_FullMethodName            = "/mtproto.RPCTwoFa/account_getPassword"
	RPCTwoFa_AccountGetPasswordSettings_FullMethodName    = "/mtproto.RPCTwoFa/account_getPasswordSettings"
	RPCTwoFa_AccountUpdatePasswordSettings_FullMethodName = "/mtproto.RPCTwoFa/account_updatePasswordSettings"
	RPCTwoFa_AccountConfirmPasswordEmail_FullMethodName   = "/mtproto.RPCTwoFa/account_confirmPasswordEmail"
	RPCTwoFa_AccountResendPasswordEmail_FullMethodName    = "/mtproto.RPCTwoFa/account_resendPasswordEmail"
	RPCTwoFa_AccountCancelPasswordEmail_FullMethodName    = "/mtproto.RPCTwoFa/account_cancelPasswordEmail"
	RPCTwoFa_AccountDeclinePasswordReset_FullMethodName   = "/mtproto.RPCTwoFa/account_declinePasswordReset"
)

// RPCTwoFaClient is the client API for RPCTwoFa service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCTwoFaClient interface {
	AccountGetPassword(ctx context.Context, in *TLAccountGetPassword, opts ...grpc.CallOption) (*Account_Password, error)
	AccountGetPasswordSettings(ctx context.Context, in *TLAccountGetPasswordSettings, opts ...grpc.CallOption) (*Account_PasswordSettings, error)
	AccountUpdatePasswordSettings(ctx context.Context, in *TLAccountUpdatePasswordSettings, opts ...grpc.CallOption) (*Bool, error)
	AccountConfirmPasswordEmail(ctx context.Context, in *TLAccountConfirmPasswordEmail, opts ...grpc.CallOption) (*Bool, error)
	AccountResendPasswordEmail(ctx context.Context, in *TLAccountResendPasswordEmail, opts ...grpc.CallOption) (*Bool, error)
	AccountCancelPasswordEmail(ctx context.Context, in *TLAccountCancelPasswordEmail, opts ...grpc.CallOption) (*Bool, error)
	AccountDeclinePasswordReset(ctx context.Context, in *TLAccountDeclinePasswordReset, opts ...grpc.CallOption) (*Bool, error)
}

type rPCTwoFaClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCTwoFaClient(cc grpc.ClientConnInterface) RPCTwoFaClient {
	return &rPCTwoFaClient{cc}
}

func (c *rPCTwoFaClient) AccountGetPassword(ctx context.Context, in *TLAccountGetPassword, opts ...grpc.CallOption) (*Account_Password, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account_Password)
	err := c.cc.Invoke(ctx, RPCTwoFa_AccountGetPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCTwoFaClient) AccountGetPasswordSettings(ctx context.Context, in *TLAccountGetPasswordSettings, opts ...grpc.CallOption) (*Account_PasswordSettings, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account_PasswordSettings)
	err := c.cc.Invoke(ctx, RPCTwoFa_AccountGetPasswordSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCTwoFaClient) AccountUpdatePasswordSettings(ctx context.Context, in *TLAccountUpdatePasswordSettings, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCTwoFa_AccountUpdatePasswordSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCTwoFaClient) AccountConfirmPasswordEmail(ctx context.Context, in *TLAccountConfirmPasswordEmail, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCTwoFa_AccountConfirmPasswordEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCTwoFaClient) AccountResendPasswordEmail(ctx context.Context, in *TLAccountResendPasswordEmail, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCTwoFa_AccountResendPasswordEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCTwoFaClient) AccountCancelPasswordEmail(ctx context.Context, in *TLAccountCancelPasswordEmail, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCTwoFa_AccountCancelPasswordEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCTwoFaClient) AccountDeclinePasswordReset(ctx context.Context, in *TLAccountDeclinePasswordReset, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCTwoFa_AccountDeclinePasswordReset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCTwoFaServer is the server API for RPCTwoFa service.
// All implementations should embed UnimplementedRPCTwoFaServer
// for forward compatibility.
type RPCTwoFaServer interface {
	AccountGetPassword(context.Context, *TLAccountGetPassword) (*Account_Password, error)
	AccountGetPasswordSettings(context.Context, *TLAccountGetPasswordSettings) (*Account_PasswordSettings, error)
	AccountUpdatePasswordSettings(context.Context, *TLAccountUpdatePasswordSettings) (*Bool, error)
	AccountConfirmPasswordEmail(context.Context, *TLAccountConfirmPasswordEmail) (*Bool, error)
	AccountResendPasswordEmail(context.Context, *TLAccountResendPasswordEmail) (*Bool, error)
	AccountCancelPasswordEmail(context.Context, *TLAccountCancelPasswordEmail) (*Bool, error)
	AccountDeclinePasswordReset(context.Context, *TLAccountDeclinePasswordReset) (*Bool, error)
}

// UnimplementedRPCTwoFaServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCTwoFaServer struct{}

func (UnimplementedRPCTwoFaServer) AccountGetPassword(context.Context, *TLAccountGetPassword) (*Account_Password, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetPassword not implemented")
}
func (UnimplementedRPCTwoFaServer) AccountGetPasswordSettings(context.Context, *TLAccountGetPasswordSettings) (*Account_PasswordSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetPasswordSettings not implemented")
}
func (UnimplementedRPCTwoFaServer) AccountUpdatePasswordSettings(context.Context, *TLAccountUpdatePasswordSettings) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUpdatePasswordSettings not implemented")
}
func (UnimplementedRPCTwoFaServer) AccountConfirmPasswordEmail(context.Context, *TLAccountConfirmPasswordEmail) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountConfirmPasswordEmail not implemented")
}
func (UnimplementedRPCTwoFaServer) AccountResendPasswordEmail(context.Context, *TLAccountResendPasswordEmail) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountResendPasswordEmail not implemented")
}
func (UnimplementedRPCTwoFaServer) AccountCancelPasswordEmail(context.Context, *TLAccountCancelPasswordEmail) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountCancelPasswordEmail not implemented")
}
func (UnimplementedRPCTwoFaServer) AccountDeclinePasswordReset(context.Context, *TLAccountDeclinePasswordReset) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountDeclinePasswordReset not implemented")
}
func (UnimplementedRPCTwoFaServer) testEmbeddedByValue() {}

// UnsafeRPCTwoFaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCTwoFaServer will
// result in compilation errors.
type UnsafeRPCTwoFaServer interface {
	mustEmbedUnimplementedRPCTwoFaServer()
}

func RegisterRPCTwoFaServer(s grpc.ServiceRegistrar, srv RPCTwoFaServer) {
	// If the following call pancis, it indicates UnimplementedRPCTwoFaServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCTwoFa_ServiceDesc, srv)
}

func _RPCTwoFa_AccountGetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCTwoFaServer).AccountGetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCTwoFa_AccountGetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCTwoFaServer).AccountGetPassword(ctx, req.(*TLAccountGetPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCTwoFa_AccountGetPasswordSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetPasswordSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCTwoFaServer).AccountGetPasswordSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCTwoFa_AccountGetPasswordSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCTwoFaServer).AccountGetPasswordSettings(ctx, req.(*TLAccountGetPasswordSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCTwoFa_AccountUpdatePasswordSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUpdatePasswordSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCTwoFaServer).AccountUpdatePasswordSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCTwoFa_AccountUpdatePasswordSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCTwoFaServer).AccountUpdatePasswordSettings(ctx, req.(*TLAccountUpdatePasswordSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCTwoFa_AccountConfirmPasswordEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountConfirmPasswordEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCTwoFaServer).AccountConfirmPasswordEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCTwoFa_AccountConfirmPasswordEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCTwoFaServer).AccountConfirmPasswordEmail(ctx, req.(*TLAccountConfirmPasswordEmail))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCTwoFa_AccountResendPasswordEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountResendPasswordEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCTwoFaServer).AccountResendPasswordEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCTwoFa_AccountResendPasswordEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCTwoFaServer).AccountResendPasswordEmail(ctx, req.(*TLAccountResendPasswordEmail))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCTwoFa_AccountCancelPasswordEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountCancelPasswordEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCTwoFaServer).AccountCancelPasswordEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCTwoFa_AccountCancelPasswordEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCTwoFaServer).AccountCancelPasswordEmail(ctx, req.(*TLAccountCancelPasswordEmail))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCTwoFa_AccountDeclinePasswordReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountDeclinePasswordReset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCTwoFaServer).AccountDeclinePasswordReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCTwoFa_AccountDeclinePasswordReset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCTwoFaServer).AccountDeclinePasswordReset(ctx, req.(*TLAccountDeclinePasswordReset))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCTwoFa_ServiceDesc is the grpc.ServiceDesc for RPCTwoFa service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCTwoFa_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCTwoFa",
	HandlerType: (*RPCTwoFaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "account_getPassword",
			Handler:    _RPCTwoFa_AccountGetPassword_Handler,
		},
		{
			MethodName: "account_getPasswordSettings",
			Handler:    _RPCTwoFa_AccountGetPasswordSettings_Handler,
		},
		{
			MethodName: "account_updatePasswordSettings",
			Handler:    _RPCTwoFa_AccountUpdatePasswordSettings_Handler,
		},
		{
			MethodName: "account_confirmPasswordEmail",
			Handler:    _RPCTwoFa_AccountConfirmPasswordEmail_Handler,
		},
		{
			MethodName: "account_resendPasswordEmail",
			Handler:    _RPCTwoFa_AccountResendPasswordEmail_Handler,
		},
		{
			MethodName: "account_cancelPasswordEmail",
			Handler:    _RPCTwoFa_AccountCancelPasswordEmail_Handler,
		},
		{
			MethodName: "account_declinePasswordReset",
			Handler:    _RPCTwoFa_AccountDeclinePasswordReset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCUpdates_UpdatesGetState_FullMethodName             = "/mtproto.RPCUpdates/updates_getState"
	RPCUpdates_UpdatesGetDifference_FullMethodName        = "/mtproto.RPCUpdates/updates_getDifference"
	RPCUpdates_UpdatesGetChannelDifference_FullMethodName = "/mtproto.RPCUpdates/updates_getChannelDifference"
)

// RPCUpdatesClient is the client API for RPCUpdates service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCUpdatesClient interface {
	UpdatesGetState(ctx context.Context, in *TLUpdatesGetState, opts ...grpc.CallOption) (*Updates_State, error)
	UpdatesGetDifference(ctx context.Context, in *TLUpdatesGetDifference, opts ...grpc.CallOption) (*Updates_Difference, error)
	UpdatesGetChannelDifference(ctx context.Context, in *TLUpdatesGetChannelDifference, opts ...grpc.CallOption) (*Updates_ChannelDifference, error)
}

type rPCUpdatesClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCUpdatesClient(cc grpc.ClientConnInterface) RPCUpdatesClient {
	return &rPCUpdatesClient{cc}
}

func (c *rPCUpdatesClient) UpdatesGetState(ctx context.Context, in *TLUpdatesGetState, opts ...grpc.CallOption) (*Updates_State, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates_State)
	err := c.cc.Invoke(ctx, RPCUpdates_UpdatesGetState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUpdatesClient) UpdatesGetDifference(ctx context.Context, in *TLUpdatesGetDifference, opts ...grpc.CallOption) (*Updates_Difference, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates_Difference)
	err := c.cc.Invoke(ctx, RPCUpdates_UpdatesGetDifference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUpdatesClient) UpdatesGetChannelDifference(ctx context.Context, in *TLUpdatesGetChannelDifference, opts ...grpc.CallOption) (*Updates_ChannelDifference, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates_ChannelDifference)
	err := c.cc.Invoke(ctx, RPCUpdates_UpdatesGetChannelDifference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCUpdatesServer is the server API for RPCUpdates service.
// All implementations should embed UnimplementedRPCUpdatesServer
// for forward compatibility.
type RPCUpdatesServer interface {
	UpdatesGetState(context.Context, *TLUpdatesGetState) (*Updates_State, error)
	UpdatesGetDifference(context.Context, *TLUpdatesGetDifference) (*Updates_Difference, error)
	UpdatesGetChannelDifference(context.Context, *TLUpdatesGetChannelDifference) (*Updates_ChannelDifference, error)
}

// UnimplementedRPCUpdatesServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCUpdatesServer struct{}

func (UnimplementedRPCUpdatesServer) UpdatesGetState(context.Context, *TLUpdatesGetState) (*Updates_State, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatesGetState not implemented")
}
func (UnimplementedRPCUpdatesServer) UpdatesGetDifference(context.Context, *TLUpdatesGetDifference) (*Updates_Difference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatesGetDifference not implemented")
}
func (UnimplementedRPCUpdatesServer) UpdatesGetChannelDifference(context.Context, *TLUpdatesGetChannelDifference) (*Updates_ChannelDifference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatesGetChannelDifference not implemented")
}
func (UnimplementedRPCUpdatesServer) testEmbeddedByValue() {}

// UnsafeRPCUpdatesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCUpdatesServer will
// result in compilation errors.
type UnsafeRPCUpdatesServer interface {
	mustEmbedUnimplementedRPCUpdatesServer()
}

func RegisterRPCUpdatesServer(s grpc.ServiceRegistrar, srv RPCUpdatesServer) {
	// If the following call pancis, it indicates UnimplementedRPCUpdatesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCUpdates_ServiceDesc, srv)
}

func _RPCUpdates_UpdatesGetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUpdatesGetState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUpdatesServer).UpdatesGetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUpdates_UpdatesGetState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUpdatesServer).UpdatesGetState(ctx, req.(*TLUpdatesGetState))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUpdates_UpdatesGetDifference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUpdatesGetDifference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUpdatesServer).UpdatesGetDifference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUpdates_UpdatesGetDifference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUpdatesServer).UpdatesGetDifference(ctx, req.(*TLUpdatesGetDifference))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUpdates_UpdatesGetChannelDifference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUpdatesGetChannelDifference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUpdatesServer).UpdatesGetChannelDifference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUpdates_UpdatesGetChannelDifference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUpdatesServer).UpdatesGetChannelDifference(ctx, req.(*TLUpdatesGetChannelDifference))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCUpdates_ServiceDesc is the grpc.ServiceDesc for RPCUpdates service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCUpdates_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCUpdates",
	HandlerType: (*RPCUpdatesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "updates_getState",
			Handler:    _RPCUpdates_UpdatesGetState_Handler,
		},
		{
			MethodName: "updates_getDifference",
			Handler:    _RPCUpdates_UpdatesGetDifference_Handler,
		},
		{
			MethodName: "updates_getChannelDifference",
			Handler:    _RPCUpdates_UpdatesGetChannelDifference_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCUserProfile_AccountUpdateProfile_FullMethodName            = "/mtproto.RPCUserProfile/account_updateProfile"
	RPCUserProfile_AccountUpdateStatus_FullMethodName             = "/mtproto.RPCUserProfile/account_updateStatus"
	RPCUserProfile_AccountUpdateBirthday_FullMethodName           = "/mtproto.RPCUserProfile/account_updateBirthday"
	RPCUserProfile_AccountUpdatePersonalChannel_FullMethodName    = "/mtproto.RPCUserProfile/account_updatePersonalChannel"
	RPCUserProfile_ContactsGetBirthdays_FullMethodName            = "/mtproto.RPCUserProfile/contacts_getBirthdays"
	RPCUserProfile_PhotosUpdateProfilePhoto_FullMethodName        = "/mtproto.RPCUserProfile/photos_updateProfilePhoto"
	RPCUserProfile_PhotosUploadProfilePhoto_FullMethodName        = "/mtproto.RPCUserProfile/photos_uploadProfilePhoto"
	RPCUserProfile_PhotosDeletePhotos_FullMethodName              = "/mtproto.RPCUserProfile/photos_deletePhotos"
	RPCUserProfile_PhotosGetUserPhotos_FullMethodName             = "/mtproto.RPCUserProfile/photos_getUserPhotos"
	RPCUserProfile_PhotosUploadContactProfilePhoto_FullMethodName = "/mtproto.RPCUserProfile/photos_uploadContactProfilePhoto"
	RPCUserProfile_AccountUpdateVerified_FullMethodName           = "/mtproto.RPCUserProfile/account_updateVerified"
)

// RPCUserProfileClient is the client API for RPCUserProfile service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCUserProfileClient interface {
	AccountUpdateProfile(ctx context.Context, in *TLAccountUpdateProfile, opts ...grpc.CallOption) (*User, error)
	AccountUpdateStatus(ctx context.Context, in *TLAccountUpdateStatus, opts ...grpc.CallOption) (*Bool, error)
	AccountUpdateBirthday(ctx context.Context, in *TLAccountUpdateBirthday, opts ...grpc.CallOption) (*Bool, error)
	AccountUpdatePersonalChannel(ctx context.Context, in *TLAccountUpdatePersonalChannel, opts ...grpc.CallOption) (*Bool, error)
	ContactsGetBirthdays(ctx context.Context, in *TLContactsGetBirthdays, opts ...grpc.CallOption) (*Contacts_ContactBirthdays, error)
	PhotosUpdateProfilePhoto(ctx context.Context, in *TLPhotosUpdateProfilePhoto, opts ...grpc.CallOption) (*Photos_Photo, error)
	PhotosUploadProfilePhoto(ctx context.Context, in *TLPhotosUploadProfilePhoto, opts ...grpc.CallOption) (*Photos_Photo, error)
	PhotosDeletePhotos(ctx context.Context, in *TLPhotosDeletePhotos, opts ...grpc.CallOption) (*Vector_Long, error)
	PhotosGetUserPhotos(ctx context.Context, in *TLPhotosGetUserPhotos, opts ...grpc.CallOption) (*Photos_Photos, error)
	PhotosUploadContactProfilePhoto(ctx context.Context, in *TLPhotosUploadContactProfilePhoto, opts ...grpc.CallOption) (*Photos_Photo, error)
	AccountUpdateVerified(ctx context.Context, in *TLAccountUpdateVerified, opts ...grpc.CallOption) (*User, error)
}

type rPCUserProfileClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCUserProfileClient(cc grpc.ClientConnInterface) RPCUserProfileClient {
	return &rPCUserProfileClient{cc}
}

func (c *rPCUserProfileClient) AccountUpdateProfile(ctx context.Context, in *TLAccountUpdateProfile, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, RPCUserProfile_AccountUpdateProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserProfileClient) AccountUpdateStatus(ctx context.Context, in *TLAccountUpdateStatus, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCUserProfile_AccountUpdateStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserProfileClient) AccountUpdateBirthday(ctx context.Context, in *TLAccountUpdateBirthday, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCUserProfile_AccountUpdateBirthday_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserProfileClient) AccountUpdatePersonalChannel(ctx context.Context, in *TLAccountUpdatePersonalChannel, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCUserProfile_AccountUpdatePersonalChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserProfileClient) ContactsGetBirthdays(ctx context.Context, in *TLContactsGetBirthdays, opts ...grpc.CallOption) (*Contacts_ContactBirthdays, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Contacts_ContactBirthdays)
	err := c.cc.Invoke(ctx, RPCUserProfile_ContactsGetBirthdays_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserProfileClient) PhotosUpdateProfilePhoto(ctx context.Context, in *TLPhotosUpdateProfilePhoto, opts ...grpc.CallOption) (*Photos_Photo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Photos_Photo)
	err := c.cc.Invoke(ctx, RPCUserProfile_PhotosUpdateProfilePhoto_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserProfileClient) PhotosUploadProfilePhoto(ctx context.Context, in *TLPhotosUploadProfilePhoto, opts ...grpc.CallOption) (*Photos_Photo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Photos_Photo)
	err := c.cc.Invoke(ctx, RPCUserProfile_PhotosUploadProfilePhoto_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserProfileClient) PhotosDeletePhotos(ctx context.Context, in *TLPhotosDeletePhotos, opts ...grpc.CallOption) (*Vector_Long, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_Long)
	err := c.cc.Invoke(ctx, RPCUserProfile_PhotosDeletePhotos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserProfileClient) PhotosGetUserPhotos(ctx context.Context, in *TLPhotosGetUserPhotos, opts ...grpc.CallOption) (*Photos_Photos, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Photos_Photos)
	err := c.cc.Invoke(ctx, RPCUserProfile_PhotosGetUserPhotos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserProfileClient) PhotosUploadContactProfilePhoto(ctx context.Context, in *TLPhotosUploadContactProfilePhoto, opts ...grpc.CallOption) (*Photos_Photo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Photos_Photo)
	err := c.cc.Invoke(ctx, RPCUserProfile_PhotosUploadContactProfilePhoto_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserProfileClient) AccountUpdateVerified(ctx context.Context, in *TLAccountUpdateVerified, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, RPCUserProfile_AccountUpdateVerified_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCUserProfileServer is the server API for RPCUserProfile service.
// All implementations should embed UnimplementedRPCUserProfileServer
// for forward compatibility.
type RPCUserProfileServer interface {
	AccountUpdateProfile(context.Context, *TLAccountUpdateProfile) (*User, error)
	AccountUpdateStatus(context.Context, *TLAccountUpdateStatus) (*Bool, error)
	AccountUpdateBirthday(context.Context, *TLAccountUpdateBirthday) (*Bool, error)
	AccountUpdatePersonalChannel(context.Context, *TLAccountUpdatePersonalChannel) (*Bool, error)
	ContactsGetBirthdays(context.Context, *TLContactsGetBirthdays) (*Contacts_ContactBirthdays, error)
	PhotosUpdateProfilePhoto(context.Context, *TLPhotosUpdateProfilePhoto) (*Photos_Photo, error)
	PhotosUploadProfilePhoto(context.Context, *TLPhotosUploadProfilePhoto) (*Photos_Photo, error)
	PhotosDeletePhotos(context.Context, *TLPhotosDeletePhotos) (*Vector_Long, error)
	PhotosGetUserPhotos(context.Context, *TLPhotosGetUserPhotos) (*Photos_Photos, error)
	PhotosUploadContactProfilePhoto(context.Context, *TLPhotosUploadContactProfilePhoto) (*Photos_Photo, error)
	AccountUpdateVerified(context.Context, *TLAccountUpdateVerified) (*User, error)
}

// UnimplementedRPCUserProfileServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCUserProfileServer struct{}

func (UnimplementedRPCUserProfileServer) AccountUpdateProfile(context.Context, *TLAccountUpdateProfile) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUpdateProfile not implemented")
}
func (UnimplementedRPCUserProfileServer) AccountUpdateStatus(context.Context, *TLAccountUpdateStatus) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUpdateStatus not implemented")
}
func (UnimplementedRPCUserProfileServer) AccountUpdateBirthday(context.Context, *TLAccountUpdateBirthday) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUpdateBirthday not implemented")
}
func (UnimplementedRPCUserProfileServer) AccountUpdatePersonalChannel(context.Context, *TLAccountUpdatePersonalChannel) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUpdatePersonalChannel not implemented")
}
func (UnimplementedRPCUserProfileServer) ContactsGetBirthdays(context.Context, *TLContactsGetBirthdays) (*Contacts_ContactBirthdays, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsGetBirthdays not implemented")
}
func (UnimplementedRPCUserProfileServer) PhotosUpdateProfilePhoto(context.Context, *TLPhotosUpdateProfilePhoto) (*Photos_Photo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhotosUpdateProfilePhoto not implemented")
}
func (UnimplementedRPCUserProfileServer) PhotosUploadProfilePhoto(context.Context, *TLPhotosUploadProfilePhoto) (*Photos_Photo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhotosUploadProfilePhoto not implemented")
}
func (UnimplementedRPCUserProfileServer) PhotosDeletePhotos(context.Context, *TLPhotosDeletePhotos) (*Vector_Long, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhotosDeletePhotos not implemented")
}
func (UnimplementedRPCUserProfileServer) PhotosGetUserPhotos(context.Context, *TLPhotosGetUserPhotos) (*Photos_Photos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhotosGetUserPhotos not implemented")
}
func (UnimplementedRPCUserProfileServer) PhotosUploadContactProfilePhoto(context.Context, *TLPhotosUploadContactProfilePhoto) (*Photos_Photo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhotosUploadContactProfilePhoto not implemented")
}
func (UnimplementedRPCUserProfileServer) AccountUpdateVerified(context.Context, *TLAccountUpdateVerified) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUpdateVerified not implemented")
}
func (UnimplementedRPCUserProfileServer) testEmbeddedByValue() {}

// UnsafeRPCUserProfileServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCUserProfileServer will
// result in compilation errors.
type UnsafeRPCUserProfileServer interface {
	mustEmbedUnimplementedRPCUserProfileServer()
}

func RegisterRPCUserProfileServer(s grpc.ServiceRegistrar, srv RPCUserProfileServer) {
	// If the following call pancis, it indicates UnimplementedRPCUserProfileServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCUserProfile_ServiceDesc, srv)
}

func _RPCUserProfile_AccountUpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUpdateProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserProfileServer).AccountUpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUserProfile_AccountUpdateProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserProfileServer).AccountUpdateProfile(ctx, req.(*TLAccountUpdateProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUserProfile_AccountUpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUpdateStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserProfileServer).AccountUpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUserProfile_AccountUpdateStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserProfileServer).AccountUpdateStatus(ctx, req.(*TLAccountUpdateStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUserProfile_AccountUpdateBirthday_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUpdateBirthday)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserProfileServer).AccountUpdateBirthday(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUserProfile_AccountUpdateBirthday_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserProfileServer).AccountUpdateBirthday(ctx, req.(*TLAccountUpdateBirthday))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUserProfile_AccountUpdatePersonalChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUpdatePersonalChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserProfileServer).AccountUpdatePersonalChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUserProfile_AccountUpdatePersonalChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserProfileServer).AccountUpdatePersonalChannel(ctx, req.(*TLAccountUpdatePersonalChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUserProfile_ContactsGetBirthdays_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsGetBirthdays)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserProfileServer).ContactsGetBirthdays(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUserProfile_ContactsGetBirthdays_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserProfileServer).ContactsGetBirthdays(ctx, req.(*TLContactsGetBirthdays))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUserProfile_PhotosUpdateProfilePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhotosUpdateProfilePhoto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserProfileServer).PhotosUpdateProfilePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUserProfile_PhotosUpdateProfilePhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserProfileServer).PhotosUpdateProfilePhoto(ctx, req.(*TLPhotosUpdateProfilePhoto))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUserProfile_PhotosUploadProfilePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhotosUploadProfilePhoto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserProfileServer).PhotosUploadProfilePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUserProfile_PhotosUploadProfilePhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserProfileServer).PhotosUploadProfilePhoto(ctx, req.(*TLPhotosUploadProfilePhoto))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUserProfile_PhotosDeletePhotos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhotosDeletePhotos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserProfileServer).PhotosDeletePhotos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUserProfile_PhotosDeletePhotos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserProfileServer).PhotosDeletePhotos(ctx, req.(*TLPhotosDeletePhotos))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUserProfile_PhotosGetUserPhotos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhotosGetUserPhotos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserProfileServer).PhotosGetUserPhotos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUserProfile_PhotosGetUserPhotos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserProfileServer).PhotosGetUserPhotos(ctx, req.(*TLPhotosGetUserPhotos))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUserProfile_PhotosUploadContactProfilePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhotosUploadContactProfilePhoto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserProfileServer).PhotosUploadContactProfilePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUserProfile_PhotosUploadContactProfilePhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserProfileServer).PhotosUploadContactProfilePhoto(ctx, req.(*TLPhotosUploadContactProfilePhoto))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUserProfile_AccountUpdateVerified_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUpdateVerified)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserProfileServer).AccountUpdateVerified(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUserProfile_AccountUpdateVerified_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserProfileServer).AccountUpdateVerified(ctx, req.(*TLAccountUpdateVerified))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCUserProfile_ServiceDesc is the grpc.ServiceDesc for RPCUserProfile service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCUserProfile_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCUserProfile",
	HandlerType: (*RPCUserProfileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "account_updateProfile",
			Handler:    _RPCUserProfile_AccountUpdateProfile_Handler,
		},
		{
			MethodName: "account_updateStatus",
			Handler:    _RPCUserProfile_AccountUpdateStatus_Handler,
		},
		{
			MethodName: "account_updateBirthday",
			Handler:    _RPCUserProfile_AccountUpdateBirthday_Handler,
		},
		{
			MethodName: "account_updatePersonalChannel",
			Handler:    _RPCUserProfile_AccountUpdatePersonalChannel_Handler,
		},
		{
			MethodName: "contacts_getBirthdays",
			Handler:    _RPCUserProfile_ContactsGetBirthdays_Handler,
		},
		{
			MethodName: "photos_updateProfilePhoto",
			Handler:    _RPCUserProfile_PhotosUpdateProfilePhoto_Handler,
		},
		{
			MethodName: "photos_uploadProfilePhoto",
			Handler:    _RPCUserProfile_PhotosUploadProfilePhoto_Handler,
		},
		{
			MethodName: "photos_deletePhotos",
			Handler:    _RPCUserProfile_PhotosDeletePhotos_Handler,
		},
		{
			MethodName: "photos_getUserPhotos",
			Handler:    _RPCUserProfile_PhotosGetUserPhotos_Handler,
		},
		{
			MethodName: "photos_uploadContactProfilePhoto",
			Handler:    _RPCUserProfile_PhotosUploadContactProfilePhoto_Handler,
		},
		{
			MethodName: "account_updateVerified",
			Handler:    _RPCUserProfile_AccountUpdateVerified_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCUsernames_AccountCheckUsername_FullMethodName    = "/mtproto.RPCUsernames/account_checkUsername"
	RPCUsernames_AccountUpdateUsername_FullMethodName   = "/mtproto.RPCUsernames/account_updateUsername"
	RPCUsernames_ContactsResolveUsername_FullMethodName = "/mtproto.RPCUsernames/contacts_resolveUsername"
	RPCUsernames_ChannelsCheckUsername_FullMethodName   = "/mtproto.RPCUsernames/channels_checkUsername"
	RPCUsernames_ChannelsUpdateUsername_FullMethodName  = "/mtproto.RPCUsernames/channels_updateUsername"
)

// RPCUsernamesClient is the client API for RPCUsernames service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCUsernamesClient interface {
	AccountCheckUsername(ctx context.Context, in *TLAccountCheckUsername, opts ...grpc.CallOption) (*Bool, error)
	AccountUpdateUsername(ctx context.Context, in *TLAccountUpdateUsername, opts ...grpc.CallOption) (*User, error)
	ContactsResolveUsername(ctx context.Context, in *TLContactsResolveUsername, opts ...grpc.CallOption) (*Contacts_ResolvedPeer, error)
	ChannelsCheckUsername(ctx context.Context, in *TLChannelsCheckUsername, opts ...grpc.CallOption) (*Bool, error)
	ChannelsUpdateUsername(ctx context.Context, in *TLChannelsUpdateUsername, opts ...grpc.CallOption) (*Bool, error)
}

type rPCUsernamesClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCUsernamesClient(cc grpc.ClientConnInterface) RPCUsernamesClient {
	return &rPCUsernamesClient{cc}
}

func (c *rPCUsernamesClient) AccountCheckUsername(ctx context.Context, in *TLAccountCheckUsername, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCUsernames_AccountCheckUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUsernamesClient) AccountUpdateUsername(ctx context.Context, in *TLAccountUpdateUsername, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, RPCUsernames_AccountUpdateUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUsernamesClient) ContactsResolveUsername(ctx context.Context, in *TLContactsResolveUsername, opts ...grpc.CallOption) (*Contacts_ResolvedPeer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Contacts_ResolvedPeer)
	err := c.cc.Invoke(ctx, RPCUsernames_ContactsResolveUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUsernamesClient) ChannelsCheckUsername(ctx context.Context, in *TLChannelsCheckUsername, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCUsernames_ChannelsCheckUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUsernamesClient) ChannelsUpdateUsername(ctx context.Context, in *TLChannelsUpdateUsername, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCUsernames_ChannelsUpdateUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCUsernamesServer is the server API for RPCUsernames service.
// All implementations should embed UnimplementedRPCUsernamesServer
// for forward compatibility.
type RPCUsernamesServer interface {
	AccountCheckUsername(context.Context, *TLAccountCheckUsername) (*Bool, error)
	AccountUpdateUsername(context.Context, *TLAccountUpdateUsername) (*User, error)
	ContactsResolveUsername(context.Context, *TLContactsResolveUsername) (*Contacts_ResolvedPeer, error)
	ChannelsCheckUsername(context.Context, *TLChannelsCheckUsername) (*Bool, error)
	ChannelsUpdateUsername(context.Context, *TLChannelsUpdateUsername) (*Bool, error)
}

// UnimplementedRPCUsernamesServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCUsernamesServer struct{}

func (UnimplementedRPCUsernamesServer) AccountCheckUsername(context.Context, *TLAccountCheckUsername) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountCheckUsername not implemented")
}
func (UnimplementedRPCUsernamesServer) AccountUpdateUsername(context.Context, *TLAccountUpdateUsername) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUpdateUsername not implemented")
}
func (UnimplementedRPCUsernamesServer) ContactsResolveUsername(context.Context, *TLContactsResolveUsername) (*Contacts_ResolvedPeer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsResolveUsername not implemented")
}
func (UnimplementedRPCUsernamesServer) ChannelsCheckUsername(context.Context, *TLChannelsCheckUsername) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsCheckUsername not implemented")
}
func (UnimplementedRPCUsernamesServer) ChannelsUpdateUsername(context.Context, *TLChannelsUpdateUsername) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsUpdateUsername not implemented")
}
func (UnimplementedRPCUsernamesServer) testEmbeddedByValue() {}

// UnsafeRPCUsernamesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCUsernamesServer will
// result in compilation errors.
type UnsafeRPCUsernamesServer interface {
	mustEmbedUnimplementedRPCUsernamesServer()
}

func RegisterRPCUsernamesServer(s grpc.ServiceRegistrar, srv RPCUsernamesServer) {
	// If the following call pancis, it indicates UnimplementedRPCUsernamesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCUsernames_ServiceDesc, srv)
}

func _RPCUsernames_AccountCheckUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountCheckUsername)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUsernamesServer).AccountCheckUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUsernames_AccountCheckUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUsernamesServer).AccountCheckUsername(ctx, req.(*TLAccountCheckUsername))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUsernames_AccountUpdateUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUpdateUsername)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUsernamesServer).AccountUpdateUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUsernames_AccountUpdateUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUsernamesServer).AccountUpdateUsername(ctx, req.(*TLAccountUpdateUsername))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUsernames_ContactsResolveUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsResolveUsername)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUsernamesServer).ContactsResolveUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUsernames_ContactsResolveUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUsernamesServer).ContactsResolveUsername(ctx, req.(*TLContactsResolveUsername))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUsernames_ChannelsCheckUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsCheckUsername)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUsernamesServer).ChannelsCheckUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUsernames_ChannelsCheckUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUsernamesServer).ChannelsCheckUsername(ctx, req.(*TLChannelsCheckUsername))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUsernames_ChannelsUpdateUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsUpdateUsername)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUsernamesServer).ChannelsUpdateUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUsernames_ChannelsUpdateUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUsernamesServer).ChannelsUpdateUsername(ctx, req.(*TLChannelsUpdateUsername))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCUsernames_ServiceDesc is the grpc.ServiceDesc for RPCUsernames service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCUsernames_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCUsernames",
	HandlerType: (*RPCUsernamesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "account_checkUsername",
			Handler:    _RPCUsernames_AccountCheckUsername_Handler,
		},
		{
			MethodName: "account_updateUsername",
			Handler:    _RPCUsernames_AccountUpdateUsername_Handler,
		},
		{
			MethodName: "contacts_resolveUsername",
			Handler:    _RPCUsernames_ContactsResolveUsername_Handler,
		},
		{
			MethodName: "channels_checkUsername",
			Handler:    _RPCUsernames_ChannelsCheckUsername_Handler,
		},
		{
			MethodName: "channels_updateUsername",
			Handler:    _RPCUsernames_ChannelsUpdateUsername_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCUsers_UsersGetUsers_FullMethodName        = "/mtproto.RPCUsers/users_getUsers"
	RPCUsers_UsersGetFullUser_FullMethodName     = "/mtproto.RPCUsers/users_getFullUser"
	RPCUsers_ContactsResolvePhone_FullMethodName = "/mtproto.RPCUsers/contacts_resolvePhone"
	RPCUsers_UsersGetMe_FullMethodName           = "/mtproto.RPCUsers/users_getMe"
)

// RPCUsersClient is the client API for RPCUsers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCUsersClient interface {
	UsersGetUsers(ctx context.Context, in *TLUsersGetUsers, opts ...grpc.CallOption) (*Vector_User, error)
	UsersGetFullUser(ctx context.Context, in *TLUsersGetFullUser, opts ...grpc.CallOption) (*Users_UserFull, error)
	ContactsResolvePhone(ctx context.Context, in *TLContactsResolvePhone, opts ...grpc.CallOption) (*Contacts_ResolvedPeer, error)
	UsersGetMe(ctx context.Context, in *TLUsersGetMe, opts ...grpc.CallOption) (*User, error)
}

type rPCUsersClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCUsersClient(cc grpc.ClientConnInterface) RPCUsersClient {
	return &rPCUsersClient{cc}
}

func (c *rPCUsersClient) UsersGetUsers(ctx context.Context, in *TLUsersGetUsers, opts ...grpc.CallOption) (*Vector_User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_User)
	err := c.cc.Invoke(ctx, RPCUsers_UsersGetUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUsersClient) UsersGetFullUser(ctx context.Context, in *TLUsersGetFullUser, opts ...grpc.CallOption) (*Users_UserFull, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Users_UserFull)
	err := c.cc.Invoke(ctx, RPCUsers_UsersGetFullUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUsersClient) ContactsResolvePhone(ctx context.Context, in *TLContactsResolvePhone, opts ...grpc.CallOption) (*Contacts_ResolvedPeer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Contacts_ResolvedPeer)
	err := c.cc.Invoke(ctx, RPCUsers_ContactsResolvePhone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUsersClient) UsersGetMe(ctx context.Context, in *TLUsersGetMe, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, RPCUsers_UsersGetMe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCUsersServer is the server API for RPCUsers service.
// All implementations should embed UnimplementedRPCUsersServer
// for forward compatibility.
type RPCUsersServer interface {
	UsersGetUsers(context.Context, *TLUsersGetUsers) (*Vector_User, error)
	UsersGetFullUser(context.Context, *TLUsersGetFullUser) (*Users_UserFull, error)
	ContactsResolvePhone(context.Context, *TLContactsResolvePhone) (*Contacts_ResolvedPeer, error)
	UsersGetMe(context.Context, *TLUsersGetMe) (*User, error)
}

// UnimplementedRPCUsersServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCUsersServer struct{}

func (UnimplementedRPCUsersServer) UsersGetUsers(context.Context, *TLUsersGetUsers) (*Vector_User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersGetUsers not implemented")
}
func (UnimplementedRPCUsersServer) UsersGetFullUser(context.Context, *TLUsersGetFullUser) (*Users_UserFull, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersGetFullUser not implemented")
}
func (UnimplementedRPCUsersServer) ContactsResolvePhone(context.Context, *TLContactsResolvePhone) (*Contacts_ResolvedPeer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsResolvePhone not implemented")
}
func (UnimplementedRPCUsersServer) UsersGetMe(context.Context, *TLUsersGetMe) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersGetMe not implemented")
}
func (UnimplementedRPCUsersServer) testEmbeddedByValue() {}

// UnsafeRPCUsersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCUsersServer will
// result in compilation errors.
type UnsafeRPCUsersServer interface {
	mustEmbedUnimplementedRPCUsersServer()
}

func RegisterRPCUsersServer(s grpc.ServiceRegistrar, srv RPCUsersServer) {
	// If the following call pancis, it indicates UnimplementedRPCUsersServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCUsers_ServiceDesc, srv)
}

func _RPCUsers_UsersGetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUsersGetUsers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUsersServer).UsersGetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUsers_UsersGetUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUsersServer).UsersGetUsers(ctx, req.(*TLUsersGetUsers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUsers_UsersGetFullUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUsersGetFullUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUsersServer).UsersGetFullUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUsers_UsersGetFullUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUsersServer).UsersGetFullUser(ctx, req.(*TLUsersGetFullUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUsers_ContactsResolvePhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsResolvePhone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUsersServer).ContactsResolvePhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUsers_ContactsResolvePhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUsersServer).ContactsResolvePhone(ctx, req.(*TLContactsResolvePhone))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUsers_UsersGetMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUsersGetMe)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUsersServer).UsersGetMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUsers_UsersGetMe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUsersServer).UsersGetMe(ctx, req.(*TLUsersGetMe))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCUsers_ServiceDesc is the grpc.ServiceDesc for RPCUsers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCUsers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCUsers",
	HandlerType: (*RPCUsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "users_getUsers",
			Handler:    _RPCUsers_UsersGetUsers_Handler,
		},
		{
			MethodName: "users_getFullUser",
			Handler:    _RPCUsers_UsersGetFullUser_Handler,
		},
		{
			MethodName: "contacts_resolvePhone",
			Handler:    _RPCUsers_ContactsResolvePhone_Handler,
		},
		{
			MethodName: "users_getMe",
			Handler:    _RPCUsers_UsersGetMe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCVoipCalls_MessagesDeletePhoneCallHistory_FullMethodName = "/mtproto.RPCVoipCalls/messages_deletePhoneCallHistory"
	RPCVoipCalls_PhoneGetCallConfig_FullMethodName             = "/mtproto.RPCVoipCalls/phone_getCallConfig"
	RPCVoipCalls_PhoneRequestCall_FullMethodName               = "/mtproto.RPCVoipCalls/phone_requestCall"
	RPCVoipCalls_PhoneAcceptCall_FullMethodName                = "/mtproto.RPCVoipCalls/phone_acceptCall"
	RPCVoipCalls_PhoneConfirmCall_FullMethodName               = "/mtproto.RPCVoipCalls/phone_confirmCall"
	RPCVoipCalls_PhoneReceivedCall_FullMethodName              = "/mtproto.RPCVoipCalls/phone_receivedCall"
	RPCVoipCalls_PhoneDiscardCall_FullMethodName               = "/mtproto.RPCVoipCalls/phone_discardCall"
	RPCVoipCalls_PhoneSetCallRating_FullMethodName             = "/mtproto.RPCVoipCalls/phone_setCallRating"
	RPCVoipCalls_PhoneSaveCallDebug_FullMethodName             = "/mtproto.RPCVoipCalls/phone_saveCallDebug"
	RPCVoipCalls_PhoneSendSignalingData_FullMethodName         = "/mtproto.RPCVoipCalls/phone_sendSignalingData"
	RPCVoipCalls_PhoneSaveCallLog_FullMethodName               = "/mtproto.RPCVoipCalls/phone_saveCallLog"
	RPCVoipCalls_PhoneCreateConferenceCall_FullMethodName      = "/mtproto.RPCVoipCalls/phone_createConferenceCall"
)

// RPCVoipCallsClient is the client API for RPCVoipCalls service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCVoipCallsClient interface {
	MessagesDeletePhoneCallHistory(ctx context.Context, in *TLMessagesDeletePhoneCallHistory, opts ...grpc.CallOption) (*Messages_AffectedFoundMessages, error)
	PhoneGetCallConfig(ctx context.Context, in *TLPhoneGetCallConfig, opts ...grpc.CallOption) (*DataJSON, error)
	PhoneRequestCall(ctx context.Context, in *TLPhoneRequestCall, opts ...grpc.CallOption) (*Phone_PhoneCall, error)
	PhoneAcceptCall(ctx context.Context, in *TLPhoneAcceptCall, opts ...grpc.CallOption) (*Phone_PhoneCall, error)
	PhoneConfirmCall(ctx context.Context, in *TLPhoneConfirmCall, opts ...grpc.CallOption) (*Phone_PhoneCall, error)
	PhoneReceivedCall(ctx context.Context, in *TLPhoneReceivedCall, opts ...grpc.CallOption) (*Bool, error)
	PhoneDiscardCall(ctx context.Context, in *TLPhoneDiscardCall, opts ...grpc.CallOption) (*Updates, error)
	PhoneSetCallRating(ctx context.Context, in *TLPhoneSetCallRating, opts ...grpc.CallOption) (*Updates, error)
	PhoneSaveCallDebug(ctx context.Context, in *TLPhoneSaveCallDebug, opts ...grpc.CallOption) (*Bool, error)
	PhoneSendSignalingData(ctx context.Context, in *TLPhoneSendSignalingData, opts ...grpc.CallOption) (*Bool, error)
	PhoneSaveCallLog(ctx context.Context, in *TLPhoneSaveCallLog, opts ...grpc.CallOption) (*Bool, error)
	PhoneCreateConferenceCall(ctx context.Context, in *TLPhoneCreateConferenceCall, opts ...grpc.CallOption) (*Phone_PhoneCall, error)
}

type rPCVoipCallsClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCVoipCallsClient(cc grpc.ClientConnInterface) RPCVoipCallsClient {
	return &rPCVoipCallsClient{cc}
}

func (c *rPCVoipCallsClient) MessagesDeletePhoneCallHistory(ctx context.Context, in *TLMessagesDeletePhoneCallHistory, opts ...grpc.CallOption) (*Messages_AffectedFoundMessages, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_AffectedFoundMessages)
	err := c.cc.Invoke(ctx, RPCVoipCalls_MessagesDeletePhoneCallHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCVoipCallsClient) PhoneGetCallConfig(ctx context.Context, in *TLPhoneGetCallConfig, opts ...grpc.CallOption) (*DataJSON, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataJSON)
	err := c.cc.Invoke(ctx, RPCVoipCalls_PhoneGetCallConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCVoipCallsClient) PhoneRequestCall(ctx context.Context, in *TLPhoneRequestCall, opts ...grpc.CallOption) (*Phone_PhoneCall, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Phone_PhoneCall)
	err := c.cc.Invoke(ctx, RPCVoipCalls_PhoneRequestCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCVoipCallsClient) PhoneAcceptCall(ctx context.Context, in *TLPhoneAcceptCall, opts ...grpc.CallOption) (*Phone_PhoneCall, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Phone_PhoneCall)
	err := c.cc.Invoke(ctx, RPCVoipCalls_PhoneAcceptCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCVoipCallsClient) PhoneConfirmCall(ctx context.Context, in *TLPhoneConfirmCall, opts ...grpc.CallOption) (*Phone_PhoneCall, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Phone_PhoneCall)
	err := c.cc.Invoke(ctx, RPCVoipCalls_PhoneConfirmCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCVoipCallsClient) PhoneReceivedCall(ctx context.Context, in *TLPhoneReceivedCall, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCVoipCalls_PhoneReceivedCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCVoipCallsClient) PhoneDiscardCall(ctx context.Context, in *TLPhoneDiscardCall, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCVoipCalls_PhoneDiscardCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCVoipCallsClient) PhoneSetCallRating(ctx context.Context, in *TLPhoneSetCallRating, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCVoipCalls_PhoneSetCallRating_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCVoipCallsClient) PhoneSaveCallDebug(ctx context.Context, in *TLPhoneSaveCallDebug, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCVoipCalls_PhoneSaveCallDebug_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCVoipCallsClient) PhoneSendSignalingData(ctx context.Context, in *TLPhoneSendSignalingData, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCVoipCalls_PhoneSendSignalingData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCVoipCallsClient) PhoneSaveCallLog(ctx context.Context, in *TLPhoneSaveCallLog, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCVoipCalls_PhoneSaveCallLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCVoipCallsClient) PhoneCreateConferenceCall(ctx context.Context, in *TLPhoneCreateConferenceCall, opts ...grpc.CallOption) (*Phone_PhoneCall, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Phone_PhoneCall)
	err := c.cc.Invoke(ctx, RPCVoipCalls_PhoneCreateConferenceCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCVoipCallsServer is the server API for RPCVoipCalls service.
// All implementations should embed UnimplementedRPCVoipCallsServer
// for forward compatibility.
type RPCVoipCallsServer interface {
	MessagesDeletePhoneCallHistory(context.Context, *TLMessagesDeletePhoneCallHistory) (*Messages_AffectedFoundMessages, error)
	PhoneGetCallConfig(context.Context, *TLPhoneGetCallConfig) (*DataJSON, error)
	PhoneRequestCall(context.Context, *TLPhoneRequestCall) (*Phone_PhoneCall, error)
	PhoneAcceptCall(context.Context, *TLPhoneAcceptCall) (*Phone_PhoneCall, error)
	PhoneConfirmCall(context.Context, *TLPhoneConfirmCall) (*Phone_PhoneCall, error)
	PhoneReceivedCall(context.Context, *TLPhoneReceivedCall) (*Bool, error)
	PhoneDiscardCall(context.Context, *TLPhoneDiscardCall) (*Updates, error)
	PhoneSetCallRating(context.Context, *TLPhoneSetCallRating) (*Updates, error)
	PhoneSaveCallDebug(context.Context, *TLPhoneSaveCallDebug) (*Bool, error)
	PhoneSendSignalingData(context.Context, *TLPhoneSendSignalingData) (*Bool, error)
	PhoneSaveCallLog(context.Context, *TLPhoneSaveCallLog) (*Bool, error)
	PhoneCreateConferenceCall(context.Context, *TLPhoneCreateConferenceCall) (*Phone_PhoneCall, error)
}

// UnimplementedRPCVoipCallsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCVoipCallsServer struct{}

func (UnimplementedRPCVoipCallsServer) MessagesDeletePhoneCallHistory(context.Context, *TLMessagesDeletePhoneCallHistory) (*Messages_AffectedFoundMessages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesDeletePhoneCallHistory not implemented")
}
func (UnimplementedRPCVoipCallsServer) PhoneGetCallConfig(context.Context, *TLPhoneGetCallConfig) (*DataJSON, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneGetCallConfig not implemented")
}
func (UnimplementedRPCVoipCallsServer) PhoneRequestCall(context.Context, *TLPhoneRequestCall) (*Phone_PhoneCall, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneRequestCall not implemented")
}
func (UnimplementedRPCVoipCallsServer) PhoneAcceptCall(context.Context, *TLPhoneAcceptCall) (*Phone_PhoneCall, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneAcceptCall not implemented")
}
func (UnimplementedRPCVoipCallsServer) PhoneConfirmCall(context.Context, *TLPhoneConfirmCall) (*Phone_PhoneCall, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneConfirmCall not implemented")
}
func (UnimplementedRPCVoipCallsServer) PhoneReceivedCall(context.Context, *TLPhoneReceivedCall) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneReceivedCall not implemented")
}
func (UnimplementedRPCVoipCallsServer) PhoneDiscardCall(context.Context, *TLPhoneDiscardCall) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneDiscardCall not implemented")
}
func (UnimplementedRPCVoipCallsServer) PhoneSetCallRating(context.Context, *TLPhoneSetCallRating) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneSetCallRating not implemented")
}
func (UnimplementedRPCVoipCallsServer) PhoneSaveCallDebug(context.Context, *TLPhoneSaveCallDebug) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneSaveCallDebug not implemented")
}
func (UnimplementedRPCVoipCallsServer) PhoneSendSignalingData(context.Context, *TLPhoneSendSignalingData) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneSendSignalingData not implemented")
}
func (UnimplementedRPCVoipCallsServer) PhoneSaveCallLog(context.Context, *TLPhoneSaveCallLog) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneSaveCallLog not implemented")
}
func (UnimplementedRPCVoipCallsServer) PhoneCreateConferenceCall(context.Context, *TLPhoneCreateConferenceCall) (*Phone_PhoneCall, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneCreateConferenceCall not implemented")
}
func (UnimplementedRPCVoipCallsServer) testEmbeddedByValue() {}

// UnsafeRPCVoipCallsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCVoipCallsServer will
// result in compilation errors.
type UnsafeRPCVoipCallsServer interface {
	mustEmbedUnimplementedRPCVoipCallsServer()
}

func RegisterRPCVoipCallsServer(s grpc.ServiceRegistrar, srv RPCVoipCallsServer) {
	// If the following call pancis, it indicates UnimplementedRPCVoipCallsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCVoipCalls_ServiceDesc, srv)
}

func _RPCVoipCalls_MessagesDeletePhoneCallHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesDeletePhoneCallHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCVoipCallsServer).MessagesDeletePhoneCallHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCVoipCalls_MessagesDeletePhoneCallHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCVoipCallsServer).MessagesDeletePhoneCallHistory(ctx, req.(*TLMessagesDeletePhoneCallHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCVoipCalls_PhoneGetCallConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneGetCallConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCVoipCallsServer).PhoneGetCallConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCVoipCalls_PhoneGetCallConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCVoipCallsServer).PhoneGetCallConfig(ctx, req.(*TLPhoneGetCallConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCVoipCalls_PhoneRequestCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneRequestCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCVoipCallsServer).PhoneRequestCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCVoipCalls_PhoneRequestCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCVoipCallsServer).PhoneRequestCall(ctx, req.(*TLPhoneRequestCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCVoipCalls_PhoneAcceptCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneAcceptCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCVoipCallsServer).PhoneAcceptCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCVoipCalls_PhoneAcceptCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCVoipCallsServer).PhoneAcceptCall(ctx, req.(*TLPhoneAcceptCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCVoipCalls_PhoneConfirmCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneConfirmCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCVoipCallsServer).PhoneConfirmCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCVoipCalls_PhoneConfirmCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCVoipCallsServer).PhoneConfirmCall(ctx, req.(*TLPhoneConfirmCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCVoipCalls_PhoneReceivedCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneReceivedCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCVoipCallsServer).PhoneReceivedCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCVoipCalls_PhoneReceivedCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCVoipCallsServer).PhoneReceivedCall(ctx, req.(*TLPhoneReceivedCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCVoipCalls_PhoneDiscardCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneDiscardCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCVoipCallsServer).PhoneDiscardCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCVoipCalls_PhoneDiscardCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCVoipCallsServer).PhoneDiscardCall(ctx, req.(*TLPhoneDiscardCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCVoipCalls_PhoneSetCallRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneSetCallRating)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCVoipCallsServer).PhoneSetCallRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCVoipCalls_PhoneSetCallRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCVoipCallsServer).PhoneSetCallRating(ctx, req.(*TLPhoneSetCallRating))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCVoipCalls_PhoneSaveCallDebug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneSaveCallDebug)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCVoipCallsServer).PhoneSaveCallDebug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCVoipCalls_PhoneSaveCallDebug_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCVoipCallsServer).PhoneSaveCallDebug(ctx, req.(*TLPhoneSaveCallDebug))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCVoipCalls_PhoneSendSignalingData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneSendSignalingData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCVoipCallsServer).PhoneSendSignalingData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCVoipCalls_PhoneSendSignalingData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCVoipCallsServer).PhoneSendSignalingData(ctx, req.(*TLPhoneSendSignalingData))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCVoipCalls_PhoneSaveCallLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneSaveCallLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCVoipCallsServer).PhoneSaveCallLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCVoipCalls_PhoneSaveCallLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCVoipCallsServer).PhoneSaveCallLog(ctx, req.(*TLPhoneSaveCallLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCVoipCalls_PhoneCreateConferenceCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneCreateConferenceCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCVoipCallsServer).PhoneCreateConferenceCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCVoipCalls_PhoneCreateConferenceCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCVoipCallsServer).PhoneCreateConferenceCall(ctx, req.(*TLPhoneCreateConferenceCall))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCVoipCalls_ServiceDesc is the grpc.ServiceDesc for RPCVoipCalls service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCVoipCalls_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCVoipCalls",
	HandlerType: (*RPCVoipCallsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "messages_deletePhoneCallHistory",
			Handler:    _RPCVoipCalls_MessagesDeletePhoneCallHistory_Handler,
		},
		{
			MethodName: "phone_getCallConfig",
			Handler:    _RPCVoipCalls_PhoneGetCallConfig_Handler,
		},
		{
			MethodName: "phone_requestCall",
			Handler:    _RPCVoipCalls_PhoneRequestCall_Handler,
		},
		{
			MethodName: "phone_acceptCall",
			Handler:    _RPCVoipCalls_PhoneAcceptCall_Handler,
		},
		{
			MethodName: "phone_confirmCall",
			Handler:    _RPCVoipCalls_PhoneConfirmCall_Handler,
		},
		{
			MethodName: "phone_receivedCall",
			Handler:    _RPCVoipCalls_PhoneReceivedCall_Handler,
		},
		{
			MethodName: "phone_discardCall",
			Handler:    _RPCVoipCalls_PhoneDiscardCall_Handler,
		},
		{
			MethodName: "phone_setCallRating",
			Handler:    _RPCVoipCalls_PhoneSetCallRating_Handler,
		},
		{
			MethodName: "phone_saveCallDebug",
			Handler:    _RPCVoipCalls_PhoneSaveCallDebug_Handler,
		},
		{
			MethodName: "phone_sendSignalingData",
			Handler:    _RPCVoipCalls_PhoneSendSignalingData_Handler,
		},
		{
			MethodName: "phone_saveCallLog",
			Handler:    _RPCVoipCalls_PhoneSaveCallLog_Handler,
		},
		{
			MethodName: "phone_createConferenceCall",
			Handler:    _RPCVoipCalls_PhoneCreateConferenceCall_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCWallpapers_AccountGetWallPapers_FullMethodName      = "/mtproto.RPCWallpapers/account_getWallPapers"
	RPCWallpapers_AccountGetWallPaper_FullMethodName       = "/mtproto.RPCWallpapers/account_getWallPaper"
	RPCWallpapers_AccountUploadWallPaper_FullMethodName    = "/mtproto.RPCWallpapers/account_uploadWallPaper"
	RPCWallpapers_AccountSaveWallPaper_FullMethodName      = "/mtproto.RPCWallpapers/account_saveWallPaper"
	RPCWallpapers_AccountInstallWallPaper_FullMethodName   = "/mtproto.RPCWallpapers/account_installWallPaper"
	RPCWallpapers_AccountResetWallPapers_FullMethodName    = "/mtproto.RPCWallpapers/account_resetWallPapers"
	RPCWallpapers_AccountGetMultiWallPapers_FullMethodName = "/mtproto.RPCWallpapers/account_getMultiWallPapers"
	RPCWallpapers_MessagesSetChatWallPaper_FullMethodName  = "/mtproto.RPCWallpapers/messages_setChatWallPaper"
)

// RPCWallpapersClient is the client API for RPCWallpapers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCWallpapersClient interface {
	AccountGetWallPapers(ctx context.Context, in *TLAccountGetWallPapers, opts ...grpc.CallOption) (*Account_WallPapers, error)
	AccountGetWallPaper(ctx context.Context, in *TLAccountGetWallPaper, opts ...grpc.CallOption) (*WallPaper, error)
	AccountUploadWallPaper(ctx context.Context, in *TLAccountUploadWallPaper, opts ...grpc.CallOption) (*WallPaper, error)
	AccountSaveWallPaper(ctx context.Context, in *TLAccountSaveWallPaper, opts ...grpc.CallOption) (*Bool, error)
	AccountInstallWallPaper(ctx context.Context, in *TLAccountInstallWallPaper, opts ...grpc.CallOption) (*Bool, error)
	AccountResetWallPapers(ctx context.Context, in *TLAccountResetWallPapers, opts ...grpc.CallOption) (*Bool, error)
	AccountGetMultiWallPapers(ctx context.Context, in *TLAccountGetMultiWallPapers, opts ...grpc.CallOption) (*Vector_WallPaper, error)
	MessagesSetChatWallPaper(ctx context.Context, in *TLMessagesSetChatWallPaper, opts ...grpc.CallOption) (*Updates, error)
}

type rPCWallpapersClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCWallpapersClient(cc grpc.ClientConnInterface) RPCWallpapersClient {
	return &rPCWallpapersClient{cc}
}

func (c *rPCWallpapersClient) AccountGetWallPapers(ctx context.Context, in *TLAccountGetWallPapers, opts ...grpc.CallOption) (*Account_WallPapers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account_WallPapers)
	err := c.cc.Invoke(ctx, RPCWallpapers_AccountGetWallPapers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCWallpapersClient) AccountGetWallPaper(ctx context.Context, in *TLAccountGetWallPaper, opts ...grpc.CallOption) (*WallPaper, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WallPaper)
	err := c.cc.Invoke(ctx, RPCWallpapers_AccountGetWallPaper_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCWallpapersClient) AccountUploadWallPaper(ctx context.Context, in *TLAccountUploadWallPaper, opts ...grpc.CallOption) (*WallPaper, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WallPaper)
	err := c.cc.Invoke(ctx, RPCWallpapers_AccountUploadWallPaper_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCWallpapersClient) AccountSaveWallPaper(ctx context.Context, in *TLAccountSaveWallPaper, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCWallpapers_AccountSaveWallPaper_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCWallpapersClient) AccountInstallWallPaper(ctx context.Context, in *TLAccountInstallWallPaper, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCWallpapers_AccountInstallWallPaper_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCWallpapersClient) AccountResetWallPapers(ctx context.Context, in *TLAccountResetWallPapers, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCWallpapers_AccountResetWallPapers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCWallpapersClient) AccountGetMultiWallPapers(ctx context.Context, in *TLAccountGetMultiWallPapers, opts ...grpc.CallOption) (*Vector_WallPaper, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_WallPaper)
	err := c.cc.Invoke(ctx, RPCWallpapers_AccountGetMultiWallPapers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCWallpapersClient) MessagesSetChatWallPaper(ctx context.Context, in *TLMessagesSetChatWallPaper, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCWallpapers_MessagesSetChatWallPaper_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCWallpapersServer is the server API for RPCWallpapers service.
// All implementations should embed UnimplementedRPCWallpapersServer
// for forward compatibility.
type RPCWallpapersServer interface {
	AccountGetWallPapers(context.Context, *TLAccountGetWallPapers) (*Account_WallPapers, error)
	AccountGetWallPaper(context.Context, *TLAccountGetWallPaper) (*WallPaper, error)
	AccountUploadWallPaper(context.Context, *TLAccountUploadWallPaper) (*WallPaper, error)
	AccountSaveWallPaper(context.Context, *TLAccountSaveWallPaper) (*Bool, error)
	AccountInstallWallPaper(context.Context, *TLAccountInstallWallPaper) (*Bool, error)
	AccountResetWallPapers(context.Context, *TLAccountResetWallPapers) (*Bool, error)
	AccountGetMultiWallPapers(context.Context, *TLAccountGetMultiWallPapers) (*Vector_WallPaper, error)
	MessagesSetChatWallPaper(context.Context, *TLMessagesSetChatWallPaper) (*Updates, error)
}

// UnimplementedRPCWallpapersServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCWallpapersServer struct{}

func (UnimplementedRPCWallpapersServer) AccountGetWallPapers(context.Context, *TLAccountGetWallPapers) (*Account_WallPapers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetWallPapers not implemented")
}
func (UnimplementedRPCWallpapersServer) AccountGetWallPaper(context.Context, *TLAccountGetWallPaper) (*WallPaper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetWallPaper not implemented")
}
func (UnimplementedRPCWallpapersServer) AccountUploadWallPaper(context.Context, *TLAccountUploadWallPaper) (*WallPaper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUploadWallPaper not implemented")
}
func (UnimplementedRPCWallpapersServer) AccountSaveWallPaper(context.Context, *TLAccountSaveWallPaper) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSaveWallPaper not implemented")
}
func (UnimplementedRPCWallpapersServer) AccountInstallWallPaper(context.Context, *TLAccountInstallWallPaper) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountInstallWallPaper not implemented")
}
func (UnimplementedRPCWallpapersServer) AccountResetWallPapers(context.Context, *TLAccountResetWallPapers) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountResetWallPapers not implemented")
}
func (UnimplementedRPCWallpapersServer) AccountGetMultiWallPapers(context.Context, *TLAccountGetMultiWallPapers) (*Vector_WallPaper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetMultiWallPapers not implemented")
}
func (UnimplementedRPCWallpapersServer) MessagesSetChatWallPaper(context.Context, *TLMessagesSetChatWallPaper) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSetChatWallPaper not implemented")
}
func (UnimplementedRPCWallpapersServer) testEmbeddedByValue() {}

// UnsafeRPCWallpapersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCWallpapersServer will
// result in compilation errors.
type UnsafeRPCWallpapersServer interface {
	mustEmbedUnimplementedRPCWallpapersServer()
}

func RegisterRPCWallpapersServer(s grpc.ServiceRegistrar, srv RPCWallpapersServer) {
	// If the following call pancis, it indicates UnimplementedRPCWallpapersServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCWallpapers_ServiceDesc, srv)
}

func _RPCWallpapers_AccountGetWallPapers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetWallPapers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCWallpapersServer).AccountGetWallPapers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCWallpapers_AccountGetWallPapers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCWallpapersServer).AccountGetWallPapers(ctx, req.(*TLAccountGetWallPapers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCWallpapers_AccountGetWallPaper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetWallPaper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCWallpapersServer).AccountGetWallPaper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCWallpapers_AccountGetWallPaper_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCWallpapersServer).AccountGetWallPaper(ctx, req.(*TLAccountGetWallPaper))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCWallpapers_AccountUploadWallPaper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUploadWallPaper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCWallpapersServer).AccountUploadWallPaper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCWallpapers_AccountUploadWallPaper_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCWallpapersServer).AccountUploadWallPaper(ctx, req.(*TLAccountUploadWallPaper))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCWallpapers_AccountSaveWallPaper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSaveWallPaper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCWallpapersServer).AccountSaveWallPaper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCWallpapers_AccountSaveWallPaper_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCWallpapersServer).AccountSaveWallPaper(ctx, req.(*TLAccountSaveWallPaper))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCWallpapers_AccountInstallWallPaper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountInstallWallPaper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCWallpapersServer).AccountInstallWallPaper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCWallpapers_AccountInstallWallPaper_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCWallpapersServer).AccountInstallWallPaper(ctx, req.(*TLAccountInstallWallPaper))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCWallpapers_AccountResetWallPapers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountResetWallPapers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCWallpapersServer).AccountResetWallPapers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCWallpapers_AccountResetWallPapers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCWallpapersServer).AccountResetWallPapers(ctx, req.(*TLAccountResetWallPapers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCWallpapers_AccountGetMultiWallPapers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetMultiWallPapers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCWallpapersServer).AccountGetMultiWallPapers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCWallpapers_AccountGetMultiWallPapers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCWallpapersServer).AccountGetMultiWallPapers(ctx, req.(*TLAccountGetMultiWallPapers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCWallpapers_MessagesSetChatWallPaper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSetChatWallPaper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCWallpapersServer).MessagesSetChatWallPaper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCWallpapers_MessagesSetChatWallPaper_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCWallpapersServer).MessagesSetChatWallPaper(ctx, req.(*TLMessagesSetChatWallPaper))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCWallpapers_ServiceDesc is the grpc.ServiceDesc for RPCWallpapers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCWallpapers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCWallpapers",
	HandlerType: (*RPCWallpapersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "account_getWallPapers",
			Handler:    _RPCWallpapers_AccountGetWallPapers_Handler,
		},
		{
			MethodName: "account_getWallPaper",
			Handler:    _RPCWallpapers_AccountGetWallPaper_Handler,
		},
		{
			MethodName: "account_uploadWallPaper",
			Handler:    _RPCWallpapers_AccountUploadWallPaper_Handler,
		},
		{
			MethodName: "account_saveWallPaper",
			Handler:    _RPCWallpapers_AccountSaveWallPaper_Handler,
		},
		{
			MethodName: "account_installWallPaper",
			Handler:    _RPCWallpapers_AccountInstallWallPaper_Handler,
		},
		{
			MethodName: "account_resetWallPapers",
			Handler:    _RPCWallpapers_AccountResetWallPapers_Handler,
		},
		{
			MethodName: "account_getMultiWallPapers",
			Handler:    _RPCWallpapers_AccountGetMultiWallPapers_Handler,
		},
		{
			MethodName: "messages_setChatWallPaper",
			Handler:    _RPCWallpapers_MessagesSetChatWallPaper_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCWebPage_MessagesGetWebPagePreview570D6F6F_FullMethodName = "/mtproto.RPCWebPage/messages_getWebPagePreview570D6F6F"
	RPCWebPage_MessagesGetWebPage8D9692A3_FullMethodName        = "/mtproto.RPCWebPage/messages_getWebPage8D9692A3"
	RPCWebPage_MessagesGetWebPagePreview8B68B0CC_FullMethodName = "/mtproto.RPCWebPage/messages_getWebPagePreview8B68B0CC"
	RPCWebPage_MessagesGetWebPage32CA8F91_FullMethodName        = "/mtproto.RPCWebPage/messages_getWebPage32CA8F91"
)

// RPCWebPageClient is the client API for RPCWebPage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCWebPageClient interface {
	MessagesGetWebPagePreview570D6F6F(ctx context.Context, in *TLMessagesGetWebPagePreview570D6F6F, opts ...grpc.CallOption) (*Messages_WebPagePreview, error)
	MessagesGetWebPage8D9692A3(ctx context.Context, in *TLMessagesGetWebPage8D9692A3, opts ...grpc.CallOption) (*Messages_WebPage, error)
	MessagesGetWebPagePreview8B68B0CC(ctx context.Context, in *TLMessagesGetWebPagePreview8B68B0CC, opts ...grpc.CallOption) (*MessageMedia, error)
	MessagesGetWebPage32CA8F91(ctx context.Context, in *TLMessagesGetWebPage32CA8F91, opts ...grpc.CallOption) (*WebPage, error)
}

type rPCWebPageClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCWebPageClient(cc grpc.ClientConnInterface) RPCWebPageClient {
	return &rPCWebPageClient{cc}
}

func (c *rPCWebPageClient) MessagesGetWebPagePreview570D6F6F(ctx context.Context, in *TLMessagesGetWebPagePreview570D6F6F, opts ...grpc.CallOption) (*Messages_WebPagePreview, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_WebPagePreview)
	err := c.cc.Invoke(ctx, RPCWebPage_MessagesGetWebPagePreview570D6F6F_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCWebPageClient) MessagesGetWebPage8D9692A3(ctx context.Context, in *TLMessagesGetWebPage8D9692A3, opts ...grpc.CallOption) (*Messages_WebPage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_WebPage)
	err := c.cc.Invoke(ctx, RPCWebPage_MessagesGetWebPage8D9692A3_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCWebPageClient) MessagesGetWebPagePreview8B68B0CC(ctx context.Context, in *TLMessagesGetWebPagePreview8B68B0CC, opts ...grpc.CallOption) (*MessageMedia, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageMedia)
	err := c.cc.Invoke(ctx, RPCWebPage_MessagesGetWebPagePreview8B68B0CC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCWebPageClient) MessagesGetWebPage32CA8F91(ctx context.Context, in *TLMessagesGetWebPage32CA8F91, opts ...grpc.CallOption) (*WebPage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WebPage)
	err := c.cc.Invoke(ctx, RPCWebPage_MessagesGetWebPage32CA8F91_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCWebPageServer is the server API for RPCWebPage service.
// All implementations should embed UnimplementedRPCWebPageServer
// for forward compatibility.
type RPCWebPageServer interface {
	MessagesGetWebPagePreview570D6F6F(context.Context, *TLMessagesGetWebPagePreview570D6F6F) (*Messages_WebPagePreview, error)
	MessagesGetWebPage8D9692A3(context.Context, *TLMessagesGetWebPage8D9692A3) (*Messages_WebPage, error)
	MessagesGetWebPagePreview8B68B0CC(context.Context, *TLMessagesGetWebPagePreview8B68B0CC) (*MessageMedia, error)
	MessagesGetWebPage32CA8F91(context.Context, *TLMessagesGetWebPage32CA8F91) (*WebPage, error)
}

// UnimplementedRPCWebPageServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCWebPageServer struct{}

func (UnimplementedRPCWebPageServer) MessagesGetWebPagePreview570D6F6F(context.Context, *TLMessagesGetWebPagePreview570D6F6F) (*Messages_WebPagePreview, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetWebPagePreview570D6F6F not implemented")
}
func (UnimplementedRPCWebPageServer) MessagesGetWebPage8D9692A3(context.Context, *TLMessagesGetWebPage8D9692A3) (*Messages_WebPage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetWebPage8D9692A3 not implemented")
}
func (UnimplementedRPCWebPageServer) MessagesGetWebPagePreview8B68B0CC(context.Context, *TLMessagesGetWebPagePreview8B68B0CC) (*MessageMedia, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetWebPagePreview8B68B0CC not implemented")
}
func (UnimplementedRPCWebPageServer) MessagesGetWebPage32CA8F91(context.Context, *TLMessagesGetWebPage32CA8F91) (*WebPage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetWebPage32CA8F91 not implemented")
}
func (UnimplementedRPCWebPageServer) testEmbeddedByValue() {}

// UnsafeRPCWebPageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCWebPageServer will
// result in compilation errors.
type UnsafeRPCWebPageServer interface {
	mustEmbedUnimplementedRPCWebPageServer()
}

func RegisterRPCWebPageServer(s grpc.ServiceRegistrar, srv RPCWebPageServer) {
	// If the following call pancis, it indicates UnimplementedRPCWebPageServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCWebPage_ServiceDesc, srv)
}

func _RPCWebPage_MessagesGetWebPagePreview570D6F6F_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetWebPagePreview570D6F6F)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCWebPageServer).MessagesGetWebPagePreview570D6F6F(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCWebPage_MessagesGetWebPagePreview570D6F6F_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCWebPageServer).MessagesGetWebPagePreview570D6F6F(ctx, req.(*TLMessagesGetWebPagePreview570D6F6F))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCWebPage_MessagesGetWebPage8D9692A3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetWebPage8D9692A3)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCWebPageServer).MessagesGetWebPage8D9692A3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCWebPage_MessagesGetWebPage8D9692A3_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCWebPageServer).MessagesGetWebPage8D9692A3(ctx, req.(*TLMessagesGetWebPage8D9692A3))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCWebPage_MessagesGetWebPagePreview8B68B0CC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetWebPagePreview8B68B0CC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCWebPageServer).MessagesGetWebPagePreview8B68B0CC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCWebPage_MessagesGetWebPagePreview8B68B0CC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCWebPageServer).MessagesGetWebPagePreview8B68B0CC(ctx, req.(*TLMessagesGetWebPagePreview8B68B0CC))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCWebPage_MessagesGetWebPage32CA8F91_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetWebPage32CA8F91)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCWebPageServer).MessagesGetWebPage32CA8F91(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCWebPage_MessagesGetWebPage32CA8F91_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCWebPageServer).MessagesGetWebPage32CA8F91(ctx, req.(*TLMessagesGetWebPage32CA8F91))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCWebPage_ServiceDesc is the grpc.ServiceDesc for RPCWebPage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCWebPage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCWebPage",
	HandlerType: (*RPCWebPageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "messages_getWebPagePreview570D6F6F",
			Handler:    _RPCWebPage_MessagesGetWebPagePreview570D6F6F_Handler,
		},
		{
			MethodName: "messages_getWebPage8D9692A3",
			Handler:    _RPCWebPage_MessagesGetWebPage8D9692A3_Handler,
		},
		{
			MethodName: "messages_getWebPagePreview8B68B0CC",
			Handler:    _RPCWebPage_MessagesGetWebPagePreview8B68B0CC_Handler,
		},
		{
			MethodName: "messages_getWebPage32CA8F91",
			Handler:    _RPCWebPage_MessagesGetWebPage32CA8F91_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCBiz_BizInvokeBizDataRaw_FullMethodName = "/mtproto.RPCBiz/biz_invokeBizDataRaw"
)

// RPCBizClient is the client API for RPCBiz service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCBizClient interface {
	BizInvokeBizDataRaw(ctx context.Context, in *TLBizInvokeBizDataRaw, opts ...grpc.CallOption) (*BizDataRaw, error)
}

type rPCBizClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCBizClient(cc grpc.ClientConnInterface) RPCBizClient {
	return &rPCBizClient{cc}
}

func (c *rPCBizClient) BizInvokeBizDataRaw(ctx context.Context, in *TLBizInvokeBizDataRaw, opts ...grpc.CallOption) (*BizDataRaw, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BizDataRaw)
	err := c.cc.Invoke(ctx, RPCBiz_BizInvokeBizDataRaw_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCBizServer is the server API for RPCBiz service.
// All implementations should embed UnimplementedRPCBizServer
// for forward compatibility.
type RPCBizServer interface {
	BizInvokeBizDataRaw(context.Context, *TLBizInvokeBizDataRaw) (*BizDataRaw, error)
}

// UnimplementedRPCBizServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCBizServer struct{}

func (UnimplementedRPCBizServer) BizInvokeBizDataRaw(context.Context, *TLBizInvokeBizDataRaw) (*BizDataRaw, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BizInvokeBizDataRaw not implemented")
}
func (UnimplementedRPCBizServer) testEmbeddedByValue() {}

// UnsafeRPCBizServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCBizServer will
// result in compilation errors.
type UnsafeRPCBizServer interface {
	mustEmbedUnimplementedRPCBizServer()
}

func RegisterRPCBizServer(s grpc.ServiceRegistrar, srv RPCBizServer) {
	// If the following call pancis, it indicates UnimplementedRPCBizServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCBiz_ServiceDesc, srv)
}

func _RPCBiz_BizInvokeBizDataRaw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLBizInvokeBizDataRaw)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBizServer).BizInvokeBizDataRaw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBiz_BizInvokeBizDataRaw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBizServer).BizInvokeBizDataRaw(ctx, req.(*TLBizInvokeBizDataRaw))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCBiz_ServiceDesc is the grpc.ServiceDesc for RPCBiz service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCBiz_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCBiz",
	HandlerType: (*RPCBizServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "biz_invokeBizDataRaw",
			Handler:    _RPCBiz_BizInvokeBizDataRaw_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}
