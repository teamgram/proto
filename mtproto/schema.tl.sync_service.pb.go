//
// WARNING! All changes made in this file will be lost!
// Created from 'scheme.tl' by 'mtprotoc'
//
// Copyright (c) 2025-present,  Teamgram Authors.
//  All rights reserved.
//
// Author: Benqi (wubenqi@gmail.com)

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: schema.tl.sync_service.proto

package mtproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TLInvokeAfterMsg struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	MsgId         int64                  `protobuf:"varint,3,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	Query         []byte                 `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLInvokeAfterMsg) Reset() {
	*x = TLInvokeAfterMsg{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLInvokeAfterMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLInvokeAfterMsg) ProtoMessage() {}

func (x *TLInvokeAfterMsg) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLInvokeAfterMsg.ProtoReflect.Descriptor instead.
func (*TLInvokeAfterMsg) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{0}
}

func (x *TLInvokeAfterMsg) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLInvokeAfterMsg) GetMsgId() int64 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *TLInvokeAfterMsg) GetQuery() []byte {
	if x != nil {
		return x.Query
	}
	return nil
}

type TLInvokeAfterMsgs struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	MsgIds        []int64                `protobuf:"varint,3,rep,packed,name=msg_ids,json=msgIds,proto3" json:"msg_ids,omitempty"`
	Query         []byte                 `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLInvokeAfterMsgs) Reset() {
	*x = TLInvokeAfterMsgs{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLInvokeAfterMsgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLInvokeAfterMsgs) ProtoMessage() {}

func (x *TLInvokeAfterMsgs) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLInvokeAfterMsgs.ProtoReflect.Descriptor instead.
func (*TLInvokeAfterMsgs) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{1}
}

func (x *TLInvokeAfterMsgs) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLInvokeAfterMsgs) GetMsgIds() []int64 {
	if x != nil {
		return x.MsgIds
	}
	return nil
}

func (x *TLInvokeAfterMsgs) GetQuery() []byte {
	if x != nil {
		return x.Query
	}
	return nil
}

type TLInitConnection struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Constructor    TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	ApiId          int32                  `protobuf:"varint,3,opt,name=api_id,json=apiId,proto3" json:"api_id,omitempty"`
	DeviceModel    string                 `protobuf:"bytes,4,opt,name=device_model,json=deviceModel,proto3" json:"device_model,omitempty"`
	SystemVersion  string                 `protobuf:"bytes,5,opt,name=system_version,json=systemVersion,proto3" json:"system_version,omitempty"`
	AppVersion     string                 `protobuf:"bytes,6,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	SystemLangCode string                 `protobuf:"bytes,7,opt,name=system_lang_code,json=systemLangCode,proto3" json:"system_lang_code,omitempty"`
	LangPack       string                 `protobuf:"bytes,8,opt,name=lang_pack,json=langPack,proto3" json:"lang_pack,omitempty"`
	LangCode       string                 `protobuf:"bytes,9,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
	Proxy          *InputClientProxy      `protobuf:"bytes,10,opt,name=proxy,proto3" json:"proxy,omitempty"`
	Params         *JSONValue             `protobuf:"bytes,11,opt,name=params,proto3" json:"params,omitempty"`
	Query          []byte                 `protobuf:"bytes,12,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TLInitConnection) Reset() {
	*x = TLInitConnection{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLInitConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLInitConnection) ProtoMessage() {}

func (x *TLInitConnection) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLInitConnection.ProtoReflect.Descriptor instead.
func (*TLInitConnection) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{2}
}

func (x *TLInitConnection) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLInitConnection) GetApiId() int32 {
	if x != nil {
		return x.ApiId
	}
	return 0
}

func (x *TLInitConnection) GetDeviceModel() string {
	if x != nil {
		return x.DeviceModel
	}
	return ""
}

func (x *TLInitConnection) GetSystemVersion() string {
	if x != nil {
		return x.SystemVersion
	}
	return ""
}

func (x *TLInitConnection) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *TLInitConnection) GetSystemLangCode() string {
	if x != nil {
		return x.SystemLangCode
	}
	return ""
}

func (x *TLInitConnection) GetLangPack() string {
	if x != nil {
		return x.LangPack
	}
	return ""
}

func (x *TLInitConnection) GetLangCode() string {
	if x != nil {
		return x.LangCode
	}
	return ""
}

func (x *TLInitConnection) GetProxy() *InputClientProxy {
	if x != nil {
		return x.Proxy
	}
	return nil
}

func (x *TLInitConnection) GetParams() *JSONValue {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *TLInitConnection) GetQuery() []byte {
	if x != nil {
		return x.Query
	}
	return nil
}

type TLInvokeWithLayer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Layer         int32                  `protobuf:"varint,3,opt,name=layer,proto3" json:"layer,omitempty"`
	Query         []byte                 `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLInvokeWithLayer) Reset() {
	*x = TLInvokeWithLayer{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLInvokeWithLayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLInvokeWithLayer) ProtoMessage() {}

func (x *TLInvokeWithLayer) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLInvokeWithLayer.ProtoReflect.Descriptor instead.
func (*TLInvokeWithLayer) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{3}
}

func (x *TLInvokeWithLayer) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLInvokeWithLayer) GetLayer() int32 {
	if x != nil {
		return x.Layer
	}
	return 0
}

func (x *TLInvokeWithLayer) GetQuery() []byte {
	if x != nil {
		return x.Query
	}
	return nil
}

type TLInvokeWithoutUpdates struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Query         []byte                 `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLInvokeWithoutUpdates) Reset() {
	*x = TLInvokeWithoutUpdates{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLInvokeWithoutUpdates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLInvokeWithoutUpdates) ProtoMessage() {}

func (x *TLInvokeWithoutUpdates) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLInvokeWithoutUpdates.ProtoReflect.Descriptor instead.
func (*TLInvokeWithoutUpdates) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{4}
}

func (x *TLInvokeWithoutUpdates) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLInvokeWithoutUpdates) GetQuery() []byte {
	if x != nil {
		return x.Query
	}
	return nil
}

type TLInvokeWithMessagesRange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Range         *MessageRange          `protobuf:"bytes,3,opt,name=range,proto3" json:"range,omitempty"`
	Query         []byte                 `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLInvokeWithMessagesRange) Reset() {
	*x = TLInvokeWithMessagesRange{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLInvokeWithMessagesRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLInvokeWithMessagesRange) ProtoMessage() {}

func (x *TLInvokeWithMessagesRange) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLInvokeWithMessagesRange.ProtoReflect.Descriptor instead.
func (*TLInvokeWithMessagesRange) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{5}
}

func (x *TLInvokeWithMessagesRange) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLInvokeWithMessagesRange) GetRange() *MessageRange {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *TLInvokeWithMessagesRange) GetQuery() []byte {
	if x != nil {
		return x.Query
	}
	return nil
}

type TLInvokeWithTakeout struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	TakeoutId     int64                  `protobuf:"varint,3,opt,name=takeout_id,json=takeoutId,proto3" json:"takeout_id,omitempty"`
	Query         []byte                 `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLInvokeWithTakeout) Reset() {
	*x = TLInvokeWithTakeout{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLInvokeWithTakeout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLInvokeWithTakeout) ProtoMessage() {}

func (x *TLInvokeWithTakeout) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLInvokeWithTakeout.ProtoReflect.Descriptor instead.
func (*TLInvokeWithTakeout) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{6}
}

func (x *TLInvokeWithTakeout) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLInvokeWithTakeout) GetTakeoutId() int64 {
	if x != nil {
		return x.TakeoutId
	}
	return 0
}

func (x *TLInvokeWithTakeout) GetQuery() []byte {
	if x != nil {
		return x.Query
	}
	return nil
}

type TLInvokeWithBusinessConnection struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	ConnectionId  string                 `protobuf:"bytes,3,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	Query         []byte                 `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLInvokeWithBusinessConnection) Reset() {
	*x = TLInvokeWithBusinessConnection{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLInvokeWithBusinessConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLInvokeWithBusinessConnection) ProtoMessage() {}

func (x *TLInvokeWithBusinessConnection) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLInvokeWithBusinessConnection.ProtoReflect.Descriptor instead.
func (*TLInvokeWithBusinessConnection) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{7}
}

func (x *TLInvokeWithBusinessConnection) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLInvokeWithBusinessConnection) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *TLInvokeWithBusinessConnection) GetQuery() []byte {
	if x != nil {
		return x.Query
	}
	return nil
}

type TLInvokeWithGooglePlayIntegrity struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Nonce         string                 `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Token         string                 `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	Query         []byte                 `protobuf:"bytes,5,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLInvokeWithGooglePlayIntegrity) Reset() {
	*x = TLInvokeWithGooglePlayIntegrity{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLInvokeWithGooglePlayIntegrity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLInvokeWithGooglePlayIntegrity) ProtoMessage() {}

func (x *TLInvokeWithGooglePlayIntegrity) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLInvokeWithGooglePlayIntegrity.ProtoReflect.Descriptor instead.
func (*TLInvokeWithGooglePlayIntegrity) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{8}
}

func (x *TLInvokeWithGooglePlayIntegrity) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLInvokeWithGooglePlayIntegrity) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *TLInvokeWithGooglePlayIntegrity) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *TLInvokeWithGooglePlayIntegrity) GetQuery() []byte {
	if x != nil {
		return x.Query
	}
	return nil
}

type TLInvokeWithApnsSecret struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Nonce         string                 `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Secret        string                 `protobuf:"bytes,4,opt,name=secret,proto3" json:"secret,omitempty"`
	Query         []byte                 `protobuf:"bytes,5,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLInvokeWithApnsSecret) Reset() {
	*x = TLInvokeWithApnsSecret{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLInvokeWithApnsSecret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLInvokeWithApnsSecret) ProtoMessage() {}

func (x *TLInvokeWithApnsSecret) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLInvokeWithApnsSecret.ProtoReflect.Descriptor instead.
func (*TLInvokeWithApnsSecret) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{9}
}

func (x *TLInvokeWithApnsSecret) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLInvokeWithApnsSecret) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *TLInvokeWithApnsSecret) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *TLInvokeWithApnsSecret) GetQuery() []byte {
	if x != nil {
		return x.Query
	}
	return nil
}

type TLInvokeWithReCaptcha struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Token         string                 `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	Query         []byte                 `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLInvokeWithReCaptcha) Reset() {
	*x = TLInvokeWithReCaptcha{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLInvokeWithReCaptcha) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLInvokeWithReCaptcha) ProtoMessage() {}

func (x *TLInvokeWithReCaptcha) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLInvokeWithReCaptcha.ProtoReflect.Descriptor instead.
func (*TLInvokeWithReCaptcha) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{10}
}

func (x *TLInvokeWithReCaptcha) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLInvokeWithReCaptcha) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *TLInvokeWithReCaptcha) GetQuery() []byte {
	if x != nil {
		return x.Query
	}
	return nil
}

type TLAuthSendCode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	PhoneNumber   string                 `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	ApiId         int32                  `protobuf:"varint,4,opt,name=api_id,json=apiId,proto3" json:"api_id,omitempty"`
	ApiHash       string                 `protobuf:"bytes,5,opt,name=api_hash,json=apiHash,proto3" json:"api_hash,omitempty"`
	Settings      *CodeSettings          `protobuf:"bytes,6,opt,name=settings,proto3" json:"settings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAuthSendCode) Reset() {
	*x = TLAuthSendCode{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAuthSendCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAuthSendCode) ProtoMessage() {}

func (x *TLAuthSendCode) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAuthSendCode.ProtoReflect.Descriptor instead.
func (*TLAuthSendCode) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{11}
}

func (x *TLAuthSendCode) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAuthSendCode) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *TLAuthSendCode) GetApiId() int32 {
	if x != nil {
		return x.ApiId
	}
	return 0
}

func (x *TLAuthSendCode) GetApiHash() string {
	if x != nil {
		return x.ApiHash
	}
	return ""
}

func (x *TLAuthSendCode) GetSettings() *CodeSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type TLAuthSignUp struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Constructor           TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	NoJoinedNotifications bool                   `protobuf:"varint,3,opt,name=no_joined_notifications,json=noJoinedNotifications,proto3" json:"no_joined_notifications,omitempty"`
	PhoneNumber           string                 `protobuf:"bytes,4,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	PhoneCodeHash         string                 `protobuf:"bytes,5,opt,name=phone_code_hash,json=phoneCodeHash,proto3" json:"phone_code_hash,omitempty"`
	FirstName             string                 `protobuf:"bytes,6,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName              string                 `protobuf:"bytes,7,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *TLAuthSignUp) Reset() {
	*x = TLAuthSignUp{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAuthSignUp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAuthSignUp) ProtoMessage() {}

func (x *TLAuthSignUp) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAuthSignUp.ProtoReflect.Descriptor instead.
func (*TLAuthSignUp) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{12}
}

func (x *TLAuthSignUp) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAuthSignUp) GetNoJoinedNotifications() bool {
	if x != nil {
		return x.NoJoinedNotifications
	}
	return false
}

func (x *TLAuthSignUp) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *TLAuthSignUp) GetPhoneCodeHash() string {
	if x != nil {
		return x.PhoneCodeHash
	}
	return ""
}

func (x *TLAuthSignUp) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *TLAuthSignUp) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

type TLAuthSignIn struct {
	state                protoimpl.MessageState  `protogen:"open.v1"`
	Constructor          TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	PhoneNumber          string                  `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	PhoneCodeHash        string                  `protobuf:"bytes,4,opt,name=phone_code_hash,json=phoneCodeHash,proto3" json:"phone_code_hash,omitempty"`
	PhoneCode_FLAGSTRING *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=phone_code_FLAGSTRING,json=phoneCodeFLAGSTRING,proto3" json:"phone_code_FLAGSTRING,omitempty"`
	EmailVerification    *EmailVerification      `protobuf:"bytes,6,opt,name=email_verification,json=emailVerification,proto3" json:"email_verification,omitempty"`
	PhoneCode_STRING     string                  `protobuf:"bytes,7,opt,name=phone_code_STRING,json=phoneCodeSTRING,proto3" json:"phone_code_STRING,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *TLAuthSignIn) Reset() {
	*x = TLAuthSignIn{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAuthSignIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAuthSignIn) ProtoMessage() {}

func (x *TLAuthSignIn) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAuthSignIn.ProtoReflect.Descriptor instead.
func (*TLAuthSignIn) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{13}
}

func (x *TLAuthSignIn) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAuthSignIn) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *TLAuthSignIn) GetPhoneCodeHash() string {
	if x != nil {
		return x.PhoneCodeHash
	}
	return ""
}

func (x *TLAuthSignIn) GetPhoneCode_FLAGSTRING() *wrapperspb.StringValue {
	if x != nil {
		return x.PhoneCode_FLAGSTRING
	}
	return nil
}

func (x *TLAuthSignIn) GetEmailVerification() *EmailVerification {
	if x != nil {
		return x.EmailVerification
	}
	return nil
}

func (x *TLAuthSignIn) GetPhoneCode_STRING() string {
	if x != nil {
		return x.PhoneCode_STRING
	}
	return ""
}

type TLAuthLogOut struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAuthLogOut) Reset() {
	*x = TLAuthLogOut{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAuthLogOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAuthLogOut) ProtoMessage() {}

func (x *TLAuthLogOut) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAuthLogOut.ProtoReflect.Descriptor instead.
func (*TLAuthLogOut) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{14}
}

func (x *TLAuthLogOut) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLAuthResetAuthorizations struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAuthResetAuthorizations) Reset() {
	*x = TLAuthResetAuthorizations{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAuthResetAuthorizations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAuthResetAuthorizations) ProtoMessage() {}

func (x *TLAuthResetAuthorizations) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAuthResetAuthorizations.ProtoReflect.Descriptor instead.
func (*TLAuthResetAuthorizations) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{15}
}

func (x *TLAuthResetAuthorizations) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLAuthExportAuthorization struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	DcId          int32                  `protobuf:"varint,3,opt,name=dc_id,json=dcId,proto3" json:"dc_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAuthExportAuthorization) Reset() {
	*x = TLAuthExportAuthorization{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAuthExportAuthorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAuthExportAuthorization) ProtoMessage() {}

func (x *TLAuthExportAuthorization) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAuthExportAuthorization.ProtoReflect.Descriptor instead.
func (*TLAuthExportAuthorization) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{16}
}

func (x *TLAuthExportAuthorization) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAuthExportAuthorization) GetDcId() int32 {
	if x != nil {
		return x.DcId
	}
	return 0
}

type TLAuthImportAuthorization struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Id            int64                  `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	Bytes         []byte                 `protobuf:"bytes,4,opt,name=bytes,proto3" json:"bytes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAuthImportAuthorization) Reset() {
	*x = TLAuthImportAuthorization{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAuthImportAuthorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAuthImportAuthorization) ProtoMessage() {}

func (x *TLAuthImportAuthorization) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAuthImportAuthorization.ProtoReflect.Descriptor instead.
func (*TLAuthImportAuthorization) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{17}
}

func (x *TLAuthImportAuthorization) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAuthImportAuthorization) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TLAuthImportAuthorization) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

type TLAuthBindTempAuthKey struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Constructor      TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	PermAuthKeyId    int64                  `protobuf:"varint,3,opt,name=perm_auth_key_id,json=permAuthKeyId,proto3" json:"perm_auth_key_id,omitempty"`
	Nonce            int64                  `protobuf:"varint,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ExpiresAt        int32                  `protobuf:"varint,5,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	EncryptedMessage []byte                 `protobuf:"bytes,6,opt,name=encrypted_message,json=encryptedMessage,proto3" json:"encrypted_message,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TLAuthBindTempAuthKey) Reset() {
	*x = TLAuthBindTempAuthKey{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAuthBindTempAuthKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAuthBindTempAuthKey) ProtoMessage() {}

func (x *TLAuthBindTempAuthKey) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAuthBindTempAuthKey.ProtoReflect.Descriptor instead.
func (*TLAuthBindTempAuthKey) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{18}
}

func (x *TLAuthBindTempAuthKey) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAuthBindTempAuthKey) GetPermAuthKeyId() int64 {
	if x != nil {
		return x.PermAuthKeyId
	}
	return 0
}

func (x *TLAuthBindTempAuthKey) GetNonce() int64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *TLAuthBindTempAuthKey) GetExpiresAt() int32 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

func (x *TLAuthBindTempAuthKey) GetEncryptedMessage() []byte {
	if x != nil {
		return x.EncryptedMessage
	}
	return nil
}

type TLAuthImportBotAuthorization struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Flags         int32                  `protobuf:"varint,3,opt,name=flags,proto3" json:"flags,omitempty"`
	ApiId         int32                  `protobuf:"varint,4,opt,name=api_id,json=apiId,proto3" json:"api_id,omitempty"`
	ApiHash       string                 `protobuf:"bytes,5,opt,name=api_hash,json=apiHash,proto3" json:"api_hash,omitempty"`
	BotAuthToken  string                 `protobuf:"bytes,6,opt,name=bot_auth_token,json=botAuthToken,proto3" json:"bot_auth_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAuthImportBotAuthorization) Reset() {
	*x = TLAuthImportBotAuthorization{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAuthImportBotAuthorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAuthImportBotAuthorization) ProtoMessage() {}

func (x *TLAuthImportBotAuthorization) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAuthImportBotAuthorization.ProtoReflect.Descriptor instead.
func (*TLAuthImportBotAuthorization) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{19}
}

func (x *TLAuthImportBotAuthorization) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAuthImportBotAuthorization) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *TLAuthImportBotAuthorization) GetApiId() int32 {
	if x != nil {
		return x.ApiId
	}
	return 0
}

func (x *TLAuthImportBotAuthorization) GetApiHash() string {
	if x != nil {
		return x.ApiHash
	}
	return ""
}

func (x *TLAuthImportBotAuthorization) GetBotAuthToken() string {
	if x != nil {
		return x.BotAuthToken
	}
	return ""
}

type TLAuthCheckPassword struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Password      *InputCheckPasswordSRP `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAuthCheckPassword) Reset() {
	*x = TLAuthCheckPassword{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAuthCheckPassword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAuthCheckPassword) ProtoMessage() {}

func (x *TLAuthCheckPassword) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAuthCheckPassword.ProtoReflect.Descriptor instead.
func (*TLAuthCheckPassword) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{20}
}

func (x *TLAuthCheckPassword) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAuthCheckPassword) GetPassword() *InputCheckPasswordSRP {
	if x != nil {
		return x.Password
	}
	return nil
}

type TLAuthRequestPasswordRecovery struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAuthRequestPasswordRecovery) Reset() {
	*x = TLAuthRequestPasswordRecovery{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAuthRequestPasswordRecovery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAuthRequestPasswordRecovery) ProtoMessage() {}

func (x *TLAuthRequestPasswordRecovery) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAuthRequestPasswordRecovery.ProtoReflect.Descriptor instead.
func (*TLAuthRequestPasswordRecovery) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{21}
}

func (x *TLAuthRequestPasswordRecovery) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLAuthRecoverPassword struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Constructor   TLConstructor                  `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Code          string                         `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	NewSettings   *Account_PasswordInputSettings `protobuf:"bytes,4,opt,name=new_settings,json=newSettings,proto3" json:"new_settings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAuthRecoverPassword) Reset() {
	*x = TLAuthRecoverPassword{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAuthRecoverPassword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAuthRecoverPassword) ProtoMessage() {}

func (x *TLAuthRecoverPassword) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAuthRecoverPassword.ProtoReflect.Descriptor instead.
func (*TLAuthRecoverPassword) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{22}
}

func (x *TLAuthRecoverPassword) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAuthRecoverPassword) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *TLAuthRecoverPassword) GetNewSettings() *Account_PasswordInputSettings {
	if x != nil {
		return x.NewSettings
	}
	return nil
}

type TLAuthResendCode struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Constructor   TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	PhoneNumber   string                  `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	PhoneCodeHash string                  `protobuf:"bytes,4,opt,name=phone_code_hash,json=phoneCodeHash,proto3" json:"phone_code_hash,omitempty"`
	Reason        *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAuthResendCode) Reset() {
	*x = TLAuthResendCode{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAuthResendCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAuthResendCode) ProtoMessage() {}

func (x *TLAuthResendCode) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAuthResendCode.ProtoReflect.Descriptor instead.
func (*TLAuthResendCode) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{23}
}

func (x *TLAuthResendCode) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAuthResendCode) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *TLAuthResendCode) GetPhoneCodeHash() string {
	if x != nil {
		return x.PhoneCodeHash
	}
	return ""
}

func (x *TLAuthResendCode) GetReason() *wrapperspb.StringValue {
	if x != nil {
		return x.Reason
	}
	return nil
}

type TLAuthCancelCode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	PhoneNumber   string                 `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	PhoneCodeHash string                 `protobuf:"bytes,4,opt,name=phone_code_hash,json=phoneCodeHash,proto3" json:"phone_code_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAuthCancelCode) Reset() {
	*x = TLAuthCancelCode{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAuthCancelCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAuthCancelCode) ProtoMessage() {}

func (x *TLAuthCancelCode) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAuthCancelCode.ProtoReflect.Descriptor instead.
func (*TLAuthCancelCode) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{24}
}

func (x *TLAuthCancelCode) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAuthCancelCode) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *TLAuthCancelCode) GetPhoneCodeHash() string {
	if x != nil {
		return x.PhoneCodeHash
	}
	return ""
}

type TLAuthDropTempAuthKeys struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Constructor    TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	ExceptAuthKeys []int64                `protobuf:"varint,3,rep,packed,name=except_auth_keys,json=exceptAuthKeys,proto3" json:"except_auth_keys,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TLAuthDropTempAuthKeys) Reset() {
	*x = TLAuthDropTempAuthKeys{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAuthDropTempAuthKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAuthDropTempAuthKeys) ProtoMessage() {}

func (x *TLAuthDropTempAuthKeys) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAuthDropTempAuthKeys.ProtoReflect.Descriptor instead.
func (*TLAuthDropTempAuthKeys) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{25}
}

func (x *TLAuthDropTempAuthKeys) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAuthDropTempAuthKeys) GetExceptAuthKeys() []int64 {
	if x != nil {
		return x.ExceptAuthKeys
	}
	return nil
}

type TLAuthExportLoginToken struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	ApiId         int32                  `protobuf:"varint,3,opt,name=api_id,json=apiId,proto3" json:"api_id,omitempty"`
	ApiHash       string                 `protobuf:"bytes,4,opt,name=api_hash,json=apiHash,proto3" json:"api_hash,omitempty"`
	ExceptIds     []int64                `protobuf:"varint,5,rep,packed,name=except_ids,json=exceptIds,proto3" json:"except_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAuthExportLoginToken) Reset() {
	*x = TLAuthExportLoginToken{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAuthExportLoginToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAuthExportLoginToken) ProtoMessage() {}

func (x *TLAuthExportLoginToken) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAuthExportLoginToken.ProtoReflect.Descriptor instead.
func (*TLAuthExportLoginToken) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{26}
}

func (x *TLAuthExportLoginToken) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAuthExportLoginToken) GetApiId() int32 {
	if x != nil {
		return x.ApiId
	}
	return 0
}

func (x *TLAuthExportLoginToken) GetApiHash() string {
	if x != nil {
		return x.ApiHash
	}
	return ""
}

func (x *TLAuthExportLoginToken) GetExceptIds() []int64 {
	if x != nil {
		return x.ExceptIds
	}
	return nil
}

type TLAuthImportLoginToken struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Token         []byte                 `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAuthImportLoginToken) Reset() {
	*x = TLAuthImportLoginToken{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAuthImportLoginToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAuthImportLoginToken) ProtoMessage() {}

func (x *TLAuthImportLoginToken) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAuthImportLoginToken.ProtoReflect.Descriptor instead.
func (*TLAuthImportLoginToken) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{27}
}

func (x *TLAuthImportLoginToken) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAuthImportLoginToken) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

type TLAuthAcceptLoginToken struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Token         []byte                 `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAuthAcceptLoginToken) Reset() {
	*x = TLAuthAcceptLoginToken{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAuthAcceptLoginToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAuthAcceptLoginToken) ProtoMessage() {}

func (x *TLAuthAcceptLoginToken) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAuthAcceptLoginToken.ProtoReflect.Descriptor instead.
func (*TLAuthAcceptLoginToken) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{28}
}

func (x *TLAuthAcceptLoginToken) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAuthAcceptLoginToken) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

type TLAuthCheckRecoveryPassword struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Code          string                 `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAuthCheckRecoveryPassword) Reset() {
	*x = TLAuthCheckRecoveryPassword{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAuthCheckRecoveryPassword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAuthCheckRecoveryPassword) ProtoMessage() {}

func (x *TLAuthCheckRecoveryPassword) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAuthCheckRecoveryPassword.ProtoReflect.Descriptor instead.
func (*TLAuthCheckRecoveryPassword) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{29}
}

func (x *TLAuthCheckRecoveryPassword) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAuthCheckRecoveryPassword) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type TLAuthImportWebTokenAuthorization struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	ApiId         int32                  `protobuf:"varint,3,opt,name=api_id,json=apiId,proto3" json:"api_id,omitempty"`
	ApiHash       string                 `protobuf:"bytes,4,opt,name=api_hash,json=apiHash,proto3" json:"api_hash,omitempty"`
	WebAuthToken  string                 `protobuf:"bytes,5,opt,name=web_auth_token,json=webAuthToken,proto3" json:"web_auth_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAuthImportWebTokenAuthorization) Reset() {
	*x = TLAuthImportWebTokenAuthorization{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAuthImportWebTokenAuthorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAuthImportWebTokenAuthorization) ProtoMessage() {}

func (x *TLAuthImportWebTokenAuthorization) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAuthImportWebTokenAuthorization.ProtoReflect.Descriptor instead.
func (*TLAuthImportWebTokenAuthorization) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{30}
}

func (x *TLAuthImportWebTokenAuthorization) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAuthImportWebTokenAuthorization) GetApiId() int32 {
	if x != nil {
		return x.ApiId
	}
	return 0
}

func (x *TLAuthImportWebTokenAuthorization) GetApiHash() string {
	if x != nil {
		return x.ApiHash
	}
	return ""
}

func (x *TLAuthImportWebTokenAuthorization) GetWebAuthToken() string {
	if x != nil {
		return x.WebAuthToken
	}
	return ""
}

type TLAuthRequestFirebaseSms struct {
	state              protoimpl.MessageState  `protogen:"open.v1"`
	Constructor        TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	PhoneNumber        string                  `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	PhoneCodeHash      string                  `protobuf:"bytes,4,opt,name=phone_code_hash,json=phoneCodeHash,proto3" json:"phone_code_hash,omitempty"`
	SafetyNetToken     *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=safety_net_token,json=safetyNetToken,proto3" json:"safety_net_token,omitempty"`
	PlayIntegrityToken *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=play_integrity_token,json=playIntegrityToken,proto3" json:"play_integrity_token,omitempty"`
	IosPushSecret      *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=ios_push_secret,json=iosPushSecret,proto3" json:"ios_push_secret,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *TLAuthRequestFirebaseSms) Reset() {
	*x = TLAuthRequestFirebaseSms{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAuthRequestFirebaseSms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAuthRequestFirebaseSms) ProtoMessage() {}

func (x *TLAuthRequestFirebaseSms) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAuthRequestFirebaseSms.ProtoReflect.Descriptor instead.
func (*TLAuthRequestFirebaseSms) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{31}
}

func (x *TLAuthRequestFirebaseSms) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAuthRequestFirebaseSms) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *TLAuthRequestFirebaseSms) GetPhoneCodeHash() string {
	if x != nil {
		return x.PhoneCodeHash
	}
	return ""
}

func (x *TLAuthRequestFirebaseSms) GetSafetyNetToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SafetyNetToken
	}
	return nil
}

func (x *TLAuthRequestFirebaseSms) GetPlayIntegrityToken() *wrapperspb.StringValue {
	if x != nil {
		return x.PlayIntegrityToken
	}
	return nil
}

func (x *TLAuthRequestFirebaseSms) GetIosPushSecret() *wrapperspb.StringValue {
	if x != nil {
		return x.IosPushSecret
	}
	return nil
}

type TLAuthResetLoginEmail struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	PhoneNumber   string                 `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	PhoneCodeHash string                 `protobuf:"bytes,4,opt,name=phone_code_hash,json=phoneCodeHash,proto3" json:"phone_code_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAuthResetLoginEmail) Reset() {
	*x = TLAuthResetLoginEmail{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAuthResetLoginEmail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAuthResetLoginEmail) ProtoMessage() {}

func (x *TLAuthResetLoginEmail) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAuthResetLoginEmail.ProtoReflect.Descriptor instead.
func (*TLAuthResetLoginEmail) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{32}
}

func (x *TLAuthResetLoginEmail) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAuthResetLoginEmail) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *TLAuthResetLoginEmail) GetPhoneCodeHash() string {
	if x != nil {
		return x.PhoneCodeHash
	}
	return ""
}

type TLAuthReportMissingCode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	PhoneNumber   string                 `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	PhoneCodeHash string                 `protobuf:"bytes,4,opt,name=phone_code_hash,json=phoneCodeHash,proto3" json:"phone_code_hash,omitempty"`
	Mnc           string                 `protobuf:"bytes,5,opt,name=mnc,proto3" json:"mnc,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAuthReportMissingCode) Reset() {
	*x = TLAuthReportMissingCode{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAuthReportMissingCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAuthReportMissingCode) ProtoMessage() {}

func (x *TLAuthReportMissingCode) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAuthReportMissingCode.ProtoReflect.Descriptor instead.
func (*TLAuthReportMissingCode) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{33}
}

func (x *TLAuthReportMissingCode) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAuthReportMissingCode) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *TLAuthReportMissingCode) GetPhoneCodeHash() string {
	if x != nil {
		return x.PhoneCodeHash
	}
	return ""
}

func (x *TLAuthReportMissingCode) GetMnc() string {
	if x != nil {
		return x.Mnc
	}
	return ""
}

type TLAccountRegisterDevice struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	NoMuted       bool                   `protobuf:"varint,3,opt,name=no_muted,json=noMuted,proto3" json:"no_muted,omitempty"`
	TokenType     int32                  `protobuf:"varint,4,opt,name=token_type,json=tokenType,proto3" json:"token_type,omitempty"`
	Token         string                 `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
	AppSandbox    *Bool                  `protobuf:"bytes,6,opt,name=app_sandbox,json=appSandbox,proto3" json:"app_sandbox,omitempty"`
	Secret        []byte                 `protobuf:"bytes,7,opt,name=secret,proto3" json:"secret,omitempty"`
	OtherUids     []int64                `protobuf:"varint,8,rep,packed,name=other_uids,json=otherUids,proto3" json:"other_uids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountRegisterDevice) Reset() {
	*x = TLAccountRegisterDevice{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountRegisterDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountRegisterDevice) ProtoMessage() {}

func (x *TLAccountRegisterDevice) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountRegisterDevice.ProtoReflect.Descriptor instead.
func (*TLAccountRegisterDevice) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{34}
}

func (x *TLAccountRegisterDevice) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountRegisterDevice) GetNoMuted() bool {
	if x != nil {
		return x.NoMuted
	}
	return false
}

func (x *TLAccountRegisterDevice) GetTokenType() int32 {
	if x != nil {
		return x.TokenType
	}
	return 0
}

func (x *TLAccountRegisterDevice) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *TLAccountRegisterDevice) GetAppSandbox() *Bool {
	if x != nil {
		return x.AppSandbox
	}
	return nil
}

func (x *TLAccountRegisterDevice) GetSecret() []byte {
	if x != nil {
		return x.Secret
	}
	return nil
}

func (x *TLAccountRegisterDevice) GetOtherUids() []int64 {
	if x != nil {
		return x.OtherUids
	}
	return nil
}

type TLAccountUnregisterDevice struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	TokenType     int32                  `protobuf:"varint,3,opt,name=token_type,json=tokenType,proto3" json:"token_type,omitempty"`
	Token         string                 `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	OtherUids     []int64                `protobuf:"varint,5,rep,packed,name=other_uids,json=otherUids,proto3" json:"other_uids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountUnregisterDevice) Reset() {
	*x = TLAccountUnregisterDevice{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountUnregisterDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountUnregisterDevice) ProtoMessage() {}

func (x *TLAccountUnregisterDevice) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountUnregisterDevice.ProtoReflect.Descriptor instead.
func (*TLAccountUnregisterDevice) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{35}
}

func (x *TLAccountUnregisterDevice) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountUnregisterDevice) GetTokenType() int32 {
	if x != nil {
		return x.TokenType
	}
	return 0
}

func (x *TLAccountUnregisterDevice) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *TLAccountUnregisterDevice) GetOtherUids() []int64 {
	if x != nil {
		return x.OtherUids
	}
	return nil
}

type TLAccountUpdateNotifySettings struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Constructor   TLConstructor            `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputNotifyPeer         `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Settings      *InputPeerNotifySettings `protobuf:"bytes,4,opt,name=settings,proto3" json:"settings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountUpdateNotifySettings) Reset() {
	*x = TLAccountUpdateNotifySettings{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountUpdateNotifySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountUpdateNotifySettings) ProtoMessage() {}

func (x *TLAccountUpdateNotifySettings) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountUpdateNotifySettings.ProtoReflect.Descriptor instead.
func (*TLAccountUpdateNotifySettings) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{36}
}

func (x *TLAccountUpdateNotifySettings) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountUpdateNotifySettings) GetPeer() *InputNotifyPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLAccountUpdateNotifySettings) GetSettings() *InputPeerNotifySettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type TLAccountGetNotifySettings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputNotifyPeer       `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountGetNotifySettings) Reset() {
	*x = TLAccountGetNotifySettings{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountGetNotifySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountGetNotifySettings) ProtoMessage() {}

func (x *TLAccountGetNotifySettings) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountGetNotifySettings.ProtoReflect.Descriptor instead.
func (*TLAccountGetNotifySettings) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{37}
}

func (x *TLAccountGetNotifySettings) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountGetNotifySettings) GetPeer() *InputNotifyPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

type TLAccountResetNotifySettings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountResetNotifySettings) Reset() {
	*x = TLAccountResetNotifySettings{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountResetNotifySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountResetNotifySettings) ProtoMessage() {}

func (x *TLAccountResetNotifySettings) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountResetNotifySettings.ProtoReflect.Descriptor instead.
func (*TLAccountResetNotifySettings) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{38}
}

func (x *TLAccountResetNotifySettings) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLAccountUpdateProfile struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Constructor   TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	FirstName     *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName      *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	About         *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=about,proto3" json:"about,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountUpdateProfile) Reset() {
	*x = TLAccountUpdateProfile{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountUpdateProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountUpdateProfile) ProtoMessage() {}

func (x *TLAccountUpdateProfile) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountUpdateProfile.ProtoReflect.Descriptor instead.
func (*TLAccountUpdateProfile) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{39}
}

func (x *TLAccountUpdateProfile) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountUpdateProfile) GetFirstName() *wrapperspb.StringValue {
	if x != nil {
		return x.FirstName
	}
	return nil
}

func (x *TLAccountUpdateProfile) GetLastName() *wrapperspb.StringValue {
	if x != nil {
		return x.LastName
	}
	return nil
}

func (x *TLAccountUpdateProfile) GetAbout() *wrapperspb.StringValue {
	if x != nil {
		return x.About
	}
	return nil
}

type TLAccountUpdateStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Offline       *Bool                  `protobuf:"bytes,3,opt,name=offline,proto3" json:"offline,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountUpdateStatus) Reset() {
	*x = TLAccountUpdateStatus{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountUpdateStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountUpdateStatus) ProtoMessage() {}

func (x *TLAccountUpdateStatus) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountUpdateStatus.ProtoReflect.Descriptor instead.
func (*TLAccountUpdateStatus) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{40}
}

func (x *TLAccountUpdateStatus) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountUpdateStatus) GetOffline() *Bool {
	if x != nil {
		return x.Offline
	}
	return nil
}

type TLAccountGetWallPapers struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Hash          int64                  `protobuf:"varint,3,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountGetWallPapers) Reset() {
	*x = TLAccountGetWallPapers{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountGetWallPapers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountGetWallPapers) ProtoMessage() {}

func (x *TLAccountGetWallPapers) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountGetWallPapers.ProtoReflect.Descriptor instead.
func (*TLAccountGetWallPapers) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{41}
}

func (x *TLAccountGetWallPapers) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountGetWallPapers) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLAccountReportPeer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Reason        *ReportReason          `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	Message       string                 `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountReportPeer) Reset() {
	*x = TLAccountReportPeer{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountReportPeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountReportPeer) ProtoMessage() {}

func (x *TLAccountReportPeer) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountReportPeer.ProtoReflect.Descriptor instead.
func (*TLAccountReportPeer) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{42}
}

func (x *TLAccountReportPeer) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountReportPeer) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLAccountReportPeer) GetReason() *ReportReason {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *TLAccountReportPeer) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type TLAccountCheckUsername struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Username      string                 `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountCheckUsername) Reset() {
	*x = TLAccountCheckUsername{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountCheckUsername) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountCheckUsername) ProtoMessage() {}

func (x *TLAccountCheckUsername) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountCheckUsername.ProtoReflect.Descriptor instead.
func (*TLAccountCheckUsername) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{43}
}

func (x *TLAccountCheckUsername) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountCheckUsername) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type TLAccountUpdateUsername struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Username      string                 `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountUpdateUsername) Reset() {
	*x = TLAccountUpdateUsername{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountUpdateUsername) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountUpdateUsername) ProtoMessage() {}

func (x *TLAccountUpdateUsername) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountUpdateUsername.ProtoReflect.Descriptor instead.
func (*TLAccountUpdateUsername) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{44}
}

func (x *TLAccountUpdateUsername) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountUpdateUsername) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type TLAccountGetPrivacy struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Key           *InputPrivacyKey       `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountGetPrivacy) Reset() {
	*x = TLAccountGetPrivacy{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountGetPrivacy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountGetPrivacy) ProtoMessage() {}

func (x *TLAccountGetPrivacy) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountGetPrivacy.ProtoReflect.Descriptor instead.
func (*TLAccountGetPrivacy) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{45}
}

func (x *TLAccountGetPrivacy) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountGetPrivacy) GetKey() *InputPrivacyKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type TLAccountSetPrivacy struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Key           *InputPrivacyKey       `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Rules         []*InputPrivacyRule    `protobuf:"bytes,4,rep,name=rules,proto3" json:"rules,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountSetPrivacy) Reset() {
	*x = TLAccountSetPrivacy{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountSetPrivacy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountSetPrivacy) ProtoMessage() {}

func (x *TLAccountSetPrivacy) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountSetPrivacy.ProtoReflect.Descriptor instead.
func (*TLAccountSetPrivacy) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{46}
}

func (x *TLAccountSetPrivacy) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountSetPrivacy) GetKey() *InputPrivacyKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TLAccountSetPrivacy) GetRules() []*InputPrivacyRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type TLAccountDeleteAccount struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Reason        string                 `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	Password      *InputCheckPasswordSRP `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountDeleteAccount) Reset() {
	*x = TLAccountDeleteAccount{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountDeleteAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountDeleteAccount) ProtoMessage() {}

func (x *TLAccountDeleteAccount) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountDeleteAccount.ProtoReflect.Descriptor instead.
func (*TLAccountDeleteAccount) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{47}
}

func (x *TLAccountDeleteAccount) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountDeleteAccount) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *TLAccountDeleteAccount) GetPassword() *InputCheckPasswordSRP {
	if x != nil {
		return x.Password
	}
	return nil
}

type TLAccountGetAccountTTL struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountGetAccountTTL) Reset() {
	*x = TLAccountGetAccountTTL{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountGetAccountTTL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountGetAccountTTL) ProtoMessage() {}

func (x *TLAccountGetAccountTTL) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountGetAccountTTL.ProtoReflect.Descriptor instead.
func (*TLAccountGetAccountTTL) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{48}
}

func (x *TLAccountGetAccountTTL) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLAccountSetAccountTTL struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Ttl           *AccountDaysTTL        `protobuf:"bytes,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountSetAccountTTL) Reset() {
	*x = TLAccountSetAccountTTL{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountSetAccountTTL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountSetAccountTTL) ProtoMessage() {}

func (x *TLAccountSetAccountTTL) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountSetAccountTTL.ProtoReflect.Descriptor instead.
func (*TLAccountSetAccountTTL) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{49}
}

func (x *TLAccountSetAccountTTL) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountSetAccountTTL) GetTtl() *AccountDaysTTL {
	if x != nil {
		return x.Ttl
	}
	return nil
}

type TLAccountSendChangePhoneCode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	PhoneNumber   string                 `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Settings      *CodeSettings          `protobuf:"bytes,4,opt,name=settings,proto3" json:"settings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountSendChangePhoneCode) Reset() {
	*x = TLAccountSendChangePhoneCode{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountSendChangePhoneCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountSendChangePhoneCode) ProtoMessage() {}

func (x *TLAccountSendChangePhoneCode) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountSendChangePhoneCode.ProtoReflect.Descriptor instead.
func (*TLAccountSendChangePhoneCode) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{50}
}

func (x *TLAccountSendChangePhoneCode) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountSendChangePhoneCode) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *TLAccountSendChangePhoneCode) GetSettings() *CodeSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type TLAccountChangePhone struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	PhoneNumber   string                 `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	PhoneCodeHash string                 `protobuf:"bytes,4,opt,name=phone_code_hash,json=phoneCodeHash,proto3" json:"phone_code_hash,omitempty"`
	PhoneCode     string                 `protobuf:"bytes,5,opt,name=phone_code,json=phoneCode,proto3" json:"phone_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountChangePhone) Reset() {
	*x = TLAccountChangePhone{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountChangePhone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountChangePhone) ProtoMessage() {}

func (x *TLAccountChangePhone) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountChangePhone.ProtoReflect.Descriptor instead.
func (*TLAccountChangePhone) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{51}
}

func (x *TLAccountChangePhone) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountChangePhone) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *TLAccountChangePhone) GetPhoneCodeHash() string {
	if x != nil {
		return x.PhoneCodeHash
	}
	return ""
}

func (x *TLAccountChangePhone) GetPhoneCode() string {
	if x != nil {
		return x.PhoneCode
	}
	return ""
}

type TLAccountUpdateDeviceLocked struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Period        int32                  `protobuf:"varint,3,opt,name=period,proto3" json:"period,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountUpdateDeviceLocked) Reset() {
	*x = TLAccountUpdateDeviceLocked{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountUpdateDeviceLocked) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountUpdateDeviceLocked) ProtoMessage() {}

func (x *TLAccountUpdateDeviceLocked) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountUpdateDeviceLocked.ProtoReflect.Descriptor instead.
func (*TLAccountUpdateDeviceLocked) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{52}
}

func (x *TLAccountUpdateDeviceLocked) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountUpdateDeviceLocked) GetPeriod() int32 {
	if x != nil {
		return x.Period
	}
	return 0
}

type TLAccountGetAuthorizations struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountGetAuthorizations) Reset() {
	*x = TLAccountGetAuthorizations{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountGetAuthorizations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountGetAuthorizations) ProtoMessage() {}

func (x *TLAccountGetAuthorizations) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountGetAuthorizations.ProtoReflect.Descriptor instead.
func (*TLAccountGetAuthorizations) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{53}
}

func (x *TLAccountGetAuthorizations) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLAccountResetAuthorization struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Hash          int64                  `protobuf:"varint,3,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountResetAuthorization) Reset() {
	*x = TLAccountResetAuthorization{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountResetAuthorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountResetAuthorization) ProtoMessage() {}

func (x *TLAccountResetAuthorization) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountResetAuthorization.ProtoReflect.Descriptor instead.
func (*TLAccountResetAuthorization) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{54}
}

func (x *TLAccountResetAuthorization) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountResetAuthorization) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLAccountGetPassword struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountGetPassword) Reset() {
	*x = TLAccountGetPassword{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountGetPassword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountGetPassword) ProtoMessage() {}

func (x *TLAccountGetPassword) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountGetPassword.ProtoReflect.Descriptor instead.
func (*TLAccountGetPassword) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{55}
}

func (x *TLAccountGetPassword) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLAccountGetPasswordSettings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Password      *InputCheckPasswordSRP `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountGetPasswordSettings) Reset() {
	*x = TLAccountGetPasswordSettings{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountGetPasswordSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountGetPasswordSettings) ProtoMessage() {}

func (x *TLAccountGetPasswordSettings) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountGetPasswordSettings.ProtoReflect.Descriptor instead.
func (*TLAccountGetPasswordSettings) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{56}
}

func (x *TLAccountGetPasswordSettings) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountGetPasswordSettings) GetPassword() *InputCheckPasswordSRP {
	if x != nil {
		return x.Password
	}
	return nil
}

type TLAccountUpdatePasswordSettings struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Constructor   TLConstructor                  `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Password      *InputCheckPasswordSRP         `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	NewSettings   *Account_PasswordInputSettings `protobuf:"bytes,4,opt,name=new_settings,json=newSettings,proto3" json:"new_settings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountUpdatePasswordSettings) Reset() {
	*x = TLAccountUpdatePasswordSettings{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountUpdatePasswordSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountUpdatePasswordSettings) ProtoMessage() {}

func (x *TLAccountUpdatePasswordSettings) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountUpdatePasswordSettings.ProtoReflect.Descriptor instead.
func (*TLAccountUpdatePasswordSettings) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{57}
}

func (x *TLAccountUpdatePasswordSettings) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountUpdatePasswordSettings) GetPassword() *InputCheckPasswordSRP {
	if x != nil {
		return x.Password
	}
	return nil
}

func (x *TLAccountUpdatePasswordSettings) GetNewSettings() *Account_PasswordInputSettings {
	if x != nil {
		return x.NewSettings
	}
	return nil
}

type TLAccountSendConfirmPhoneCode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Hash          string                 `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	Settings      *CodeSettings          `protobuf:"bytes,4,opt,name=settings,proto3" json:"settings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountSendConfirmPhoneCode) Reset() {
	*x = TLAccountSendConfirmPhoneCode{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountSendConfirmPhoneCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountSendConfirmPhoneCode) ProtoMessage() {}

func (x *TLAccountSendConfirmPhoneCode) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountSendConfirmPhoneCode.ProtoReflect.Descriptor instead.
func (*TLAccountSendConfirmPhoneCode) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{58}
}

func (x *TLAccountSendConfirmPhoneCode) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountSendConfirmPhoneCode) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *TLAccountSendConfirmPhoneCode) GetSettings() *CodeSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type TLAccountConfirmPhone struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	PhoneCodeHash string                 `protobuf:"bytes,3,opt,name=phone_code_hash,json=phoneCodeHash,proto3" json:"phone_code_hash,omitempty"`
	PhoneCode     string                 `protobuf:"bytes,4,opt,name=phone_code,json=phoneCode,proto3" json:"phone_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountConfirmPhone) Reset() {
	*x = TLAccountConfirmPhone{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountConfirmPhone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountConfirmPhone) ProtoMessage() {}

func (x *TLAccountConfirmPhone) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountConfirmPhone.ProtoReflect.Descriptor instead.
func (*TLAccountConfirmPhone) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{59}
}

func (x *TLAccountConfirmPhone) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountConfirmPhone) GetPhoneCodeHash() string {
	if x != nil {
		return x.PhoneCodeHash
	}
	return ""
}

func (x *TLAccountConfirmPhone) GetPhoneCode() string {
	if x != nil {
		return x.PhoneCode
	}
	return ""
}

type TLAccountGetTmpPassword struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Password      *InputCheckPasswordSRP `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Period        int32                  `protobuf:"varint,4,opt,name=period,proto3" json:"period,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountGetTmpPassword) Reset() {
	*x = TLAccountGetTmpPassword{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountGetTmpPassword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountGetTmpPassword) ProtoMessage() {}

func (x *TLAccountGetTmpPassword) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountGetTmpPassword.ProtoReflect.Descriptor instead.
func (*TLAccountGetTmpPassword) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{60}
}

func (x *TLAccountGetTmpPassword) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountGetTmpPassword) GetPassword() *InputCheckPasswordSRP {
	if x != nil {
		return x.Password
	}
	return nil
}

func (x *TLAccountGetTmpPassword) GetPeriod() int32 {
	if x != nil {
		return x.Period
	}
	return 0
}

type TLAccountGetWebAuthorizations struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountGetWebAuthorizations) Reset() {
	*x = TLAccountGetWebAuthorizations{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountGetWebAuthorizations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountGetWebAuthorizations) ProtoMessage() {}

func (x *TLAccountGetWebAuthorizations) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountGetWebAuthorizations.ProtoReflect.Descriptor instead.
func (*TLAccountGetWebAuthorizations) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{61}
}

func (x *TLAccountGetWebAuthorizations) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLAccountResetWebAuthorization struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Hash          int64                  `protobuf:"varint,3,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountResetWebAuthorization) Reset() {
	*x = TLAccountResetWebAuthorization{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountResetWebAuthorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountResetWebAuthorization) ProtoMessage() {}

func (x *TLAccountResetWebAuthorization) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountResetWebAuthorization.ProtoReflect.Descriptor instead.
func (*TLAccountResetWebAuthorization) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{62}
}

func (x *TLAccountResetWebAuthorization) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountResetWebAuthorization) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLAccountResetWebAuthorizations struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountResetWebAuthorizations) Reset() {
	*x = TLAccountResetWebAuthorizations{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountResetWebAuthorizations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountResetWebAuthorizations) ProtoMessage() {}

func (x *TLAccountResetWebAuthorizations) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountResetWebAuthorizations.ProtoReflect.Descriptor instead.
func (*TLAccountResetWebAuthorizations) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{63}
}

func (x *TLAccountResetWebAuthorizations) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLAccountGetAllSecureValues struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountGetAllSecureValues) Reset() {
	*x = TLAccountGetAllSecureValues{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountGetAllSecureValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountGetAllSecureValues) ProtoMessage() {}

func (x *TLAccountGetAllSecureValues) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountGetAllSecureValues.ProtoReflect.Descriptor instead.
func (*TLAccountGetAllSecureValues) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{64}
}

func (x *TLAccountGetAllSecureValues) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLAccountGetSecureValue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Types         []*SecureValueType     `protobuf:"bytes,3,rep,name=types,proto3" json:"types,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountGetSecureValue) Reset() {
	*x = TLAccountGetSecureValue{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountGetSecureValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountGetSecureValue) ProtoMessage() {}

func (x *TLAccountGetSecureValue) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountGetSecureValue.ProtoReflect.Descriptor instead.
func (*TLAccountGetSecureValue) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{65}
}

func (x *TLAccountGetSecureValue) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountGetSecureValue) GetTypes() []*SecureValueType {
	if x != nil {
		return x.Types
	}
	return nil
}

type TLAccountSaveSecureValue struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Constructor    TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Value          *InputSecureValue      `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	SecureSecretId int64                  `protobuf:"varint,4,opt,name=secure_secret_id,json=secureSecretId,proto3" json:"secure_secret_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TLAccountSaveSecureValue) Reset() {
	*x = TLAccountSaveSecureValue{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountSaveSecureValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountSaveSecureValue) ProtoMessage() {}

func (x *TLAccountSaveSecureValue) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountSaveSecureValue.ProtoReflect.Descriptor instead.
func (*TLAccountSaveSecureValue) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{66}
}

func (x *TLAccountSaveSecureValue) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountSaveSecureValue) GetValue() *InputSecureValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TLAccountSaveSecureValue) GetSecureSecretId() int64 {
	if x != nil {
		return x.SecureSecretId
	}
	return 0
}

type TLAccountDeleteSecureValue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Types         []*SecureValueType     `protobuf:"bytes,3,rep,name=types,proto3" json:"types,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountDeleteSecureValue) Reset() {
	*x = TLAccountDeleteSecureValue{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountDeleteSecureValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountDeleteSecureValue) ProtoMessage() {}

func (x *TLAccountDeleteSecureValue) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountDeleteSecureValue.ProtoReflect.Descriptor instead.
func (*TLAccountDeleteSecureValue) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{67}
}

func (x *TLAccountDeleteSecureValue) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountDeleteSecureValue) GetTypes() []*SecureValueType {
	if x != nil {
		return x.Types
	}
	return nil
}

type TLAccountGetAuthorizationForm struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	BotId         int64                  `protobuf:"varint,3,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	Scope         string                 `protobuf:"bytes,4,opt,name=scope,proto3" json:"scope,omitempty"`
	PublicKey     string                 `protobuf:"bytes,5,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountGetAuthorizationForm) Reset() {
	*x = TLAccountGetAuthorizationForm{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountGetAuthorizationForm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountGetAuthorizationForm) ProtoMessage() {}

func (x *TLAccountGetAuthorizationForm) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountGetAuthorizationForm.ProtoReflect.Descriptor instead.
func (*TLAccountGetAuthorizationForm) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{68}
}

func (x *TLAccountGetAuthorizationForm) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountGetAuthorizationForm) GetBotId() int64 {
	if x != nil {
		return x.BotId
	}
	return 0
}

func (x *TLAccountGetAuthorizationForm) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *TLAccountGetAuthorizationForm) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

type TLAccountAcceptAuthorization struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Constructor   TLConstructor               `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	BotId         int64                       `protobuf:"varint,3,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	Scope         string                      `protobuf:"bytes,4,opt,name=scope,proto3" json:"scope,omitempty"`
	PublicKey     string                      `protobuf:"bytes,5,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	ValueHashes   []*SecureValueHash          `protobuf:"bytes,6,rep,name=value_hashes,json=valueHashes,proto3" json:"value_hashes,omitempty"`
	Credentials   *SecureCredentialsEncrypted `protobuf:"bytes,7,opt,name=credentials,proto3" json:"credentials,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountAcceptAuthorization) Reset() {
	*x = TLAccountAcceptAuthorization{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountAcceptAuthorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountAcceptAuthorization) ProtoMessage() {}

func (x *TLAccountAcceptAuthorization) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountAcceptAuthorization.ProtoReflect.Descriptor instead.
func (*TLAccountAcceptAuthorization) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{69}
}

func (x *TLAccountAcceptAuthorization) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountAcceptAuthorization) GetBotId() int64 {
	if x != nil {
		return x.BotId
	}
	return 0
}

func (x *TLAccountAcceptAuthorization) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *TLAccountAcceptAuthorization) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *TLAccountAcceptAuthorization) GetValueHashes() []*SecureValueHash {
	if x != nil {
		return x.ValueHashes
	}
	return nil
}

func (x *TLAccountAcceptAuthorization) GetCredentials() *SecureCredentialsEncrypted {
	if x != nil {
		return x.Credentials
	}
	return nil
}

type TLAccountSendVerifyPhoneCode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	PhoneNumber   string                 `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Settings      *CodeSettings          `protobuf:"bytes,4,opt,name=settings,proto3" json:"settings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountSendVerifyPhoneCode) Reset() {
	*x = TLAccountSendVerifyPhoneCode{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountSendVerifyPhoneCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountSendVerifyPhoneCode) ProtoMessage() {}

func (x *TLAccountSendVerifyPhoneCode) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountSendVerifyPhoneCode.ProtoReflect.Descriptor instead.
func (*TLAccountSendVerifyPhoneCode) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{70}
}

func (x *TLAccountSendVerifyPhoneCode) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountSendVerifyPhoneCode) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *TLAccountSendVerifyPhoneCode) GetSettings() *CodeSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type TLAccountVerifyPhone struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	PhoneNumber   string                 `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	PhoneCodeHash string                 `protobuf:"bytes,4,opt,name=phone_code_hash,json=phoneCodeHash,proto3" json:"phone_code_hash,omitempty"`
	PhoneCode     string                 `protobuf:"bytes,5,opt,name=phone_code,json=phoneCode,proto3" json:"phone_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountVerifyPhone) Reset() {
	*x = TLAccountVerifyPhone{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountVerifyPhone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountVerifyPhone) ProtoMessage() {}

func (x *TLAccountVerifyPhone) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountVerifyPhone.ProtoReflect.Descriptor instead.
func (*TLAccountVerifyPhone) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{71}
}

func (x *TLAccountVerifyPhone) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountVerifyPhone) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *TLAccountVerifyPhone) GetPhoneCodeHash() string {
	if x != nil {
		return x.PhoneCodeHash
	}
	return ""
}

func (x *TLAccountVerifyPhone) GetPhoneCode() string {
	if x != nil {
		return x.PhoneCode
	}
	return ""
}

type TLAccountSendVerifyEmailCode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Purpose       *EmailVerifyPurpose    `protobuf:"bytes,3,opt,name=purpose,proto3" json:"purpose,omitempty"`
	Email         string                 `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountSendVerifyEmailCode) Reset() {
	*x = TLAccountSendVerifyEmailCode{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountSendVerifyEmailCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountSendVerifyEmailCode) ProtoMessage() {}

func (x *TLAccountSendVerifyEmailCode) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountSendVerifyEmailCode.ProtoReflect.Descriptor instead.
func (*TLAccountSendVerifyEmailCode) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{72}
}

func (x *TLAccountSendVerifyEmailCode) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountSendVerifyEmailCode) GetPurpose() *EmailVerifyPurpose {
	if x != nil {
		return x.Purpose
	}
	return nil
}

func (x *TLAccountSendVerifyEmailCode) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type TLAccountVerifyEmail32DA4CF struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Purpose       *EmailVerifyPurpose    `protobuf:"bytes,3,opt,name=purpose,proto3" json:"purpose,omitempty"`
	Verification  *EmailVerification     `protobuf:"bytes,4,opt,name=verification,proto3" json:"verification,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountVerifyEmail32DA4CF) Reset() {
	*x = TLAccountVerifyEmail32DA4CF{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountVerifyEmail32DA4CF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountVerifyEmail32DA4CF) ProtoMessage() {}

func (x *TLAccountVerifyEmail32DA4CF) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountVerifyEmail32DA4CF.ProtoReflect.Descriptor instead.
func (*TLAccountVerifyEmail32DA4CF) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{73}
}

func (x *TLAccountVerifyEmail32DA4CF) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountVerifyEmail32DA4CF) GetPurpose() *EmailVerifyPurpose {
	if x != nil {
		return x.Purpose
	}
	return nil
}

func (x *TLAccountVerifyEmail32DA4CF) GetVerification() *EmailVerification {
	if x != nil {
		return x.Verification
	}
	return nil
}

type TLAccountInitTakeoutSession struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Constructor           TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Contacts              bool                   `protobuf:"varint,3,opt,name=contacts,proto3" json:"contacts,omitempty"`
	MessageUsers          bool                   `protobuf:"varint,4,opt,name=message_users,json=messageUsers,proto3" json:"message_users,omitempty"`
	MessageChats          bool                   `protobuf:"varint,5,opt,name=message_chats,json=messageChats,proto3" json:"message_chats,omitempty"`
	MessageMegagroups     bool                   `protobuf:"varint,6,opt,name=message_megagroups,json=messageMegagroups,proto3" json:"message_megagroups,omitempty"`
	MessageChannels       bool                   `protobuf:"varint,7,opt,name=message_channels,json=messageChannels,proto3" json:"message_channels,omitempty"`
	Files                 bool                   `protobuf:"varint,8,opt,name=files,proto3" json:"files,omitempty"`
	FileMaxSize_FLAGINT64 *wrapperspb.Int64Value `protobuf:"bytes,9,opt,name=file_max_size_FLAGINT64,json=fileMaxSizeFLAGINT64,proto3" json:"file_max_size_FLAGINT64,omitempty"`
	FileMaxSize_FLAGINT32 *wrapperspb.Int32Value `protobuf:"bytes,10,opt,name=file_max_size_FLAGINT32,json=fileMaxSizeFLAGINT32,proto3" json:"file_max_size_FLAGINT32,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *TLAccountInitTakeoutSession) Reset() {
	*x = TLAccountInitTakeoutSession{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountInitTakeoutSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountInitTakeoutSession) ProtoMessage() {}

func (x *TLAccountInitTakeoutSession) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountInitTakeoutSession.ProtoReflect.Descriptor instead.
func (*TLAccountInitTakeoutSession) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{74}
}

func (x *TLAccountInitTakeoutSession) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountInitTakeoutSession) GetContacts() bool {
	if x != nil {
		return x.Contacts
	}
	return false
}

func (x *TLAccountInitTakeoutSession) GetMessageUsers() bool {
	if x != nil {
		return x.MessageUsers
	}
	return false
}

func (x *TLAccountInitTakeoutSession) GetMessageChats() bool {
	if x != nil {
		return x.MessageChats
	}
	return false
}

func (x *TLAccountInitTakeoutSession) GetMessageMegagroups() bool {
	if x != nil {
		return x.MessageMegagroups
	}
	return false
}

func (x *TLAccountInitTakeoutSession) GetMessageChannels() bool {
	if x != nil {
		return x.MessageChannels
	}
	return false
}

func (x *TLAccountInitTakeoutSession) GetFiles() bool {
	if x != nil {
		return x.Files
	}
	return false
}

func (x *TLAccountInitTakeoutSession) GetFileMaxSize_FLAGINT64() *wrapperspb.Int64Value {
	if x != nil {
		return x.FileMaxSize_FLAGINT64
	}
	return nil
}

func (x *TLAccountInitTakeoutSession) GetFileMaxSize_FLAGINT32() *wrapperspb.Int32Value {
	if x != nil {
		return x.FileMaxSize_FLAGINT32
	}
	return nil
}

type TLAccountFinishTakeoutSession struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Success       bool                   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountFinishTakeoutSession) Reset() {
	*x = TLAccountFinishTakeoutSession{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountFinishTakeoutSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountFinishTakeoutSession) ProtoMessage() {}

func (x *TLAccountFinishTakeoutSession) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountFinishTakeoutSession.ProtoReflect.Descriptor instead.
func (*TLAccountFinishTakeoutSession) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{75}
}

func (x *TLAccountFinishTakeoutSession) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountFinishTakeoutSession) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type TLAccountConfirmPasswordEmail struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Code          string                 `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountConfirmPasswordEmail) Reset() {
	*x = TLAccountConfirmPasswordEmail{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountConfirmPasswordEmail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountConfirmPasswordEmail) ProtoMessage() {}

func (x *TLAccountConfirmPasswordEmail) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountConfirmPasswordEmail.ProtoReflect.Descriptor instead.
func (*TLAccountConfirmPasswordEmail) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{76}
}

func (x *TLAccountConfirmPasswordEmail) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountConfirmPasswordEmail) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type TLAccountResendPasswordEmail struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountResendPasswordEmail) Reset() {
	*x = TLAccountResendPasswordEmail{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountResendPasswordEmail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountResendPasswordEmail) ProtoMessage() {}

func (x *TLAccountResendPasswordEmail) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountResendPasswordEmail.ProtoReflect.Descriptor instead.
func (*TLAccountResendPasswordEmail) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{77}
}

func (x *TLAccountResendPasswordEmail) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLAccountCancelPasswordEmail struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountCancelPasswordEmail) Reset() {
	*x = TLAccountCancelPasswordEmail{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountCancelPasswordEmail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountCancelPasswordEmail) ProtoMessage() {}

func (x *TLAccountCancelPasswordEmail) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountCancelPasswordEmail.ProtoReflect.Descriptor instead.
func (*TLAccountCancelPasswordEmail) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{78}
}

func (x *TLAccountCancelPasswordEmail) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLAccountGetContactSignUpNotification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountGetContactSignUpNotification) Reset() {
	*x = TLAccountGetContactSignUpNotification{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountGetContactSignUpNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountGetContactSignUpNotification) ProtoMessage() {}

func (x *TLAccountGetContactSignUpNotification) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountGetContactSignUpNotification.ProtoReflect.Descriptor instead.
func (*TLAccountGetContactSignUpNotification) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{79}
}

func (x *TLAccountGetContactSignUpNotification) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLAccountSetContactSignUpNotification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Silent        *Bool                  `protobuf:"bytes,3,opt,name=silent,proto3" json:"silent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountSetContactSignUpNotification) Reset() {
	*x = TLAccountSetContactSignUpNotification{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountSetContactSignUpNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountSetContactSignUpNotification) ProtoMessage() {}

func (x *TLAccountSetContactSignUpNotification) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountSetContactSignUpNotification.ProtoReflect.Descriptor instead.
func (*TLAccountSetContactSignUpNotification) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{80}
}

func (x *TLAccountSetContactSignUpNotification) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountSetContactSignUpNotification) GetSilent() *Bool {
	if x != nil {
		return x.Silent
	}
	return nil
}

type TLAccountGetNotifyExceptions struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Constructor    TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	CompareSound   bool                   `protobuf:"varint,3,opt,name=compare_sound,json=compareSound,proto3" json:"compare_sound,omitempty"`
	CompareStories bool                   `protobuf:"varint,4,opt,name=compare_stories,json=compareStories,proto3" json:"compare_stories,omitempty"`
	Peer           *InputNotifyPeer       `protobuf:"bytes,5,opt,name=peer,proto3" json:"peer,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TLAccountGetNotifyExceptions) Reset() {
	*x = TLAccountGetNotifyExceptions{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountGetNotifyExceptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountGetNotifyExceptions) ProtoMessage() {}

func (x *TLAccountGetNotifyExceptions) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountGetNotifyExceptions.ProtoReflect.Descriptor instead.
func (*TLAccountGetNotifyExceptions) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{81}
}

func (x *TLAccountGetNotifyExceptions) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountGetNotifyExceptions) GetCompareSound() bool {
	if x != nil {
		return x.CompareSound
	}
	return false
}

func (x *TLAccountGetNotifyExceptions) GetCompareStories() bool {
	if x != nil {
		return x.CompareStories
	}
	return false
}

func (x *TLAccountGetNotifyExceptions) GetPeer() *InputNotifyPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

type TLAccountGetWallPaper struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Wallpaper     *InputWallPaper        `protobuf:"bytes,3,opt,name=wallpaper,proto3" json:"wallpaper,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountGetWallPaper) Reset() {
	*x = TLAccountGetWallPaper{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountGetWallPaper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountGetWallPaper) ProtoMessage() {}

func (x *TLAccountGetWallPaper) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountGetWallPaper.ProtoReflect.Descriptor instead.
func (*TLAccountGetWallPaper) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{82}
}

func (x *TLAccountGetWallPaper) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountGetWallPaper) GetWallpaper() *InputWallPaper {
	if x != nil {
		return x.Wallpaper
	}
	return nil
}

type TLAccountUploadWallPaper struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	ForChat       bool                   `protobuf:"varint,3,opt,name=for_chat,json=forChat,proto3" json:"for_chat,omitempty"`
	File          *InputFile             `protobuf:"bytes,4,opt,name=file,proto3" json:"file,omitempty"`
	MimeType      string                 `protobuf:"bytes,5,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	Settings      *WallPaperSettings     `protobuf:"bytes,6,opt,name=settings,proto3" json:"settings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountUploadWallPaper) Reset() {
	*x = TLAccountUploadWallPaper{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountUploadWallPaper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountUploadWallPaper) ProtoMessage() {}

func (x *TLAccountUploadWallPaper) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountUploadWallPaper.ProtoReflect.Descriptor instead.
func (*TLAccountUploadWallPaper) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{83}
}

func (x *TLAccountUploadWallPaper) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountUploadWallPaper) GetForChat() bool {
	if x != nil {
		return x.ForChat
	}
	return false
}

func (x *TLAccountUploadWallPaper) GetFile() *InputFile {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *TLAccountUploadWallPaper) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *TLAccountUploadWallPaper) GetSettings() *WallPaperSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type TLAccountSaveWallPaper struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Wallpaper     *InputWallPaper        `protobuf:"bytes,3,opt,name=wallpaper,proto3" json:"wallpaper,omitempty"`
	Unsave        *Bool                  `protobuf:"bytes,4,opt,name=unsave,proto3" json:"unsave,omitempty"`
	Settings      *WallPaperSettings     `protobuf:"bytes,5,opt,name=settings,proto3" json:"settings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountSaveWallPaper) Reset() {
	*x = TLAccountSaveWallPaper{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountSaveWallPaper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountSaveWallPaper) ProtoMessage() {}

func (x *TLAccountSaveWallPaper) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountSaveWallPaper.ProtoReflect.Descriptor instead.
func (*TLAccountSaveWallPaper) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{84}
}

func (x *TLAccountSaveWallPaper) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountSaveWallPaper) GetWallpaper() *InputWallPaper {
	if x != nil {
		return x.Wallpaper
	}
	return nil
}

func (x *TLAccountSaveWallPaper) GetUnsave() *Bool {
	if x != nil {
		return x.Unsave
	}
	return nil
}

func (x *TLAccountSaveWallPaper) GetSettings() *WallPaperSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type TLAccountInstallWallPaper struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Wallpaper     *InputWallPaper        `protobuf:"bytes,3,opt,name=wallpaper,proto3" json:"wallpaper,omitempty"`
	Settings      *WallPaperSettings     `protobuf:"bytes,4,opt,name=settings,proto3" json:"settings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountInstallWallPaper) Reset() {
	*x = TLAccountInstallWallPaper{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountInstallWallPaper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountInstallWallPaper) ProtoMessage() {}

func (x *TLAccountInstallWallPaper) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountInstallWallPaper.ProtoReflect.Descriptor instead.
func (*TLAccountInstallWallPaper) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{85}
}

func (x *TLAccountInstallWallPaper) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountInstallWallPaper) GetWallpaper() *InputWallPaper {
	if x != nil {
		return x.Wallpaper
	}
	return nil
}

func (x *TLAccountInstallWallPaper) GetSettings() *WallPaperSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type TLAccountResetWallPapers struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountResetWallPapers) Reset() {
	*x = TLAccountResetWallPapers{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountResetWallPapers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountResetWallPapers) ProtoMessage() {}

func (x *TLAccountResetWallPapers) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountResetWallPapers.ProtoReflect.Descriptor instead.
func (*TLAccountResetWallPapers) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{86}
}

func (x *TLAccountResetWallPapers) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLAccountGetAutoDownloadSettings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountGetAutoDownloadSettings) Reset() {
	*x = TLAccountGetAutoDownloadSettings{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountGetAutoDownloadSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountGetAutoDownloadSettings) ProtoMessage() {}

func (x *TLAccountGetAutoDownloadSettings) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountGetAutoDownloadSettings.ProtoReflect.Descriptor instead.
func (*TLAccountGetAutoDownloadSettings) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{87}
}

func (x *TLAccountGetAutoDownloadSettings) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLAccountSaveAutoDownloadSettings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Low           bool                   `protobuf:"varint,3,opt,name=low,proto3" json:"low,omitempty"`
	High          bool                   `protobuf:"varint,4,opt,name=high,proto3" json:"high,omitempty"`
	Settings      *AutoDownloadSettings  `protobuf:"bytes,5,opt,name=settings,proto3" json:"settings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountSaveAutoDownloadSettings) Reset() {
	*x = TLAccountSaveAutoDownloadSettings{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountSaveAutoDownloadSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountSaveAutoDownloadSettings) ProtoMessage() {}

func (x *TLAccountSaveAutoDownloadSettings) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountSaveAutoDownloadSettings.ProtoReflect.Descriptor instead.
func (*TLAccountSaveAutoDownloadSettings) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{88}
}

func (x *TLAccountSaveAutoDownloadSettings) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountSaveAutoDownloadSettings) GetLow() bool {
	if x != nil {
		return x.Low
	}
	return false
}

func (x *TLAccountSaveAutoDownloadSettings) GetHigh() bool {
	if x != nil {
		return x.High
	}
	return false
}

func (x *TLAccountSaveAutoDownloadSettings) GetSettings() *AutoDownloadSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type TLAccountUploadTheme struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	File          *InputFile             `protobuf:"bytes,3,opt,name=file,proto3" json:"file,omitempty"`
	Thumb         *InputFile             `protobuf:"bytes,4,opt,name=thumb,proto3" json:"thumb,omitempty"`
	FileName      string                 `protobuf:"bytes,5,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	MimeType      string                 `protobuf:"bytes,6,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountUploadTheme) Reset() {
	*x = TLAccountUploadTheme{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountUploadTheme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountUploadTheme) ProtoMessage() {}

func (x *TLAccountUploadTheme) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountUploadTheme.ProtoReflect.Descriptor instead.
func (*TLAccountUploadTheme) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{89}
}

func (x *TLAccountUploadTheme) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountUploadTheme) GetFile() *InputFile {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *TLAccountUploadTheme) GetThumb() *InputFile {
	if x != nil {
		return x.Thumb
	}
	return nil
}

func (x *TLAccountUploadTheme) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *TLAccountUploadTheme) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

type TLAccountCreateTheme struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Slug          string                 `protobuf:"bytes,3,opt,name=slug,proto3" json:"slug,omitempty"`
	Title         string                 `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Document      *InputDocument         `protobuf:"bytes,5,opt,name=document,proto3" json:"document,omitempty"`
	Settings      []*InputThemeSettings  `protobuf:"bytes,6,rep,name=settings,proto3" json:"settings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountCreateTheme) Reset() {
	*x = TLAccountCreateTheme{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountCreateTheme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountCreateTheme) ProtoMessage() {}

func (x *TLAccountCreateTheme) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountCreateTheme.ProtoReflect.Descriptor instead.
func (*TLAccountCreateTheme) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{90}
}

func (x *TLAccountCreateTheme) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountCreateTheme) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *TLAccountCreateTheme) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TLAccountCreateTheme) GetDocument() *InputDocument {
	if x != nil {
		return x.Document
	}
	return nil
}

func (x *TLAccountCreateTheme) GetSettings() []*InputThemeSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type TLAccountUpdateTheme struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Constructor   TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Format        string                  `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
	Theme         *InputTheme             `protobuf:"bytes,4,opt,name=theme,proto3" json:"theme,omitempty"`
	Slug          *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=slug,proto3" json:"slug,omitempty"`
	Title         *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	Document      *InputDocument          `protobuf:"bytes,7,opt,name=document,proto3" json:"document,omitempty"`
	Settings      []*InputThemeSettings   `protobuf:"bytes,8,rep,name=settings,proto3" json:"settings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountUpdateTheme) Reset() {
	*x = TLAccountUpdateTheme{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountUpdateTheme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountUpdateTheme) ProtoMessage() {}

func (x *TLAccountUpdateTheme) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountUpdateTheme.ProtoReflect.Descriptor instead.
func (*TLAccountUpdateTheme) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{91}
}

func (x *TLAccountUpdateTheme) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountUpdateTheme) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *TLAccountUpdateTheme) GetTheme() *InputTheme {
	if x != nil {
		return x.Theme
	}
	return nil
}

func (x *TLAccountUpdateTheme) GetSlug() *wrapperspb.StringValue {
	if x != nil {
		return x.Slug
	}
	return nil
}

func (x *TLAccountUpdateTheme) GetTitle() *wrapperspb.StringValue {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *TLAccountUpdateTheme) GetDocument() *InputDocument {
	if x != nil {
		return x.Document
	}
	return nil
}

func (x *TLAccountUpdateTheme) GetSettings() []*InputThemeSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type TLAccountSaveTheme struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Theme         *InputTheme            `protobuf:"bytes,3,opt,name=theme,proto3" json:"theme,omitempty"`
	Unsave        *Bool                  `protobuf:"bytes,4,opt,name=unsave,proto3" json:"unsave,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountSaveTheme) Reset() {
	*x = TLAccountSaveTheme{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountSaveTheme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountSaveTheme) ProtoMessage() {}

func (x *TLAccountSaveTheme) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountSaveTheme.ProtoReflect.Descriptor instead.
func (*TLAccountSaveTheme) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{92}
}

func (x *TLAccountSaveTheme) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountSaveTheme) GetTheme() *InputTheme {
	if x != nil {
		return x.Theme
	}
	return nil
}

func (x *TLAccountSaveTheme) GetUnsave() *Bool {
	if x != nil {
		return x.Unsave
	}
	return nil
}

type TLAccountInstallTheme struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Constructor   TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Dark          bool                    `protobuf:"varint,3,opt,name=dark,proto3" json:"dark,omitempty"`
	Theme         *InputTheme             `protobuf:"bytes,4,opt,name=theme,proto3" json:"theme,omitempty"`
	Format        *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=format,proto3" json:"format,omitempty"`
	BaseTheme     *BaseTheme              `protobuf:"bytes,6,opt,name=base_theme,json=baseTheme,proto3" json:"base_theme,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountInstallTheme) Reset() {
	*x = TLAccountInstallTheme{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountInstallTheme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountInstallTheme) ProtoMessage() {}

func (x *TLAccountInstallTheme) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountInstallTheme.ProtoReflect.Descriptor instead.
func (*TLAccountInstallTheme) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{93}
}

func (x *TLAccountInstallTheme) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountInstallTheme) GetDark() bool {
	if x != nil {
		return x.Dark
	}
	return false
}

func (x *TLAccountInstallTheme) GetTheme() *InputTheme {
	if x != nil {
		return x.Theme
	}
	return nil
}

func (x *TLAccountInstallTheme) GetFormat() *wrapperspb.StringValue {
	if x != nil {
		return x.Format
	}
	return nil
}

func (x *TLAccountInstallTheme) GetBaseTheme() *BaseTheme {
	if x != nil {
		return x.BaseTheme
	}
	return nil
}

type TLAccountGetTheme struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Format        string                 `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
	Theme         *InputTheme            `protobuf:"bytes,4,opt,name=theme,proto3" json:"theme,omitempty"`
	DocumentId    int64                  `protobuf:"varint,5,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountGetTheme) Reset() {
	*x = TLAccountGetTheme{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountGetTheme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountGetTheme) ProtoMessage() {}

func (x *TLAccountGetTheme) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountGetTheme.ProtoReflect.Descriptor instead.
func (*TLAccountGetTheme) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{94}
}

func (x *TLAccountGetTheme) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountGetTheme) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *TLAccountGetTheme) GetTheme() *InputTheme {
	if x != nil {
		return x.Theme
	}
	return nil
}

func (x *TLAccountGetTheme) GetDocumentId() int64 {
	if x != nil {
		return x.DocumentId
	}
	return 0
}

type TLAccountGetThemes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Format        string                 `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
	Hash          int64                  `protobuf:"varint,4,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountGetThemes) Reset() {
	*x = TLAccountGetThemes{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountGetThemes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountGetThemes) ProtoMessage() {}

func (x *TLAccountGetThemes) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountGetThemes.ProtoReflect.Descriptor instead.
func (*TLAccountGetThemes) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{95}
}

func (x *TLAccountGetThemes) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountGetThemes) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *TLAccountGetThemes) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLAccountSetContentSettings struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Constructor      TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	SensitiveEnabled bool                   `protobuf:"varint,3,opt,name=sensitive_enabled,json=sensitiveEnabled,proto3" json:"sensitive_enabled,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TLAccountSetContentSettings) Reset() {
	*x = TLAccountSetContentSettings{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountSetContentSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountSetContentSettings) ProtoMessage() {}

func (x *TLAccountSetContentSettings) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountSetContentSettings.ProtoReflect.Descriptor instead.
func (*TLAccountSetContentSettings) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{96}
}

func (x *TLAccountSetContentSettings) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountSetContentSettings) GetSensitiveEnabled() bool {
	if x != nil {
		return x.SensitiveEnabled
	}
	return false
}

type TLAccountGetContentSettings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountGetContentSettings) Reset() {
	*x = TLAccountGetContentSettings{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountGetContentSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountGetContentSettings) ProtoMessage() {}

func (x *TLAccountGetContentSettings) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountGetContentSettings.ProtoReflect.Descriptor instead.
func (*TLAccountGetContentSettings) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{97}
}

func (x *TLAccountGetContentSettings) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLAccountGetMultiWallPapers struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Wallpapers    []*InputWallPaper      `protobuf:"bytes,3,rep,name=wallpapers,proto3" json:"wallpapers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountGetMultiWallPapers) Reset() {
	*x = TLAccountGetMultiWallPapers{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountGetMultiWallPapers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountGetMultiWallPapers) ProtoMessage() {}

func (x *TLAccountGetMultiWallPapers) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountGetMultiWallPapers.ProtoReflect.Descriptor instead.
func (*TLAccountGetMultiWallPapers) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{98}
}

func (x *TLAccountGetMultiWallPapers) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountGetMultiWallPapers) GetWallpapers() []*InputWallPaper {
	if x != nil {
		return x.Wallpapers
	}
	return nil
}

type TLAccountGetGlobalPrivacySettings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountGetGlobalPrivacySettings) Reset() {
	*x = TLAccountGetGlobalPrivacySettings{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountGetGlobalPrivacySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountGetGlobalPrivacySettings) ProtoMessage() {}

func (x *TLAccountGetGlobalPrivacySettings) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountGetGlobalPrivacySettings.ProtoReflect.Descriptor instead.
func (*TLAccountGetGlobalPrivacySettings) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{99}
}

func (x *TLAccountGetGlobalPrivacySettings) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLAccountSetGlobalPrivacySettings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Settings      *GlobalPrivacySettings `protobuf:"bytes,3,opt,name=settings,proto3" json:"settings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountSetGlobalPrivacySettings) Reset() {
	*x = TLAccountSetGlobalPrivacySettings{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountSetGlobalPrivacySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountSetGlobalPrivacySettings) ProtoMessage() {}

func (x *TLAccountSetGlobalPrivacySettings) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountSetGlobalPrivacySettings.ProtoReflect.Descriptor instead.
func (*TLAccountSetGlobalPrivacySettings) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{100}
}

func (x *TLAccountSetGlobalPrivacySettings) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountSetGlobalPrivacySettings) GetSettings() *GlobalPrivacySettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type TLAccountReportProfilePhoto struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	PhotoId       *InputPhoto            `protobuf:"bytes,4,opt,name=photo_id,json=photoId,proto3" json:"photo_id,omitempty"`
	Reason        *ReportReason          `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	Message       string                 `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountReportProfilePhoto) Reset() {
	*x = TLAccountReportProfilePhoto{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountReportProfilePhoto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountReportProfilePhoto) ProtoMessage() {}

func (x *TLAccountReportProfilePhoto) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountReportProfilePhoto.ProtoReflect.Descriptor instead.
func (*TLAccountReportProfilePhoto) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{101}
}

func (x *TLAccountReportProfilePhoto) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountReportProfilePhoto) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLAccountReportProfilePhoto) GetPhotoId() *InputPhoto {
	if x != nil {
		return x.PhotoId
	}
	return nil
}

func (x *TLAccountReportProfilePhoto) GetReason() *ReportReason {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *TLAccountReportProfilePhoto) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type TLAccountResetPassword struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountResetPassword) Reset() {
	*x = TLAccountResetPassword{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountResetPassword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountResetPassword) ProtoMessage() {}

func (x *TLAccountResetPassword) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountResetPassword.ProtoReflect.Descriptor instead.
func (*TLAccountResetPassword) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{102}
}

func (x *TLAccountResetPassword) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLAccountDeclinePasswordReset struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountDeclinePasswordReset) Reset() {
	*x = TLAccountDeclinePasswordReset{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountDeclinePasswordReset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountDeclinePasswordReset) ProtoMessage() {}

func (x *TLAccountDeclinePasswordReset) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountDeclinePasswordReset.ProtoReflect.Descriptor instead.
func (*TLAccountDeclinePasswordReset) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{103}
}

func (x *TLAccountDeclinePasswordReset) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLAccountGetChatThemes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Hash          int64                  `protobuf:"varint,3,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountGetChatThemes) Reset() {
	*x = TLAccountGetChatThemes{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountGetChatThemes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountGetChatThemes) ProtoMessage() {}

func (x *TLAccountGetChatThemes) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountGetChatThemes.ProtoReflect.Descriptor instead.
func (*TLAccountGetChatThemes) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{104}
}

func (x *TLAccountGetChatThemes) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountGetChatThemes) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLAccountSetAuthorizationTTL struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Constructor          TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	AuthorizationTtlDays int32                  `protobuf:"varint,3,opt,name=authorization_ttl_days,json=authorizationTtlDays,proto3" json:"authorization_ttl_days,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *TLAccountSetAuthorizationTTL) Reset() {
	*x = TLAccountSetAuthorizationTTL{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountSetAuthorizationTTL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountSetAuthorizationTTL) ProtoMessage() {}

func (x *TLAccountSetAuthorizationTTL) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountSetAuthorizationTTL.ProtoReflect.Descriptor instead.
func (*TLAccountSetAuthorizationTTL) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{105}
}

func (x *TLAccountSetAuthorizationTTL) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountSetAuthorizationTTL) GetAuthorizationTtlDays() int32 {
	if x != nil {
		return x.AuthorizationTtlDays
	}
	return 0
}

type TLAccountChangeAuthorizationSettings struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	Constructor               TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Confirmed                 bool                   `protobuf:"varint,3,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
	Hash                      int64                  `protobuf:"varint,4,opt,name=hash,proto3" json:"hash,omitempty"`
	EncryptedRequestsDisabled *Bool                  `protobuf:"bytes,5,opt,name=encrypted_requests_disabled,json=encryptedRequestsDisabled,proto3" json:"encrypted_requests_disabled,omitempty"`
	CallRequestsDisabled      *Bool                  `protobuf:"bytes,6,opt,name=call_requests_disabled,json=callRequestsDisabled,proto3" json:"call_requests_disabled,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *TLAccountChangeAuthorizationSettings) Reset() {
	*x = TLAccountChangeAuthorizationSettings{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountChangeAuthorizationSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountChangeAuthorizationSettings) ProtoMessage() {}

func (x *TLAccountChangeAuthorizationSettings) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountChangeAuthorizationSettings.ProtoReflect.Descriptor instead.
func (*TLAccountChangeAuthorizationSettings) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{106}
}

func (x *TLAccountChangeAuthorizationSettings) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountChangeAuthorizationSettings) GetConfirmed() bool {
	if x != nil {
		return x.Confirmed
	}
	return false
}

func (x *TLAccountChangeAuthorizationSettings) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *TLAccountChangeAuthorizationSettings) GetEncryptedRequestsDisabled() *Bool {
	if x != nil {
		return x.EncryptedRequestsDisabled
	}
	return nil
}

func (x *TLAccountChangeAuthorizationSettings) GetCallRequestsDisabled() *Bool {
	if x != nil {
		return x.CallRequestsDisabled
	}
	return nil
}

type TLAccountGetSavedRingtones struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Hash          int64                  `protobuf:"varint,3,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountGetSavedRingtones) Reset() {
	*x = TLAccountGetSavedRingtones{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountGetSavedRingtones) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountGetSavedRingtones) ProtoMessage() {}

func (x *TLAccountGetSavedRingtones) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountGetSavedRingtones.ProtoReflect.Descriptor instead.
func (*TLAccountGetSavedRingtones) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{107}
}

func (x *TLAccountGetSavedRingtones) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountGetSavedRingtones) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLAccountSaveRingtone struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Id            *InputDocument         `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Unsave        *Bool                  `protobuf:"bytes,4,opt,name=unsave,proto3" json:"unsave,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountSaveRingtone) Reset() {
	*x = TLAccountSaveRingtone{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountSaveRingtone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountSaveRingtone) ProtoMessage() {}

func (x *TLAccountSaveRingtone) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountSaveRingtone.ProtoReflect.Descriptor instead.
func (*TLAccountSaveRingtone) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{108}
}

func (x *TLAccountSaveRingtone) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountSaveRingtone) GetId() *InputDocument {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TLAccountSaveRingtone) GetUnsave() *Bool {
	if x != nil {
		return x.Unsave
	}
	return nil
}

type TLAccountUploadRingtone struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	File          *InputFile             `protobuf:"bytes,3,opt,name=file,proto3" json:"file,omitempty"`
	FileName      string                 `protobuf:"bytes,4,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	MimeType      string                 `protobuf:"bytes,5,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountUploadRingtone) Reset() {
	*x = TLAccountUploadRingtone{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountUploadRingtone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountUploadRingtone) ProtoMessage() {}

func (x *TLAccountUploadRingtone) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountUploadRingtone.ProtoReflect.Descriptor instead.
func (*TLAccountUploadRingtone) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{109}
}

func (x *TLAccountUploadRingtone) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountUploadRingtone) GetFile() *InputFile {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *TLAccountUploadRingtone) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *TLAccountUploadRingtone) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

type TLAccountUpdateEmojiStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	EmojiStatus   *EmojiStatus           `protobuf:"bytes,3,opt,name=emoji_status,json=emojiStatus,proto3" json:"emoji_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountUpdateEmojiStatus) Reset() {
	*x = TLAccountUpdateEmojiStatus{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountUpdateEmojiStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountUpdateEmojiStatus) ProtoMessage() {}

func (x *TLAccountUpdateEmojiStatus) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountUpdateEmojiStatus.ProtoReflect.Descriptor instead.
func (*TLAccountUpdateEmojiStatus) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{110}
}

func (x *TLAccountUpdateEmojiStatus) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountUpdateEmojiStatus) GetEmojiStatus() *EmojiStatus {
	if x != nil {
		return x.EmojiStatus
	}
	return nil
}

type TLAccountGetDefaultEmojiStatuses struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Hash          int64                  `protobuf:"varint,3,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountGetDefaultEmojiStatuses) Reset() {
	*x = TLAccountGetDefaultEmojiStatuses{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountGetDefaultEmojiStatuses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountGetDefaultEmojiStatuses) ProtoMessage() {}

func (x *TLAccountGetDefaultEmojiStatuses) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountGetDefaultEmojiStatuses.ProtoReflect.Descriptor instead.
func (*TLAccountGetDefaultEmojiStatuses) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{111}
}

func (x *TLAccountGetDefaultEmojiStatuses) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountGetDefaultEmojiStatuses) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLAccountGetRecentEmojiStatuses struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Hash          int64                  `protobuf:"varint,3,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountGetRecentEmojiStatuses) Reset() {
	*x = TLAccountGetRecentEmojiStatuses{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountGetRecentEmojiStatuses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountGetRecentEmojiStatuses) ProtoMessage() {}

func (x *TLAccountGetRecentEmojiStatuses) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountGetRecentEmojiStatuses.ProtoReflect.Descriptor instead.
func (*TLAccountGetRecentEmojiStatuses) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{112}
}

func (x *TLAccountGetRecentEmojiStatuses) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountGetRecentEmojiStatuses) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLAccountClearRecentEmojiStatuses struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountClearRecentEmojiStatuses) Reset() {
	*x = TLAccountClearRecentEmojiStatuses{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountClearRecentEmojiStatuses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountClearRecentEmojiStatuses) ProtoMessage() {}

func (x *TLAccountClearRecentEmojiStatuses) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountClearRecentEmojiStatuses.ProtoReflect.Descriptor instead.
func (*TLAccountClearRecentEmojiStatuses) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{113}
}

func (x *TLAccountClearRecentEmojiStatuses) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLAccountReorderUsernames struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Order         []string               `protobuf:"bytes,3,rep,name=order,proto3" json:"order,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountReorderUsernames) Reset() {
	*x = TLAccountReorderUsernames{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountReorderUsernames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountReorderUsernames) ProtoMessage() {}

func (x *TLAccountReorderUsernames) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountReorderUsernames.ProtoReflect.Descriptor instead.
func (*TLAccountReorderUsernames) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{114}
}

func (x *TLAccountReorderUsernames) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountReorderUsernames) GetOrder() []string {
	if x != nil {
		return x.Order
	}
	return nil
}

type TLAccountToggleUsername struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Username      string                 `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	Active        *Bool                  `protobuf:"bytes,4,opt,name=active,proto3" json:"active,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountToggleUsername) Reset() {
	*x = TLAccountToggleUsername{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountToggleUsername) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountToggleUsername) ProtoMessage() {}

func (x *TLAccountToggleUsername) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountToggleUsername.ProtoReflect.Descriptor instead.
func (*TLAccountToggleUsername) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{115}
}

func (x *TLAccountToggleUsername) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountToggleUsername) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *TLAccountToggleUsername) GetActive() *Bool {
	if x != nil {
		return x.Active
	}
	return nil
}

type TLAccountGetDefaultProfilePhotoEmojis struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Hash          int64                  `protobuf:"varint,3,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountGetDefaultProfilePhotoEmojis) Reset() {
	*x = TLAccountGetDefaultProfilePhotoEmojis{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[116]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountGetDefaultProfilePhotoEmojis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountGetDefaultProfilePhotoEmojis) ProtoMessage() {}

func (x *TLAccountGetDefaultProfilePhotoEmojis) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[116]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountGetDefaultProfilePhotoEmojis.ProtoReflect.Descriptor instead.
func (*TLAccountGetDefaultProfilePhotoEmojis) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{116}
}

func (x *TLAccountGetDefaultProfilePhotoEmojis) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountGetDefaultProfilePhotoEmojis) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLAccountGetDefaultGroupPhotoEmojis struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Hash          int64                  `protobuf:"varint,3,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountGetDefaultGroupPhotoEmojis) Reset() {
	*x = TLAccountGetDefaultGroupPhotoEmojis{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[117]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountGetDefaultGroupPhotoEmojis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountGetDefaultGroupPhotoEmojis) ProtoMessage() {}

func (x *TLAccountGetDefaultGroupPhotoEmojis) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[117]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountGetDefaultGroupPhotoEmojis.ProtoReflect.Descriptor instead.
func (*TLAccountGetDefaultGroupPhotoEmojis) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{117}
}

func (x *TLAccountGetDefaultGroupPhotoEmojis) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountGetDefaultGroupPhotoEmojis) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLAccountGetAutoSaveSettings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountGetAutoSaveSettings) Reset() {
	*x = TLAccountGetAutoSaveSettings{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[118]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountGetAutoSaveSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountGetAutoSaveSettings) ProtoMessage() {}

func (x *TLAccountGetAutoSaveSettings) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[118]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountGetAutoSaveSettings.ProtoReflect.Descriptor instead.
func (*TLAccountGetAutoSaveSettings) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{118}
}

func (x *TLAccountGetAutoSaveSettings) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLAccountSaveAutoSaveSettings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Users         bool                   `protobuf:"varint,3,opt,name=users,proto3" json:"users,omitempty"`
	Chats         bool                   `protobuf:"varint,4,opt,name=chats,proto3" json:"chats,omitempty"`
	Broadcasts    bool                   `protobuf:"varint,5,opt,name=broadcasts,proto3" json:"broadcasts,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,6,opt,name=peer,proto3" json:"peer,omitempty"`
	Settings      *AutoSaveSettings      `protobuf:"bytes,7,opt,name=settings,proto3" json:"settings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountSaveAutoSaveSettings) Reset() {
	*x = TLAccountSaveAutoSaveSettings{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[119]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountSaveAutoSaveSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountSaveAutoSaveSettings) ProtoMessage() {}

func (x *TLAccountSaveAutoSaveSettings) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[119]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountSaveAutoSaveSettings.ProtoReflect.Descriptor instead.
func (*TLAccountSaveAutoSaveSettings) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{119}
}

func (x *TLAccountSaveAutoSaveSettings) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountSaveAutoSaveSettings) GetUsers() bool {
	if x != nil {
		return x.Users
	}
	return false
}

func (x *TLAccountSaveAutoSaveSettings) GetChats() bool {
	if x != nil {
		return x.Chats
	}
	return false
}

func (x *TLAccountSaveAutoSaveSettings) GetBroadcasts() bool {
	if x != nil {
		return x.Broadcasts
	}
	return false
}

func (x *TLAccountSaveAutoSaveSettings) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLAccountSaveAutoSaveSettings) GetSettings() *AutoSaveSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type TLAccountDeleteAutoSaveExceptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountDeleteAutoSaveExceptions) Reset() {
	*x = TLAccountDeleteAutoSaveExceptions{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[120]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountDeleteAutoSaveExceptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountDeleteAutoSaveExceptions) ProtoMessage() {}

func (x *TLAccountDeleteAutoSaveExceptions) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[120]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountDeleteAutoSaveExceptions.ProtoReflect.Descriptor instead.
func (*TLAccountDeleteAutoSaveExceptions) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{120}
}

func (x *TLAccountDeleteAutoSaveExceptions) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLAccountInvalidateSignInCodes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Codes         []string               `protobuf:"bytes,3,rep,name=codes,proto3" json:"codes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountInvalidateSignInCodes) Reset() {
	*x = TLAccountInvalidateSignInCodes{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[121]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountInvalidateSignInCodes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountInvalidateSignInCodes) ProtoMessage() {}

func (x *TLAccountInvalidateSignInCodes) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[121]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountInvalidateSignInCodes.ProtoReflect.Descriptor instead.
func (*TLAccountInvalidateSignInCodes) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{121}
}

func (x *TLAccountInvalidateSignInCodes) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountInvalidateSignInCodes) GetCodes() []string {
	if x != nil {
		return x.Codes
	}
	return nil
}

type TLAccountUpdateColor struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Constructor       TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	ForProfile        bool                   `protobuf:"varint,3,opt,name=for_profile,json=forProfile,proto3" json:"for_profile,omitempty"`
	Color_FLAGINT32   *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=color_FLAGINT32,json=colorFLAGINT32,proto3" json:"color_FLAGINT32,omitempty"`
	BackgroundEmojiId *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=background_emoji_id,json=backgroundEmojiId,proto3" json:"background_emoji_id,omitempty"`
	Color_INT32       int32                  `protobuf:"varint,6,opt,name=color_INT32,json=colorINT32,proto3" json:"color_INT32,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TLAccountUpdateColor) Reset() {
	*x = TLAccountUpdateColor{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[122]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountUpdateColor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountUpdateColor) ProtoMessage() {}

func (x *TLAccountUpdateColor) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[122]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountUpdateColor.ProtoReflect.Descriptor instead.
func (*TLAccountUpdateColor) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{122}
}

func (x *TLAccountUpdateColor) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountUpdateColor) GetForProfile() bool {
	if x != nil {
		return x.ForProfile
	}
	return false
}

func (x *TLAccountUpdateColor) GetColor_FLAGINT32() *wrapperspb.Int32Value {
	if x != nil {
		return x.Color_FLAGINT32
	}
	return nil
}

func (x *TLAccountUpdateColor) GetBackgroundEmojiId() *wrapperspb.Int64Value {
	if x != nil {
		return x.BackgroundEmojiId
	}
	return nil
}

func (x *TLAccountUpdateColor) GetColor_INT32() int32 {
	if x != nil {
		return x.Color_INT32
	}
	return 0
}

type TLAccountGetDefaultBackgroundEmojis struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Hash          int64                  `protobuf:"varint,3,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountGetDefaultBackgroundEmojis) Reset() {
	*x = TLAccountGetDefaultBackgroundEmojis{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[123]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountGetDefaultBackgroundEmojis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountGetDefaultBackgroundEmojis) ProtoMessage() {}

func (x *TLAccountGetDefaultBackgroundEmojis) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[123]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountGetDefaultBackgroundEmojis.ProtoReflect.Descriptor instead.
func (*TLAccountGetDefaultBackgroundEmojis) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{123}
}

func (x *TLAccountGetDefaultBackgroundEmojis) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountGetDefaultBackgroundEmojis) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLAccountGetChannelDefaultEmojiStatuses struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Hash          int64                  `protobuf:"varint,3,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountGetChannelDefaultEmojiStatuses) Reset() {
	*x = TLAccountGetChannelDefaultEmojiStatuses{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[124]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountGetChannelDefaultEmojiStatuses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountGetChannelDefaultEmojiStatuses) ProtoMessage() {}

func (x *TLAccountGetChannelDefaultEmojiStatuses) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[124]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountGetChannelDefaultEmojiStatuses.ProtoReflect.Descriptor instead.
func (*TLAccountGetChannelDefaultEmojiStatuses) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{124}
}

func (x *TLAccountGetChannelDefaultEmojiStatuses) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountGetChannelDefaultEmojiStatuses) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLAccountGetChannelRestrictedStatusEmojis struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Hash          int64                  `protobuf:"varint,3,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountGetChannelRestrictedStatusEmojis) Reset() {
	*x = TLAccountGetChannelRestrictedStatusEmojis{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[125]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountGetChannelRestrictedStatusEmojis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountGetChannelRestrictedStatusEmojis) ProtoMessage() {}

func (x *TLAccountGetChannelRestrictedStatusEmojis) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[125]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountGetChannelRestrictedStatusEmojis.ProtoReflect.Descriptor instead.
func (*TLAccountGetChannelRestrictedStatusEmojis) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{125}
}

func (x *TLAccountGetChannelRestrictedStatusEmojis) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountGetChannelRestrictedStatusEmojis) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLAccountUpdateBusinessWorkHours struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Constructor       TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	BusinessWorkHours *BusinessWorkHours     `protobuf:"bytes,3,opt,name=business_work_hours,json=businessWorkHours,proto3" json:"business_work_hours,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TLAccountUpdateBusinessWorkHours) Reset() {
	*x = TLAccountUpdateBusinessWorkHours{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[126]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountUpdateBusinessWorkHours) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountUpdateBusinessWorkHours) ProtoMessage() {}

func (x *TLAccountUpdateBusinessWorkHours) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[126]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountUpdateBusinessWorkHours.ProtoReflect.Descriptor instead.
func (*TLAccountUpdateBusinessWorkHours) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{126}
}

func (x *TLAccountUpdateBusinessWorkHours) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountUpdateBusinessWorkHours) GetBusinessWorkHours() *BusinessWorkHours {
	if x != nil {
		return x.BusinessWorkHours
	}
	return nil
}

type TLAccountUpdateBusinessLocation struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Constructor   TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	GeoPoint      *InputGeoPoint          `protobuf:"bytes,3,opt,name=geo_point,json=geoPoint,proto3" json:"geo_point,omitempty"`
	Address       *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountUpdateBusinessLocation) Reset() {
	*x = TLAccountUpdateBusinessLocation{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[127]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountUpdateBusinessLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountUpdateBusinessLocation) ProtoMessage() {}

func (x *TLAccountUpdateBusinessLocation) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[127]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountUpdateBusinessLocation.ProtoReflect.Descriptor instead.
func (*TLAccountUpdateBusinessLocation) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{127}
}

func (x *TLAccountUpdateBusinessLocation) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountUpdateBusinessLocation) GetGeoPoint() *InputGeoPoint {
	if x != nil {
		return x.GeoPoint
	}
	return nil
}

func (x *TLAccountUpdateBusinessLocation) GetAddress() *wrapperspb.StringValue {
	if x != nil {
		return x.Address
	}
	return nil
}

type TLAccountUpdateBusinessGreetingMessage struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Constructor   TLConstructor                 `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Message       *InputBusinessGreetingMessage `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountUpdateBusinessGreetingMessage) Reset() {
	*x = TLAccountUpdateBusinessGreetingMessage{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[128]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountUpdateBusinessGreetingMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountUpdateBusinessGreetingMessage) ProtoMessage() {}

func (x *TLAccountUpdateBusinessGreetingMessage) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[128]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountUpdateBusinessGreetingMessage.ProtoReflect.Descriptor instead.
func (*TLAccountUpdateBusinessGreetingMessage) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{128}
}

func (x *TLAccountUpdateBusinessGreetingMessage) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountUpdateBusinessGreetingMessage) GetMessage() *InputBusinessGreetingMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type TLAccountUpdateBusinessAwayMessage struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Constructor   TLConstructor             `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Message       *InputBusinessAwayMessage `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountUpdateBusinessAwayMessage) Reset() {
	*x = TLAccountUpdateBusinessAwayMessage{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[129]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountUpdateBusinessAwayMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountUpdateBusinessAwayMessage) ProtoMessage() {}

func (x *TLAccountUpdateBusinessAwayMessage) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[129]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountUpdateBusinessAwayMessage.ProtoReflect.Descriptor instead.
func (*TLAccountUpdateBusinessAwayMessage) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{129}
}

func (x *TLAccountUpdateBusinessAwayMessage) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountUpdateBusinessAwayMessage) GetMessage() *InputBusinessAwayMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type TLAccountUpdateConnectedBot struct {
	state                                 protoimpl.MessageState      `protogen:"open.v1"`
	Constructor                           TLConstructor               `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Deleted                               bool                        `protobuf:"varint,3,opt,name=deleted,proto3" json:"deleted,omitempty"`
	Rights                                *BusinessBotRights          `protobuf:"bytes,4,opt,name=rights,proto3" json:"rights,omitempty"`
	Bot                                   *InputUser                  `protobuf:"bytes,5,opt,name=bot,proto3" json:"bot,omitempty"`
	Recipients_INPUTBUSINESSBOTRECIPIENTS *InputBusinessBotRecipients `protobuf:"bytes,6,opt,name=recipients_INPUTBUSINESSBOTRECIPIENTS,json=recipientsINPUTBUSINESSBOTRECIPIENTS,proto3" json:"recipients_INPUTBUSINESSBOTRECIPIENTS,omitempty"`
	CanReply                              bool                        `protobuf:"varint,7,opt,name=can_reply,json=canReply,proto3" json:"can_reply,omitempty"`
	Recipients_INPUTBUSINESSRECIPIENTS    *InputBusinessRecipients    `protobuf:"bytes,8,opt,name=recipients_INPUTBUSINESSRECIPIENTS,json=recipientsINPUTBUSINESSRECIPIENTS,proto3" json:"recipients_INPUTBUSINESSRECIPIENTS,omitempty"`
	unknownFields                         protoimpl.UnknownFields
	sizeCache                             protoimpl.SizeCache
}

func (x *TLAccountUpdateConnectedBot) Reset() {
	*x = TLAccountUpdateConnectedBot{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[130]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountUpdateConnectedBot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountUpdateConnectedBot) ProtoMessage() {}

func (x *TLAccountUpdateConnectedBot) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[130]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountUpdateConnectedBot.ProtoReflect.Descriptor instead.
func (*TLAccountUpdateConnectedBot) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{130}
}

func (x *TLAccountUpdateConnectedBot) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountUpdateConnectedBot) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

func (x *TLAccountUpdateConnectedBot) GetRights() *BusinessBotRights {
	if x != nil {
		return x.Rights
	}
	return nil
}

func (x *TLAccountUpdateConnectedBot) GetBot() *InputUser {
	if x != nil {
		return x.Bot
	}
	return nil
}

func (x *TLAccountUpdateConnectedBot) GetRecipients_INPUTBUSINESSBOTRECIPIENTS() *InputBusinessBotRecipients {
	if x != nil {
		return x.Recipients_INPUTBUSINESSBOTRECIPIENTS
	}
	return nil
}

func (x *TLAccountUpdateConnectedBot) GetCanReply() bool {
	if x != nil {
		return x.CanReply
	}
	return false
}

func (x *TLAccountUpdateConnectedBot) GetRecipients_INPUTBUSINESSRECIPIENTS() *InputBusinessRecipients {
	if x != nil {
		return x.Recipients_INPUTBUSINESSRECIPIENTS
	}
	return nil
}

type TLAccountGetConnectedBots struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountGetConnectedBots) Reset() {
	*x = TLAccountGetConnectedBots{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[131]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountGetConnectedBots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountGetConnectedBots) ProtoMessage() {}

func (x *TLAccountGetConnectedBots) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[131]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountGetConnectedBots.ProtoReflect.Descriptor instead.
func (*TLAccountGetConnectedBots) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{131}
}

func (x *TLAccountGetConnectedBots) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLAccountGetBotBusinessConnection struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	ConnectionId  string                 `protobuf:"bytes,3,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountGetBotBusinessConnection) Reset() {
	*x = TLAccountGetBotBusinessConnection{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[132]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountGetBotBusinessConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountGetBotBusinessConnection) ProtoMessage() {}

func (x *TLAccountGetBotBusinessConnection) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[132]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountGetBotBusinessConnection.ProtoReflect.Descriptor instead.
func (*TLAccountGetBotBusinessConnection) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{132}
}

func (x *TLAccountGetBotBusinessConnection) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountGetBotBusinessConnection) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

type TLAccountUpdateBusinessIntro struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Intro         *InputBusinessIntro    `protobuf:"bytes,3,opt,name=intro,proto3" json:"intro,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountUpdateBusinessIntro) Reset() {
	*x = TLAccountUpdateBusinessIntro{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[133]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountUpdateBusinessIntro) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountUpdateBusinessIntro) ProtoMessage() {}

func (x *TLAccountUpdateBusinessIntro) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[133]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountUpdateBusinessIntro.ProtoReflect.Descriptor instead.
func (*TLAccountUpdateBusinessIntro) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{133}
}

func (x *TLAccountUpdateBusinessIntro) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountUpdateBusinessIntro) GetIntro() *InputBusinessIntro {
	if x != nil {
		return x.Intro
	}
	return nil
}

type TLAccountToggleConnectedBotPaused struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Paused        *Bool                  `protobuf:"bytes,4,opt,name=paused,proto3" json:"paused,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountToggleConnectedBotPaused) Reset() {
	*x = TLAccountToggleConnectedBotPaused{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[134]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountToggleConnectedBotPaused) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountToggleConnectedBotPaused) ProtoMessage() {}

func (x *TLAccountToggleConnectedBotPaused) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[134]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountToggleConnectedBotPaused.ProtoReflect.Descriptor instead.
func (*TLAccountToggleConnectedBotPaused) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{134}
}

func (x *TLAccountToggleConnectedBotPaused) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountToggleConnectedBotPaused) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLAccountToggleConnectedBotPaused) GetPaused() *Bool {
	if x != nil {
		return x.Paused
	}
	return nil
}

type TLAccountDisablePeerConnectedBot struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountDisablePeerConnectedBot) Reset() {
	*x = TLAccountDisablePeerConnectedBot{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[135]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountDisablePeerConnectedBot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountDisablePeerConnectedBot) ProtoMessage() {}

func (x *TLAccountDisablePeerConnectedBot) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[135]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountDisablePeerConnectedBot.ProtoReflect.Descriptor instead.
func (*TLAccountDisablePeerConnectedBot) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{135}
}

func (x *TLAccountDisablePeerConnectedBot) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountDisablePeerConnectedBot) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

type TLAccountUpdateBirthday struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Birthday      *Birthday              `protobuf:"bytes,3,opt,name=birthday,proto3" json:"birthday,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountUpdateBirthday) Reset() {
	*x = TLAccountUpdateBirthday{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[136]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountUpdateBirthday) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountUpdateBirthday) ProtoMessage() {}

func (x *TLAccountUpdateBirthday) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[136]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountUpdateBirthday.ProtoReflect.Descriptor instead.
func (*TLAccountUpdateBirthday) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{136}
}

func (x *TLAccountUpdateBirthday) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountUpdateBirthday) GetBirthday() *Birthday {
	if x != nil {
		return x.Birthday
	}
	return nil
}

type TLAccountCreateBusinessChatLink struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Link          *InputBusinessChatLink `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountCreateBusinessChatLink) Reset() {
	*x = TLAccountCreateBusinessChatLink{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[137]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountCreateBusinessChatLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountCreateBusinessChatLink) ProtoMessage() {}

func (x *TLAccountCreateBusinessChatLink) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[137]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountCreateBusinessChatLink.ProtoReflect.Descriptor instead.
func (*TLAccountCreateBusinessChatLink) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{137}
}

func (x *TLAccountCreateBusinessChatLink) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountCreateBusinessChatLink) GetLink() *InputBusinessChatLink {
	if x != nil {
		return x.Link
	}
	return nil
}

type TLAccountEditBusinessChatLink struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Slug          string                 `protobuf:"bytes,3,opt,name=slug,proto3" json:"slug,omitempty"`
	Link          *InputBusinessChatLink `protobuf:"bytes,4,opt,name=link,proto3" json:"link,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountEditBusinessChatLink) Reset() {
	*x = TLAccountEditBusinessChatLink{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[138]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountEditBusinessChatLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountEditBusinessChatLink) ProtoMessage() {}

func (x *TLAccountEditBusinessChatLink) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[138]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountEditBusinessChatLink.ProtoReflect.Descriptor instead.
func (*TLAccountEditBusinessChatLink) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{138}
}

func (x *TLAccountEditBusinessChatLink) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountEditBusinessChatLink) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *TLAccountEditBusinessChatLink) GetLink() *InputBusinessChatLink {
	if x != nil {
		return x.Link
	}
	return nil
}

type TLAccountDeleteBusinessChatLink struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Slug          string                 `protobuf:"bytes,3,opt,name=slug,proto3" json:"slug,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountDeleteBusinessChatLink) Reset() {
	*x = TLAccountDeleteBusinessChatLink{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[139]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountDeleteBusinessChatLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountDeleteBusinessChatLink) ProtoMessage() {}

func (x *TLAccountDeleteBusinessChatLink) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[139]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountDeleteBusinessChatLink.ProtoReflect.Descriptor instead.
func (*TLAccountDeleteBusinessChatLink) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{139}
}

func (x *TLAccountDeleteBusinessChatLink) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountDeleteBusinessChatLink) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

type TLAccountGetBusinessChatLinks struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountGetBusinessChatLinks) Reset() {
	*x = TLAccountGetBusinessChatLinks{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[140]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountGetBusinessChatLinks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountGetBusinessChatLinks) ProtoMessage() {}

func (x *TLAccountGetBusinessChatLinks) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[140]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountGetBusinessChatLinks.ProtoReflect.Descriptor instead.
func (*TLAccountGetBusinessChatLinks) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{140}
}

func (x *TLAccountGetBusinessChatLinks) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLAccountResolveBusinessChatLink struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Slug          string                 `protobuf:"bytes,3,opt,name=slug,proto3" json:"slug,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountResolveBusinessChatLink) Reset() {
	*x = TLAccountResolveBusinessChatLink{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[141]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountResolveBusinessChatLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountResolveBusinessChatLink) ProtoMessage() {}

func (x *TLAccountResolveBusinessChatLink) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[141]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountResolveBusinessChatLink.ProtoReflect.Descriptor instead.
func (*TLAccountResolveBusinessChatLink) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{141}
}

func (x *TLAccountResolveBusinessChatLink) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountResolveBusinessChatLink) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

type TLAccountUpdatePersonalChannel struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountUpdatePersonalChannel) Reset() {
	*x = TLAccountUpdatePersonalChannel{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[142]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountUpdatePersonalChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountUpdatePersonalChannel) ProtoMessage() {}

func (x *TLAccountUpdatePersonalChannel) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[142]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountUpdatePersonalChannel.ProtoReflect.Descriptor instead.
func (*TLAccountUpdatePersonalChannel) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{142}
}

func (x *TLAccountUpdatePersonalChannel) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountUpdatePersonalChannel) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

type TLAccountToggleSponsoredMessages struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Enabled       *Bool                  `protobuf:"bytes,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountToggleSponsoredMessages) Reset() {
	*x = TLAccountToggleSponsoredMessages{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[143]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountToggleSponsoredMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountToggleSponsoredMessages) ProtoMessage() {}

func (x *TLAccountToggleSponsoredMessages) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[143]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountToggleSponsoredMessages.ProtoReflect.Descriptor instead.
func (*TLAccountToggleSponsoredMessages) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{143}
}

func (x *TLAccountToggleSponsoredMessages) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountToggleSponsoredMessages) GetEnabled() *Bool {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type TLAccountGetReactionsNotifySettings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountGetReactionsNotifySettings) Reset() {
	*x = TLAccountGetReactionsNotifySettings{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[144]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountGetReactionsNotifySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountGetReactionsNotifySettings) ProtoMessage() {}

func (x *TLAccountGetReactionsNotifySettings) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[144]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountGetReactionsNotifySettings.ProtoReflect.Descriptor instead.
func (*TLAccountGetReactionsNotifySettings) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{144}
}

func (x *TLAccountGetReactionsNotifySettings) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLAccountSetReactionsNotifySettings struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Constructor   TLConstructor            `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Settings      *ReactionsNotifySettings `protobuf:"bytes,3,opt,name=settings,proto3" json:"settings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountSetReactionsNotifySettings) Reset() {
	*x = TLAccountSetReactionsNotifySettings{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[145]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountSetReactionsNotifySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountSetReactionsNotifySettings) ProtoMessage() {}

func (x *TLAccountSetReactionsNotifySettings) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[145]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountSetReactionsNotifySettings.ProtoReflect.Descriptor instead.
func (*TLAccountSetReactionsNotifySettings) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{145}
}

func (x *TLAccountSetReactionsNotifySettings) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountSetReactionsNotifySettings) GetSettings() *ReactionsNotifySettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type TLAccountGetCollectibleEmojiStatuses struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Hash          int64                  `protobuf:"varint,3,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountGetCollectibleEmojiStatuses) Reset() {
	*x = TLAccountGetCollectibleEmojiStatuses{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[146]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountGetCollectibleEmojiStatuses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountGetCollectibleEmojiStatuses) ProtoMessage() {}

func (x *TLAccountGetCollectibleEmojiStatuses) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[146]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountGetCollectibleEmojiStatuses.ProtoReflect.Descriptor instead.
func (*TLAccountGetCollectibleEmojiStatuses) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{146}
}

func (x *TLAccountGetCollectibleEmojiStatuses) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountGetCollectibleEmojiStatuses) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLAccountAddNoPaidMessagesException struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	RefundCharged bool                   `protobuf:"varint,3,opt,name=refund_charged,json=refundCharged,proto3" json:"refund_charged,omitempty"`
	UserId        *InputUser             `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountAddNoPaidMessagesException) Reset() {
	*x = TLAccountAddNoPaidMessagesException{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[147]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountAddNoPaidMessagesException) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountAddNoPaidMessagesException) ProtoMessage() {}

func (x *TLAccountAddNoPaidMessagesException) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[147]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountAddNoPaidMessagesException.ProtoReflect.Descriptor instead.
func (*TLAccountAddNoPaidMessagesException) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{147}
}

func (x *TLAccountAddNoPaidMessagesException) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountAddNoPaidMessagesException) GetRefundCharged() bool {
	if x != nil {
		return x.RefundCharged
	}
	return false
}

func (x *TLAccountAddNoPaidMessagesException) GetUserId() *InputUser {
	if x != nil {
		return x.UserId
	}
	return nil
}

type TLAccountGetPaidMessagesRevenue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	UserId        *InputUser             `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountGetPaidMessagesRevenue) Reset() {
	*x = TLAccountGetPaidMessagesRevenue{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[148]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountGetPaidMessagesRevenue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountGetPaidMessagesRevenue) ProtoMessage() {}

func (x *TLAccountGetPaidMessagesRevenue) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[148]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountGetPaidMessagesRevenue.ProtoReflect.Descriptor instead.
func (*TLAccountGetPaidMessagesRevenue) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{148}
}

func (x *TLAccountGetPaidMessagesRevenue) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountGetPaidMessagesRevenue) GetUserId() *InputUser {
	if x != nil {
		return x.UserId
	}
	return nil
}

type TLUsersGetUsers struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Id            []*InputUser           `protobuf:"bytes,3,rep,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLUsersGetUsers) Reset() {
	*x = TLUsersGetUsers{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[149]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLUsersGetUsers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUsersGetUsers) ProtoMessage() {}

func (x *TLUsersGetUsers) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[149]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUsersGetUsers.ProtoReflect.Descriptor instead.
func (*TLUsersGetUsers) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{149}
}

func (x *TLUsersGetUsers) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUsersGetUsers) GetId() []*InputUser {
	if x != nil {
		return x.Id
	}
	return nil
}

type TLUsersGetFullUser struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Id            *InputUser             `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLUsersGetFullUser) Reset() {
	*x = TLUsersGetFullUser{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[150]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLUsersGetFullUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUsersGetFullUser) ProtoMessage() {}

func (x *TLUsersGetFullUser) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[150]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUsersGetFullUser.ProtoReflect.Descriptor instead.
func (*TLUsersGetFullUser) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{150}
}

func (x *TLUsersGetFullUser) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUsersGetFullUser) GetId() *InputUser {
	if x != nil {
		return x.Id
	}
	return nil
}

type TLUsersSetSecureValueErrors struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Id            *InputUser             `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Errors        []*SecureValueError    `protobuf:"bytes,4,rep,name=errors,proto3" json:"errors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLUsersSetSecureValueErrors) Reset() {
	*x = TLUsersSetSecureValueErrors{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[151]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLUsersSetSecureValueErrors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUsersSetSecureValueErrors) ProtoMessage() {}

func (x *TLUsersSetSecureValueErrors) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[151]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUsersSetSecureValueErrors.ProtoReflect.Descriptor instead.
func (*TLUsersSetSecureValueErrors) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{151}
}

func (x *TLUsersSetSecureValueErrors) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUsersSetSecureValueErrors) GetId() *InputUser {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TLUsersSetSecureValueErrors) GetErrors() []*SecureValueError {
	if x != nil {
		return x.Errors
	}
	return nil
}

type TLUsersGetRequirementsToContact struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Id            []*InputUser           `protobuf:"bytes,3,rep,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLUsersGetRequirementsToContact) Reset() {
	*x = TLUsersGetRequirementsToContact{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[152]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLUsersGetRequirementsToContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUsersGetRequirementsToContact) ProtoMessage() {}

func (x *TLUsersGetRequirementsToContact) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[152]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUsersGetRequirementsToContact.ProtoReflect.Descriptor instead.
func (*TLUsersGetRequirementsToContact) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{152}
}

func (x *TLUsersGetRequirementsToContact) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUsersGetRequirementsToContact) GetId() []*InputUser {
	if x != nil {
		return x.Id
	}
	return nil
}

type TLContactsGetContactIDs struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Hash          int64                  `protobuf:"varint,3,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLContactsGetContactIDs) Reset() {
	*x = TLContactsGetContactIDs{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[153]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLContactsGetContactIDs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLContactsGetContactIDs) ProtoMessage() {}

func (x *TLContactsGetContactIDs) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[153]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLContactsGetContactIDs.ProtoReflect.Descriptor instead.
func (*TLContactsGetContactIDs) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{153}
}

func (x *TLContactsGetContactIDs) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLContactsGetContactIDs) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLContactsGetStatuses struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLContactsGetStatuses) Reset() {
	*x = TLContactsGetStatuses{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[154]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLContactsGetStatuses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLContactsGetStatuses) ProtoMessage() {}

func (x *TLContactsGetStatuses) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[154]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLContactsGetStatuses.ProtoReflect.Descriptor instead.
func (*TLContactsGetStatuses) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{154}
}

func (x *TLContactsGetStatuses) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLContactsGetContacts struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Hash          int64                  `protobuf:"varint,3,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLContactsGetContacts) Reset() {
	*x = TLContactsGetContacts{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[155]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLContactsGetContacts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLContactsGetContacts) ProtoMessage() {}

func (x *TLContactsGetContacts) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[155]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLContactsGetContacts.ProtoReflect.Descriptor instead.
func (*TLContactsGetContacts) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{155}
}

func (x *TLContactsGetContacts) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLContactsGetContacts) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLContactsImportContacts struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Contacts      []*InputContact        `protobuf:"bytes,3,rep,name=contacts,proto3" json:"contacts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLContactsImportContacts) Reset() {
	*x = TLContactsImportContacts{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[156]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLContactsImportContacts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLContactsImportContacts) ProtoMessage() {}

func (x *TLContactsImportContacts) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[156]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLContactsImportContacts.ProtoReflect.Descriptor instead.
func (*TLContactsImportContacts) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{156}
}

func (x *TLContactsImportContacts) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLContactsImportContacts) GetContacts() []*InputContact {
	if x != nil {
		return x.Contacts
	}
	return nil
}

type TLContactsDeleteContacts struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Id            []*InputUser           `protobuf:"bytes,3,rep,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLContactsDeleteContacts) Reset() {
	*x = TLContactsDeleteContacts{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[157]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLContactsDeleteContacts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLContactsDeleteContacts) ProtoMessage() {}

func (x *TLContactsDeleteContacts) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[157]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLContactsDeleteContacts.ProtoReflect.Descriptor instead.
func (*TLContactsDeleteContacts) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{157}
}

func (x *TLContactsDeleteContacts) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLContactsDeleteContacts) GetId() []*InputUser {
	if x != nil {
		return x.Id
	}
	return nil
}

type TLContactsDeleteByPhones struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Phones        []string               `protobuf:"bytes,3,rep,name=phones,proto3" json:"phones,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLContactsDeleteByPhones) Reset() {
	*x = TLContactsDeleteByPhones{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[158]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLContactsDeleteByPhones) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLContactsDeleteByPhones) ProtoMessage() {}

func (x *TLContactsDeleteByPhones) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[158]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLContactsDeleteByPhones.ProtoReflect.Descriptor instead.
func (*TLContactsDeleteByPhones) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{158}
}

func (x *TLContactsDeleteByPhones) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLContactsDeleteByPhones) GetPhones() []string {
	if x != nil {
		return x.Phones
	}
	return nil
}

type TLContactsBlock struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	MyStoriesFrom bool                   `protobuf:"varint,3,opt,name=my_stories_from,json=myStoriesFrom,proto3" json:"my_stories_from,omitempty"`
	Id            *InputPeer             `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLContactsBlock) Reset() {
	*x = TLContactsBlock{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[159]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLContactsBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLContactsBlock) ProtoMessage() {}

func (x *TLContactsBlock) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[159]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLContactsBlock.ProtoReflect.Descriptor instead.
func (*TLContactsBlock) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{159}
}

func (x *TLContactsBlock) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLContactsBlock) GetMyStoriesFrom() bool {
	if x != nil {
		return x.MyStoriesFrom
	}
	return false
}

func (x *TLContactsBlock) GetId() *InputPeer {
	if x != nil {
		return x.Id
	}
	return nil
}

type TLContactsUnblock struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	MyStoriesFrom bool                   `protobuf:"varint,3,opt,name=my_stories_from,json=myStoriesFrom,proto3" json:"my_stories_from,omitempty"`
	Id            *InputPeer             `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLContactsUnblock) Reset() {
	*x = TLContactsUnblock{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[160]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLContactsUnblock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLContactsUnblock) ProtoMessage() {}

func (x *TLContactsUnblock) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[160]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLContactsUnblock.ProtoReflect.Descriptor instead.
func (*TLContactsUnblock) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{160}
}

func (x *TLContactsUnblock) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLContactsUnblock) GetMyStoriesFrom() bool {
	if x != nil {
		return x.MyStoriesFrom
	}
	return false
}

func (x *TLContactsUnblock) GetId() *InputPeer {
	if x != nil {
		return x.Id
	}
	return nil
}

type TLContactsGetBlocked struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	MyStoriesFrom bool                   `protobuf:"varint,3,opt,name=my_stories_from,json=myStoriesFrom,proto3" json:"my_stories_from,omitempty"`
	Offset        int32                  `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit         int32                  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLContactsGetBlocked) Reset() {
	*x = TLContactsGetBlocked{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[161]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLContactsGetBlocked) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLContactsGetBlocked) ProtoMessage() {}

func (x *TLContactsGetBlocked) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[161]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLContactsGetBlocked.ProtoReflect.Descriptor instead.
func (*TLContactsGetBlocked) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{161}
}

func (x *TLContactsGetBlocked) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLContactsGetBlocked) GetMyStoriesFrom() bool {
	if x != nil {
		return x.MyStoriesFrom
	}
	return false
}

func (x *TLContactsGetBlocked) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TLContactsGetBlocked) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TLContactsSearch struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Q             string                 `protobuf:"bytes,3,opt,name=q,proto3" json:"q,omitempty"`
	Limit         int32                  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLContactsSearch) Reset() {
	*x = TLContactsSearch{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[162]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLContactsSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLContactsSearch) ProtoMessage() {}

func (x *TLContactsSearch) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[162]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLContactsSearch.ProtoReflect.Descriptor instead.
func (*TLContactsSearch) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{162}
}

func (x *TLContactsSearch) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLContactsSearch) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *TLContactsSearch) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TLContactsResolveUsername struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Constructor   TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Username      string                  `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	Referer       *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=referer,proto3" json:"referer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLContactsResolveUsername) Reset() {
	*x = TLContactsResolveUsername{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[163]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLContactsResolveUsername) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLContactsResolveUsername) ProtoMessage() {}

func (x *TLContactsResolveUsername) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[163]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLContactsResolveUsername.ProtoReflect.Descriptor instead.
func (*TLContactsResolveUsername) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{163}
}

func (x *TLContactsResolveUsername) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLContactsResolveUsername) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *TLContactsResolveUsername) GetReferer() *wrapperspb.StringValue {
	if x != nil {
		return x.Referer
	}
	return nil
}

type TLContactsGetTopPeers struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Constructor    TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Correspondents bool                   `protobuf:"varint,3,opt,name=correspondents,proto3" json:"correspondents,omitempty"`
	BotsPm         bool                   `protobuf:"varint,4,opt,name=bots_pm,json=botsPm,proto3" json:"bots_pm,omitempty"`
	BotsInline     bool                   `protobuf:"varint,5,opt,name=bots_inline,json=botsInline,proto3" json:"bots_inline,omitempty"`
	PhoneCalls     bool                   `protobuf:"varint,6,opt,name=phone_calls,json=phoneCalls,proto3" json:"phone_calls,omitempty"`
	ForwardUsers   bool                   `protobuf:"varint,7,opt,name=forward_users,json=forwardUsers,proto3" json:"forward_users,omitempty"`
	ForwardChats   bool                   `protobuf:"varint,8,opt,name=forward_chats,json=forwardChats,proto3" json:"forward_chats,omitempty"`
	Groups         bool                   `protobuf:"varint,9,opt,name=groups,proto3" json:"groups,omitempty"`
	Channels       bool                   `protobuf:"varint,10,opt,name=channels,proto3" json:"channels,omitempty"`
	BotsApp        bool                   `protobuf:"varint,11,opt,name=bots_app,json=botsApp,proto3" json:"bots_app,omitempty"`
	Offset         int32                  `protobuf:"varint,12,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit          int32                  `protobuf:"varint,13,opt,name=limit,proto3" json:"limit,omitempty"`
	Hash           int64                  `protobuf:"varint,14,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TLContactsGetTopPeers) Reset() {
	*x = TLContactsGetTopPeers{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[164]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLContactsGetTopPeers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLContactsGetTopPeers) ProtoMessage() {}

func (x *TLContactsGetTopPeers) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[164]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLContactsGetTopPeers.ProtoReflect.Descriptor instead.
func (*TLContactsGetTopPeers) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{164}
}

func (x *TLContactsGetTopPeers) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLContactsGetTopPeers) GetCorrespondents() bool {
	if x != nil {
		return x.Correspondents
	}
	return false
}

func (x *TLContactsGetTopPeers) GetBotsPm() bool {
	if x != nil {
		return x.BotsPm
	}
	return false
}

func (x *TLContactsGetTopPeers) GetBotsInline() bool {
	if x != nil {
		return x.BotsInline
	}
	return false
}

func (x *TLContactsGetTopPeers) GetPhoneCalls() bool {
	if x != nil {
		return x.PhoneCalls
	}
	return false
}

func (x *TLContactsGetTopPeers) GetForwardUsers() bool {
	if x != nil {
		return x.ForwardUsers
	}
	return false
}

func (x *TLContactsGetTopPeers) GetForwardChats() bool {
	if x != nil {
		return x.ForwardChats
	}
	return false
}

func (x *TLContactsGetTopPeers) GetGroups() bool {
	if x != nil {
		return x.Groups
	}
	return false
}

func (x *TLContactsGetTopPeers) GetChannels() bool {
	if x != nil {
		return x.Channels
	}
	return false
}

func (x *TLContactsGetTopPeers) GetBotsApp() bool {
	if x != nil {
		return x.BotsApp
	}
	return false
}

func (x *TLContactsGetTopPeers) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TLContactsGetTopPeers) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TLContactsGetTopPeers) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLContactsResetTopPeerRating struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Category      *TopPeerCategory       `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,4,opt,name=peer,proto3" json:"peer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLContactsResetTopPeerRating) Reset() {
	*x = TLContactsResetTopPeerRating{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[165]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLContactsResetTopPeerRating) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLContactsResetTopPeerRating) ProtoMessage() {}

func (x *TLContactsResetTopPeerRating) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[165]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLContactsResetTopPeerRating.ProtoReflect.Descriptor instead.
func (*TLContactsResetTopPeerRating) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{165}
}

func (x *TLContactsResetTopPeerRating) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLContactsResetTopPeerRating) GetCategory() *TopPeerCategory {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *TLContactsResetTopPeerRating) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

type TLContactsResetSaved struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLContactsResetSaved) Reset() {
	*x = TLContactsResetSaved{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[166]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLContactsResetSaved) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLContactsResetSaved) ProtoMessage() {}

func (x *TLContactsResetSaved) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[166]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLContactsResetSaved.ProtoReflect.Descriptor instead.
func (*TLContactsResetSaved) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{166}
}

func (x *TLContactsResetSaved) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLContactsGetSaved struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLContactsGetSaved) Reset() {
	*x = TLContactsGetSaved{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[167]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLContactsGetSaved) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLContactsGetSaved) ProtoMessage() {}

func (x *TLContactsGetSaved) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[167]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLContactsGetSaved.ProtoReflect.Descriptor instead.
func (*TLContactsGetSaved) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{167}
}

func (x *TLContactsGetSaved) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLContactsToggleTopPeers struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Enabled       *Bool                  `protobuf:"bytes,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLContactsToggleTopPeers) Reset() {
	*x = TLContactsToggleTopPeers{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[168]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLContactsToggleTopPeers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLContactsToggleTopPeers) ProtoMessage() {}

func (x *TLContactsToggleTopPeers) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[168]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLContactsToggleTopPeers.ProtoReflect.Descriptor instead.
func (*TLContactsToggleTopPeers) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{168}
}

func (x *TLContactsToggleTopPeers) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLContactsToggleTopPeers) GetEnabled() *Bool {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type TLContactsAddContact struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Constructor              TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	AddPhonePrivacyException bool                   `protobuf:"varint,3,opt,name=add_phone_privacy_exception,json=addPhonePrivacyException,proto3" json:"add_phone_privacy_exception,omitempty"`
	Id                       *InputUser             `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	FirstName                string                 `protobuf:"bytes,5,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName                 string                 `protobuf:"bytes,6,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Phone                    string                 `protobuf:"bytes,7,opt,name=phone,proto3" json:"phone,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *TLContactsAddContact) Reset() {
	*x = TLContactsAddContact{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[169]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLContactsAddContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLContactsAddContact) ProtoMessage() {}

func (x *TLContactsAddContact) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[169]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLContactsAddContact.ProtoReflect.Descriptor instead.
func (*TLContactsAddContact) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{169}
}

func (x *TLContactsAddContact) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLContactsAddContact) GetAddPhonePrivacyException() bool {
	if x != nil {
		return x.AddPhonePrivacyException
	}
	return false
}

func (x *TLContactsAddContact) GetId() *InputUser {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TLContactsAddContact) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *TLContactsAddContact) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *TLContactsAddContact) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

type TLContactsAcceptContact struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Id            *InputUser             `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLContactsAcceptContact) Reset() {
	*x = TLContactsAcceptContact{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[170]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLContactsAcceptContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLContactsAcceptContact) ProtoMessage() {}

func (x *TLContactsAcceptContact) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[170]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLContactsAcceptContact.ProtoReflect.Descriptor instead.
func (*TLContactsAcceptContact) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{170}
}

func (x *TLContactsAcceptContact) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLContactsAcceptContact) GetId() *InputUser {
	if x != nil {
		return x.Id
	}
	return nil
}

type TLContactsGetLocated struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Background    bool                   `protobuf:"varint,3,opt,name=background,proto3" json:"background,omitempty"`
	GeoPoint      *InputGeoPoint         `protobuf:"bytes,4,opt,name=geo_point,json=geoPoint,proto3" json:"geo_point,omitempty"`
	SelfExpires   *wrapperspb.Int32Value `protobuf:"bytes,5,opt,name=self_expires,json=selfExpires,proto3" json:"self_expires,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLContactsGetLocated) Reset() {
	*x = TLContactsGetLocated{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[171]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLContactsGetLocated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLContactsGetLocated) ProtoMessage() {}

func (x *TLContactsGetLocated) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[171]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLContactsGetLocated.ProtoReflect.Descriptor instead.
func (*TLContactsGetLocated) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{171}
}

func (x *TLContactsGetLocated) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLContactsGetLocated) GetBackground() bool {
	if x != nil {
		return x.Background
	}
	return false
}

func (x *TLContactsGetLocated) GetGeoPoint() *InputGeoPoint {
	if x != nil {
		return x.GeoPoint
	}
	return nil
}

func (x *TLContactsGetLocated) GetSelfExpires() *wrapperspb.Int32Value {
	if x != nil {
		return x.SelfExpires
	}
	return nil
}

type TLContactsBlockFromReplies struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	DeleteMessage bool                   `protobuf:"varint,3,opt,name=delete_message,json=deleteMessage,proto3" json:"delete_message,omitempty"`
	DeleteHistory bool                   `protobuf:"varint,4,opt,name=delete_history,json=deleteHistory,proto3" json:"delete_history,omitempty"`
	ReportSpam    bool                   `protobuf:"varint,5,opt,name=report_spam,json=reportSpam,proto3" json:"report_spam,omitempty"`
	MsgId         int32                  `protobuf:"varint,6,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLContactsBlockFromReplies) Reset() {
	*x = TLContactsBlockFromReplies{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[172]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLContactsBlockFromReplies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLContactsBlockFromReplies) ProtoMessage() {}

func (x *TLContactsBlockFromReplies) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[172]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLContactsBlockFromReplies.ProtoReflect.Descriptor instead.
func (*TLContactsBlockFromReplies) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{172}
}

func (x *TLContactsBlockFromReplies) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLContactsBlockFromReplies) GetDeleteMessage() bool {
	if x != nil {
		return x.DeleteMessage
	}
	return false
}

func (x *TLContactsBlockFromReplies) GetDeleteHistory() bool {
	if x != nil {
		return x.DeleteHistory
	}
	return false
}

func (x *TLContactsBlockFromReplies) GetReportSpam() bool {
	if x != nil {
		return x.ReportSpam
	}
	return false
}

func (x *TLContactsBlockFromReplies) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

type TLContactsResolvePhone struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Phone         string                 `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLContactsResolvePhone) Reset() {
	*x = TLContactsResolvePhone{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[173]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLContactsResolvePhone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLContactsResolvePhone) ProtoMessage() {}

func (x *TLContactsResolvePhone) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[173]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLContactsResolvePhone.ProtoReflect.Descriptor instead.
func (*TLContactsResolvePhone) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{173}
}

func (x *TLContactsResolvePhone) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLContactsResolvePhone) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

type TLContactsExportContactToken struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLContactsExportContactToken) Reset() {
	*x = TLContactsExportContactToken{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[174]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLContactsExportContactToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLContactsExportContactToken) ProtoMessage() {}

func (x *TLContactsExportContactToken) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[174]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLContactsExportContactToken.ProtoReflect.Descriptor instead.
func (*TLContactsExportContactToken) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{174}
}

func (x *TLContactsExportContactToken) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLContactsImportContactToken struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Token         string                 `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLContactsImportContactToken) Reset() {
	*x = TLContactsImportContactToken{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[175]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLContactsImportContactToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLContactsImportContactToken) ProtoMessage() {}

func (x *TLContactsImportContactToken) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[175]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLContactsImportContactToken.ProtoReflect.Descriptor instead.
func (*TLContactsImportContactToken) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{175}
}

func (x *TLContactsImportContactToken) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLContactsImportContactToken) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type TLContactsEditCloseFriends struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Id            []int64                `protobuf:"varint,3,rep,packed,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLContactsEditCloseFriends) Reset() {
	*x = TLContactsEditCloseFriends{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[176]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLContactsEditCloseFriends) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLContactsEditCloseFriends) ProtoMessage() {}

func (x *TLContactsEditCloseFriends) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[176]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLContactsEditCloseFriends.ProtoReflect.Descriptor instead.
func (*TLContactsEditCloseFriends) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{176}
}

func (x *TLContactsEditCloseFriends) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLContactsEditCloseFriends) GetId() []int64 {
	if x != nil {
		return x.Id
	}
	return nil
}

type TLContactsSetBlocked struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	MyStoriesFrom bool                   `protobuf:"varint,3,opt,name=my_stories_from,json=myStoriesFrom,proto3" json:"my_stories_from,omitempty"`
	Id            []*InputPeer           `protobuf:"bytes,4,rep,name=id,proto3" json:"id,omitempty"`
	Limit         int32                  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLContactsSetBlocked) Reset() {
	*x = TLContactsSetBlocked{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[177]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLContactsSetBlocked) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLContactsSetBlocked) ProtoMessage() {}

func (x *TLContactsSetBlocked) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[177]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLContactsSetBlocked.ProtoReflect.Descriptor instead.
func (*TLContactsSetBlocked) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{177}
}

func (x *TLContactsSetBlocked) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLContactsSetBlocked) GetMyStoriesFrom() bool {
	if x != nil {
		return x.MyStoriesFrom
	}
	return false
}

func (x *TLContactsSetBlocked) GetId() []*InputPeer {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TLContactsSetBlocked) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TLContactsGetBirthdays struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLContactsGetBirthdays) Reset() {
	*x = TLContactsGetBirthdays{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[178]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLContactsGetBirthdays) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLContactsGetBirthdays) ProtoMessage() {}

func (x *TLContactsGetBirthdays) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[178]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLContactsGetBirthdays.ProtoReflect.Descriptor instead.
func (*TLContactsGetBirthdays) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{178}
}

func (x *TLContactsGetBirthdays) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLContactsGetSponsoredPeers struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Q             string                 `protobuf:"bytes,3,opt,name=q,proto3" json:"q,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLContactsGetSponsoredPeers) Reset() {
	*x = TLContactsGetSponsoredPeers{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[179]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLContactsGetSponsoredPeers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLContactsGetSponsoredPeers) ProtoMessage() {}

func (x *TLContactsGetSponsoredPeers) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[179]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLContactsGetSponsoredPeers.ProtoReflect.Descriptor instead.
func (*TLContactsGetSponsoredPeers) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{179}
}

func (x *TLContactsGetSponsoredPeers) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLContactsGetSponsoredPeers) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

type TLMessagesGetMessages struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Constructor           TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Id_VECTORINPUTMESSAGE []*InputMessage        `protobuf:"bytes,3,rep,name=id_VECTORINPUTMESSAGE,json=idVECTORINPUTMESSAGE,proto3" json:"id_VECTORINPUTMESSAGE,omitempty"`
	Id_VECTORINT32        []int32                `protobuf:"varint,4,rep,packed,name=id_VECTORINT32,json=idVECTORINT32,proto3" json:"id_VECTORINT32,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *TLMessagesGetMessages) Reset() {
	*x = TLMessagesGetMessages{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[180]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetMessages) ProtoMessage() {}

func (x *TLMessagesGetMessages) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[180]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetMessages.ProtoReflect.Descriptor instead.
func (*TLMessagesGetMessages) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{180}
}

func (x *TLMessagesGetMessages) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetMessages) GetId_VECTORINPUTMESSAGE() []*InputMessage {
	if x != nil {
		return x.Id_VECTORINPUTMESSAGE
	}
	return nil
}

func (x *TLMessagesGetMessages) GetId_VECTORINT32() []int32 {
	if x != nil {
		return x.Id_VECTORINT32
	}
	return nil
}

type TLMessagesGetDialogs struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	ExcludePinned bool                   `protobuf:"varint,3,opt,name=exclude_pinned,json=excludePinned,proto3" json:"exclude_pinned,omitempty"`
	FolderId      *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	OffsetDate    int32                  `protobuf:"varint,5,opt,name=offset_date,json=offsetDate,proto3" json:"offset_date,omitempty"`
	OffsetId      int32                  `protobuf:"varint,6,opt,name=offset_id,json=offsetId,proto3" json:"offset_id,omitempty"`
	OffsetPeer    *InputPeer             `protobuf:"bytes,7,opt,name=offset_peer,json=offsetPeer,proto3" json:"offset_peer,omitempty"`
	Limit         int32                  `protobuf:"varint,8,opt,name=limit,proto3" json:"limit,omitempty"`
	Hash          int64                  `protobuf:"varint,9,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetDialogs) Reset() {
	*x = TLMessagesGetDialogs{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[181]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetDialogs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetDialogs) ProtoMessage() {}

func (x *TLMessagesGetDialogs) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[181]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetDialogs.ProtoReflect.Descriptor instead.
func (*TLMessagesGetDialogs) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{181}
}

func (x *TLMessagesGetDialogs) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetDialogs) GetExcludePinned() bool {
	if x != nil {
		return x.ExcludePinned
	}
	return false
}

func (x *TLMessagesGetDialogs) GetFolderId() *wrapperspb.Int32Value {
	if x != nil {
		return x.FolderId
	}
	return nil
}

func (x *TLMessagesGetDialogs) GetOffsetDate() int32 {
	if x != nil {
		return x.OffsetDate
	}
	return 0
}

func (x *TLMessagesGetDialogs) GetOffsetId() int32 {
	if x != nil {
		return x.OffsetId
	}
	return 0
}

func (x *TLMessagesGetDialogs) GetOffsetPeer() *InputPeer {
	if x != nil {
		return x.OffsetPeer
	}
	return nil
}

func (x *TLMessagesGetDialogs) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TLMessagesGetDialogs) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLMessagesGetHistory struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	OffsetId      int32                  `protobuf:"varint,4,opt,name=offset_id,json=offsetId,proto3" json:"offset_id,omitempty"`
	OffsetDate    int32                  `protobuf:"varint,5,opt,name=offset_date,json=offsetDate,proto3" json:"offset_date,omitempty"`
	AddOffset     int32                  `protobuf:"varint,6,opt,name=add_offset,json=addOffset,proto3" json:"add_offset,omitempty"`
	Limit         int32                  `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	MaxId         int32                  `protobuf:"varint,8,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	MinId         int32                  `protobuf:"varint,9,opt,name=min_id,json=minId,proto3" json:"min_id,omitempty"`
	Hash          int64                  `protobuf:"varint,10,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetHistory) Reset() {
	*x = TLMessagesGetHistory{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[182]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetHistory) ProtoMessage() {}

func (x *TLMessagesGetHistory) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[182]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetHistory.ProtoReflect.Descriptor instead.
func (*TLMessagesGetHistory) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{182}
}

func (x *TLMessagesGetHistory) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetHistory) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesGetHistory) GetOffsetId() int32 {
	if x != nil {
		return x.OffsetId
	}
	return 0
}

func (x *TLMessagesGetHistory) GetOffsetDate() int32 {
	if x != nil {
		return x.OffsetDate
	}
	return 0
}

func (x *TLMessagesGetHistory) GetAddOffset() int32 {
	if x != nil {
		return x.AddOffset
	}
	return 0
}

func (x *TLMessagesGetHistory) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TLMessagesGetHistory) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

func (x *TLMessagesGetHistory) GetMinId() int32 {
	if x != nil {
		return x.MinId
	}
	return 0
}

func (x *TLMessagesGetHistory) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLMessagesSearch struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Q             string                 `protobuf:"bytes,4,opt,name=q,proto3" json:"q,omitempty"`
	FromId        *InputPeer             `protobuf:"bytes,5,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	SavedPeerId   *InputPeer             `protobuf:"bytes,6,opt,name=saved_peer_id,json=savedPeerId,proto3" json:"saved_peer_id,omitempty"`
	SavedReaction []*Reaction            `protobuf:"bytes,7,rep,name=saved_reaction,json=savedReaction,proto3" json:"saved_reaction,omitempty"`
	TopMsgId      *wrapperspb.Int32Value `protobuf:"bytes,8,opt,name=top_msg_id,json=topMsgId,proto3" json:"top_msg_id,omitempty"`
	Filter        *MessagesFilter        `protobuf:"bytes,9,opt,name=filter,proto3" json:"filter,omitempty"`
	MinDate       int32                  `protobuf:"varint,10,opt,name=min_date,json=minDate,proto3" json:"min_date,omitempty"`
	MaxDate       int32                  `protobuf:"varint,11,opt,name=max_date,json=maxDate,proto3" json:"max_date,omitempty"`
	OffsetId      int32                  `protobuf:"varint,12,opt,name=offset_id,json=offsetId,proto3" json:"offset_id,omitempty"`
	AddOffset     int32                  `protobuf:"varint,13,opt,name=add_offset,json=addOffset,proto3" json:"add_offset,omitempty"`
	Limit         int32                  `protobuf:"varint,14,opt,name=limit,proto3" json:"limit,omitempty"`
	MaxId         int32                  `protobuf:"varint,15,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	MinId         int32                  `protobuf:"varint,16,opt,name=min_id,json=minId,proto3" json:"min_id,omitempty"`
	Hash          int64                  `protobuf:"varint,17,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesSearch) Reset() {
	*x = TLMessagesSearch{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[183]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesSearch) ProtoMessage() {}

func (x *TLMessagesSearch) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[183]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesSearch.ProtoReflect.Descriptor instead.
func (*TLMessagesSearch) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{183}
}

func (x *TLMessagesSearch) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesSearch) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesSearch) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *TLMessagesSearch) GetFromId() *InputPeer {
	if x != nil {
		return x.FromId
	}
	return nil
}

func (x *TLMessagesSearch) GetSavedPeerId() *InputPeer {
	if x != nil {
		return x.SavedPeerId
	}
	return nil
}

func (x *TLMessagesSearch) GetSavedReaction() []*Reaction {
	if x != nil {
		return x.SavedReaction
	}
	return nil
}

func (x *TLMessagesSearch) GetTopMsgId() *wrapperspb.Int32Value {
	if x != nil {
		return x.TopMsgId
	}
	return nil
}

func (x *TLMessagesSearch) GetFilter() *MessagesFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *TLMessagesSearch) GetMinDate() int32 {
	if x != nil {
		return x.MinDate
	}
	return 0
}

func (x *TLMessagesSearch) GetMaxDate() int32 {
	if x != nil {
		return x.MaxDate
	}
	return 0
}

func (x *TLMessagesSearch) GetOffsetId() int32 {
	if x != nil {
		return x.OffsetId
	}
	return 0
}

func (x *TLMessagesSearch) GetAddOffset() int32 {
	if x != nil {
		return x.AddOffset
	}
	return 0
}

func (x *TLMessagesSearch) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TLMessagesSearch) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

func (x *TLMessagesSearch) GetMinId() int32 {
	if x != nil {
		return x.MinId
	}
	return 0
}

func (x *TLMessagesSearch) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLMessagesReadHistory struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	MaxId         int32                  `protobuf:"varint,4,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesReadHistory) Reset() {
	*x = TLMessagesReadHistory{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[184]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesReadHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesReadHistory) ProtoMessage() {}

func (x *TLMessagesReadHistory) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[184]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesReadHistory.ProtoReflect.Descriptor instead.
func (*TLMessagesReadHistory) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{184}
}

func (x *TLMessagesReadHistory) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesReadHistory) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesReadHistory) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

type TLMessagesDeleteHistory struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	JustClear     bool                   `protobuf:"varint,3,opt,name=just_clear,json=justClear,proto3" json:"just_clear,omitempty"`
	Revoke        bool                   `protobuf:"varint,4,opt,name=revoke,proto3" json:"revoke,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,5,opt,name=peer,proto3" json:"peer,omitempty"`
	MaxId         int32                  `protobuf:"varint,6,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	MinDate       *wrapperspb.Int32Value `protobuf:"bytes,7,opt,name=min_date,json=minDate,proto3" json:"min_date,omitempty"`
	MaxDate       *wrapperspb.Int32Value `protobuf:"bytes,8,opt,name=max_date,json=maxDate,proto3" json:"max_date,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesDeleteHistory) Reset() {
	*x = TLMessagesDeleteHistory{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[185]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesDeleteHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesDeleteHistory) ProtoMessage() {}

func (x *TLMessagesDeleteHistory) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[185]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesDeleteHistory.ProtoReflect.Descriptor instead.
func (*TLMessagesDeleteHistory) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{185}
}

func (x *TLMessagesDeleteHistory) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesDeleteHistory) GetJustClear() bool {
	if x != nil {
		return x.JustClear
	}
	return false
}

func (x *TLMessagesDeleteHistory) GetRevoke() bool {
	if x != nil {
		return x.Revoke
	}
	return false
}

func (x *TLMessagesDeleteHistory) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesDeleteHistory) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

func (x *TLMessagesDeleteHistory) GetMinDate() *wrapperspb.Int32Value {
	if x != nil {
		return x.MinDate
	}
	return nil
}

func (x *TLMessagesDeleteHistory) GetMaxDate() *wrapperspb.Int32Value {
	if x != nil {
		return x.MaxDate
	}
	return nil
}

type TLMessagesDeleteMessages struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Revoke        bool                   `protobuf:"varint,3,opt,name=revoke,proto3" json:"revoke,omitempty"`
	Id            []int32                `protobuf:"varint,4,rep,packed,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesDeleteMessages) Reset() {
	*x = TLMessagesDeleteMessages{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[186]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesDeleteMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesDeleteMessages) ProtoMessage() {}

func (x *TLMessagesDeleteMessages) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[186]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesDeleteMessages.ProtoReflect.Descriptor instead.
func (*TLMessagesDeleteMessages) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{186}
}

func (x *TLMessagesDeleteMessages) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesDeleteMessages) GetRevoke() bool {
	if x != nil {
		return x.Revoke
	}
	return false
}

func (x *TLMessagesDeleteMessages) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

type TLMessagesReceivedMessages struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	MaxId         int32                  `protobuf:"varint,3,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesReceivedMessages) Reset() {
	*x = TLMessagesReceivedMessages{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[187]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesReceivedMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesReceivedMessages) ProtoMessage() {}

func (x *TLMessagesReceivedMessages) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[187]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesReceivedMessages.ProtoReflect.Descriptor instead.
func (*TLMessagesReceivedMessages) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{187}
}

func (x *TLMessagesReceivedMessages) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesReceivedMessages) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

type TLMessagesSetTyping struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	TopMsgId      *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=top_msg_id,json=topMsgId,proto3" json:"top_msg_id,omitempty"`
	Action        *SendMessageAction     `protobuf:"bytes,5,opt,name=action,proto3" json:"action,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesSetTyping) Reset() {
	*x = TLMessagesSetTyping{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[188]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesSetTyping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesSetTyping) ProtoMessage() {}

func (x *TLMessagesSetTyping) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[188]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesSetTyping.ProtoReflect.Descriptor instead.
func (*TLMessagesSetTyping) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{188}
}

func (x *TLMessagesSetTyping) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesSetTyping) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesSetTyping) GetTopMsgId() *wrapperspb.Int32Value {
	if x != nil {
		return x.TopMsgId
	}
	return nil
}

func (x *TLMessagesSetTyping) GetAction() *SendMessageAction {
	if x != nil {
		return x.Action
	}
	return nil
}

type TLMessagesSendMessage struct {
	state                  protoimpl.MessageState   `protogen:"open.v1"`
	Constructor            TLConstructor            `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	NoWebpage              bool                     `protobuf:"varint,3,opt,name=no_webpage,json=noWebpage,proto3" json:"no_webpage,omitempty"`
	Silent                 bool                     `protobuf:"varint,4,opt,name=silent,proto3" json:"silent,omitempty"`
	Background             bool                     `protobuf:"varint,5,opt,name=background,proto3" json:"background,omitempty"`
	ClearDraft             bool                     `protobuf:"varint,6,opt,name=clear_draft,json=clearDraft,proto3" json:"clear_draft,omitempty"`
	Noforwards             bool                     `protobuf:"varint,7,opt,name=noforwards,proto3" json:"noforwards,omitempty"`
	UpdateStickersetsOrder bool                     `protobuf:"varint,8,opt,name=update_stickersets_order,json=updateStickersetsOrder,proto3" json:"update_stickersets_order,omitempty"`
	InvertMedia            bool                     `protobuf:"varint,9,opt,name=invert_media,json=invertMedia,proto3" json:"invert_media,omitempty"`
	AllowPaidFloodskip     bool                     `protobuf:"varint,10,opt,name=allow_paid_floodskip,json=allowPaidFloodskip,proto3" json:"allow_paid_floodskip,omitempty"`
	Peer                   *InputPeer               `protobuf:"bytes,11,opt,name=peer,proto3" json:"peer,omitempty"`
	ReplyTo                *InputReplyTo            `protobuf:"bytes,12,opt,name=reply_to,json=replyTo,proto3" json:"reply_to,omitempty"`
	Message                string                   `protobuf:"bytes,13,opt,name=message,proto3" json:"message,omitempty"`
	RandomId               int64                    `protobuf:"varint,14,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	ReplyMarkup            *ReplyMarkup             `protobuf:"bytes,15,opt,name=reply_markup,json=replyMarkup,proto3" json:"reply_markup,omitempty"`
	Entities               []*MessageEntity         `protobuf:"bytes,16,rep,name=entities,proto3" json:"entities,omitempty"`
	ScheduleDate           *wrapperspb.Int32Value   `protobuf:"bytes,17,opt,name=schedule_date,json=scheduleDate,proto3" json:"schedule_date,omitempty"`
	SendAs                 *InputPeer               `protobuf:"bytes,18,opt,name=send_as,json=sendAs,proto3" json:"send_as,omitempty"`
	QuickReplyShortcut     *InputQuickReplyShortcut `protobuf:"bytes,19,opt,name=quick_reply_shortcut,json=quickReplyShortcut,proto3" json:"quick_reply_shortcut,omitempty"`
	Effect                 *wrapperspb.Int64Value   `protobuf:"bytes,20,opt,name=effect,proto3" json:"effect,omitempty"`
	AllowPaidStars         *wrapperspb.Int64Value   `protobuf:"bytes,21,opt,name=allow_paid_stars,json=allowPaidStars,proto3" json:"allow_paid_stars,omitempty"`
	ReplyToMsgId           *wrapperspb.Int32Value   `protobuf:"bytes,22,opt,name=reply_to_msg_id,json=replyToMsgId,proto3" json:"reply_to_msg_id,omitempty"`
	TopMsgId               *wrapperspb.Int32Value   `protobuf:"bytes,23,opt,name=top_msg_id,json=topMsgId,proto3" json:"top_msg_id,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TLMessagesSendMessage) Reset() {
	*x = TLMessagesSendMessage{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[189]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesSendMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesSendMessage) ProtoMessage() {}

func (x *TLMessagesSendMessage) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[189]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesSendMessage.ProtoReflect.Descriptor instead.
func (*TLMessagesSendMessage) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{189}
}

func (x *TLMessagesSendMessage) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesSendMessage) GetNoWebpage() bool {
	if x != nil {
		return x.NoWebpage
	}
	return false
}

func (x *TLMessagesSendMessage) GetSilent() bool {
	if x != nil {
		return x.Silent
	}
	return false
}

func (x *TLMessagesSendMessage) GetBackground() bool {
	if x != nil {
		return x.Background
	}
	return false
}

func (x *TLMessagesSendMessage) GetClearDraft() bool {
	if x != nil {
		return x.ClearDraft
	}
	return false
}

func (x *TLMessagesSendMessage) GetNoforwards() bool {
	if x != nil {
		return x.Noforwards
	}
	return false
}

func (x *TLMessagesSendMessage) GetUpdateStickersetsOrder() bool {
	if x != nil {
		return x.UpdateStickersetsOrder
	}
	return false
}

func (x *TLMessagesSendMessage) GetInvertMedia() bool {
	if x != nil {
		return x.InvertMedia
	}
	return false
}

func (x *TLMessagesSendMessage) GetAllowPaidFloodskip() bool {
	if x != nil {
		return x.AllowPaidFloodskip
	}
	return false
}

func (x *TLMessagesSendMessage) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesSendMessage) GetReplyTo() *InputReplyTo {
	if x != nil {
		return x.ReplyTo
	}
	return nil
}

func (x *TLMessagesSendMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TLMessagesSendMessage) GetRandomId() int64 {
	if x != nil {
		return x.RandomId
	}
	return 0
}

func (x *TLMessagesSendMessage) GetReplyMarkup() *ReplyMarkup {
	if x != nil {
		return x.ReplyMarkup
	}
	return nil
}

func (x *TLMessagesSendMessage) GetEntities() []*MessageEntity {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *TLMessagesSendMessage) GetScheduleDate() *wrapperspb.Int32Value {
	if x != nil {
		return x.ScheduleDate
	}
	return nil
}

func (x *TLMessagesSendMessage) GetSendAs() *InputPeer {
	if x != nil {
		return x.SendAs
	}
	return nil
}

func (x *TLMessagesSendMessage) GetQuickReplyShortcut() *InputQuickReplyShortcut {
	if x != nil {
		return x.QuickReplyShortcut
	}
	return nil
}

func (x *TLMessagesSendMessage) GetEffect() *wrapperspb.Int64Value {
	if x != nil {
		return x.Effect
	}
	return nil
}

func (x *TLMessagesSendMessage) GetAllowPaidStars() *wrapperspb.Int64Value {
	if x != nil {
		return x.AllowPaidStars
	}
	return nil
}

func (x *TLMessagesSendMessage) GetReplyToMsgId() *wrapperspb.Int32Value {
	if x != nil {
		return x.ReplyToMsgId
	}
	return nil
}

func (x *TLMessagesSendMessage) GetTopMsgId() *wrapperspb.Int32Value {
	if x != nil {
		return x.TopMsgId
	}
	return nil
}

type TLMessagesSendMedia struct {
	state                  protoimpl.MessageState   `protogen:"open.v1"`
	Constructor            TLConstructor            `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Silent                 bool                     `protobuf:"varint,3,opt,name=silent,proto3" json:"silent,omitempty"`
	Background             bool                     `protobuf:"varint,4,opt,name=background,proto3" json:"background,omitempty"`
	ClearDraft             bool                     `protobuf:"varint,5,opt,name=clear_draft,json=clearDraft,proto3" json:"clear_draft,omitempty"`
	Noforwards             bool                     `protobuf:"varint,6,opt,name=noforwards,proto3" json:"noforwards,omitempty"`
	UpdateStickersetsOrder bool                     `protobuf:"varint,7,opt,name=update_stickersets_order,json=updateStickersetsOrder,proto3" json:"update_stickersets_order,omitempty"`
	InvertMedia            bool                     `protobuf:"varint,8,opt,name=invert_media,json=invertMedia,proto3" json:"invert_media,omitempty"`
	AllowPaidFloodskip     bool                     `protobuf:"varint,9,opt,name=allow_paid_floodskip,json=allowPaidFloodskip,proto3" json:"allow_paid_floodskip,omitempty"`
	Peer                   *InputPeer               `protobuf:"bytes,10,opt,name=peer,proto3" json:"peer,omitempty"`
	ReplyTo                *InputReplyTo            `protobuf:"bytes,11,opt,name=reply_to,json=replyTo,proto3" json:"reply_to,omitempty"`
	Media                  *InputMedia              `protobuf:"bytes,12,opt,name=media,proto3" json:"media,omitempty"`
	Message                string                   `protobuf:"bytes,13,opt,name=message,proto3" json:"message,omitempty"`
	RandomId               int64                    `protobuf:"varint,14,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	ReplyMarkup            *ReplyMarkup             `protobuf:"bytes,15,opt,name=reply_markup,json=replyMarkup,proto3" json:"reply_markup,omitempty"`
	Entities               []*MessageEntity         `protobuf:"bytes,16,rep,name=entities,proto3" json:"entities,omitempty"`
	ScheduleDate           *wrapperspb.Int32Value   `protobuf:"bytes,17,opt,name=schedule_date,json=scheduleDate,proto3" json:"schedule_date,omitempty"`
	SendAs                 *InputPeer               `protobuf:"bytes,18,opt,name=send_as,json=sendAs,proto3" json:"send_as,omitempty"`
	QuickReplyShortcut     *InputQuickReplyShortcut `protobuf:"bytes,19,opt,name=quick_reply_shortcut,json=quickReplyShortcut,proto3" json:"quick_reply_shortcut,omitempty"`
	Effect                 *wrapperspb.Int64Value   `protobuf:"bytes,20,opt,name=effect,proto3" json:"effect,omitempty"`
	AllowPaidStars         *wrapperspb.Int64Value   `protobuf:"bytes,21,opt,name=allow_paid_stars,json=allowPaidStars,proto3" json:"allow_paid_stars,omitempty"`
	ReplyToMsgId           *wrapperspb.Int32Value   `protobuf:"bytes,22,opt,name=reply_to_msg_id,json=replyToMsgId,proto3" json:"reply_to_msg_id,omitempty"`
	TopMsgId               *wrapperspb.Int32Value   `protobuf:"bytes,23,opt,name=top_msg_id,json=topMsgId,proto3" json:"top_msg_id,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TLMessagesSendMedia) Reset() {
	*x = TLMessagesSendMedia{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[190]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesSendMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesSendMedia) ProtoMessage() {}

func (x *TLMessagesSendMedia) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[190]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesSendMedia.ProtoReflect.Descriptor instead.
func (*TLMessagesSendMedia) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{190}
}

func (x *TLMessagesSendMedia) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesSendMedia) GetSilent() bool {
	if x != nil {
		return x.Silent
	}
	return false
}

func (x *TLMessagesSendMedia) GetBackground() bool {
	if x != nil {
		return x.Background
	}
	return false
}

func (x *TLMessagesSendMedia) GetClearDraft() bool {
	if x != nil {
		return x.ClearDraft
	}
	return false
}

func (x *TLMessagesSendMedia) GetNoforwards() bool {
	if x != nil {
		return x.Noforwards
	}
	return false
}

func (x *TLMessagesSendMedia) GetUpdateStickersetsOrder() bool {
	if x != nil {
		return x.UpdateStickersetsOrder
	}
	return false
}

func (x *TLMessagesSendMedia) GetInvertMedia() bool {
	if x != nil {
		return x.InvertMedia
	}
	return false
}

func (x *TLMessagesSendMedia) GetAllowPaidFloodskip() bool {
	if x != nil {
		return x.AllowPaidFloodskip
	}
	return false
}

func (x *TLMessagesSendMedia) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesSendMedia) GetReplyTo() *InputReplyTo {
	if x != nil {
		return x.ReplyTo
	}
	return nil
}

func (x *TLMessagesSendMedia) GetMedia() *InputMedia {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *TLMessagesSendMedia) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TLMessagesSendMedia) GetRandomId() int64 {
	if x != nil {
		return x.RandomId
	}
	return 0
}

func (x *TLMessagesSendMedia) GetReplyMarkup() *ReplyMarkup {
	if x != nil {
		return x.ReplyMarkup
	}
	return nil
}

func (x *TLMessagesSendMedia) GetEntities() []*MessageEntity {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *TLMessagesSendMedia) GetScheduleDate() *wrapperspb.Int32Value {
	if x != nil {
		return x.ScheduleDate
	}
	return nil
}

func (x *TLMessagesSendMedia) GetSendAs() *InputPeer {
	if x != nil {
		return x.SendAs
	}
	return nil
}

func (x *TLMessagesSendMedia) GetQuickReplyShortcut() *InputQuickReplyShortcut {
	if x != nil {
		return x.QuickReplyShortcut
	}
	return nil
}

func (x *TLMessagesSendMedia) GetEffect() *wrapperspb.Int64Value {
	if x != nil {
		return x.Effect
	}
	return nil
}

func (x *TLMessagesSendMedia) GetAllowPaidStars() *wrapperspb.Int64Value {
	if x != nil {
		return x.AllowPaidStars
	}
	return nil
}

func (x *TLMessagesSendMedia) GetReplyToMsgId() *wrapperspb.Int32Value {
	if x != nil {
		return x.ReplyToMsgId
	}
	return nil
}

func (x *TLMessagesSendMedia) GetTopMsgId() *wrapperspb.Int32Value {
	if x != nil {
		return x.TopMsgId
	}
	return nil
}

type TLMessagesForwardMessages struct {
	state              protoimpl.MessageState   `protogen:"open.v1"`
	Constructor        TLConstructor            `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Silent             bool                     `protobuf:"varint,3,opt,name=silent,proto3" json:"silent,omitempty"`
	Background         bool                     `protobuf:"varint,4,opt,name=background,proto3" json:"background,omitempty"`
	WithMyScore        bool                     `protobuf:"varint,5,opt,name=with_my_score,json=withMyScore,proto3" json:"with_my_score,omitempty"`
	DropAuthor         bool                     `protobuf:"varint,6,opt,name=drop_author,json=dropAuthor,proto3" json:"drop_author,omitempty"`
	DropMediaCaptions  bool                     `protobuf:"varint,7,opt,name=drop_media_captions,json=dropMediaCaptions,proto3" json:"drop_media_captions,omitempty"`
	Noforwards         bool                     `protobuf:"varint,8,opt,name=noforwards,proto3" json:"noforwards,omitempty"`
	AllowPaidFloodskip bool                     `protobuf:"varint,9,opt,name=allow_paid_floodskip,json=allowPaidFloodskip,proto3" json:"allow_paid_floodskip,omitempty"`
	FromPeer           *InputPeer               `protobuf:"bytes,10,opt,name=from_peer,json=fromPeer,proto3" json:"from_peer,omitempty"`
	Id                 []int32                  `protobuf:"varint,11,rep,packed,name=id,proto3" json:"id,omitempty"`
	RandomId           []int64                  `protobuf:"varint,12,rep,packed,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	ToPeer             *InputPeer               `protobuf:"bytes,13,opt,name=to_peer,json=toPeer,proto3" json:"to_peer,omitempty"`
	TopMsgId           *wrapperspb.Int32Value   `protobuf:"bytes,14,opt,name=top_msg_id,json=topMsgId,proto3" json:"top_msg_id,omitempty"`
	ScheduleDate       *wrapperspb.Int32Value   `protobuf:"bytes,15,opt,name=schedule_date,json=scheduleDate,proto3" json:"schedule_date,omitempty"`
	SendAs             *InputPeer               `protobuf:"bytes,16,opt,name=send_as,json=sendAs,proto3" json:"send_as,omitempty"`
	QuickReplyShortcut *InputQuickReplyShortcut `protobuf:"bytes,17,opt,name=quick_reply_shortcut,json=quickReplyShortcut,proto3" json:"quick_reply_shortcut,omitempty"`
	VideoTimestamp     *wrapperspb.Int32Value   `protobuf:"bytes,18,opt,name=video_timestamp,json=videoTimestamp,proto3" json:"video_timestamp,omitempty"`
	AllowPaidStars     *wrapperspb.Int64Value   `protobuf:"bytes,19,opt,name=allow_paid_stars,json=allowPaidStars,proto3" json:"allow_paid_stars,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *TLMessagesForwardMessages) Reset() {
	*x = TLMessagesForwardMessages{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[191]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesForwardMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesForwardMessages) ProtoMessage() {}

func (x *TLMessagesForwardMessages) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[191]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesForwardMessages.ProtoReflect.Descriptor instead.
func (*TLMessagesForwardMessages) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{191}
}

func (x *TLMessagesForwardMessages) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesForwardMessages) GetSilent() bool {
	if x != nil {
		return x.Silent
	}
	return false
}

func (x *TLMessagesForwardMessages) GetBackground() bool {
	if x != nil {
		return x.Background
	}
	return false
}

func (x *TLMessagesForwardMessages) GetWithMyScore() bool {
	if x != nil {
		return x.WithMyScore
	}
	return false
}

func (x *TLMessagesForwardMessages) GetDropAuthor() bool {
	if x != nil {
		return x.DropAuthor
	}
	return false
}

func (x *TLMessagesForwardMessages) GetDropMediaCaptions() bool {
	if x != nil {
		return x.DropMediaCaptions
	}
	return false
}

func (x *TLMessagesForwardMessages) GetNoforwards() bool {
	if x != nil {
		return x.Noforwards
	}
	return false
}

func (x *TLMessagesForwardMessages) GetAllowPaidFloodskip() bool {
	if x != nil {
		return x.AllowPaidFloodskip
	}
	return false
}

func (x *TLMessagesForwardMessages) GetFromPeer() *InputPeer {
	if x != nil {
		return x.FromPeer
	}
	return nil
}

func (x *TLMessagesForwardMessages) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TLMessagesForwardMessages) GetRandomId() []int64 {
	if x != nil {
		return x.RandomId
	}
	return nil
}

func (x *TLMessagesForwardMessages) GetToPeer() *InputPeer {
	if x != nil {
		return x.ToPeer
	}
	return nil
}

func (x *TLMessagesForwardMessages) GetTopMsgId() *wrapperspb.Int32Value {
	if x != nil {
		return x.TopMsgId
	}
	return nil
}

func (x *TLMessagesForwardMessages) GetScheduleDate() *wrapperspb.Int32Value {
	if x != nil {
		return x.ScheduleDate
	}
	return nil
}

func (x *TLMessagesForwardMessages) GetSendAs() *InputPeer {
	if x != nil {
		return x.SendAs
	}
	return nil
}

func (x *TLMessagesForwardMessages) GetQuickReplyShortcut() *InputQuickReplyShortcut {
	if x != nil {
		return x.QuickReplyShortcut
	}
	return nil
}

func (x *TLMessagesForwardMessages) GetVideoTimestamp() *wrapperspb.Int32Value {
	if x != nil {
		return x.VideoTimestamp
	}
	return nil
}

func (x *TLMessagesForwardMessages) GetAllowPaidStars() *wrapperspb.Int64Value {
	if x != nil {
		return x.AllowPaidStars
	}
	return nil
}

type TLMessagesReportSpam struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesReportSpam) Reset() {
	*x = TLMessagesReportSpam{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[192]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesReportSpam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesReportSpam) ProtoMessage() {}

func (x *TLMessagesReportSpam) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[192]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesReportSpam.ProtoReflect.Descriptor instead.
func (*TLMessagesReportSpam) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{192}
}

func (x *TLMessagesReportSpam) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesReportSpam) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

type TLMessagesGetPeerSettings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetPeerSettings) Reset() {
	*x = TLMessagesGetPeerSettings{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[193]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetPeerSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetPeerSettings) ProtoMessage() {}

func (x *TLMessagesGetPeerSettings) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[193]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetPeerSettings.ProtoReflect.Descriptor instead.
func (*TLMessagesGetPeerSettings) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{193}
}

func (x *TLMessagesGetPeerSettings) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetPeerSettings) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

type TLMessagesReportFC78AF9B struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Id            []int32                `protobuf:"varint,4,rep,packed,name=id,proto3" json:"id,omitempty"`
	Option        []byte                 `protobuf:"bytes,5,opt,name=option,proto3" json:"option,omitempty"`
	Message       string                 `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesReportFC78AF9B) Reset() {
	*x = TLMessagesReportFC78AF9B{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[194]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesReportFC78AF9B) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesReportFC78AF9B) ProtoMessage() {}

func (x *TLMessagesReportFC78AF9B) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[194]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesReportFC78AF9B.ProtoReflect.Descriptor instead.
func (*TLMessagesReportFC78AF9B) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{194}
}

func (x *TLMessagesReportFC78AF9B) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesReportFC78AF9B) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesReportFC78AF9B) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TLMessagesReportFC78AF9B) GetOption() []byte {
	if x != nil {
		return x.Option
	}
	return nil
}

func (x *TLMessagesReportFC78AF9B) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type TLMessagesGetChats struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Id            []int64                `protobuf:"varint,3,rep,packed,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetChats) Reset() {
	*x = TLMessagesGetChats{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[195]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetChats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetChats) ProtoMessage() {}

func (x *TLMessagesGetChats) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[195]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetChats.ProtoReflect.Descriptor instead.
func (*TLMessagesGetChats) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{195}
}

func (x *TLMessagesGetChats) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetChats) GetId() []int64 {
	if x != nil {
		return x.Id
	}
	return nil
}

type TLMessagesGetFullChat struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	ChatId        int64                  `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetFullChat) Reset() {
	*x = TLMessagesGetFullChat{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[196]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetFullChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetFullChat) ProtoMessage() {}

func (x *TLMessagesGetFullChat) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[196]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetFullChat.ProtoReflect.Descriptor instead.
func (*TLMessagesGetFullChat) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{196}
}

func (x *TLMessagesGetFullChat) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetFullChat) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

type TLMessagesEditChatTitle struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	ChatId        int64                  `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Title         string                 `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesEditChatTitle) Reset() {
	*x = TLMessagesEditChatTitle{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[197]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesEditChatTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesEditChatTitle) ProtoMessage() {}

func (x *TLMessagesEditChatTitle) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[197]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesEditChatTitle.ProtoReflect.Descriptor instead.
func (*TLMessagesEditChatTitle) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{197}
}

func (x *TLMessagesEditChatTitle) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesEditChatTitle) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *TLMessagesEditChatTitle) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type TLMessagesEditChatPhoto struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	ChatId        int64                  `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Photo         *InputChatPhoto        `protobuf:"bytes,4,opt,name=photo,proto3" json:"photo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesEditChatPhoto) Reset() {
	*x = TLMessagesEditChatPhoto{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[198]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesEditChatPhoto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesEditChatPhoto) ProtoMessage() {}

func (x *TLMessagesEditChatPhoto) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[198]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesEditChatPhoto.ProtoReflect.Descriptor instead.
func (*TLMessagesEditChatPhoto) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{198}
}

func (x *TLMessagesEditChatPhoto) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesEditChatPhoto) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *TLMessagesEditChatPhoto) GetPhoto() *InputChatPhoto {
	if x != nil {
		return x.Photo
	}
	return nil
}

type TLMessagesAddChatUserCBC6D107 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	ChatId        int64                  `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	UserId        *InputUser             `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	FwdLimit      int32                  `protobuf:"varint,5,opt,name=fwd_limit,json=fwdLimit,proto3" json:"fwd_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesAddChatUserCBC6D107) Reset() {
	*x = TLMessagesAddChatUserCBC6D107{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[199]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesAddChatUserCBC6D107) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesAddChatUserCBC6D107) ProtoMessage() {}

func (x *TLMessagesAddChatUserCBC6D107) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[199]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesAddChatUserCBC6D107.ProtoReflect.Descriptor instead.
func (*TLMessagesAddChatUserCBC6D107) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{199}
}

func (x *TLMessagesAddChatUserCBC6D107) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesAddChatUserCBC6D107) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *TLMessagesAddChatUserCBC6D107) GetUserId() *InputUser {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *TLMessagesAddChatUserCBC6D107) GetFwdLimit() int32 {
	if x != nil {
		return x.FwdLimit
	}
	return 0
}

type TLMessagesDeleteChatUser struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	RevokeHistory bool                   `protobuf:"varint,3,opt,name=revoke_history,json=revokeHistory,proto3" json:"revoke_history,omitempty"`
	ChatId        int64                  `protobuf:"varint,4,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	UserId        *InputUser             `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesDeleteChatUser) Reset() {
	*x = TLMessagesDeleteChatUser{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[200]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesDeleteChatUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesDeleteChatUser) ProtoMessage() {}

func (x *TLMessagesDeleteChatUser) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[200]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesDeleteChatUser.ProtoReflect.Descriptor instead.
func (*TLMessagesDeleteChatUser) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{200}
}

func (x *TLMessagesDeleteChatUser) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesDeleteChatUser) GetRevokeHistory() bool {
	if x != nil {
		return x.RevokeHistory
	}
	return false
}

func (x *TLMessagesDeleteChatUser) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *TLMessagesDeleteChatUser) GetUserId() *InputUser {
	if x != nil {
		return x.UserId
	}
	return nil
}

type TLMessagesCreateChat92CEDDD4 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Users         []*InputUser           `protobuf:"bytes,3,rep,name=users,proto3" json:"users,omitempty"`
	Title         string                 `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	TtlPeriod     *wrapperspb.Int32Value `protobuf:"bytes,5,opt,name=ttl_period,json=ttlPeriod,proto3" json:"ttl_period,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesCreateChat92CEDDD4) Reset() {
	*x = TLMessagesCreateChat92CEDDD4{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[201]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesCreateChat92CEDDD4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesCreateChat92CEDDD4) ProtoMessage() {}

func (x *TLMessagesCreateChat92CEDDD4) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[201]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesCreateChat92CEDDD4.ProtoReflect.Descriptor instead.
func (*TLMessagesCreateChat92CEDDD4) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{201}
}

func (x *TLMessagesCreateChat92CEDDD4) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesCreateChat92CEDDD4) GetUsers() []*InputUser {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *TLMessagesCreateChat92CEDDD4) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TLMessagesCreateChat92CEDDD4) GetTtlPeriod() *wrapperspb.Int32Value {
	if x != nil {
		return x.TtlPeriod
	}
	return nil
}

type TLMessagesGetDhConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Version       int32                  `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	RandomLength  int32                  `protobuf:"varint,4,opt,name=random_length,json=randomLength,proto3" json:"random_length,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetDhConfig) Reset() {
	*x = TLMessagesGetDhConfig{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[202]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetDhConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetDhConfig) ProtoMessage() {}

func (x *TLMessagesGetDhConfig) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[202]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetDhConfig.ProtoReflect.Descriptor instead.
func (*TLMessagesGetDhConfig) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{202}
}

func (x *TLMessagesGetDhConfig) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetDhConfig) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *TLMessagesGetDhConfig) GetRandomLength() int32 {
	if x != nil {
		return x.RandomLength
	}
	return 0
}

type TLMessagesRequestEncryption struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	UserId        *InputUser             `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RandomId      int32                  `protobuf:"varint,4,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	GA            []byte                 `protobuf:"bytes,5,opt,name=g_a,json=gA,proto3" json:"g_a,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesRequestEncryption) Reset() {
	*x = TLMessagesRequestEncryption{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[203]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesRequestEncryption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesRequestEncryption) ProtoMessage() {}

func (x *TLMessagesRequestEncryption) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[203]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesRequestEncryption.ProtoReflect.Descriptor instead.
func (*TLMessagesRequestEncryption) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{203}
}

func (x *TLMessagesRequestEncryption) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesRequestEncryption) GetUserId() *InputUser {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *TLMessagesRequestEncryption) GetRandomId() int32 {
	if x != nil {
		return x.RandomId
	}
	return 0
}

func (x *TLMessagesRequestEncryption) GetGA() []byte {
	if x != nil {
		return x.GA
	}
	return nil
}

type TLMessagesAcceptEncryption struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Constructor    TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer           *InputEncryptedChat    `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	GB             []byte                 `protobuf:"bytes,4,opt,name=g_b,json=gB,proto3" json:"g_b,omitempty"`
	KeyFingerprint int64                  `protobuf:"varint,5,opt,name=key_fingerprint,json=keyFingerprint,proto3" json:"key_fingerprint,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TLMessagesAcceptEncryption) Reset() {
	*x = TLMessagesAcceptEncryption{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[204]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesAcceptEncryption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesAcceptEncryption) ProtoMessage() {}

func (x *TLMessagesAcceptEncryption) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[204]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesAcceptEncryption.ProtoReflect.Descriptor instead.
func (*TLMessagesAcceptEncryption) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{204}
}

func (x *TLMessagesAcceptEncryption) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesAcceptEncryption) GetPeer() *InputEncryptedChat {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesAcceptEncryption) GetGB() []byte {
	if x != nil {
		return x.GB
	}
	return nil
}

func (x *TLMessagesAcceptEncryption) GetKeyFingerprint() int64 {
	if x != nil {
		return x.KeyFingerprint
	}
	return 0
}

type TLMessagesDiscardEncryption struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	DeleteHistory bool                   `protobuf:"varint,3,opt,name=delete_history,json=deleteHistory,proto3" json:"delete_history,omitempty"`
	ChatId        int32                  `protobuf:"varint,4,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesDiscardEncryption) Reset() {
	*x = TLMessagesDiscardEncryption{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[205]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesDiscardEncryption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesDiscardEncryption) ProtoMessage() {}

func (x *TLMessagesDiscardEncryption) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[205]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesDiscardEncryption.ProtoReflect.Descriptor instead.
func (*TLMessagesDiscardEncryption) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{205}
}

func (x *TLMessagesDiscardEncryption) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesDiscardEncryption) GetDeleteHistory() bool {
	if x != nil {
		return x.DeleteHistory
	}
	return false
}

func (x *TLMessagesDiscardEncryption) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

type TLMessagesSetEncryptedTyping struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputEncryptedChat    `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Typing        *Bool                  `protobuf:"bytes,4,opt,name=typing,proto3" json:"typing,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesSetEncryptedTyping) Reset() {
	*x = TLMessagesSetEncryptedTyping{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[206]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesSetEncryptedTyping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesSetEncryptedTyping) ProtoMessage() {}

func (x *TLMessagesSetEncryptedTyping) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[206]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesSetEncryptedTyping.ProtoReflect.Descriptor instead.
func (*TLMessagesSetEncryptedTyping) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{206}
}

func (x *TLMessagesSetEncryptedTyping) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesSetEncryptedTyping) GetPeer() *InputEncryptedChat {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesSetEncryptedTyping) GetTyping() *Bool {
	if x != nil {
		return x.Typing
	}
	return nil
}

type TLMessagesReadEncryptedHistory struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputEncryptedChat    `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	MaxDate       int32                  `protobuf:"varint,4,opt,name=max_date,json=maxDate,proto3" json:"max_date,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesReadEncryptedHistory) Reset() {
	*x = TLMessagesReadEncryptedHistory{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[207]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesReadEncryptedHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesReadEncryptedHistory) ProtoMessage() {}

func (x *TLMessagesReadEncryptedHistory) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[207]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesReadEncryptedHistory.ProtoReflect.Descriptor instead.
func (*TLMessagesReadEncryptedHistory) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{207}
}

func (x *TLMessagesReadEncryptedHistory) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesReadEncryptedHistory) GetPeer() *InputEncryptedChat {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesReadEncryptedHistory) GetMaxDate() int32 {
	if x != nil {
		return x.MaxDate
	}
	return 0
}

type TLMessagesSendEncrypted struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Silent        bool                   `protobuf:"varint,3,opt,name=silent,proto3" json:"silent,omitempty"`
	Peer          *InputEncryptedChat    `protobuf:"bytes,4,opt,name=peer,proto3" json:"peer,omitempty"`
	RandomId      int64                  `protobuf:"varint,5,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	Data          []byte                 `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesSendEncrypted) Reset() {
	*x = TLMessagesSendEncrypted{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[208]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesSendEncrypted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesSendEncrypted) ProtoMessage() {}

func (x *TLMessagesSendEncrypted) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[208]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesSendEncrypted.ProtoReflect.Descriptor instead.
func (*TLMessagesSendEncrypted) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{208}
}

func (x *TLMessagesSendEncrypted) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesSendEncrypted) GetSilent() bool {
	if x != nil {
		return x.Silent
	}
	return false
}

func (x *TLMessagesSendEncrypted) GetPeer() *InputEncryptedChat {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesSendEncrypted) GetRandomId() int64 {
	if x != nil {
		return x.RandomId
	}
	return 0
}

func (x *TLMessagesSendEncrypted) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type TLMessagesSendEncryptedFile struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Silent        bool                   `protobuf:"varint,3,opt,name=silent,proto3" json:"silent,omitempty"`
	Peer          *InputEncryptedChat    `protobuf:"bytes,4,opt,name=peer,proto3" json:"peer,omitempty"`
	RandomId      int64                  `protobuf:"varint,5,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	Data          []byte                 `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	File          *InputEncryptedFile    `protobuf:"bytes,7,opt,name=file,proto3" json:"file,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesSendEncryptedFile) Reset() {
	*x = TLMessagesSendEncryptedFile{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[209]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesSendEncryptedFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesSendEncryptedFile) ProtoMessage() {}

func (x *TLMessagesSendEncryptedFile) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[209]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesSendEncryptedFile.ProtoReflect.Descriptor instead.
func (*TLMessagesSendEncryptedFile) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{209}
}

func (x *TLMessagesSendEncryptedFile) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesSendEncryptedFile) GetSilent() bool {
	if x != nil {
		return x.Silent
	}
	return false
}

func (x *TLMessagesSendEncryptedFile) GetPeer() *InputEncryptedChat {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesSendEncryptedFile) GetRandomId() int64 {
	if x != nil {
		return x.RandomId
	}
	return 0
}

func (x *TLMessagesSendEncryptedFile) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TLMessagesSendEncryptedFile) GetFile() *InputEncryptedFile {
	if x != nil {
		return x.File
	}
	return nil
}

type TLMessagesSendEncryptedService struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputEncryptedChat    `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	RandomId      int64                  `protobuf:"varint,4,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	Data          []byte                 `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesSendEncryptedService) Reset() {
	*x = TLMessagesSendEncryptedService{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[210]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesSendEncryptedService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesSendEncryptedService) ProtoMessage() {}

func (x *TLMessagesSendEncryptedService) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[210]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesSendEncryptedService.ProtoReflect.Descriptor instead.
func (*TLMessagesSendEncryptedService) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{210}
}

func (x *TLMessagesSendEncryptedService) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesSendEncryptedService) GetPeer() *InputEncryptedChat {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesSendEncryptedService) GetRandomId() int64 {
	if x != nil {
		return x.RandomId
	}
	return 0
}

func (x *TLMessagesSendEncryptedService) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type TLMessagesReceivedQueue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	MaxQts        int32                  `protobuf:"varint,3,opt,name=max_qts,json=maxQts,proto3" json:"max_qts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesReceivedQueue) Reset() {
	*x = TLMessagesReceivedQueue{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[211]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesReceivedQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesReceivedQueue) ProtoMessage() {}

func (x *TLMessagesReceivedQueue) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[211]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesReceivedQueue.ProtoReflect.Descriptor instead.
func (*TLMessagesReceivedQueue) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{211}
}

func (x *TLMessagesReceivedQueue) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesReceivedQueue) GetMaxQts() int32 {
	if x != nil {
		return x.MaxQts
	}
	return 0
}

type TLMessagesReportEncryptedSpam struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputEncryptedChat    `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesReportEncryptedSpam) Reset() {
	*x = TLMessagesReportEncryptedSpam{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[212]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesReportEncryptedSpam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesReportEncryptedSpam) ProtoMessage() {}

func (x *TLMessagesReportEncryptedSpam) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[212]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesReportEncryptedSpam.ProtoReflect.Descriptor instead.
func (*TLMessagesReportEncryptedSpam) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{212}
}

func (x *TLMessagesReportEncryptedSpam) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesReportEncryptedSpam) GetPeer() *InputEncryptedChat {
	if x != nil {
		return x.Peer
	}
	return nil
}

type TLMessagesReadMessageContents struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Id            []int32                `protobuf:"varint,3,rep,packed,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesReadMessageContents) Reset() {
	*x = TLMessagesReadMessageContents{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[213]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesReadMessageContents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesReadMessageContents) ProtoMessage() {}

func (x *TLMessagesReadMessageContents) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[213]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesReadMessageContents.ProtoReflect.Descriptor instead.
func (*TLMessagesReadMessageContents) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{213}
}

func (x *TLMessagesReadMessageContents) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesReadMessageContents) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

type TLMessagesGetStickers struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Emoticon      string                 `protobuf:"bytes,3,opt,name=emoticon,proto3" json:"emoticon,omitempty"`
	Hash          int64                  `protobuf:"varint,4,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetStickers) Reset() {
	*x = TLMessagesGetStickers{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[214]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetStickers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetStickers) ProtoMessage() {}

func (x *TLMessagesGetStickers) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[214]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetStickers.ProtoReflect.Descriptor instead.
func (*TLMessagesGetStickers) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{214}
}

func (x *TLMessagesGetStickers) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetStickers) GetEmoticon() string {
	if x != nil {
		return x.Emoticon
	}
	return ""
}

func (x *TLMessagesGetStickers) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLMessagesGetAllStickers struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Hash          int64                  `protobuf:"varint,3,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetAllStickers) Reset() {
	*x = TLMessagesGetAllStickers{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[215]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetAllStickers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetAllStickers) ProtoMessage() {}

func (x *TLMessagesGetAllStickers) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[215]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetAllStickers.ProtoReflect.Descriptor instead.
func (*TLMessagesGetAllStickers) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{215}
}

func (x *TLMessagesGetAllStickers) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetAllStickers) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLMessagesGetWebPagePreview570D6F6F struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Entities      []*MessageEntity       `protobuf:"bytes,4,rep,name=entities,proto3" json:"entities,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetWebPagePreview570D6F6F) Reset() {
	*x = TLMessagesGetWebPagePreview570D6F6F{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[216]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetWebPagePreview570D6F6F) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetWebPagePreview570D6F6F) ProtoMessage() {}

func (x *TLMessagesGetWebPagePreview570D6F6F) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[216]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetWebPagePreview570D6F6F.ProtoReflect.Descriptor instead.
func (*TLMessagesGetWebPagePreview570D6F6F) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{216}
}

func (x *TLMessagesGetWebPagePreview570D6F6F) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetWebPagePreview570D6F6F) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TLMessagesGetWebPagePreview570D6F6F) GetEntities() []*MessageEntity {
	if x != nil {
		return x.Entities
	}
	return nil
}

type TLMessagesExportChatInvite struct {
	state                 protoimpl.MessageState    `protogen:"open.v1"`
	Constructor           TLConstructor             `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	LegacyRevokePermanent bool                      `protobuf:"varint,3,opt,name=legacy_revoke_permanent,json=legacyRevokePermanent,proto3" json:"legacy_revoke_permanent,omitempty"`
	RequestNeeded         bool                      `protobuf:"varint,4,opt,name=request_needed,json=requestNeeded,proto3" json:"request_needed,omitempty"`
	Peer                  *InputPeer                `protobuf:"bytes,5,opt,name=peer,proto3" json:"peer,omitempty"`
	ExpireDate            *wrapperspb.Int32Value    `protobuf:"bytes,6,opt,name=expire_date,json=expireDate,proto3" json:"expire_date,omitempty"`
	UsageLimit            *wrapperspb.Int32Value    `protobuf:"bytes,7,opt,name=usage_limit,json=usageLimit,proto3" json:"usage_limit,omitempty"`
	Title                 *wrapperspb.StringValue   `protobuf:"bytes,8,opt,name=title,proto3" json:"title,omitempty"`
	SubscriptionPricing   *StarsSubscriptionPricing `protobuf:"bytes,9,opt,name=subscription_pricing,json=subscriptionPricing,proto3" json:"subscription_pricing,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *TLMessagesExportChatInvite) Reset() {
	*x = TLMessagesExportChatInvite{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[217]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesExportChatInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesExportChatInvite) ProtoMessage() {}

func (x *TLMessagesExportChatInvite) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[217]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesExportChatInvite.ProtoReflect.Descriptor instead.
func (*TLMessagesExportChatInvite) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{217}
}

func (x *TLMessagesExportChatInvite) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesExportChatInvite) GetLegacyRevokePermanent() bool {
	if x != nil {
		return x.LegacyRevokePermanent
	}
	return false
}

func (x *TLMessagesExportChatInvite) GetRequestNeeded() bool {
	if x != nil {
		return x.RequestNeeded
	}
	return false
}

func (x *TLMessagesExportChatInvite) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesExportChatInvite) GetExpireDate() *wrapperspb.Int32Value {
	if x != nil {
		return x.ExpireDate
	}
	return nil
}

func (x *TLMessagesExportChatInvite) GetUsageLimit() *wrapperspb.Int32Value {
	if x != nil {
		return x.UsageLimit
	}
	return nil
}

func (x *TLMessagesExportChatInvite) GetTitle() *wrapperspb.StringValue {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *TLMessagesExportChatInvite) GetSubscriptionPricing() *StarsSubscriptionPricing {
	if x != nil {
		return x.SubscriptionPricing
	}
	return nil
}

type TLMessagesCheckChatInvite struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Hash          string                 `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesCheckChatInvite) Reset() {
	*x = TLMessagesCheckChatInvite{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[218]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesCheckChatInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesCheckChatInvite) ProtoMessage() {}

func (x *TLMessagesCheckChatInvite) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[218]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesCheckChatInvite.ProtoReflect.Descriptor instead.
func (*TLMessagesCheckChatInvite) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{218}
}

func (x *TLMessagesCheckChatInvite) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesCheckChatInvite) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type TLMessagesImportChatInvite struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Hash          string                 `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesImportChatInvite) Reset() {
	*x = TLMessagesImportChatInvite{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[219]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesImportChatInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesImportChatInvite) ProtoMessage() {}

func (x *TLMessagesImportChatInvite) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[219]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesImportChatInvite.ProtoReflect.Descriptor instead.
func (*TLMessagesImportChatInvite) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{219}
}

func (x *TLMessagesImportChatInvite) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesImportChatInvite) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type TLMessagesGetStickerSet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Stickerset    *InputStickerSet       `protobuf:"bytes,3,opt,name=stickerset,proto3" json:"stickerset,omitempty"`
	Hash          int32                  `protobuf:"varint,4,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetStickerSet) Reset() {
	*x = TLMessagesGetStickerSet{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[220]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetStickerSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetStickerSet) ProtoMessage() {}

func (x *TLMessagesGetStickerSet) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[220]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetStickerSet.ProtoReflect.Descriptor instead.
func (*TLMessagesGetStickerSet) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{220}
}

func (x *TLMessagesGetStickerSet) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetStickerSet) GetStickerset() *InputStickerSet {
	if x != nil {
		return x.Stickerset
	}
	return nil
}

func (x *TLMessagesGetStickerSet) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLMessagesInstallStickerSet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Stickerset    *InputStickerSet       `protobuf:"bytes,3,opt,name=stickerset,proto3" json:"stickerset,omitempty"`
	Archived      *Bool                  `protobuf:"bytes,4,opt,name=archived,proto3" json:"archived,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesInstallStickerSet) Reset() {
	*x = TLMessagesInstallStickerSet{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[221]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesInstallStickerSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesInstallStickerSet) ProtoMessage() {}

func (x *TLMessagesInstallStickerSet) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[221]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesInstallStickerSet.ProtoReflect.Descriptor instead.
func (*TLMessagesInstallStickerSet) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{221}
}

func (x *TLMessagesInstallStickerSet) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesInstallStickerSet) GetStickerset() *InputStickerSet {
	if x != nil {
		return x.Stickerset
	}
	return nil
}

func (x *TLMessagesInstallStickerSet) GetArchived() *Bool {
	if x != nil {
		return x.Archived
	}
	return nil
}

type TLMessagesUninstallStickerSet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Stickerset    *InputStickerSet       `protobuf:"bytes,3,opt,name=stickerset,proto3" json:"stickerset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesUninstallStickerSet) Reset() {
	*x = TLMessagesUninstallStickerSet{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[222]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesUninstallStickerSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesUninstallStickerSet) ProtoMessage() {}

func (x *TLMessagesUninstallStickerSet) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[222]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesUninstallStickerSet.ProtoReflect.Descriptor instead.
func (*TLMessagesUninstallStickerSet) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{222}
}

func (x *TLMessagesUninstallStickerSet) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesUninstallStickerSet) GetStickerset() *InputStickerSet {
	if x != nil {
		return x.Stickerset
	}
	return nil
}

type TLMessagesStartBot struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Bot           *InputUser             `protobuf:"bytes,3,opt,name=bot,proto3" json:"bot,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,4,opt,name=peer,proto3" json:"peer,omitempty"`
	RandomId      int64                  `protobuf:"varint,5,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	StartParam    string                 `protobuf:"bytes,6,opt,name=start_param,json=startParam,proto3" json:"start_param,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesStartBot) Reset() {
	*x = TLMessagesStartBot{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[223]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesStartBot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesStartBot) ProtoMessage() {}

func (x *TLMessagesStartBot) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[223]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesStartBot.ProtoReflect.Descriptor instead.
func (*TLMessagesStartBot) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{223}
}

func (x *TLMessagesStartBot) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesStartBot) GetBot() *InputUser {
	if x != nil {
		return x.Bot
	}
	return nil
}

func (x *TLMessagesStartBot) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesStartBot) GetRandomId() int64 {
	if x != nil {
		return x.RandomId
	}
	return 0
}

func (x *TLMessagesStartBot) GetStartParam() string {
	if x != nil {
		return x.StartParam
	}
	return ""
}

type TLMessagesGetMessagesViews struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Id            []int32                `protobuf:"varint,4,rep,packed,name=id,proto3" json:"id,omitempty"`
	Increment     *Bool                  `protobuf:"bytes,5,opt,name=increment,proto3" json:"increment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetMessagesViews) Reset() {
	*x = TLMessagesGetMessagesViews{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[224]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetMessagesViews) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetMessagesViews) ProtoMessage() {}

func (x *TLMessagesGetMessagesViews) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[224]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetMessagesViews.ProtoReflect.Descriptor instead.
func (*TLMessagesGetMessagesViews) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{224}
}

func (x *TLMessagesGetMessagesViews) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetMessagesViews) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesGetMessagesViews) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TLMessagesGetMessagesViews) GetIncrement() *Bool {
	if x != nil {
		return x.Increment
	}
	return nil
}

type TLMessagesEditChatAdmin struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	ChatId        int64                  `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	UserId        *InputUser             `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	IsAdmin       *Bool                  `protobuf:"bytes,5,opt,name=is_admin,json=isAdmin,proto3" json:"is_admin,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesEditChatAdmin) Reset() {
	*x = TLMessagesEditChatAdmin{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[225]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesEditChatAdmin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesEditChatAdmin) ProtoMessage() {}

func (x *TLMessagesEditChatAdmin) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[225]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesEditChatAdmin.ProtoReflect.Descriptor instead.
func (*TLMessagesEditChatAdmin) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{225}
}

func (x *TLMessagesEditChatAdmin) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesEditChatAdmin) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *TLMessagesEditChatAdmin) GetUserId() *InputUser {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *TLMessagesEditChatAdmin) GetIsAdmin() *Bool {
	if x != nil {
		return x.IsAdmin
	}
	return nil
}

type TLMessagesMigrateChat struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	ChatId        int64                  `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesMigrateChat) Reset() {
	*x = TLMessagesMigrateChat{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[226]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesMigrateChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesMigrateChat) ProtoMessage() {}

func (x *TLMessagesMigrateChat) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[226]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesMigrateChat.ProtoReflect.Descriptor instead.
func (*TLMessagesMigrateChat) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{226}
}

func (x *TLMessagesMigrateChat) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesMigrateChat) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

type TLMessagesSearchGlobal struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Constructor    TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	BroadcastsOnly bool                   `protobuf:"varint,3,opt,name=broadcasts_only,json=broadcastsOnly,proto3" json:"broadcasts_only,omitempty"`
	GroupsOnly     bool                   `protobuf:"varint,4,opt,name=groups_only,json=groupsOnly,proto3" json:"groups_only,omitempty"`
	UsersOnly      bool                   `protobuf:"varint,5,opt,name=users_only,json=usersOnly,proto3" json:"users_only,omitempty"`
	FolderId       *wrapperspb.Int32Value `protobuf:"bytes,6,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	Q              string                 `protobuf:"bytes,7,opt,name=q,proto3" json:"q,omitempty"`
	Filter         *MessagesFilter        `protobuf:"bytes,8,opt,name=filter,proto3" json:"filter,omitempty"`
	MinDate        int32                  `protobuf:"varint,9,opt,name=min_date,json=minDate,proto3" json:"min_date,omitempty"`
	MaxDate        int32                  `protobuf:"varint,10,opt,name=max_date,json=maxDate,proto3" json:"max_date,omitempty"`
	OffsetRate     int32                  `protobuf:"varint,11,opt,name=offset_rate,json=offsetRate,proto3" json:"offset_rate,omitempty"`
	OffsetPeer     *InputPeer             `protobuf:"bytes,12,opt,name=offset_peer,json=offsetPeer,proto3" json:"offset_peer,omitempty"`
	OffsetId       int32                  `protobuf:"varint,13,opt,name=offset_id,json=offsetId,proto3" json:"offset_id,omitempty"`
	Limit          int32                  `protobuf:"varint,14,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TLMessagesSearchGlobal) Reset() {
	*x = TLMessagesSearchGlobal{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[227]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesSearchGlobal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesSearchGlobal) ProtoMessage() {}

func (x *TLMessagesSearchGlobal) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[227]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesSearchGlobal.ProtoReflect.Descriptor instead.
func (*TLMessagesSearchGlobal) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{227}
}

func (x *TLMessagesSearchGlobal) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesSearchGlobal) GetBroadcastsOnly() bool {
	if x != nil {
		return x.BroadcastsOnly
	}
	return false
}

func (x *TLMessagesSearchGlobal) GetGroupsOnly() bool {
	if x != nil {
		return x.GroupsOnly
	}
	return false
}

func (x *TLMessagesSearchGlobal) GetUsersOnly() bool {
	if x != nil {
		return x.UsersOnly
	}
	return false
}

func (x *TLMessagesSearchGlobal) GetFolderId() *wrapperspb.Int32Value {
	if x != nil {
		return x.FolderId
	}
	return nil
}

func (x *TLMessagesSearchGlobal) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *TLMessagesSearchGlobal) GetFilter() *MessagesFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *TLMessagesSearchGlobal) GetMinDate() int32 {
	if x != nil {
		return x.MinDate
	}
	return 0
}

func (x *TLMessagesSearchGlobal) GetMaxDate() int32 {
	if x != nil {
		return x.MaxDate
	}
	return 0
}

func (x *TLMessagesSearchGlobal) GetOffsetRate() int32 {
	if x != nil {
		return x.OffsetRate
	}
	return 0
}

func (x *TLMessagesSearchGlobal) GetOffsetPeer() *InputPeer {
	if x != nil {
		return x.OffsetPeer
	}
	return nil
}

func (x *TLMessagesSearchGlobal) GetOffsetId() int32 {
	if x != nil {
		return x.OffsetId
	}
	return 0
}

func (x *TLMessagesSearchGlobal) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TLMessagesReorderStickerSets struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Masks         bool                   `protobuf:"varint,3,opt,name=masks,proto3" json:"masks,omitempty"`
	Emojis        bool                   `protobuf:"varint,4,opt,name=emojis,proto3" json:"emojis,omitempty"`
	Order         []int64                `protobuf:"varint,5,rep,packed,name=order,proto3" json:"order,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesReorderStickerSets) Reset() {
	*x = TLMessagesReorderStickerSets{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[228]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesReorderStickerSets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesReorderStickerSets) ProtoMessage() {}

func (x *TLMessagesReorderStickerSets) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[228]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesReorderStickerSets.ProtoReflect.Descriptor instead.
func (*TLMessagesReorderStickerSets) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{228}
}

func (x *TLMessagesReorderStickerSets) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesReorderStickerSets) GetMasks() bool {
	if x != nil {
		return x.Masks
	}
	return false
}

func (x *TLMessagesReorderStickerSets) GetEmojis() bool {
	if x != nil {
		return x.Emojis
	}
	return false
}

func (x *TLMessagesReorderStickerSets) GetOrder() []int64 {
	if x != nil {
		return x.Order
	}
	return nil
}

type TLMessagesGetDocumentByHash struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Sha256        []byte                 `protobuf:"bytes,3,opt,name=sha256,proto3" json:"sha256,omitempty"`
	Size2_INT64   int64                  `protobuf:"varint,4,opt,name=size2_INT64,json=size2INT64,proto3" json:"size2_INT64,omitempty"`
	MimeType      string                 `protobuf:"bytes,5,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	Size2_INT32   int32                  `protobuf:"varint,6,opt,name=size2_INT32,json=size2INT32,proto3" json:"size2_INT32,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetDocumentByHash) Reset() {
	*x = TLMessagesGetDocumentByHash{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[229]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetDocumentByHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetDocumentByHash) ProtoMessage() {}

func (x *TLMessagesGetDocumentByHash) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[229]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetDocumentByHash.ProtoReflect.Descriptor instead.
func (*TLMessagesGetDocumentByHash) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{229}
}

func (x *TLMessagesGetDocumentByHash) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetDocumentByHash) GetSha256() []byte {
	if x != nil {
		return x.Sha256
	}
	return nil
}

func (x *TLMessagesGetDocumentByHash) GetSize2_INT64() int64 {
	if x != nil {
		return x.Size2_INT64
	}
	return 0
}

func (x *TLMessagesGetDocumentByHash) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *TLMessagesGetDocumentByHash) GetSize2_INT32() int32 {
	if x != nil {
		return x.Size2_INT32
	}
	return 0
}

type TLMessagesGetSavedGifs struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Hash          int64                  `protobuf:"varint,3,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetSavedGifs) Reset() {
	*x = TLMessagesGetSavedGifs{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[230]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetSavedGifs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetSavedGifs) ProtoMessage() {}

func (x *TLMessagesGetSavedGifs) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[230]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetSavedGifs.ProtoReflect.Descriptor instead.
func (*TLMessagesGetSavedGifs) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{230}
}

func (x *TLMessagesGetSavedGifs) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetSavedGifs) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLMessagesSaveGif struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Id            *InputDocument         `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Unsave        *Bool                  `protobuf:"bytes,4,opt,name=unsave,proto3" json:"unsave,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesSaveGif) Reset() {
	*x = TLMessagesSaveGif{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[231]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesSaveGif) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesSaveGif) ProtoMessage() {}

func (x *TLMessagesSaveGif) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[231]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesSaveGif.ProtoReflect.Descriptor instead.
func (*TLMessagesSaveGif) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{231}
}

func (x *TLMessagesSaveGif) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesSaveGif) GetId() *InputDocument {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TLMessagesSaveGif) GetUnsave() *Bool {
	if x != nil {
		return x.Unsave
	}
	return nil
}

type TLMessagesGetInlineBotResults struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Bot           *InputUser             `protobuf:"bytes,3,opt,name=bot,proto3" json:"bot,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,4,opt,name=peer,proto3" json:"peer,omitempty"`
	GeoPoint      *InputGeoPoint         `protobuf:"bytes,5,opt,name=geo_point,json=geoPoint,proto3" json:"geo_point,omitempty"`
	Query         string                 `protobuf:"bytes,6,opt,name=query,proto3" json:"query,omitempty"`
	Offset        string                 `protobuf:"bytes,7,opt,name=offset,proto3" json:"offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetInlineBotResults) Reset() {
	*x = TLMessagesGetInlineBotResults{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[232]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetInlineBotResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetInlineBotResults) ProtoMessage() {}

func (x *TLMessagesGetInlineBotResults) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[232]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetInlineBotResults.ProtoReflect.Descriptor instead.
func (*TLMessagesGetInlineBotResults) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{232}
}

func (x *TLMessagesGetInlineBotResults) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetInlineBotResults) GetBot() *InputUser {
	if x != nil {
		return x.Bot
	}
	return nil
}

func (x *TLMessagesGetInlineBotResults) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesGetInlineBotResults) GetGeoPoint() *InputGeoPoint {
	if x != nil {
		return x.GeoPoint
	}
	return nil
}

func (x *TLMessagesGetInlineBotResults) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *TLMessagesGetInlineBotResults) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

type TLMessagesSetInlineBotResults struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Constructor   TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Gallery       bool                    `protobuf:"varint,3,opt,name=gallery,proto3" json:"gallery,omitempty"`
	Private       bool                    `protobuf:"varint,4,opt,name=private,proto3" json:"private,omitempty"`
	QueryId       int64                   `protobuf:"varint,5,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	Results       []*InputBotInlineResult `protobuf:"bytes,6,rep,name=results,proto3" json:"results,omitempty"`
	CacheTime     int32                   `protobuf:"varint,7,opt,name=cache_time,json=cacheTime,proto3" json:"cache_time,omitempty"`
	NextOffset    *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=next_offset,json=nextOffset,proto3" json:"next_offset,omitempty"`
	SwitchPm      *InlineBotSwitchPM      `protobuf:"bytes,9,opt,name=switch_pm,json=switchPm,proto3" json:"switch_pm,omitempty"`
	SwitchWebview *InlineBotWebView       `protobuf:"bytes,10,opt,name=switch_webview,json=switchWebview,proto3" json:"switch_webview,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesSetInlineBotResults) Reset() {
	*x = TLMessagesSetInlineBotResults{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[233]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesSetInlineBotResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesSetInlineBotResults) ProtoMessage() {}

func (x *TLMessagesSetInlineBotResults) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[233]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesSetInlineBotResults.ProtoReflect.Descriptor instead.
func (*TLMessagesSetInlineBotResults) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{233}
}

func (x *TLMessagesSetInlineBotResults) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesSetInlineBotResults) GetGallery() bool {
	if x != nil {
		return x.Gallery
	}
	return false
}

func (x *TLMessagesSetInlineBotResults) GetPrivate() bool {
	if x != nil {
		return x.Private
	}
	return false
}

func (x *TLMessagesSetInlineBotResults) GetQueryId() int64 {
	if x != nil {
		return x.QueryId
	}
	return 0
}

func (x *TLMessagesSetInlineBotResults) GetResults() []*InputBotInlineResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *TLMessagesSetInlineBotResults) GetCacheTime() int32 {
	if x != nil {
		return x.CacheTime
	}
	return 0
}

func (x *TLMessagesSetInlineBotResults) GetNextOffset() *wrapperspb.StringValue {
	if x != nil {
		return x.NextOffset
	}
	return nil
}

func (x *TLMessagesSetInlineBotResults) GetSwitchPm() *InlineBotSwitchPM {
	if x != nil {
		return x.SwitchPm
	}
	return nil
}

func (x *TLMessagesSetInlineBotResults) GetSwitchWebview() *InlineBotWebView {
	if x != nil {
		return x.SwitchWebview
	}
	return nil
}

type TLMessagesSendInlineBotResult struct {
	state              protoimpl.MessageState   `protogen:"open.v1"`
	Constructor        TLConstructor            `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Silent             bool                     `protobuf:"varint,3,opt,name=silent,proto3" json:"silent,omitempty"`
	Background         bool                     `protobuf:"varint,4,opt,name=background,proto3" json:"background,omitempty"`
	ClearDraft         bool                     `protobuf:"varint,5,opt,name=clear_draft,json=clearDraft,proto3" json:"clear_draft,omitempty"`
	HideVia            bool                     `protobuf:"varint,6,opt,name=hide_via,json=hideVia,proto3" json:"hide_via,omitempty"`
	Peer               *InputPeer               `protobuf:"bytes,7,opt,name=peer,proto3" json:"peer,omitempty"`
	ReplyTo            *InputReplyTo            `protobuf:"bytes,8,opt,name=reply_to,json=replyTo,proto3" json:"reply_to,omitempty"`
	RandomId           int64                    `protobuf:"varint,9,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	QueryId            int64                    `protobuf:"varint,10,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	Id                 string                   `protobuf:"bytes,11,opt,name=id,proto3" json:"id,omitempty"`
	ScheduleDate       *wrapperspb.Int32Value   `protobuf:"bytes,12,opt,name=schedule_date,json=scheduleDate,proto3" json:"schedule_date,omitempty"`
	SendAs             *InputPeer               `protobuf:"bytes,13,opt,name=send_as,json=sendAs,proto3" json:"send_as,omitempty"`
	QuickReplyShortcut *InputQuickReplyShortcut `protobuf:"bytes,14,opt,name=quick_reply_shortcut,json=quickReplyShortcut,proto3" json:"quick_reply_shortcut,omitempty"`
	AllowPaidStars     *wrapperspb.Int64Value   `protobuf:"bytes,15,opt,name=allow_paid_stars,json=allowPaidStars,proto3" json:"allow_paid_stars,omitempty"`
	ReplyToMsgId       *wrapperspb.Int32Value   `protobuf:"bytes,16,opt,name=reply_to_msg_id,json=replyToMsgId,proto3" json:"reply_to_msg_id,omitempty"`
	TopMsgId           *wrapperspb.Int32Value   `protobuf:"bytes,17,opt,name=top_msg_id,json=topMsgId,proto3" json:"top_msg_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *TLMessagesSendInlineBotResult) Reset() {
	*x = TLMessagesSendInlineBotResult{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[234]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesSendInlineBotResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesSendInlineBotResult) ProtoMessage() {}

func (x *TLMessagesSendInlineBotResult) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[234]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesSendInlineBotResult.ProtoReflect.Descriptor instead.
func (*TLMessagesSendInlineBotResult) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{234}
}

func (x *TLMessagesSendInlineBotResult) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesSendInlineBotResult) GetSilent() bool {
	if x != nil {
		return x.Silent
	}
	return false
}

func (x *TLMessagesSendInlineBotResult) GetBackground() bool {
	if x != nil {
		return x.Background
	}
	return false
}

func (x *TLMessagesSendInlineBotResult) GetClearDraft() bool {
	if x != nil {
		return x.ClearDraft
	}
	return false
}

func (x *TLMessagesSendInlineBotResult) GetHideVia() bool {
	if x != nil {
		return x.HideVia
	}
	return false
}

func (x *TLMessagesSendInlineBotResult) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesSendInlineBotResult) GetReplyTo() *InputReplyTo {
	if x != nil {
		return x.ReplyTo
	}
	return nil
}

func (x *TLMessagesSendInlineBotResult) GetRandomId() int64 {
	if x != nil {
		return x.RandomId
	}
	return 0
}

func (x *TLMessagesSendInlineBotResult) GetQueryId() int64 {
	if x != nil {
		return x.QueryId
	}
	return 0
}

func (x *TLMessagesSendInlineBotResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TLMessagesSendInlineBotResult) GetScheduleDate() *wrapperspb.Int32Value {
	if x != nil {
		return x.ScheduleDate
	}
	return nil
}

func (x *TLMessagesSendInlineBotResult) GetSendAs() *InputPeer {
	if x != nil {
		return x.SendAs
	}
	return nil
}

func (x *TLMessagesSendInlineBotResult) GetQuickReplyShortcut() *InputQuickReplyShortcut {
	if x != nil {
		return x.QuickReplyShortcut
	}
	return nil
}

func (x *TLMessagesSendInlineBotResult) GetAllowPaidStars() *wrapperspb.Int64Value {
	if x != nil {
		return x.AllowPaidStars
	}
	return nil
}

func (x *TLMessagesSendInlineBotResult) GetReplyToMsgId() *wrapperspb.Int32Value {
	if x != nil {
		return x.ReplyToMsgId
	}
	return nil
}

func (x *TLMessagesSendInlineBotResult) GetTopMsgId() *wrapperspb.Int32Value {
	if x != nil {
		return x.TopMsgId
	}
	return nil
}

type TLMessagesGetMessageEditData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Id            int32                  `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetMessageEditData) Reset() {
	*x = TLMessagesGetMessageEditData{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[235]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetMessageEditData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetMessageEditData) ProtoMessage() {}

func (x *TLMessagesGetMessageEditData) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[235]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetMessageEditData.ProtoReflect.Descriptor instead.
func (*TLMessagesGetMessageEditData) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{235}
}

func (x *TLMessagesGetMessageEditData) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetMessageEditData) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesGetMessageEditData) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type TLMessagesEditMessage struct {
	state                protoimpl.MessageState  `protogen:"open.v1"`
	Constructor          TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	NoWebpage            bool                    `protobuf:"varint,3,opt,name=no_webpage,json=noWebpage,proto3" json:"no_webpage,omitempty"`
	InvertMedia          bool                    `protobuf:"varint,4,opt,name=invert_media,json=invertMedia,proto3" json:"invert_media,omitempty"`
	Peer                 *InputPeer              `protobuf:"bytes,5,opt,name=peer,proto3" json:"peer,omitempty"`
	Id                   int32                   `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`
	Message              *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`
	Media                *InputMedia             `protobuf:"bytes,8,opt,name=media,proto3" json:"media,omitempty"`
	ReplyMarkup          *ReplyMarkup            `protobuf:"bytes,9,opt,name=reply_markup,json=replyMarkup,proto3" json:"reply_markup,omitempty"`
	Entities             []*MessageEntity        `protobuf:"bytes,10,rep,name=entities,proto3" json:"entities,omitempty"`
	ScheduleDate         *wrapperspb.Int32Value  `protobuf:"bytes,11,opt,name=schedule_date,json=scheduleDate,proto3" json:"schedule_date,omitempty"`
	QuickReplyShortcutId *wrapperspb.Int32Value  `protobuf:"bytes,12,opt,name=quick_reply_shortcut_id,json=quickReplyShortcutId,proto3" json:"quick_reply_shortcut_id,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *TLMessagesEditMessage) Reset() {
	*x = TLMessagesEditMessage{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[236]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesEditMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesEditMessage) ProtoMessage() {}

func (x *TLMessagesEditMessage) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[236]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesEditMessage.ProtoReflect.Descriptor instead.
func (*TLMessagesEditMessage) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{236}
}

func (x *TLMessagesEditMessage) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesEditMessage) GetNoWebpage() bool {
	if x != nil {
		return x.NoWebpage
	}
	return false
}

func (x *TLMessagesEditMessage) GetInvertMedia() bool {
	if x != nil {
		return x.InvertMedia
	}
	return false
}

func (x *TLMessagesEditMessage) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesEditMessage) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TLMessagesEditMessage) GetMessage() *wrapperspb.StringValue {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *TLMessagesEditMessage) GetMedia() *InputMedia {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *TLMessagesEditMessage) GetReplyMarkup() *ReplyMarkup {
	if x != nil {
		return x.ReplyMarkup
	}
	return nil
}

func (x *TLMessagesEditMessage) GetEntities() []*MessageEntity {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *TLMessagesEditMessage) GetScheduleDate() *wrapperspb.Int32Value {
	if x != nil {
		return x.ScheduleDate
	}
	return nil
}

func (x *TLMessagesEditMessage) GetQuickReplyShortcutId() *wrapperspb.Int32Value {
	if x != nil {
		return x.QuickReplyShortcutId
	}
	return nil
}

type TLMessagesEditInlineBotMessage struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Constructor   TLConstructor            `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	NoWebpage     bool                     `protobuf:"varint,3,opt,name=no_webpage,json=noWebpage,proto3" json:"no_webpage,omitempty"`
	InvertMedia   bool                     `protobuf:"varint,4,opt,name=invert_media,json=invertMedia,proto3" json:"invert_media,omitempty"`
	Id            *InputBotInlineMessageID `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	Message       *wrapperspb.StringValue  `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	Media         *InputMedia              `protobuf:"bytes,7,opt,name=media,proto3" json:"media,omitempty"`
	ReplyMarkup   *ReplyMarkup             `protobuf:"bytes,8,opt,name=reply_markup,json=replyMarkup,proto3" json:"reply_markup,omitempty"`
	Entities      []*MessageEntity         `protobuf:"bytes,9,rep,name=entities,proto3" json:"entities,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesEditInlineBotMessage) Reset() {
	*x = TLMessagesEditInlineBotMessage{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[237]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesEditInlineBotMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesEditInlineBotMessage) ProtoMessage() {}

func (x *TLMessagesEditInlineBotMessage) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[237]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesEditInlineBotMessage.ProtoReflect.Descriptor instead.
func (*TLMessagesEditInlineBotMessage) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{237}
}

func (x *TLMessagesEditInlineBotMessage) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesEditInlineBotMessage) GetNoWebpage() bool {
	if x != nil {
		return x.NoWebpage
	}
	return false
}

func (x *TLMessagesEditInlineBotMessage) GetInvertMedia() bool {
	if x != nil {
		return x.InvertMedia
	}
	return false
}

func (x *TLMessagesEditInlineBotMessage) GetId() *InputBotInlineMessageID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TLMessagesEditInlineBotMessage) GetMessage() *wrapperspb.StringValue {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *TLMessagesEditInlineBotMessage) GetMedia() *InputMedia {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *TLMessagesEditInlineBotMessage) GetReplyMarkup() *ReplyMarkup {
	if x != nil {
		return x.ReplyMarkup
	}
	return nil
}

func (x *TLMessagesEditInlineBotMessage) GetEntities() []*MessageEntity {
	if x != nil {
		return x.Entities
	}
	return nil
}

type TLMessagesGetBotCallbackAnswer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Game          bool                   `protobuf:"varint,3,opt,name=game,proto3" json:"game,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,4,opt,name=peer,proto3" json:"peer,omitempty"`
	MsgId         int32                  `protobuf:"varint,5,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	Data          []byte                 `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	Password      *InputCheckPasswordSRP `protobuf:"bytes,7,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetBotCallbackAnswer) Reset() {
	*x = TLMessagesGetBotCallbackAnswer{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[238]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetBotCallbackAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetBotCallbackAnswer) ProtoMessage() {}

func (x *TLMessagesGetBotCallbackAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[238]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetBotCallbackAnswer.ProtoReflect.Descriptor instead.
func (*TLMessagesGetBotCallbackAnswer) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{238}
}

func (x *TLMessagesGetBotCallbackAnswer) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetBotCallbackAnswer) GetGame() bool {
	if x != nil {
		return x.Game
	}
	return false
}

func (x *TLMessagesGetBotCallbackAnswer) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesGetBotCallbackAnswer) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *TLMessagesGetBotCallbackAnswer) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TLMessagesGetBotCallbackAnswer) GetPassword() *InputCheckPasswordSRP {
	if x != nil {
		return x.Password
	}
	return nil
}

type TLMessagesSetBotCallbackAnswer struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Constructor   TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Alert         bool                    `protobuf:"varint,3,opt,name=alert,proto3" json:"alert,omitempty"`
	QueryId       int64                   `protobuf:"varint,4,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	Message       *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	Url           *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	CacheTime     int32                   `protobuf:"varint,7,opt,name=cache_time,json=cacheTime,proto3" json:"cache_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesSetBotCallbackAnswer) Reset() {
	*x = TLMessagesSetBotCallbackAnswer{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[239]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesSetBotCallbackAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesSetBotCallbackAnswer) ProtoMessage() {}

func (x *TLMessagesSetBotCallbackAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[239]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesSetBotCallbackAnswer.ProtoReflect.Descriptor instead.
func (*TLMessagesSetBotCallbackAnswer) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{239}
}

func (x *TLMessagesSetBotCallbackAnswer) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesSetBotCallbackAnswer) GetAlert() bool {
	if x != nil {
		return x.Alert
	}
	return false
}

func (x *TLMessagesSetBotCallbackAnswer) GetQueryId() int64 {
	if x != nil {
		return x.QueryId
	}
	return 0
}

func (x *TLMessagesSetBotCallbackAnswer) GetMessage() *wrapperspb.StringValue {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *TLMessagesSetBotCallbackAnswer) GetUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *TLMessagesSetBotCallbackAnswer) GetCacheTime() int32 {
	if x != nil {
		return x.CacheTime
	}
	return 0
}

type TLMessagesGetPeerDialogs struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peers         []*InputDialogPeer     `protobuf:"bytes,3,rep,name=peers,proto3" json:"peers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetPeerDialogs) Reset() {
	*x = TLMessagesGetPeerDialogs{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[240]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetPeerDialogs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetPeerDialogs) ProtoMessage() {}

func (x *TLMessagesGetPeerDialogs) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[240]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetPeerDialogs.ProtoReflect.Descriptor instead.
func (*TLMessagesGetPeerDialogs) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{240}
}

func (x *TLMessagesGetPeerDialogs) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetPeerDialogs) GetPeers() []*InputDialogPeer {
	if x != nil {
		return x.Peers
	}
	return nil
}

type TLMessagesSaveDraft struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	NoWebpage     bool                   `protobuf:"varint,3,opt,name=no_webpage,json=noWebpage,proto3" json:"no_webpage,omitempty"`
	InvertMedia   bool                   `protobuf:"varint,4,opt,name=invert_media,json=invertMedia,proto3" json:"invert_media,omitempty"`
	ReplyTo       *InputReplyTo          `protobuf:"bytes,5,opt,name=reply_to,json=replyTo,proto3" json:"reply_to,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,6,opt,name=peer,proto3" json:"peer,omitempty"`
	Message       string                 `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`
	Entities      []*MessageEntity       `protobuf:"bytes,8,rep,name=entities,proto3" json:"entities,omitempty"`
	Media         *InputMedia            `protobuf:"bytes,9,opt,name=media,proto3" json:"media,omitempty"`
	Effect        *wrapperspb.Int64Value `protobuf:"bytes,10,opt,name=effect,proto3" json:"effect,omitempty"`
	ReplyToMsgId  *wrapperspb.Int32Value `protobuf:"bytes,11,opt,name=reply_to_msg_id,json=replyToMsgId,proto3" json:"reply_to_msg_id,omitempty"`
	TopMsgId      *wrapperspb.Int32Value `protobuf:"bytes,12,opt,name=top_msg_id,json=topMsgId,proto3" json:"top_msg_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesSaveDraft) Reset() {
	*x = TLMessagesSaveDraft{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[241]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesSaveDraft) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesSaveDraft) ProtoMessage() {}

func (x *TLMessagesSaveDraft) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[241]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesSaveDraft.ProtoReflect.Descriptor instead.
func (*TLMessagesSaveDraft) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{241}
}

func (x *TLMessagesSaveDraft) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesSaveDraft) GetNoWebpage() bool {
	if x != nil {
		return x.NoWebpage
	}
	return false
}

func (x *TLMessagesSaveDraft) GetInvertMedia() bool {
	if x != nil {
		return x.InvertMedia
	}
	return false
}

func (x *TLMessagesSaveDraft) GetReplyTo() *InputReplyTo {
	if x != nil {
		return x.ReplyTo
	}
	return nil
}

func (x *TLMessagesSaveDraft) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesSaveDraft) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TLMessagesSaveDraft) GetEntities() []*MessageEntity {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *TLMessagesSaveDraft) GetMedia() *InputMedia {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *TLMessagesSaveDraft) GetEffect() *wrapperspb.Int64Value {
	if x != nil {
		return x.Effect
	}
	return nil
}

func (x *TLMessagesSaveDraft) GetReplyToMsgId() *wrapperspb.Int32Value {
	if x != nil {
		return x.ReplyToMsgId
	}
	return nil
}

func (x *TLMessagesSaveDraft) GetTopMsgId() *wrapperspb.Int32Value {
	if x != nil {
		return x.TopMsgId
	}
	return nil
}

type TLMessagesGetAllDrafts struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetAllDrafts) Reset() {
	*x = TLMessagesGetAllDrafts{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[242]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetAllDrafts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetAllDrafts) ProtoMessage() {}

func (x *TLMessagesGetAllDrafts) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[242]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetAllDrafts.ProtoReflect.Descriptor instead.
func (*TLMessagesGetAllDrafts) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{242}
}

func (x *TLMessagesGetAllDrafts) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLMessagesGetFeaturedStickers struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Hash          int64                  `protobuf:"varint,3,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetFeaturedStickers) Reset() {
	*x = TLMessagesGetFeaturedStickers{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[243]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetFeaturedStickers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetFeaturedStickers) ProtoMessage() {}

func (x *TLMessagesGetFeaturedStickers) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[243]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetFeaturedStickers.ProtoReflect.Descriptor instead.
func (*TLMessagesGetFeaturedStickers) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{243}
}

func (x *TLMessagesGetFeaturedStickers) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetFeaturedStickers) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLMessagesReadFeaturedStickers struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Id            []int64                `protobuf:"varint,3,rep,packed,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesReadFeaturedStickers) Reset() {
	*x = TLMessagesReadFeaturedStickers{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[244]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesReadFeaturedStickers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesReadFeaturedStickers) ProtoMessage() {}

func (x *TLMessagesReadFeaturedStickers) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[244]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesReadFeaturedStickers.ProtoReflect.Descriptor instead.
func (*TLMessagesReadFeaturedStickers) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{244}
}

func (x *TLMessagesReadFeaturedStickers) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesReadFeaturedStickers) GetId() []int64 {
	if x != nil {
		return x.Id
	}
	return nil
}

type TLMessagesGetRecentStickers struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Attached      bool                   `protobuf:"varint,3,opt,name=attached,proto3" json:"attached,omitempty"`
	Hash          int64                  `protobuf:"varint,4,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetRecentStickers) Reset() {
	*x = TLMessagesGetRecentStickers{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[245]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetRecentStickers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetRecentStickers) ProtoMessage() {}

func (x *TLMessagesGetRecentStickers) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[245]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetRecentStickers.ProtoReflect.Descriptor instead.
func (*TLMessagesGetRecentStickers) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{245}
}

func (x *TLMessagesGetRecentStickers) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetRecentStickers) GetAttached() bool {
	if x != nil {
		return x.Attached
	}
	return false
}

func (x *TLMessagesGetRecentStickers) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLMessagesSaveRecentSticker struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Attached      bool                   `protobuf:"varint,3,opt,name=attached,proto3" json:"attached,omitempty"`
	Id            *InputDocument         `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	Unsave        *Bool                  `protobuf:"bytes,5,opt,name=unsave,proto3" json:"unsave,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesSaveRecentSticker) Reset() {
	*x = TLMessagesSaveRecentSticker{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[246]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesSaveRecentSticker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesSaveRecentSticker) ProtoMessage() {}

func (x *TLMessagesSaveRecentSticker) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[246]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesSaveRecentSticker.ProtoReflect.Descriptor instead.
func (*TLMessagesSaveRecentSticker) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{246}
}

func (x *TLMessagesSaveRecentSticker) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesSaveRecentSticker) GetAttached() bool {
	if x != nil {
		return x.Attached
	}
	return false
}

func (x *TLMessagesSaveRecentSticker) GetId() *InputDocument {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TLMessagesSaveRecentSticker) GetUnsave() *Bool {
	if x != nil {
		return x.Unsave
	}
	return nil
}

type TLMessagesClearRecentStickers struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Attached      bool                   `protobuf:"varint,3,opt,name=attached,proto3" json:"attached,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesClearRecentStickers) Reset() {
	*x = TLMessagesClearRecentStickers{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[247]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesClearRecentStickers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesClearRecentStickers) ProtoMessage() {}

func (x *TLMessagesClearRecentStickers) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[247]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesClearRecentStickers.ProtoReflect.Descriptor instead.
func (*TLMessagesClearRecentStickers) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{247}
}

func (x *TLMessagesClearRecentStickers) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesClearRecentStickers) GetAttached() bool {
	if x != nil {
		return x.Attached
	}
	return false
}

type TLMessagesGetArchivedStickers struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Masks         bool                   `protobuf:"varint,3,opt,name=masks,proto3" json:"masks,omitempty"`
	Emojis        bool                   `protobuf:"varint,4,opt,name=emojis,proto3" json:"emojis,omitempty"`
	OffsetId      int64                  `protobuf:"varint,5,opt,name=offset_id,json=offsetId,proto3" json:"offset_id,omitempty"`
	Limit         int32                  `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetArchivedStickers) Reset() {
	*x = TLMessagesGetArchivedStickers{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[248]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetArchivedStickers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetArchivedStickers) ProtoMessage() {}

func (x *TLMessagesGetArchivedStickers) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[248]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetArchivedStickers.ProtoReflect.Descriptor instead.
func (*TLMessagesGetArchivedStickers) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{248}
}

func (x *TLMessagesGetArchivedStickers) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetArchivedStickers) GetMasks() bool {
	if x != nil {
		return x.Masks
	}
	return false
}

func (x *TLMessagesGetArchivedStickers) GetEmojis() bool {
	if x != nil {
		return x.Emojis
	}
	return false
}

func (x *TLMessagesGetArchivedStickers) GetOffsetId() int64 {
	if x != nil {
		return x.OffsetId
	}
	return 0
}

func (x *TLMessagesGetArchivedStickers) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TLMessagesGetMaskStickers struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Hash          int64                  `protobuf:"varint,3,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetMaskStickers) Reset() {
	*x = TLMessagesGetMaskStickers{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[249]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetMaskStickers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetMaskStickers) ProtoMessage() {}

func (x *TLMessagesGetMaskStickers) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[249]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetMaskStickers.ProtoReflect.Descriptor instead.
func (*TLMessagesGetMaskStickers) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{249}
}

func (x *TLMessagesGetMaskStickers) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetMaskStickers) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLMessagesGetAttachedStickers struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Media         *InputStickeredMedia   `protobuf:"bytes,3,opt,name=media,proto3" json:"media,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetAttachedStickers) Reset() {
	*x = TLMessagesGetAttachedStickers{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[250]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetAttachedStickers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetAttachedStickers) ProtoMessage() {}

func (x *TLMessagesGetAttachedStickers) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[250]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetAttachedStickers.ProtoReflect.Descriptor instead.
func (*TLMessagesGetAttachedStickers) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{250}
}

func (x *TLMessagesGetAttachedStickers) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetAttachedStickers) GetMedia() *InputStickeredMedia {
	if x != nil {
		return x.Media
	}
	return nil
}

type TLMessagesSetGameScore struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	EditMessage   bool                   `protobuf:"varint,3,opt,name=edit_message,json=editMessage,proto3" json:"edit_message,omitempty"`
	Force         bool                   `protobuf:"varint,4,opt,name=force,proto3" json:"force,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,5,opt,name=peer,proto3" json:"peer,omitempty"`
	Id            int32                  `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`
	UserId        *InputUser             `protobuf:"bytes,7,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Score         int32                  `protobuf:"varint,8,opt,name=score,proto3" json:"score,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesSetGameScore) Reset() {
	*x = TLMessagesSetGameScore{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[251]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesSetGameScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesSetGameScore) ProtoMessage() {}

func (x *TLMessagesSetGameScore) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[251]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesSetGameScore.ProtoReflect.Descriptor instead.
func (*TLMessagesSetGameScore) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{251}
}

func (x *TLMessagesSetGameScore) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesSetGameScore) GetEditMessage() bool {
	if x != nil {
		return x.EditMessage
	}
	return false
}

func (x *TLMessagesSetGameScore) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *TLMessagesSetGameScore) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesSetGameScore) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TLMessagesSetGameScore) GetUserId() *InputUser {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *TLMessagesSetGameScore) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type TLMessagesSetInlineGameScore struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Constructor   TLConstructor            `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	EditMessage   bool                     `protobuf:"varint,3,opt,name=edit_message,json=editMessage,proto3" json:"edit_message,omitempty"`
	Force         bool                     `protobuf:"varint,4,opt,name=force,proto3" json:"force,omitempty"`
	Id            *InputBotInlineMessageID `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	UserId        *InputUser               `protobuf:"bytes,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Score         int32                    `protobuf:"varint,7,opt,name=score,proto3" json:"score,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesSetInlineGameScore) Reset() {
	*x = TLMessagesSetInlineGameScore{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[252]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesSetInlineGameScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesSetInlineGameScore) ProtoMessage() {}

func (x *TLMessagesSetInlineGameScore) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[252]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesSetInlineGameScore.ProtoReflect.Descriptor instead.
func (*TLMessagesSetInlineGameScore) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{252}
}

func (x *TLMessagesSetInlineGameScore) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesSetInlineGameScore) GetEditMessage() bool {
	if x != nil {
		return x.EditMessage
	}
	return false
}

func (x *TLMessagesSetInlineGameScore) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *TLMessagesSetInlineGameScore) GetId() *InputBotInlineMessageID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TLMessagesSetInlineGameScore) GetUserId() *InputUser {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *TLMessagesSetInlineGameScore) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type TLMessagesGetGameHighScores struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Id            int32                  `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	UserId        *InputUser             `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetGameHighScores) Reset() {
	*x = TLMessagesGetGameHighScores{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[253]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetGameHighScores) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetGameHighScores) ProtoMessage() {}

func (x *TLMessagesGetGameHighScores) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[253]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetGameHighScores.ProtoReflect.Descriptor instead.
func (*TLMessagesGetGameHighScores) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{253}
}

func (x *TLMessagesGetGameHighScores) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetGameHighScores) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesGetGameHighScores) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TLMessagesGetGameHighScores) GetUserId() *InputUser {
	if x != nil {
		return x.UserId
	}
	return nil
}

type TLMessagesGetInlineGameHighScores struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Constructor   TLConstructor            `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Id            *InputBotInlineMessageID `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	UserId        *InputUser               `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetInlineGameHighScores) Reset() {
	*x = TLMessagesGetInlineGameHighScores{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[254]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetInlineGameHighScores) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetInlineGameHighScores) ProtoMessage() {}

func (x *TLMessagesGetInlineGameHighScores) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[254]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetInlineGameHighScores.ProtoReflect.Descriptor instead.
func (*TLMessagesGetInlineGameHighScores) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{254}
}

func (x *TLMessagesGetInlineGameHighScores) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetInlineGameHighScores) GetId() *InputBotInlineMessageID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TLMessagesGetInlineGameHighScores) GetUserId() *InputUser {
	if x != nil {
		return x.UserId
	}
	return nil
}

type TLMessagesGetCommonChats struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	UserId        *InputUser             `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	MaxId         int64                  `protobuf:"varint,4,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	Limit         int32                  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetCommonChats) Reset() {
	*x = TLMessagesGetCommonChats{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[255]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetCommonChats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetCommonChats) ProtoMessage() {}

func (x *TLMessagesGetCommonChats) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[255]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetCommonChats.ProtoReflect.Descriptor instead.
func (*TLMessagesGetCommonChats) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{255}
}

func (x *TLMessagesGetCommonChats) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetCommonChats) GetUserId() *InputUser {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *TLMessagesGetCommonChats) GetMaxId() int64 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

func (x *TLMessagesGetCommonChats) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TLMessagesGetWebPage8D9692A3 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Url           string                 `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Hash          int32                  `protobuf:"varint,4,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetWebPage8D9692A3) Reset() {
	*x = TLMessagesGetWebPage8D9692A3{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[256]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetWebPage8D9692A3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetWebPage8D9692A3) ProtoMessage() {}

func (x *TLMessagesGetWebPage8D9692A3) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[256]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetWebPage8D9692A3.ProtoReflect.Descriptor instead.
func (*TLMessagesGetWebPage8D9692A3) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{256}
}

func (x *TLMessagesGetWebPage8D9692A3) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetWebPage8D9692A3) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *TLMessagesGetWebPage8D9692A3) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLMessagesToggleDialogPin struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Pinned        bool                   `protobuf:"varint,3,opt,name=pinned,proto3" json:"pinned,omitempty"`
	Peer          *InputDialogPeer       `protobuf:"bytes,4,opt,name=peer,proto3" json:"peer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesToggleDialogPin) Reset() {
	*x = TLMessagesToggleDialogPin{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[257]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesToggleDialogPin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesToggleDialogPin) ProtoMessage() {}

func (x *TLMessagesToggleDialogPin) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[257]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesToggleDialogPin.ProtoReflect.Descriptor instead.
func (*TLMessagesToggleDialogPin) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{257}
}

func (x *TLMessagesToggleDialogPin) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesToggleDialogPin) GetPinned() bool {
	if x != nil {
		return x.Pinned
	}
	return false
}

func (x *TLMessagesToggleDialogPin) GetPeer() *InputDialogPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

type TLMessagesReorderPinnedDialogs struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Force         bool                   `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
	FolderId      int32                  `protobuf:"varint,4,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	Order         []*InputDialogPeer     `protobuf:"bytes,5,rep,name=order,proto3" json:"order,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesReorderPinnedDialogs) Reset() {
	*x = TLMessagesReorderPinnedDialogs{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[258]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesReorderPinnedDialogs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesReorderPinnedDialogs) ProtoMessage() {}

func (x *TLMessagesReorderPinnedDialogs) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[258]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesReorderPinnedDialogs.ProtoReflect.Descriptor instead.
func (*TLMessagesReorderPinnedDialogs) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{258}
}

func (x *TLMessagesReorderPinnedDialogs) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesReorderPinnedDialogs) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *TLMessagesReorderPinnedDialogs) GetFolderId() int32 {
	if x != nil {
		return x.FolderId
	}
	return 0
}

func (x *TLMessagesReorderPinnedDialogs) GetOrder() []*InputDialogPeer {
	if x != nil {
		return x.Order
	}
	return nil
}

type TLMessagesGetPinnedDialogs struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	FolderId      int32                  `protobuf:"varint,3,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetPinnedDialogs) Reset() {
	*x = TLMessagesGetPinnedDialogs{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[259]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetPinnedDialogs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetPinnedDialogs) ProtoMessage() {}

func (x *TLMessagesGetPinnedDialogs) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[259]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetPinnedDialogs.ProtoReflect.Descriptor instead.
func (*TLMessagesGetPinnedDialogs) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{259}
}

func (x *TLMessagesGetPinnedDialogs) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetPinnedDialogs) GetFolderId() int32 {
	if x != nil {
		return x.FolderId
	}
	return 0
}

type TLMessagesSetBotShippingResults struct {
	state           protoimpl.MessageState  `protogen:"open.v1"`
	Constructor     TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	QueryId         int64                   `protobuf:"varint,3,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	Error           *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	ShippingOptions []*ShippingOption       `protobuf:"bytes,5,rep,name=shipping_options,json=shippingOptions,proto3" json:"shipping_options,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TLMessagesSetBotShippingResults) Reset() {
	*x = TLMessagesSetBotShippingResults{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[260]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesSetBotShippingResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesSetBotShippingResults) ProtoMessage() {}

func (x *TLMessagesSetBotShippingResults) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[260]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesSetBotShippingResults.ProtoReflect.Descriptor instead.
func (*TLMessagesSetBotShippingResults) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{260}
}

func (x *TLMessagesSetBotShippingResults) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesSetBotShippingResults) GetQueryId() int64 {
	if x != nil {
		return x.QueryId
	}
	return 0
}

func (x *TLMessagesSetBotShippingResults) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TLMessagesSetBotShippingResults) GetShippingOptions() []*ShippingOption {
	if x != nil {
		return x.ShippingOptions
	}
	return nil
}

type TLMessagesSetBotPrecheckoutResults struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Constructor   TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Success       bool                    `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	QueryId       int64                   `protobuf:"varint,4,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	Error         *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesSetBotPrecheckoutResults) Reset() {
	*x = TLMessagesSetBotPrecheckoutResults{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[261]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesSetBotPrecheckoutResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesSetBotPrecheckoutResults) ProtoMessage() {}

func (x *TLMessagesSetBotPrecheckoutResults) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[261]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesSetBotPrecheckoutResults.ProtoReflect.Descriptor instead.
func (*TLMessagesSetBotPrecheckoutResults) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{261}
}

func (x *TLMessagesSetBotPrecheckoutResults) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesSetBotPrecheckoutResults) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *TLMessagesSetBotPrecheckoutResults) GetQueryId() int64 {
	if x != nil {
		return x.QueryId
	}
	return 0
}

func (x *TLMessagesSetBotPrecheckoutResults) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

type TLMessagesUploadMedia struct {
	state                protoimpl.MessageState  `protogen:"open.v1"`
	Constructor          TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	BusinessConnectionId *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=business_connection_id,json=businessConnectionId,proto3" json:"business_connection_id,omitempty"`
	Peer                 *InputPeer              `protobuf:"bytes,4,opt,name=peer,proto3" json:"peer,omitempty"`
	Media                *InputMedia             `protobuf:"bytes,5,opt,name=media,proto3" json:"media,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *TLMessagesUploadMedia) Reset() {
	*x = TLMessagesUploadMedia{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[262]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesUploadMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesUploadMedia) ProtoMessage() {}

func (x *TLMessagesUploadMedia) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[262]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesUploadMedia.ProtoReflect.Descriptor instead.
func (*TLMessagesUploadMedia) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{262}
}

func (x *TLMessagesUploadMedia) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesUploadMedia) GetBusinessConnectionId() *wrapperspb.StringValue {
	if x != nil {
		return x.BusinessConnectionId
	}
	return nil
}

func (x *TLMessagesUploadMedia) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesUploadMedia) GetMedia() *InputMedia {
	if x != nil {
		return x.Media
	}
	return nil
}

type TLMessagesSendScreenshotNotification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	ReplyTo       *InputReplyTo          `protobuf:"bytes,4,opt,name=reply_to,json=replyTo,proto3" json:"reply_to,omitempty"`
	RandomId      int64                  `protobuf:"varint,5,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	ReplyToMsgId  int32                  `protobuf:"varint,6,opt,name=reply_to_msg_id,json=replyToMsgId,proto3" json:"reply_to_msg_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesSendScreenshotNotification) Reset() {
	*x = TLMessagesSendScreenshotNotification{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[263]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesSendScreenshotNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesSendScreenshotNotification) ProtoMessage() {}

func (x *TLMessagesSendScreenshotNotification) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[263]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesSendScreenshotNotification.ProtoReflect.Descriptor instead.
func (*TLMessagesSendScreenshotNotification) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{263}
}

func (x *TLMessagesSendScreenshotNotification) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesSendScreenshotNotification) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesSendScreenshotNotification) GetReplyTo() *InputReplyTo {
	if x != nil {
		return x.ReplyTo
	}
	return nil
}

func (x *TLMessagesSendScreenshotNotification) GetRandomId() int64 {
	if x != nil {
		return x.RandomId
	}
	return 0
}

func (x *TLMessagesSendScreenshotNotification) GetReplyToMsgId() int32 {
	if x != nil {
		return x.ReplyToMsgId
	}
	return 0
}

type TLMessagesGetFavedStickers struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Hash          int64                  `protobuf:"varint,3,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetFavedStickers) Reset() {
	*x = TLMessagesGetFavedStickers{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[264]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetFavedStickers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetFavedStickers) ProtoMessage() {}

func (x *TLMessagesGetFavedStickers) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[264]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetFavedStickers.ProtoReflect.Descriptor instead.
func (*TLMessagesGetFavedStickers) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{264}
}

func (x *TLMessagesGetFavedStickers) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetFavedStickers) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLMessagesFaveSticker struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Id            *InputDocument         `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Unfave        *Bool                  `protobuf:"bytes,4,opt,name=unfave,proto3" json:"unfave,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesFaveSticker) Reset() {
	*x = TLMessagesFaveSticker{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[265]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesFaveSticker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesFaveSticker) ProtoMessage() {}

func (x *TLMessagesFaveSticker) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[265]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesFaveSticker.ProtoReflect.Descriptor instead.
func (*TLMessagesFaveSticker) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{265}
}

func (x *TLMessagesFaveSticker) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesFaveSticker) GetId() *InputDocument {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TLMessagesFaveSticker) GetUnfave() *Bool {
	if x != nil {
		return x.Unfave
	}
	return nil
}

type TLMessagesGetUnreadMentions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	TopMsgId      *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=top_msg_id,json=topMsgId,proto3" json:"top_msg_id,omitempty"`
	OffsetId      int32                  `protobuf:"varint,5,opt,name=offset_id,json=offsetId,proto3" json:"offset_id,omitempty"`
	AddOffset     int32                  `protobuf:"varint,6,opt,name=add_offset,json=addOffset,proto3" json:"add_offset,omitempty"`
	Limit         int32                  `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	MaxId         int32                  `protobuf:"varint,8,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	MinId         int32                  `protobuf:"varint,9,opt,name=min_id,json=minId,proto3" json:"min_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetUnreadMentions) Reset() {
	*x = TLMessagesGetUnreadMentions{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[266]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetUnreadMentions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetUnreadMentions) ProtoMessage() {}

func (x *TLMessagesGetUnreadMentions) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[266]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetUnreadMentions.ProtoReflect.Descriptor instead.
func (*TLMessagesGetUnreadMentions) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{266}
}

func (x *TLMessagesGetUnreadMentions) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetUnreadMentions) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesGetUnreadMentions) GetTopMsgId() *wrapperspb.Int32Value {
	if x != nil {
		return x.TopMsgId
	}
	return nil
}

func (x *TLMessagesGetUnreadMentions) GetOffsetId() int32 {
	if x != nil {
		return x.OffsetId
	}
	return 0
}

func (x *TLMessagesGetUnreadMentions) GetAddOffset() int32 {
	if x != nil {
		return x.AddOffset
	}
	return 0
}

func (x *TLMessagesGetUnreadMentions) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TLMessagesGetUnreadMentions) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

func (x *TLMessagesGetUnreadMentions) GetMinId() int32 {
	if x != nil {
		return x.MinId
	}
	return 0
}

type TLMessagesReadMentions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	TopMsgId      *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=top_msg_id,json=topMsgId,proto3" json:"top_msg_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesReadMentions) Reset() {
	*x = TLMessagesReadMentions{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[267]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesReadMentions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesReadMentions) ProtoMessage() {}

func (x *TLMessagesReadMentions) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[267]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesReadMentions.ProtoReflect.Descriptor instead.
func (*TLMessagesReadMentions) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{267}
}

func (x *TLMessagesReadMentions) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesReadMentions) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesReadMentions) GetTopMsgId() *wrapperspb.Int32Value {
	if x != nil {
		return x.TopMsgId
	}
	return nil
}

type TLMessagesGetRecentLocations struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Limit         int32                  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Hash          int64                  `protobuf:"varint,5,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetRecentLocations) Reset() {
	*x = TLMessagesGetRecentLocations{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[268]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetRecentLocations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetRecentLocations) ProtoMessage() {}

func (x *TLMessagesGetRecentLocations) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[268]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetRecentLocations.ProtoReflect.Descriptor instead.
func (*TLMessagesGetRecentLocations) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{268}
}

func (x *TLMessagesGetRecentLocations) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetRecentLocations) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesGetRecentLocations) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TLMessagesGetRecentLocations) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLMessagesSendMultiMedia struct {
	state                  protoimpl.MessageState   `protogen:"open.v1"`
	Constructor            TLConstructor            `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Silent                 bool                     `protobuf:"varint,3,opt,name=silent,proto3" json:"silent,omitempty"`
	Background             bool                     `protobuf:"varint,4,opt,name=background,proto3" json:"background,omitempty"`
	ClearDraft             bool                     `protobuf:"varint,5,opt,name=clear_draft,json=clearDraft,proto3" json:"clear_draft,omitempty"`
	Noforwards             bool                     `protobuf:"varint,6,opt,name=noforwards,proto3" json:"noforwards,omitempty"`
	UpdateStickersetsOrder bool                     `protobuf:"varint,7,opt,name=update_stickersets_order,json=updateStickersetsOrder,proto3" json:"update_stickersets_order,omitempty"`
	InvertMedia            bool                     `protobuf:"varint,8,opt,name=invert_media,json=invertMedia,proto3" json:"invert_media,omitempty"`
	AllowPaidFloodskip     bool                     `protobuf:"varint,9,opt,name=allow_paid_floodskip,json=allowPaidFloodskip,proto3" json:"allow_paid_floodskip,omitempty"`
	Peer                   *InputPeer               `protobuf:"bytes,10,opt,name=peer,proto3" json:"peer,omitempty"`
	ReplyTo                *InputReplyTo            `protobuf:"bytes,11,opt,name=reply_to,json=replyTo,proto3" json:"reply_to,omitempty"`
	MultiMedia             []*InputSingleMedia      `protobuf:"bytes,12,rep,name=multi_media,json=multiMedia,proto3" json:"multi_media,omitempty"`
	ScheduleDate           *wrapperspb.Int32Value   `protobuf:"bytes,13,opt,name=schedule_date,json=scheduleDate,proto3" json:"schedule_date,omitempty"`
	SendAs                 *InputPeer               `protobuf:"bytes,14,opt,name=send_as,json=sendAs,proto3" json:"send_as,omitempty"`
	QuickReplyShortcut     *InputQuickReplyShortcut `protobuf:"bytes,15,opt,name=quick_reply_shortcut,json=quickReplyShortcut,proto3" json:"quick_reply_shortcut,omitempty"`
	Effect                 *wrapperspb.Int64Value   `protobuf:"bytes,16,opt,name=effect,proto3" json:"effect,omitempty"`
	AllowPaidStars         *wrapperspb.Int64Value   `protobuf:"bytes,17,opt,name=allow_paid_stars,json=allowPaidStars,proto3" json:"allow_paid_stars,omitempty"`
	ReplyToMsgId           *wrapperspb.Int32Value   `protobuf:"bytes,18,opt,name=reply_to_msg_id,json=replyToMsgId,proto3" json:"reply_to_msg_id,omitempty"`
	TopMsgId               *wrapperspb.Int32Value   `protobuf:"bytes,19,opt,name=top_msg_id,json=topMsgId,proto3" json:"top_msg_id,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TLMessagesSendMultiMedia) Reset() {
	*x = TLMessagesSendMultiMedia{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[269]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesSendMultiMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesSendMultiMedia) ProtoMessage() {}

func (x *TLMessagesSendMultiMedia) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[269]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesSendMultiMedia.ProtoReflect.Descriptor instead.
func (*TLMessagesSendMultiMedia) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{269}
}

func (x *TLMessagesSendMultiMedia) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesSendMultiMedia) GetSilent() bool {
	if x != nil {
		return x.Silent
	}
	return false
}

func (x *TLMessagesSendMultiMedia) GetBackground() bool {
	if x != nil {
		return x.Background
	}
	return false
}

func (x *TLMessagesSendMultiMedia) GetClearDraft() bool {
	if x != nil {
		return x.ClearDraft
	}
	return false
}

func (x *TLMessagesSendMultiMedia) GetNoforwards() bool {
	if x != nil {
		return x.Noforwards
	}
	return false
}

func (x *TLMessagesSendMultiMedia) GetUpdateStickersetsOrder() bool {
	if x != nil {
		return x.UpdateStickersetsOrder
	}
	return false
}

func (x *TLMessagesSendMultiMedia) GetInvertMedia() bool {
	if x != nil {
		return x.InvertMedia
	}
	return false
}

func (x *TLMessagesSendMultiMedia) GetAllowPaidFloodskip() bool {
	if x != nil {
		return x.AllowPaidFloodskip
	}
	return false
}

func (x *TLMessagesSendMultiMedia) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesSendMultiMedia) GetReplyTo() *InputReplyTo {
	if x != nil {
		return x.ReplyTo
	}
	return nil
}

func (x *TLMessagesSendMultiMedia) GetMultiMedia() []*InputSingleMedia {
	if x != nil {
		return x.MultiMedia
	}
	return nil
}

func (x *TLMessagesSendMultiMedia) GetScheduleDate() *wrapperspb.Int32Value {
	if x != nil {
		return x.ScheduleDate
	}
	return nil
}

func (x *TLMessagesSendMultiMedia) GetSendAs() *InputPeer {
	if x != nil {
		return x.SendAs
	}
	return nil
}

func (x *TLMessagesSendMultiMedia) GetQuickReplyShortcut() *InputQuickReplyShortcut {
	if x != nil {
		return x.QuickReplyShortcut
	}
	return nil
}

func (x *TLMessagesSendMultiMedia) GetEffect() *wrapperspb.Int64Value {
	if x != nil {
		return x.Effect
	}
	return nil
}

func (x *TLMessagesSendMultiMedia) GetAllowPaidStars() *wrapperspb.Int64Value {
	if x != nil {
		return x.AllowPaidStars
	}
	return nil
}

func (x *TLMessagesSendMultiMedia) GetReplyToMsgId() *wrapperspb.Int32Value {
	if x != nil {
		return x.ReplyToMsgId
	}
	return nil
}

func (x *TLMessagesSendMultiMedia) GetTopMsgId() *wrapperspb.Int32Value {
	if x != nil {
		return x.TopMsgId
	}
	return nil
}

type TLMessagesUploadEncryptedFile struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputEncryptedChat    `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	File          *InputEncryptedFile    `protobuf:"bytes,4,opt,name=file,proto3" json:"file,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesUploadEncryptedFile) Reset() {
	*x = TLMessagesUploadEncryptedFile{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[270]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesUploadEncryptedFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesUploadEncryptedFile) ProtoMessage() {}

func (x *TLMessagesUploadEncryptedFile) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[270]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesUploadEncryptedFile.ProtoReflect.Descriptor instead.
func (*TLMessagesUploadEncryptedFile) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{270}
}

func (x *TLMessagesUploadEncryptedFile) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesUploadEncryptedFile) GetPeer() *InputEncryptedChat {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesUploadEncryptedFile) GetFile() *InputEncryptedFile {
	if x != nil {
		return x.File
	}
	return nil
}

type TLMessagesSearchStickerSets struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Constructor     TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	ExcludeFeatured bool                   `protobuf:"varint,3,opt,name=exclude_featured,json=excludeFeatured,proto3" json:"exclude_featured,omitempty"`
	Q               string                 `protobuf:"bytes,4,opt,name=q,proto3" json:"q,omitempty"`
	Hash            int64                  `protobuf:"varint,5,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TLMessagesSearchStickerSets) Reset() {
	*x = TLMessagesSearchStickerSets{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[271]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesSearchStickerSets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesSearchStickerSets) ProtoMessage() {}

func (x *TLMessagesSearchStickerSets) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[271]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesSearchStickerSets.ProtoReflect.Descriptor instead.
func (*TLMessagesSearchStickerSets) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{271}
}

func (x *TLMessagesSearchStickerSets) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesSearchStickerSets) GetExcludeFeatured() bool {
	if x != nil {
		return x.ExcludeFeatured
	}
	return false
}

func (x *TLMessagesSearchStickerSets) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *TLMessagesSearchStickerSets) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLMessagesGetSplitRanges struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetSplitRanges) Reset() {
	*x = TLMessagesGetSplitRanges{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[272]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetSplitRanges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetSplitRanges) ProtoMessage() {}

func (x *TLMessagesGetSplitRanges) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[272]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetSplitRanges.ProtoReflect.Descriptor instead.
func (*TLMessagesGetSplitRanges) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{272}
}

func (x *TLMessagesGetSplitRanges) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLMessagesMarkDialogUnread struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Unread        bool                   `protobuf:"varint,3,opt,name=unread,proto3" json:"unread,omitempty"`
	Peer          *InputDialogPeer       `protobuf:"bytes,4,opt,name=peer,proto3" json:"peer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesMarkDialogUnread) Reset() {
	*x = TLMessagesMarkDialogUnread{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[273]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesMarkDialogUnread) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesMarkDialogUnread) ProtoMessage() {}

func (x *TLMessagesMarkDialogUnread) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[273]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesMarkDialogUnread.ProtoReflect.Descriptor instead.
func (*TLMessagesMarkDialogUnread) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{273}
}

func (x *TLMessagesMarkDialogUnread) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesMarkDialogUnread) GetUnread() bool {
	if x != nil {
		return x.Unread
	}
	return false
}

func (x *TLMessagesMarkDialogUnread) GetPeer() *InputDialogPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

type TLMessagesGetDialogUnreadMarks struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetDialogUnreadMarks) Reset() {
	*x = TLMessagesGetDialogUnreadMarks{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[274]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetDialogUnreadMarks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetDialogUnreadMarks) ProtoMessage() {}

func (x *TLMessagesGetDialogUnreadMarks) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[274]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetDialogUnreadMarks.ProtoReflect.Descriptor instead.
func (*TLMessagesGetDialogUnreadMarks) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{274}
}

func (x *TLMessagesGetDialogUnreadMarks) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLMessagesClearAllDrafts struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesClearAllDrafts) Reset() {
	*x = TLMessagesClearAllDrafts{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[275]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesClearAllDrafts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesClearAllDrafts) ProtoMessage() {}

func (x *TLMessagesClearAllDrafts) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[275]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesClearAllDrafts.ProtoReflect.Descriptor instead.
func (*TLMessagesClearAllDrafts) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{275}
}

func (x *TLMessagesClearAllDrafts) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLMessagesUpdatePinnedMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Silent        bool                   `protobuf:"varint,3,opt,name=silent,proto3" json:"silent,omitempty"`
	Unpin         bool                   `protobuf:"varint,4,opt,name=unpin,proto3" json:"unpin,omitempty"`
	PmOneside     bool                   `protobuf:"varint,5,opt,name=pm_oneside,json=pmOneside,proto3" json:"pm_oneside,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,6,opt,name=peer,proto3" json:"peer,omitempty"`
	Id            int32                  `protobuf:"varint,7,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesUpdatePinnedMessage) Reset() {
	*x = TLMessagesUpdatePinnedMessage{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[276]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesUpdatePinnedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesUpdatePinnedMessage) ProtoMessage() {}

func (x *TLMessagesUpdatePinnedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[276]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesUpdatePinnedMessage.ProtoReflect.Descriptor instead.
func (*TLMessagesUpdatePinnedMessage) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{276}
}

func (x *TLMessagesUpdatePinnedMessage) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesUpdatePinnedMessage) GetSilent() bool {
	if x != nil {
		return x.Silent
	}
	return false
}

func (x *TLMessagesUpdatePinnedMessage) GetUnpin() bool {
	if x != nil {
		return x.Unpin
	}
	return false
}

func (x *TLMessagesUpdatePinnedMessage) GetPmOneside() bool {
	if x != nil {
		return x.PmOneside
	}
	return false
}

func (x *TLMessagesUpdatePinnedMessage) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesUpdatePinnedMessage) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type TLMessagesSendVote struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	MsgId         int32                  `protobuf:"varint,4,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	Options       [][]byte               `protobuf:"bytes,5,rep,name=options,proto3" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesSendVote) Reset() {
	*x = TLMessagesSendVote{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[277]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesSendVote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesSendVote) ProtoMessage() {}

func (x *TLMessagesSendVote) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[277]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesSendVote.ProtoReflect.Descriptor instead.
func (*TLMessagesSendVote) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{277}
}

func (x *TLMessagesSendVote) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesSendVote) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesSendVote) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *TLMessagesSendVote) GetOptions() [][]byte {
	if x != nil {
		return x.Options
	}
	return nil
}

type TLMessagesGetPollResults struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	MsgId         int32                  `protobuf:"varint,4,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetPollResults) Reset() {
	*x = TLMessagesGetPollResults{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[278]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetPollResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetPollResults) ProtoMessage() {}

func (x *TLMessagesGetPollResults) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[278]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetPollResults.ProtoReflect.Descriptor instead.
func (*TLMessagesGetPollResults) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{278}
}

func (x *TLMessagesGetPollResults) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetPollResults) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesGetPollResults) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

type TLMessagesGetOnlines struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetOnlines) Reset() {
	*x = TLMessagesGetOnlines{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[279]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetOnlines) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetOnlines) ProtoMessage() {}

func (x *TLMessagesGetOnlines) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[279]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetOnlines.ProtoReflect.Descriptor instead.
func (*TLMessagesGetOnlines) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{279}
}

func (x *TLMessagesGetOnlines) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetOnlines) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

type TLMessagesEditChatAbout struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	About         string                 `protobuf:"bytes,4,opt,name=about,proto3" json:"about,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesEditChatAbout) Reset() {
	*x = TLMessagesEditChatAbout{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[280]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesEditChatAbout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesEditChatAbout) ProtoMessage() {}

func (x *TLMessagesEditChatAbout) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[280]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesEditChatAbout.ProtoReflect.Descriptor instead.
func (*TLMessagesEditChatAbout) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{280}
}

func (x *TLMessagesEditChatAbout) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesEditChatAbout) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesEditChatAbout) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

type TLMessagesEditChatDefaultBannedRights struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	BannedRights  *ChatBannedRights      `protobuf:"bytes,4,opt,name=banned_rights,json=bannedRights,proto3" json:"banned_rights,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesEditChatDefaultBannedRights) Reset() {
	*x = TLMessagesEditChatDefaultBannedRights{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[281]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesEditChatDefaultBannedRights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesEditChatDefaultBannedRights) ProtoMessage() {}

func (x *TLMessagesEditChatDefaultBannedRights) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[281]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesEditChatDefaultBannedRights.ProtoReflect.Descriptor instead.
func (*TLMessagesEditChatDefaultBannedRights) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{281}
}

func (x *TLMessagesEditChatDefaultBannedRights) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesEditChatDefaultBannedRights) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesEditChatDefaultBannedRights) GetBannedRights() *ChatBannedRights {
	if x != nil {
		return x.BannedRights
	}
	return nil
}

type TLMessagesGetEmojiKeywords struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	LangCode      string                 `protobuf:"bytes,3,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetEmojiKeywords) Reset() {
	*x = TLMessagesGetEmojiKeywords{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[282]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetEmojiKeywords) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetEmojiKeywords) ProtoMessage() {}

func (x *TLMessagesGetEmojiKeywords) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[282]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetEmojiKeywords.ProtoReflect.Descriptor instead.
func (*TLMessagesGetEmojiKeywords) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{282}
}

func (x *TLMessagesGetEmojiKeywords) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetEmojiKeywords) GetLangCode() string {
	if x != nil {
		return x.LangCode
	}
	return ""
}

type TLMessagesGetEmojiKeywordsDifference struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	LangCode      string                 `protobuf:"bytes,3,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
	FromVersion   int32                  `protobuf:"varint,4,opt,name=from_version,json=fromVersion,proto3" json:"from_version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetEmojiKeywordsDifference) Reset() {
	*x = TLMessagesGetEmojiKeywordsDifference{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[283]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetEmojiKeywordsDifference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetEmojiKeywordsDifference) ProtoMessage() {}

func (x *TLMessagesGetEmojiKeywordsDifference) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[283]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetEmojiKeywordsDifference.ProtoReflect.Descriptor instead.
func (*TLMessagesGetEmojiKeywordsDifference) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{283}
}

func (x *TLMessagesGetEmojiKeywordsDifference) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetEmojiKeywordsDifference) GetLangCode() string {
	if x != nil {
		return x.LangCode
	}
	return ""
}

func (x *TLMessagesGetEmojiKeywordsDifference) GetFromVersion() int32 {
	if x != nil {
		return x.FromVersion
	}
	return 0
}

type TLMessagesGetEmojiKeywordsLanguages struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	LangCodes     []string               `protobuf:"bytes,3,rep,name=lang_codes,json=langCodes,proto3" json:"lang_codes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetEmojiKeywordsLanguages) Reset() {
	*x = TLMessagesGetEmojiKeywordsLanguages{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[284]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetEmojiKeywordsLanguages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetEmojiKeywordsLanguages) ProtoMessage() {}

func (x *TLMessagesGetEmojiKeywordsLanguages) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[284]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetEmojiKeywordsLanguages.ProtoReflect.Descriptor instead.
func (*TLMessagesGetEmojiKeywordsLanguages) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{284}
}

func (x *TLMessagesGetEmojiKeywordsLanguages) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetEmojiKeywordsLanguages) GetLangCodes() []string {
	if x != nil {
		return x.LangCodes
	}
	return nil
}

type TLMessagesGetEmojiURL struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	LangCode      string                 `protobuf:"bytes,3,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetEmojiURL) Reset() {
	*x = TLMessagesGetEmojiURL{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[285]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetEmojiURL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetEmojiURL) ProtoMessage() {}

func (x *TLMessagesGetEmojiURL) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[285]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetEmojiURL.ProtoReflect.Descriptor instead.
func (*TLMessagesGetEmojiURL) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{285}
}

func (x *TLMessagesGetEmojiURL) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetEmojiURL) GetLangCode() string {
	if x != nil {
		return x.LangCode
	}
	return ""
}

type TLMessagesGetSearchCounters struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	SavedPeerId   *InputPeer             `protobuf:"bytes,4,opt,name=saved_peer_id,json=savedPeerId,proto3" json:"saved_peer_id,omitempty"`
	TopMsgId      *wrapperspb.Int32Value `protobuf:"bytes,5,opt,name=top_msg_id,json=topMsgId,proto3" json:"top_msg_id,omitempty"`
	Filters       []*MessagesFilter      `protobuf:"bytes,6,rep,name=filters,proto3" json:"filters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetSearchCounters) Reset() {
	*x = TLMessagesGetSearchCounters{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[286]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetSearchCounters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetSearchCounters) ProtoMessage() {}

func (x *TLMessagesGetSearchCounters) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[286]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetSearchCounters.ProtoReflect.Descriptor instead.
func (*TLMessagesGetSearchCounters) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{286}
}

func (x *TLMessagesGetSearchCounters) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetSearchCounters) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesGetSearchCounters) GetSavedPeerId() *InputPeer {
	if x != nil {
		return x.SavedPeerId
	}
	return nil
}

func (x *TLMessagesGetSearchCounters) GetTopMsgId() *wrapperspb.Int32Value {
	if x != nil {
		return x.TopMsgId
	}
	return nil
}

func (x *TLMessagesGetSearchCounters) GetFilters() []*MessagesFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type TLMessagesRequestUrlAuth struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Constructor   TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer              `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	MsgId         *wrapperspb.Int32Value  `protobuf:"bytes,4,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	ButtonId      *wrapperspb.Int32Value  `protobuf:"bytes,5,opt,name=button_id,json=buttonId,proto3" json:"button_id,omitempty"`
	Url           *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesRequestUrlAuth) Reset() {
	*x = TLMessagesRequestUrlAuth{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[287]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesRequestUrlAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesRequestUrlAuth) ProtoMessage() {}

func (x *TLMessagesRequestUrlAuth) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[287]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesRequestUrlAuth.ProtoReflect.Descriptor instead.
func (*TLMessagesRequestUrlAuth) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{287}
}

func (x *TLMessagesRequestUrlAuth) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesRequestUrlAuth) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesRequestUrlAuth) GetMsgId() *wrapperspb.Int32Value {
	if x != nil {
		return x.MsgId
	}
	return nil
}

func (x *TLMessagesRequestUrlAuth) GetButtonId() *wrapperspb.Int32Value {
	if x != nil {
		return x.ButtonId
	}
	return nil
}

func (x *TLMessagesRequestUrlAuth) GetUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.Url
	}
	return nil
}

type TLMessagesAcceptUrlAuth struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Constructor   TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	WriteAllowed  bool                    `protobuf:"varint,3,opt,name=write_allowed,json=writeAllowed,proto3" json:"write_allowed,omitempty"`
	Peer          *InputPeer              `protobuf:"bytes,4,opt,name=peer,proto3" json:"peer,omitempty"`
	MsgId         *wrapperspb.Int32Value  `protobuf:"bytes,5,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	ButtonId      *wrapperspb.Int32Value  `protobuf:"bytes,6,opt,name=button_id,json=buttonId,proto3" json:"button_id,omitempty"`
	Url           *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=url,proto3" json:"url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesAcceptUrlAuth) Reset() {
	*x = TLMessagesAcceptUrlAuth{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[288]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesAcceptUrlAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesAcceptUrlAuth) ProtoMessage() {}

func (x *TLMessagesAcceptUrlAuth) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[288]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesAcceptUrlAuth.ProtoReflect.Descriptor instead.
func (*TLMessagesAcceptUrlAuth) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{288}
}

func (x *TLMessagesAcceptUrlAuth) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesAcceptUrlAuth) GetWriteAllowed() bool {
	if x != nil {
		return x.WriteAllowed
	}
	return false
}

func (x *TLMessagesAcceptUrlAuth) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesAcceptUrlAuth) GetMsgId() *wrapperspb.Int32Value {
	if x != nil {
		return x.MsgId
	}
	return nil
}

func (x *TLMessagesAcceptUrlAuth) GetButtonId() *wrapperspb.Int32Value {
	if x != nil {
		return x.ButtonId
	}
	return nil
}

func (x *TLMessagesAcceptUrlAuth) GetUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.Url
	}
	return nil
}

type TLMessagesHidePeerSettingsBar struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesHidePeerSettingsBar) Reset() {
	*x = TLMessagesHidePeerSettingsBar{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[289]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesHidePeerSettingsBar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesHidePeerSettingsBar) ProtoMessage() {}

func (x *TLMessagesHidePeerSettingsBar) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[289]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesHidePeerSettingsBar.ProtoReflect.Descriptor instead.
func (*TLMessagesHidePeerSettingsBar) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{289}
}

func (x *TLMessagesHidePeerSettingsBar) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesHidePeerSettingsBar) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

type TLMessagesGetScheduledHistory struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Hash          int64                  `protobuf:"varint,4,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetScheduledHistory) Reset() {
	*x = TLMessagesGetScheduledHistory{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[290]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetScheduledHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetScheduledHistory) ProtoMessage() {}

func (x *TLMessagesGetScheduledHistory) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[290]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetScheduledHistory.ProtoReflect.Descriptor instead.
func (*TLMessagesGetScheduledHistory) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{290}
}

func (x *TLMessagesGetScheduledHistory) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetScheduledHistory) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesGetScheduledHistory) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLMessagesGetScheduledMessages struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Id            []int32                `protobuf:"varint,4,rep,packed,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetScheduledMessages) Reset() {
	*x = TLMessagesGetScheduledMessages{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[291]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetScheduledMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetScheduledMessages) ProtoMessage() {}

func (x *TLMessagesGetScheduledMessages) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[291]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetScheduledMessages.ProtoReflect.Descriptor instead.
func (*TLMessagesGetScheduledMessages) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{291}
}

func (x *TLMessagesGetScheduledMessages) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetScheduledMessages) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesGetScheduledMessages) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

type TLMessagesSendScheduledMessages struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Id            []int32                `protobuf:"varint,4,rep,packed,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesSendScheduledMessages) Reset() {
	*x = TLMessagesSendScheduledMessages{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[292]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesSendScheduledMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesSendScheduledMessages) ProtoMessage() {}

func (x *TLMessagesSendScheduledMessages) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[292]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesSendScheduledMessages.ProtoReflect.Descriptor instead.
func (*TLMessagesSendScheduledMessages) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{292}
}

func (x *TLMessagesSendScheduledMessages) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesSendScheduledMessages) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesSendScheduledMessages) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

type TLMessagesDeleteScheduledMessages struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Id            []int32                `protobuf:"varint,4,rep,packed,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesDeleteScheduledMessages) Reset() {
	*x = TLMessagesDeleteScheduledMessages{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[293]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesDeleteScheduledMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesDeleteScheduledMessages) ProtoMessage() {}

func (x *TLMessagesDeleteScheduledMessages) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[293]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesDeleteScheduledMessages.ProtoReflect.Descriptor instead.
func (*TLMessagesDeleteScheduledMessages) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{293}
}

func (x *TLMessagesDeleteScheduledMessages) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesDeleteScheduledMessages) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesDeleteScheduledMessages) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

type TLMessagesGetPollVotes struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Constructor   TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer              `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Id            int32                   `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	Option        []byte                  `protobuf:"bytes,5,opt,name=option,proto3" json:"option,omitempty"`
	Offset        *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit         int32                   `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetPollVotes) Reset() {
	*x = TLMessagesGetPollVotes{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[294]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetPollVotes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetPollVotes) ProtoMessage() {}

func (x *TLMessagesGetPollVotes) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[294]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetPollVotes.ProtoReflect.Descriptor instead.
func (*TLMessagesGetPollVotes) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{294}
}

func (x *TLMessagesGetPollVotes) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetPollVotes) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesGetPollVotes) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TLMessagesGetPollVotes) GetOption() []byte {
	if x != nil {
		return x.Option
	}
	return nil
}

func (x *TLMessagesGetPollVotes) GetOffset() *wrapperspb.StringValue {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *TLMessagesGetPollVotes) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TLMessagesToggleStickerSets struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Uninstall     bool                   `protobuf:"varint,3,opt,name=uninstall,proto3" json:"uninstall,omitempty"`
	Archive       bool                   `protobuf:"varint,4,opt,name=archive,proto3" json:"archive,omitempty"`
	Unarchive     bool                   `protobuf:"varint,5,opt,name=unarchive,proto3" json:"unarchive,omitempty"`
	Stickersets   []*InputStickerSet     `protobuf:"bytes,6,rep,name=stickersets,proto3" json:"stickersets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesToggleStickerSets) Reset() {
	*x = TLMessagesToggleStickerSets{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[295]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesToggleStickerSets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesToggleStickerSets) ProtoMessage() {}

func (x *TLMessagesToggleStickerSets) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[295]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesToggleStickerSets.ProtoReflect.Descriptor instead.
func (*TLMessagesToggleStickerSets) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{295}
}

func (x *TLMessagesToggleStickerSets) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesToggleStickerSets) GetUninstall() bool {
	if x != nil {
		return x.Uninstall
	}
	return false
}

func (x *TLMessagesToggleStickerSets) GetArchive() bool {
	if x != nil {
		return x.Archive
	}
	return false
}

func (x *TLMessagesToggleStickerSets) GetUnarchive() bool {
	if x != nil {
		return x.Unarchive
	}
	return false
}

func (x *TLMessagesToggleStickerSets) GetStickersets() []*InputStickerSet {
	if x != nil {
		return x.Stickersets
	}
	return nil
}

type TLMessagesGetDialogFiltersEFD48C89 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetDialogFiltersEFD48C89) Reset() {
	*x = TLMessagesGetDialogFiltersEFD48C89{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[296]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetDialogFiltersEFD48C89) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetDialogFiltersEFD48C89) ProtoMessage() {}

func (x *TLMessagesGetDialogFiltersEFD48C89) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[296]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetDialogFiltersEFD48C89.ProtoReflect.Descriptor instead.
func (*TLMessagesGetDialogFiltersEFD48C89) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{296}
}

func (x *TLMessagesGetDialogFiltersEFD48C89) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLMessagesGetSuggestedDialogFilters struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetSuggestedDialogFilters) Reset() {
	*x = TLMessagesGetSuggestedDialogFilters{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[297]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetSuggestedDialogFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetSuggestedDialogFilters) ProtoMessage() {}

func (x *TLMessagesGetSuggestedDialogFilters) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[297]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetSuggestedDialogFilters.ProtoReflect.Descriptor instead.
func (*TLMessagesGetSuggestedDialogFilters) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{297}
}

func (x *TLMessagesGetSuggestedDialogFilters) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLMessagesUpdateDialogFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Id            int32                  `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	Filter        *DialogFilter          `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesUpdateDialogFilter) Reset() {
	*x = TLMessagesUpdateDialogFilter{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[298]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesUpdateDialogFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesUpdateDialogFilter) ProtoMessage() {}

func (x *TLMessagesUpdateDialogFilter) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[298]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesUpdateDialogFilter.ProtoReflect.Descriptor instead.
func (*TLMessagesUpdateDialogFilter) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{298}
}

func (x *TLMessagesUpdateDialogFilter) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesUpdateDialogFilter) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TLMessagesUpdateDialogFilter) GetFilter() *DialogFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type TLMessagesUpdateDialogFiltersOrder struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Order         []int32                `protobuf:"varint,3,rep,packed,name=order,proto3" json:"order,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesUpdateDialogFiltersOrder) Reset() {
	*x = TLMessagesUpdateDialogFiltersOrder{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[299]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesUpdateDialogFiltersOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesUpdateDialogFiltersOrder) ProtoMessage() {}

func (x *TLMessagesUpdateDialogFiltersOrder) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[299]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesUpdateDialogFiltersOrder.ProtoReflect.Descriptor instead.
func (*TLMessagesUpdateDialogFiltersOrder) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{299}
}

func (x *TLMessagesUpdateDialogFiltersOrder) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesUpdateDialogFiltersOrder) GetOrder() []int32 {
	if x != nil {
		return x.Order
	}
	return nil
}

type TLMessagesGetOldFeaturedStickers struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Offset        int32                  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit         int32                  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Hash          int64                  `protobuf:"varint,5,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetOldFeaturedStickers) Reset() {
	*x = TLMessagesGetOldFeaturedStickers{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[300]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetOldFeaturedStickers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetOldFeaturedStickers) ProtoMessage() {}

func (x *TLMessagesGetOldFeaturedStickers) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[300]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetOldFeaturedStickers.ProtoReflect.Descriptor instead.
func (*TLMessagesGetOldFeaturedStickers) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{300}
}

func (x *TLMessagesGetOldFeaturedStickers) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetOldFeaturedStickers) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TLMessagesGetOldFeaturedStickers) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TLMessagesGetOldFeaturedStickers) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLMessagesGetReplies struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	MsgId         int32                  `protobuf:"varint,4,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	OffsetId      int32                  `protobuf:"varint,5,opt,name=offset_id,json=offsetId,proto3" json:"offset_id,omitempty"`
	OffsetDate    int32                  `protobuf:"varint,6,opt,name=offset_date,json=offsetDate,proto3" json:"offset_date,omitempty"`
	AddOffset     int32                  `protobuf:"varint,7,opt,name=add_offset,json=addOffset,proto3" json:"add_offset,omitempty"`
	Limit         int32                  `protobuf:"varint,8,opt,name=limit,proto3" json:"limit,omitempty"`
	MaxId         int32                  `protobuf:"varint,9,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	MinId         int32                  `protobuf:"varint,10,opt,name=min_id,json=minId,proto3" json:"min_id,omitempty"`
	Hash          int64                  `protobuf:"varint,11,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetReplies) Reset() {
	*x = TLMessagesGetReplies{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[301]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetReplies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetReplies) ProtoMessage() {}

func (x *TLMessagesGetReplies) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[301]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetReplies.ProtoReflect.Descriptor instead.
func (*TLMessagesGetReplies) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{301}
}

func (x *TLMessagesGetReplies) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetReplies) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesGetReplies) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *TLMessagesGetReplies) GetOffsetId() int32 {
	if x != nil {
		return x.OffsetId
	}
	return 0
}

func (x *TLMessagesGetReplies) GetOffsetDate() int32 {
	if x != nil {
		return x.OffsetDate
	}
	return 0
}

func (x *TLMessagesGetReplies) GetAddOffset() int32 {
	if x != nil {
		return x.AddOffset
	}
	return 0
}

func (x *TLMessagesGetReplies) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TLMessagesGetReplies) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

func (x *TLMessagesGetReplies) GetMinId() int32 {
	if x != nil {
		return x.MinId
	}
	return 0
}

func (x *TLMessagesGetReplies) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLMessagesGetDiscussionMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	MsgId         int32                  `protobuf:"varint,4,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetDiscussionMessage) Reset() {
	*x = TLMessagesGetDiscussionMessage{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[302]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetDiscussionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetDiscussionMessage) ProtoMessage() {}

func (x *TLMessagesGetDiscussionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[302]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetDiscussionMessage.ProtoReflect.Descriptor instead.
func (*TLMessagesGetDiscussionMessage) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{302}
}

func (x *TLMessagesGetDiscussionMessage) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetDiscussionMessage) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesGetDiscussionMessage) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

type TLMessagesReadDiscussion struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	MsgId         int32                  `protobuf:"varint,4,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	ReadMaxId     int32                  `protobuf:"varint,5,opt,name=read_max_id,json=readMaxId,proto3" json:"read_max_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesReadDiscussion) Reset() {
	*x = TLMessagesReadDiscussion{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[303]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesReadDiscussion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesReadDiscussion) ProtoMessage() {}

func (x *TLMessagesReadDiscussion) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[303]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesReadDiscussion.ProtoReflect.Descriptor instead.
func (*TLMessagesReadDiscussion) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{303}
}

func (x *TLMessagesReadDiscussion) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesReadDiscussion) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesReadDiscussion) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *TLMessagesReadDiscussion) GetReadMaxId() int32 {
	if x != nil {
		return x.ReadMaxId
	}
	return 0
}

type TLMessagesUnpinAllMessages struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	TopMsgId      *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=top_msg_id,json=topMsgId,proto3" json:"top_msg_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesUnpinAllMessages) Reset() {
	*x = TLMessagesUnpinAllMessages{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[304]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesUnpinAllMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesUnpinAllMessages) ProtoMessage() {}

func (x *TLMessagesUnpinAllMessages) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[304]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesUnpinAllMessages.ProtoReflect.Descriptor instead.
func (*TLMessagesUnpinAllMessages) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{304}
}

func (x *TLMessagesUnpinAllMessages) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesUnpinAllMessages) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesUnpinAllMessages) GetTopMsgId() *wrapperspb.Int32Value {
	if x != nil {
		return x.TopMsgId
	}
	return nil
}

type TLMessagesDeleteChat struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	ChatId        int64                  `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesDeleteChat) Reset() {
	*x = TLMessagesDeleteChat{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[305]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesDeleteChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesDeleteChat) ProtoMessage() {}

func (x *TLMessagesDeleteChat) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[305]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesDeleteChat.ProtoReflect.Descriptor instead.
func (*TLMessagesDeleteChat) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{305}
}

func (x *TLMessagesDeleteChat) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesDeleteChat) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

type TLMessagesDeletePhoneCallHistory struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Revoke        bool                   `protobuf:"varint,3,opt,name=revoke,proto3" json:"revoke,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesDeletePhoneCallHistory) Reset() {
	*x = TLMessagesDeletePhoneCallHistory{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[306]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesDeletePhoneCallHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesDeletePhoneCallHistory) ProtoMessage() {}

func (x *TLMessagesDeletePhoneCallHistory) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[306]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesDeletePhoneCallHistory.ProtoReflect.Descriptor instead.
func (*TLMessagesDeletePhoneCallHistory) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{306}
}

func (x *TLMessagesDeletePhoneCallHistory) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesDeletePhoneCallHistory) GetRevoke() bool {
	if x != nil {
		return x.Revoke
	}
	return false
}

type TLMessagesCheckHistoryImport struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	ImportHead    string                 `protobuf:"bytes,3,opt,name=import_head,json=importHead,proto3" json:"import_head,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesCheckHistoryImport) Reset() {
	*x = TLMessagesCheckHistoryImport{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[307]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesCheckHistoryImport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesCheckHistoryImport) ProtoMessage() {}

func (x *TLMessagesCheckHistoryImport) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[307]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesCheckHistoryImport.ProtoReflect.Descriptor instead.
func (*TLMessagesCheckHistoryImport) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{307}
}

func (x *TLMessagesCheckHistoryImport) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesCheckHistoryImport) GetImportHead() string {
	if x != nil {
		return x.ImportHead
	}
	return ""
}

type TLMessagesInitHistoryImport struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	File          *InputFile             `protobuf:"bytes,4,opt,name=file,proto3" json:"file,omitempty"`
	MediaCount    int32                  `protobuf:"varint,5,opt,name=media_count,json=mediaCount,proto3" json:"media_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesInitHistoryImport) Reset() {
	*x = TLMessagesInitHistoryImport{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[308]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesInitHistoryImport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesInitHistoryImport) ProtoMessage() {}

func (x *TLMessagesInitHistoryImport) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[308]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesInitHistoryImport.ProtoReflect.Descriptor instead.
func (*TLMessagesInitHistoryImport) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{308}
}

func (x *TLMessagesInitHistoryImport) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesInitHistoryImport) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesInitHistoryImport) GetFile() *InputFile {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *TLMessagesInitHistoryImport) GetMediaCount() int32 {
	if x != nil {
		return x.MediaCount
	}
	return 0
}

type TLMessagesUploadImportedMedia struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	ImportId      int64                  `protobuf:"varint,4,opt,name=import_id,json=importId,proto3" json:"import_id,omitempty"`
	FileName      string                 `protobuf:"bytes,5,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	Media         *InputMedia            `protobuf:"bytes,6,opt,name=media,proto3" json:"media,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesUploadImportedMedia) Reset() {
	*x = TLMessagesUploadImportedMedia{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[309]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesUploadImportedMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesUploadImportedMedia) ProtoMessage() {}

func (x *TLMessagesUploadImportedMedia) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[309]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesUploadImportedMedia.ProtoReflect.Descriptor instead.
func (*TLMessagesUploadImportedMedia) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{309}
}

func (x *TLMessagesUploadImportedMedia) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesUploadImportedMedia) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesUploadImportedMedia) GetImportId() int64 {
	if x != nil {
		return x.ImportId
	}
	return 0
}

func (x *TLMessagesUploadImportedMedia) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *TLMessagesUploadImportedMedia) GetMedia() *InputMedia {
	if x != nil {
		return x.Media
	}
	return nil
}

type TLMessagesStartHistoryImport struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	ImportId      int64                  `protobuf:"varint,4,opt,name=import_id,json=importId,proto3" json:"import_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesStartHistoryImport) Reset() {
	*x = TLMessagesStartHistoryImport{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[310]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesStartHistoryImport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesStartHistoryImport) ProtoMessage() {}

func (x *TLMessagesStartHistoryImport) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[310]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesStartHistoryImport.ProtoReflect.Descriptor instead.
func (*TLMessagesStartHistoryImport) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{310}
}

func (x *TLMessagesStartHistoryImport) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesStartHistoryImport) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesStartHistoryImport) GetImportId() int64 {
	if x != nil {
		return x.ImportId
	}
	return 0
}

type TLMessagesGetExportedChatInvites struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Constructor   TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Revoked       bool                    `protobuf:"varint,3,opt,name=revoked,proto3" json:"revoked,omitempty"`
	Peer          *InputPeer              `protobuf:"bytes,4,opt,name=peer,proto3" json:"peer,omitempty"`
	AdminId       *InputUser              `protobuf:"bytes,5,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty"`
	OffsetDate    *wrapperspb.Int32Value  `protobuf:"bytes,6,opt,name=offset_date,json=offsetDate,proto3" json:"offset_date,omitempty"`
	OffsetLink    *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=offset_link,json=offsetLink,proto3" json:"offset_link,omitempty"`
	Limit         int32                   `protobuf:"varint,8,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetExportedChatInvites) Reset() {
	*x = TLMessagesGetExportedChatInvites{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[311]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetExportedChatInvites) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetExportedChatInvites) ProtoMessage() {}

func (x *TLMessagesGetExportedChatInvites) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[311]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetExportedChatInvites.ProtoReflect.Descriptor instead.
func (*TLMessagesGetExportedChatInvites) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{311}
}

func (x *TLMessagesGetExportedChatInvites) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetExportedChatInvites) GetRevoked() bool {
	if x != nil {
		return x.Revoked
	}
	return false
}

func (x *TLMessagesGetExportedChatInvites) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesGetExportedChatInvites) GetAdminId() *InputUser {
	if x != nil {
		return x.AdminId
	}
	return nil
}

func (x *TLMessagesGetExportedChatInvites) GetOffsetDate() *wrapperspb.Int32Value {
	if x != nil {
		return x.OffsetDate
	}
	return nil
}

func (x *TLMessagesGetExportedChatInvites) GetOffsetLink() *wrapperspb.StringValue {
	if x != nil {
		return x.OffsetLink
	}
	return nil
}

func (x *TLMessagesGetExportedChatInvites) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TLMessagesGetExportedChatInvite struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Link          string                 `protobuf:"bytes,4,opt,name=link,proto3" json:"link,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetExportedChatInvite) Reset() {
	*x = TLMessagesGetExportedChatInvite{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[312]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetExportedChatInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetExportedChatInvite) ProtoMessage() {}

func (x *TLMessagesGetExportedChatInvite) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[312]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetExportedChatInvite.ProtoReflect.Descriptor instead.
func (*TLMessagesGetExportedChatInvite) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{312}
}

func (x *TLMessagesGetExportedChatInvite) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetExportedChatInvite) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesGetExportedChatInvite) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

type TLMessagesEditExportedChatInvite struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Constructor   TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Revoked       bool                    `protobuf:"varint,3,opt,name=revoked,proto3" json:"revoked,omitempty"`
	Peer          *InputPeer              `protobuf:"bytes,4,opt,name=peer,proto3" json:"peer,omitempty"`
	Link          string                  `protobuf:"bytes,5,opt,name=link,proto3" json:"link,omitempty"`
	ExpireDate    *wrapperspb.Int32Value  `protobuf:"bytes,6,opt,name=expire_date,json=expireDate,proto3" json:"expire_date,omitempty"`
	UsageLimit    *wrapperspb.Int32Value  `protobuf:"bytes,7,opt,name=usage_limit,json=usageLimit,proto3" json:"usage_limit,omitempty"`
	RequestNeeded *Bool                   `protobuf:"bytes,8,opt,name=request_needed,json=requestNeeded,proto3" json:"request_needed,omitempty"`
	Title         *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=title,proto3" json:"title,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesEditExportedChatInvite) Reset() {
	*x = TLMessagesEditExportedChatInvite{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[313]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesEditExportedChatInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesEditExportedChatInvite) ProtoMessage() {}

func (x *TLMessagesEditExportedChatInvite) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[313]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesEditExportedChatInvite.ProtoReflect.Descriptor instead.
func (*TLMessagesEditExportedChatInvite) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{313}
}

func (x *TLMessagesEditExportedChatInvite) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesEditExportedChatInvite) GetRevoked() bool {
	if x != nil {
		return x.Revoked
	}
	return false
}

func (x *TLMessagesEditExportedChatInvite) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesEditExportedChatInvite) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *TLMessagesEditExportedChatInvite) GetExpireDate() *wrapperspb.Int32Value {
	if x != nil {
		return x.ExpireDate
	}
	return nil
}

func (x *TLMessagesEditExportedChatInvite) GetUsageLimit() *wrapperspb.Int32Value {
	if x != nil {
		return x.UsageLimit
	}
	return nil
}

func (x *TLMessagesEditExportedChatInvite) GetRequestNeeded() *Bool {
	if x != nil {
		return x.RequestNeeded
	}
	return nil
}

func (x *TLMessagesEditExportedChatInvite) GetTitle() *wrapperspb.StringValue {
	if x != nil {
		return x.Title
	}
	return nil
}

type TLMessagesDeleteRevokedExportedChatInvites struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	AdminId       *InputUser             `protobuf:"bytes,4,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesDeleteRevokedExportedChatInvites) Reset() {
	*x = TLMessagesDeleteRevokedExportedChatInvites{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[314]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesDeleteRevokedExportedChatInvites) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesDeleteRevokedExportedChatInvites) ProtoMessage() {}

func (x *TLMessagesDeleteRevokedExportedChatInvites) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[314]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesDeleteRevokedExportedChatInvites.ProtoReflect.Descriptor instead.
func (*TLMessagesDeleteRevokedExportedChatInvites) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{314}
}

func (x *TLMessagesDeleteRevokedExportedChatInvites) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesDeleteRevokedExportedChatInvites) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesDeleteRevokedExportedChatInvites) GetAdminId() *InputUser {
	if x != nil {
		return x.AdminId
	}
	return nil
}

type TLMessagesDeleteExportedChatInvite struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Link          string                 `protobuf:"bytes,4,opt,name=link,proto3" json:"link,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesDeleteExportedChatInvite) Reset() {
	*x = TLMessagesDeleteExportedChatInvite{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[315]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesDeleteExportedChatInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesDeleteExportedChatInvite) ProtoMessage() {}

func (x *TLMessagesDeleteExportedChatInvite) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[315]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesDeleteExportedChatInvite.ProtoReflect.Descriptor instead.
func (*TLMessagesDeleteExportedChatInvite) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{315}
}

func (x *TLMessagesDeleteExportedChatInvite) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesDeleteExportedChatInvite) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesDeleteExportedChatInvite) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

type TLMessagesGetAdminsWithInvites struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetAdminsWithInvites) Reset() {
	*x = TLMessagesGetAdminsWithInvites{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[316]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetAdminsWithInvites) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetAdminsWithInvites) ProtoMessage() {}

func (x *TLMessagesGetAdminsWithInvites) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[316]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetAdminsWithInvites.ProtoReflect.Descriptor instead.
func (*TLMessagesGetAdminsWithInvites) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{316}
}

func (x *TLMessagesGetAdminsWithInvites) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetAdminsWithInvites) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

type TLMessagesGetChatInviteImporters struct {
	state               protoimpl.MessageState  `protogen:"open.v1"`
	Constructor         TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Requested           bool                    `protobuf:"varint,3,opt,name=requested,proto3" json:"requested,omitempty"`
	SubscriptionExpired bool                    `protobuf:"varint,4,opt,name=subscription_expired,json=subscriptionExpired,proto3" json:"subscription_expired,omitempty"`
	Peer                *InputPeer              `protobuf:"bytes,5,opt,name=peer,proto3" json:"peer,omitempty"`
	Link                *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=link,proto3" json:"link,omitempty"`
	Q                   *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=q,proto3" json:"q,omitempty"`
	OffsetDate          int32                   `protobuf:"varint,8,opt,name=offset_date,json=offsetDate,proto3" json:"offset_date,omitempty"`
	OffsetUser          *InputUser              `protobuf:"bytes,9,opt,name=offset_user,json=offsetUser,proto3" json:"offset_user,omitempty"`
	Limit               int32                   `protobuf:"varint,10,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *TLMessagesGetChatInviteImporters) Reset() {
	*x = TLMessagesGetChatInviteImporters{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[317]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetChatInviteImporters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetChatInviteImporters) ProtoMessage() {}

func (x *TLMessagesGetChatInviteImporters) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[317]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetChatInviteImporters.ProtoReflect.Descriptor instead.
func (*TLMessagesGetChatInviteImporters) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{317}
}

func (x *TLMessagesGetChatInviteImporters) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetChatInviteImporters) GetRequested() bool {
	if x != nil {
		return x.Requested
	}
	return false
}

func (x *TLMessagesGetChatInviteImporters) GetSubscriptionExpired() bool {
	if x != nil {
		return x.SubscriptionExpired
	}
	return false
}

func (x *TLMessagesGetChatInviteImporters) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesGetChatInviteImporters) GetLink() *wrapperspb.StringValue {
	if x != nil {
		return x.Link
	}
	return nil
}

func (x *TLMessagesGetChatInviteImporters) GetQ() *wrapperspb.StringValue {
	if x != nil {
		return x.Q
	}
	return nil
}

func (x *TLMessagesGetChatInviteImporters) GetOffsetDate() int32 {
	if x != nil {
		return x.OffsetDate
	}
	return 0
}

func (x *TLMessagesGetChatInviteImporters) GetOffsetUser() *InputUser {
	if x != nil {
		return x.OffsetUser
	}
	return nil
}

func (x *TLMessagesGetChatInviteImporters) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TLMessagesSetHistoryTTL struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Period        int32                  `protobuf:"varint,4,opt,name=period,proto3" json:"period,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesSetHistoryTTL) Reset() {
	*x = TLMessagesSetHistoryTTL{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[318]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesSetHistoryTTL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesSetHistoryTTL) ProtoMessage() {}

func (x *TLMessagesSetHistoryTTL) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[318]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesSetHistoryTTL.ProtoReflect.Descriptor instead.
func (*TLMessagesSetHistoryTTL) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{318}
}

func (x *TLMessagesSetHistoryTTL) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesSetHistoryTTL) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesSetHistoryTTL) GetPeriod() int32 {
	if x != nil {
		return x.Period
	}
	return 0
}

type TLMessagesCheckHistoryImportPeer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesCheckHistoryImportPeer) Reset() {
	*x = TLMessagesCheckHistoryImportPeer{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[319]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesCheckHistoryImportPeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesCheckHistoryImportPeer) ProtoMessage() {}

func (x *TLMessagesCheckHistoryImportPeer) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[319]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesCheckHistoryImportPeer.ProtoReflect.Descriptor instead.
func (*TLMessagesCheckHistoryImportPeer) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{319}
}

func (x *TLMessagesCheckHistoryImportPeer) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesCheckHistoryImportPeer) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

type TLMessagesSetChatTheme struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Emoticon      string                 `protobuf:"bytes,4,opt,name=emoticon,proto3" json:"emoticon,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesSetChatTheme) Reset() {
	*x = TLMessagesSetChatTheme{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[320]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesSetChatTheme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesSetChatTheme) ProtoMessage() {}

func (x *TLMessagesSetChatTheme) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[320]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesSetChatTheme.ProtoReflect.Descriptor instead.
func (*TLMessagesSetChatTheme) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{320}
}

func (x *TLMessagesSetChatTheme) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesSetChatTheme) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesSetChatTheme) GetEmoticon() string {
	if x != nil {
		return x.Emoticon
	}
	return ""
}

type TLMessagesGetMessageReadParticipants31C1C44F struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	MsgId         int32                  `protobuf:"varint,4,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetMessageReadParticipants31C1C44F) Reset() {
	*x = TLMessagesGetMessageReadParticipants31C1C44F{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[321]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetMessageReadParticipants31C1C44F) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetMessageReadParticipants31C1C44F) ProtoMessage() {}

func (x *TLMessagesGetMessageReadParticipants31C1C44F) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[321]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetMessageReadParticipants31C1C44F.ProtoReflect.Descriptor instead.
func (*TLMessagesGetMessageReadParticipants31C1C44F) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{321}
}

func (x *TLMessagesGetMessageReadParticipants31C1C44F) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetMessageReadParticipants31C1C44F) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesGetMessageReadParticipants31C1C44F) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

type TLMessagesGetSearchResultsCalendar struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	SavedPeerId   *InputPeer             `protobuf:"bytes,4,opt,name=saved_peer_id,json=savedPeerId,proto3" json:"saved_peer_id,omitempty"`
	Filter        *MessagesFilter        `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter,omitempty"`
	OffsetId      int32                  `protobuf:"varint,6,opt,name=offset_id,json=offsetId,proto3" json:"offset_id,omitempty"`
	OffsetDate    int32                  `protobuf:"varint,7,opt,name=offset_date,json=offsetDate,proto3" json:"offset_date,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetSearchResultsCalendar) Reset() {
	*x = TLMessagesGetSearchResultsCalendar{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[322]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetSearchResultsCalendar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetSearchResultsCalendar) ProtoMessage() {}

func (x *TLMessagesGetSearchResultsCalendar) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[322]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetSearchResultsCalendar.ProtoReflect.Descriptor instead.
func (*TLMessagesGetSearchResultsCalendar) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{322}
}

func (x *TLMessagesGetSearchResultsCalendar) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetSearchResultsCalendar) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesGetSearchResultsCalendar) GetSavedPeerId() *InputPeer {
	if x != nil {
		return x.SavedPeerId
	}
	return nil
}

func (x *TLMessagesGetSearchResultsCalendar) GetFilter() *MessagesFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *TLMessagesGetSearchResultsCalendar) GetOffsetId() int32 {
	if x != nil {
		return x.OffsetId
	}
	return 0
}

func (x *TLMessagesGetSearchResultsCalendar) GetOffsetDate() int32 {
	if x != nil {
		return x.OffsetDate
	}
	return 0
}

type TLMessagesGetSearchResultsPositions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	SavedPeerId   *InputPeer             `protobuf:"bytes,4,opt,name=saved_peer_id,json=savedPeerId,proto3" json:"saved_peer_id,omitempty"`
	Filter        *MessagesFilter        `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter,omitempty"`
	OffsetId      int32                  `protobuf:"varint,6,opt,name=offset_id,json=offsetId,proto3" json:"offset_id,omitempty"`
	Limit         int32                  `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetSearchResultsPositions) Reset() {
	*x = TLMessagesGetSearchResultsPositions{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[323]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetSearchResultsPositions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetSearchResultsPositions) ProtoMessage() {}

func (x *TLMessagesGetSearchResultsPositions) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[323]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetSearchResultsPositions.ProtoReflect.Descriptor instead.
func (*TLMessagesGetSearchResultsPositions) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{323}
}

func (x *TLMessagesGetSearchResultsPositions) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetSearchResultsPositions) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesGetSearchResultsPositions) GetSavedPeerId() *InputPeer {
	if x != nil {
		return x.SavedPeerId
	}
	return nil
}

func (x *TLMessagesGetSearchResultsPositions) GetFilter() *MessagesFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *TLMessagesGetSearchResultsPositions) GetOffsetId() int32 {
	if x != nil {
		return x.OffsetId
	}
	return 0
}

func (x *TLMessagesGetSearchResultsPositions) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TLMessagesHideChatJoinRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Approved      bool                   `protobuf:"varint,3,opt,name=approved,proto3" json:"approved,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,4,opt,name=peer,proto3" json:"peer,omitempty"`
	UserId        *InputUser             `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesHideChatJoinRequest) Reset() {
	*x = TLMessagesHideChatJoinRequest{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[324]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesHideChatJoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesHideChatJoinRequest) ProtoMessage() {}

func (x *TLMessagesHideChatJoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[324]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesHideChatJoinRequest.ProtoReflect.Descriptor instead.
func (*TLMessagesHideChatJoinRequest) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{324}
}

func (x *TLMessagesHideChatJoinRequest) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesHideChatJoinRequest) GetApproved() bool {
	if x != nil {
		return x.Approved
	}
	return false
}

func (x *TLMessagesHideChatJoinRequest) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesHideChatJoinRequest) GetUserId() *InputUser {
	if x != nil {
		return x.UserId
	}
	return nil
}

type TLMessagesHideAllChatJoinRequests struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Constructor   TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Approved      bool                    `protobuf:"varint,3,opt,name=approved,proto3" json:"approved,omitempty"`
	Peer          *InputPeer              `protobuf:"bytes,4,opt,name=peer,proto3" json:"peer,omitempty"`
	Link          *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=link,proto3" json:"link,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesHideAllChatJoinRequests) Reset() {
	*x = TLMessagesHideAllChatJoinRequests{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[325]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesHideAllChatJoinRequests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesHideAllChatJoinRequests) ProtoMessage() {}

func (x *TLMessagesHideAllChatJoinRequests) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[325]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesHideAllChatJoinRequests.ProtoReflect.Descriptor instead.
func (*TLMessagesHideAllChatJoinRequests) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{325}
}

func (x *TLMessagesHideAllChatJoinRequests) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesHideAllChatJoinRequests) GetApproved() bool {
	if x != nil {
		return x.Approved
	}
	return false
}

func (x *TLMessagesHideAllChatJoinRequests) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesHideAllChatJoinRequests) GetLink() *wrapperspb.StringValue {
	if x != nil {
		return x.Link
	}
	return nil
}

type TLMessagesToggleNoForwards struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Enabled       *Bool                  `protobuf:"bytes,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesToggleNoForwards) Reset() {
	*x = TLMessagesToggleNoForwards{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[326]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesToggleNoForwards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesToggleNoForwards) ProtoMessage() {}

func (x *TLMessagesToggleNoForwards) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[326]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesToggleNoForwards.ProtoReflect.Descriptor instead.
func (*TLMessagesToggleNoForwards) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{326}
}

func (x *TLMessagesToggleNoForwards) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesToggleNoForwards) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesToggleNoForwards) GetEnabled() *Bool {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type TLMessagesSaveDefaultSendAs struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	SendAs        *InputPeer             `protobuf:"bytes,4,opt,name=send_as,json=sendAs,proto3" json:"send_as,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesSaveDefaultSendAs) Reset() {
	*x = TLMessagesSaveDefaultSendAs{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[327]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesSaveDefaultSendAs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesSaveDefaultSendAs) ProtoMessage() {}

func (x *TLMessagesSaveDefaultSendAs) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[327]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesSaveDefaultSendAs.ProtoReflect.Descriptor instead.
func (*TLMessagesSaveDefaultSendAs) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{327}
}

func (x *TLMessagesSaveDefaultSendAs) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesSaveDefaultSendAs) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesSaveDefaultSendAs) GetSendAs() *InputPeer {
	if x != nil {
		return x.SendAs
	}
	return nil
}

type TLMessagesSendReaction struct {
	state                       protoimpl.MessageState  `protogen:"open.v1"`
	Constructor                 TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Big                         bool                    `protobuf:"varint,3,opt,name=big,proto3" json:"big,omitempty"`
	AddToRecent                 bool                    `protobuf:"varint,4,opt,name=add_to_recent,json=addToRecent,proto3" json:"add_to_recent,omitempty"`
	Peer                        *InputPeer              `protobuf:"bytes,5,opt,name=peer,proto3" json:"peer,omitempty"`
	MsgId                       int32                   `protobuf:"varint,6,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	Reaction_FLAGVECTORREACTION []*Reaction             `protobuf:"bytes,7,rep,name=reaction_FLAGVECTORREACTION,json=reactionFLAGVECTORREACTION,proto3" json:"reaction_FLAGVECTORREACTION,omitempty"`
	Reaction_FLAGSTRING         *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=reaction_FLAGSTRING,json=reactionFLAGSTRING,proto3" json:"reaction_FLAGSTRING,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *TLMessagesSendReaction) Reset() {
	*x = TLMessagesSendReaction{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[328]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesSendReaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesSendReaction) ProtoMessage() {}

func (x *TLMessagesSendReaction) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[328]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesSendReaction.ProtoReflect.Descriptor instead.
func (*TLMessagesSendReaction) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{328}
}

func (x *TLMessagesSendReaction) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesSendReaction) GetBig() bool {
	if x != nil {
		return x.Big
	}
	return false
}

func (x *TLMessagesSendReaction) GetAddToRecent() bool {
	if x != nil {
		return x.AddToRecent
	}
	return false
}

func (x *TLMessagesSendReaction) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesSendReaction) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *TLMessagesSendReaction) GetReaction_FLAGVECTORREACTION() []*Reaction {
	if x != nil {
		return x.Reaction_FLAGVECTORREACTION
	}
	return nil
}

func (x *TLMessagesSendReaction) GetReaction_FLAGSTRING() *wrapperspb.StringValue {
	if x != nil {
		return x.Reaction_FLAGSTRING
	}
	return nil
}

type TLMessagesGetMessagesReactions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Id            []int32                `protobuf:"varint,4,rep,packed,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetMessagesReactions) Reset() {
	*x = TLMessagesGetMessagesReactions{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[329]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetMessagesReactions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetMessagesReactions) ProtoMessage() {}

func (x *TLMessagesGetMessagesReactions) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[329]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetMessagesReactions.ProtoReflect.Descriptor instead.
func (*TLMessagesGetMessagesReactions) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{329}
}

func (x *TLMessagesGetMessagesReactions) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetMessagesReactions) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesGetMessagesReactions) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

type TLMessagesGetMessageReactionsList struct {
	state                 protoimpl.MessageState  `protogen:"open.v1"`
	Constructor           TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer                  *InputPeer              `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Id                    int32                   `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	Reaction_FLAGREACTION *Reaction               `protobuf:"bytes,5,opt,name=reaction_FLAGREACTION,json=reactionFLAGREACTION,proto3" json:"reaction_FLAGREACTION,omitempty"`
	Offset                *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit                 int32                   `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	Reaction_FLAGSTRING   *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=reaction_FLAGSTRING,json=reactionFLAGSTRING,proto3" json:"reaction_FLAGSTRING,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *TLMessagesGetMessageReactionsList) Reset() {
	*x = TLMessagesGetMessageReactionsList{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[330]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetMessageReactionsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetMessageReactionsList) ProtoMessage() {}

func (x *TLMessagesGetMessageReactionsList) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[330]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetMessageReactionsList.ProtoReflect.Descriptor instead.
func (*TLMessagesGetMessageReactionsList) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{330}
}

func (x *TLMessagesGetMessageReactionsList) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetMessageReactionsList) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesGetMessageReactionsList) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TLMessagesGetMessageReactionsList) GetReaction_FLAGREACTION() *Reaction {
	if x != nil {
		return x.Reaction_FLAGREACTION
	}
	return nil
}

func (x *TLMessagesGetMessageReactionsList) GetOffset() *wrapperspb.StringValue {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *TLMessagesGetMessageReactionsList) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TLMessagesGetMessageReactionsList) GetReaction_FLAGSTRING() *wrapperspb.StringValue {
	if x != nil {
		return x.Reaction_FLAGSTRING
	}
	return nil
}

type TLMessagesSetChatAvailableReactions struct {
	state                            protoimpl.MessageState `protogen:"open.v1"`
	Constructor                      TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer                             *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	AvailableReactions_CHATREACTIONS *ChatReactions         `protobuf:"bytes,4,opt,name=available_reactions_CHATREACTIONS,json=availableReactionsCHATREACTIONS,proto3" json:"available_reactions_CHATREACTIONS,omitempty"`
	ReactionsLimit                   *wrapperspb.Int32Value `protobuf:"bytes,5,opt,name=reactions_limit,json=reactionsLimit,proto3" json:"reactions_limit,omitempty"`
	PaidEnabled                      *Bool                  `protobuf:"bytes,6,opt,name=paid_enabled,json=paidEnabled,proto3" json:"paid_enabled,omitempty"`
	AvailableReactions_VECTORSTRING  []string               `protobuf:"bytes,7,rep,name=available_reactions_VECTORSTRING,json=availableReactionsVECTORSTRING,proto3" json:"available_reactions_VECTORSTRING,omitempty"`
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *TLMessagesSetChatAvailableReactions) Reset() {
	*x = TLMessagesSetChatAvailableReactions{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[331]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesSetChatAvailableReactions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesSetChatAvailableReactions) ProtoMessage() {}

func (x *TLMessagesSetChatAvailableReactions) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[331]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesSetChatAvailableReactions.ProtoReflect.Descriptor instead.
func (*TLMessagesSetChatAvailableReactions) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{331}
}

func (x *TLMessagesSetChatAvailableReactions) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesSetChatAvailableReactions) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesSetChatAvailableReactions) GetAvailableReactions_CHATREACTIONS() *ChatReactions {
	if x != nil {
		return x.AvailableReactions_CHATREACTIONS
	}
	return nil
}

func (x *TLMessagesSetChatAvailableReactions) GetReactionsLimit() *wrapperspb.Int32Value {
	if x != nil {
		return x.ReactionsLimit
	}
	return nil
}

func (x *TLMessagesSetChatAvailableReactions) GetPaidEnabled() *Bool {
	if x != nil {
		return x.PaidEnabled
	}
	return nil
}

func (x *TLMessagesSetChatAvailableReactions) GetAvailableReactions_VECTORSTRING() []string {
	if x != nil {
		return x.AvailableReactions_VECTORSTRING
	}
	return nil
}

type TLMessagesGetAvailableReactions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Hash          int32                  `protobuf:"varint,3,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetAvailableReactions) Reset() {
	*x = TLMessagesGetAvailableReactions{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[332]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetAvailableReactions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetAvailableReactions) ProtoMessage() {}

func (x *TLMessagesGetAvailableReactions) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[332]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetAvailableReactions.ProtoReflect.Descriptor instead.
func (*TLMessagesGetAvailableReactions) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{332}
}

func (x *TLMessagesGetAvailableReactions) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetAvailableReactions) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLMessagesSetDefaultReaction struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Constructor       TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Reaction_REACTION *Reaction              `protobuf:"bytes,3,opt,name=reaction_REACTION,json=reactionREACTION,proto3" json:"reaction_REACTION,omitempty"`
	Reaction_STRING   string                 `protobuf:"bytes,4,opt,name=reaction_STRING,json=reactionSTRING,proto3" json:"reaction_STRING,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TLMessagesSetDefaultReaction) Reset() {
	*x = TLMessagesSetDefaultReaction{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[333]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesSetDefaultReaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesSetDefaultReaction) ProtoMessage() {}

func (x *TLMessagesSetDefaultReaction) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[333]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesSetDefaultReaction.ProtoReflect.Descriptor instead.
func (*TLMessagesSetDefaultReaction) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{333}
}

func (x *TLMessagesSetDefaultReaction) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesSetDefaultReaction) GetReaction_REACTION() *Reaction {
	if x != nil {
		return x.Reaction_REACTION
	}
	return nil
}

func (x *TLMessagesSetDefaultReaction) GetReaction_STRING() string {
	if x != nil {
		return x.Reaction_STRING
	}
	return ""
}

type TLMessagesTranslateText struct {
	state                           protoimpl.MessageState  `protogen:"open.v1"`
	Constructor                     TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer                            *InputPeer              `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Id                              []int32                 `protobuf:"varint,4,rep,packed,name=id,proto3" json:"id,omitempty"`
	Text_FLAGVECTORTEXTWITHENTITIES []*TextWithEntities     `protobuf:"bytes,5,rep,name=text_FLAGVECTORTEXTWITHENTITIES,json=textFLAGVECTORTEXTWITHENTITIES,proto3" json:"text_FLAGVECTORTEXTWITHENTITIES,omitempty"`
	ToLang                          string                  `protobuf:"bytes,6,opt,name=to_lang,json=toLang,proto3" json:"to_lang,omitempty"`
	MsgId                           *wrapperspb.Int32Value  `protobuf:"bytes,7,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	Text_FLAGSTRING                 *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=text_FLAGSTRING,json=textFLAGSTRING,proto3" json:"text_FLAGSTRING,omitempty"`
	FromLang                        *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=from_lang,json=fromLang,proto3" json:"from_lang,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *TLMessagesTranslateText) Reset() {
	*x = TLMessagesTranslateText{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[334]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesTranslateText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesTranslateText) ProtoMessage() {}

func (x *TLMessagesTranslateText) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[334]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesTranslateText.ProtoReflect.Descriptor instead.
func (*TLMessagesTranslateText) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{334}
}

func (x *TLMessagesTranslateText) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesTranslateText) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesTranslateText) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TLMessagesTranslateText) GetText_FLAGVECTORTEXTWITHENTITIES() []*TextWithEntities {
	if x != nil {
		return x.Text_FLAGVECTORTEXTWITHENTITIES
	}
	return nil
}

func (x *TLMessagesTranslateText) GetToLang() string {
	if x != nil {
		return x.ToLang
	}
	return ""
}

func (x *TLMessagesTranslateText) GetMsgId() *wrapperspb.Int32Value {
	if x != nil {
		return x.MsgId
	}
	return nil
}

func (x *TLMessagesTranslateText) GetText_FLAGSTRING() *wrapperspb.StringValue {
	if x != nil {
		return x.Text_FLAGSTRING
	}
	return nil
}

func (x *TLMessagesTranslateText) GetFromLang() *wrapperspb.StringValue {
	if x != nil {
		return x.FromLang
	}
	return nil
}

type TLMessagesGetUnreadReactions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	TopMsgId      *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=top_msg_id,json=topMsgId,proto3" json:"top_msg_id,omitempty"`
	OffsetId      int32                  `protobuf:"varint,5,opt,name=offset_id,json=offsetId,proto3" json:"offset_id,omitempty"`
	AddOffset     int32                  `protobuf:"varint,6,opt,name=add_offset,json=addOffset,proto3" json:"add_offset,omitempty"`
	Limit         int32                  `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	MaxId         int32                  `protobuf:"varint,8,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	MinId         int32                  `protobuf:"varint,9,opt,name=min_id,json=minId,proto3" json:"min_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetUnreadReactions) Reset() {
	*x = TLMessagesGetUnreadReactions{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[335]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetUnreadReactions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetUnreadReactions) ProtoMessage() {}

func (x *TLMessagesGetUnreadReactions) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[335]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetUnreadReactions.ProtoReflect.Descriptor instead.
func (*TLMessagesGetUnreadReactions) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{335}
}

func (x *TLMessagesGetUnreadReactions) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetUnreadReactions) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesGetUnreadReactions) GetTopMsgId() *wrapperspb.Int32Value {
	if x != nil {
		return x.TopMsgId
	}
	return nil
}

func (x *TLMessagesGetUnreadReactions) GetOffsetId() int32 {
	if x != nil {
		return x.OffsetId
	}
	return 0
}

func (x *TLMessagesGetUnreadReactions) GetAddOffset() int32 {
	if x != nil {
		return x.AddOffset
	}
	return 0
}

func (x *TLMessagesGetUnreadReactions) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TLMessagesGetUnreadReactions) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

func (x *TLMessagesGetUnreadReactions) GetMinId() int32 {
	if x != nil {
		return x.MinId
	}
	return 0
}

type TLMessagesReadReactions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	TopMsgId      *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=top_msg_id,json=topMsgId,proto3" json:"top_msg_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesReadReactions) Reset() {
	*x = TLMessagesReadReactions{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[336]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesReadReactions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesReadReactions) ProtoMessage() {}

func (x *TLMessagesReadReactions) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[336]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesReadReactions.ProtoReflect.Descriptor instead.
func (*TLMessagesReadReactions) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{336}
}

func (x *TLMessagesReadReactions) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesReadReactions) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesReadReactions) GetTopMsgId() *wrapperspb.Int32Value {
	if x != nil {
		return x.TopMsgId
	}
	return nil
}

type TLMessagesSearchSentMedia struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Q             string                 `protobuf:"bytes,3,opt,name=q,proto3" json:"q,omitempty"`
	Filter        *MessagesFilter        `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	Limit         int32                  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesSearchSentMedia) Reset() {
	*x = TLMessagesSearchSentMedia{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[337]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesSearchSentMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesSearchSentMedia) ProtoMessage() {}

func (x *TLMessagesSearchSentMedia) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[337]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesSearchSentMedia.ProtoReflect.Descriptor instead.
func (*TLMessagesSearchSentMedia) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{337}
}

func (x *TLMessagesSearchSentMedia) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesSearchSentMedia) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *TLMessagesSearchSentMedia) GetFilter() *MessagesFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *TLMessagesSearchSentMedia) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TLMessagesGetAttachMenuBots struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Hash          int64                  `protobuf:"varint,3,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetAttachMenuBots) Reset() {
	*x = TLMessagesGetAttachMenuBots{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[338]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetAttachMenuBots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetAttachMenuBots) ProtoMessage() {}

func (x *TLMessagesGetAttachMenuBots) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[338]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetAttachMenuBots.ProtoReflect.Descriptor instead.
func (*TLMessagesGetAttachMenuBots) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{338}
}

func (x *TLMessagesGetAttachMenuBots) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetAttachMenuBots) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLMessagesGetAttachMenuBot struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Bot           *InputUser             `protobuf:"bytes,3,opt,name=bot,proto3" json:"bot,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetAttachMenuBot) Reset() {
	*x = TLMessagesGetAttachMenuBot{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[339]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetAttachMenuBot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetAttachMenuBot) ProtoMessage() {}

func (x *TLMessagesGetAttachMenuBot) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[339]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetAttachMenuBot.ProtoReflect.Descriptor instead.
func (*TLMessagesGetAttachMenuBot) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{339}
}

func (x *TLMessagesGetAttachMenuBot) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetAttachMenuBot) GetBot() *InputUser {
	if x != nil {
		return x.Bot
	}
	return nil
}

type TLMessagesToggleBotInAttachMenu struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	WriteAllowed  bool                   `protobuf:"varint,3,opt,name=write_allowed,json=writeAllowed,proto3" json:"write_allowed,omitempty"`
	Bot           *InputUser             `protobuf:"bytes,4,opt,name=bot,proto3" json:"bot,omitempty"`
	Enabled       *Bool                  `protobuf:"bytes,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesToggleBotInAttachMenu) Reset() {
	*x = TLMessagesToggleBotInAttachMenu{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[340]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesToggleBotInAttachMenu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesToggleBotInAttachMenu) ProtoMessage() {}

func (x *TLMessagesToggleBotInAttachMenu) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[340]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesToggleBotInAttachMenu.ProtoReflect.Descriptor instead.
func (*TLMessagesToggleBotInAttachMenu) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{340}
}

func (x *TLMessagesToggleBotInAttachMenu) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesToggleBotInAttachMenu) GetWriteAllowed() bool {
	if x != nil {
		return x.WriteAllowed
	}
	return false
}

func (x *TLMessagesToggleBotInAttachMenu) GetBot() *InputUser {
	if x != nil {
		return x.Bot
	}
	return nil
}

func (x *TLMessagesToggleBotInAttachMenu) GetEnabled() *Bool {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type TLMessagesRequestWebView struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Constructor   TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	FromBotMenu   bool                    `protobuf:"varint,3,opt,name=from_bot_menu,json=fromBotMenu,proto3" json:"from_bot_menu,omitempty"`
	Silent        bool                    `protobuf:"varint,4,opt,name=silent,proto3" json:"silent,omitempty"`
	Compact       bool                    `protobuf:"varint,5,opt,name=compact,proto3" json:"compact,omitempty"`
	Fullscreen    bool                    `protobuf:"varint,6,opt,name=fullscreen,proto3" json:"fullscreen,omitempty"`
	Peer          *InputPeer              `protobuf:"bytes,7,opt,name=peer,proto3" json:"peer,omitempty"`
	Bot           *InputUser              `protobuf:"bytes,8,opt,name=bot,proto3" json:"bot,omitempty"`
	Url           *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=url,proto3" json:"url,omitempty"`
	StartParam    *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=start_param,json=startParam,proto3" json:"start_param,omitempty"`
	ThemeParams   *DataJSON               `protobuf:"bytes,11,opt,name=theme_params,json=themeParams,proto3" json:"theme_params,omitempty"`
	Platform      string                  `protobuf:"bytes,12,opt,name=platform,proto3" json:"platform,omitempty"`
	ReplyTo       *InputReplyTo           `protobuf:"bytes,13,opt,name=reply_to,json=replyTo,proto3" json:"reply_to,omitempty"`
	SendAs        *InputPeer              `protobuf:"bytes,14,opt,name=send_as,json=sendAs,proto3" json:"send_as,omitempty"`
	ReplyToMsgId  *wrapperspb.Int32Value  `protobuf:"bytes,15,opt,name=reply_to_msg_id,json=replyToMsgId,proto3" json:"reply_to_msg_id,omitempty"`
	TopMsgId      *wrapperspb.Int32Value  `protobuf:"bytes,16,opt,name=top_msg_id,json=topMsgId,proto3" json:"top_msg_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesRequestWebView) Reset() {
	*x = TLMessagesRequestWebView{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[341]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesRequestWebView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesRequestWebView) ProtoMessage() {}

func (x *TLMessagesRequestWebView) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[341]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesRequestWebView.ProtoReflect.Descriptor instead.
func (*TLMessagesRequestWebView) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{341}
}

func (x *TLMessagesRequestWebView) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesRequestWebView) GetFromBotMenu() bool {
	if x != nil {
		return x.FromBotMenu
	}
	return false
}

func (x *TLMessagesRequestWebView) GetSilent() bool {
	if x != nil {
		return x.Silent
	}
	return false
}

func (x *TLMessagesRequestWebView) GetCompact() bool {
	if x != nil {
		return x.Compact
	}
	return false
}

func (x *TLMessagesRequestWebView) GetFullscreen() bool {
	if x != nil {
		return x.Fullscreen
	}
	return false
}

func (x *TLMessagesRequestWebView) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesRequestWebView) GetBot() *InputUser {
	if x != nil {
		return x.Bot
	}
	return nil
}

func (x *TLMessagesRequestWebView) GetUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *TLMessagesRequestWebView) GetStartParam() *wrapperspb.StringValue {
	if x != nil {
		return x.StartParam
	}
	return nil
}

func (x *TLMessagesRequestWebView) GetThemeParams() *DataJSON {
	if x != nil {
		return x.ThemeParams
	}
	return nil
}

func (x *TLMessagesRequestWebView) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *TLMessagesRequestWebView) GetReplyTo() *InputReplyTo {
	if x != nil {
		return x.ReplyTo
	}
	return nil
}

func (x *TLMessagesRequestWebView) GetSendAs() *InputPeer {
	if x != nil {
		return x.SendAs
	}
	return nil
}

func (x *TLMessagesRequestWebView) GetReplyToMsgId() *wrapperspb.Int32Value {
	if x != nil {
		return x.ReplyToMsgId
	}
	return nil
}

func (x *TLMessagesRequestWebView) GetTopMsgId() *wrapperspb.Int32Value {
	if x != nil {
		return x.TopMsgId
	}
	return nil
}

type TLMessagesProlongWebView struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Silent        bool                   `protobuf:"varint,3,opt,name=silent,proto3" json:"silent,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,4,opt,name=peer,proto3" json:"peer,omitempty"`
	Bot           *InputUser             `protobuf:"bytes,5,opt,name=bot,proto3" json:"bot,omitempty"`
	QueryId       int64                  `protobuf:"varint,6,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	ReplyTo       *InputReplyTo          `protobuf:"bytes,7,opt,name=reply_to,json=replyTo,proto3" json:"reply_to,omitempty"`
	SendAs        *InputPeer             `protobuf:"bytes,8,opt,name=send_as,json=sendAs,proto3" json:"send_as,omitempty"`
	ReplyToMsgId  *wrapperspb.Int32Value `protobuf:"bytes,9,opt,name=reply_to_msg_id,json=replyToMsgId,proto3" json:"reply_to_msg_id,omitempty"`
	TopMsgId      *wrapperspb.Int32Value `protobuf:"bytes,10,opt,name=top_msg_id,json=topMsgId,proto3" json:"top_msg_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesProlongWebView) Reset() {
	*x = TLMessagesProlongWebView{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[342]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesProlongWebView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesProlongWebView) ProtoMessage() {}

func (x *TLMessagesProlongWebView) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[342]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesProlongWebView.ProtoReflect.Descriptor instead.
func (*TLMessagesProlongWebView) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{342}
}

func (x *TLMessagesProlongWebView) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesProlongWebView) GetSilent() bool {
	if x != nil {
		return x.Silent
	}
	return false
}

func (x *TLMessagesProlongWebView) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesProlongWebView) GetBot() *InputUser {
	if x != nil {
		return x.Bot
	}
	return nil
}

func (x *TLMessagesProlongWebView) GetQueryId() int64 {
	if x != nil {
		return x.QueryId
	}
	return 0
}

func (x *TLMessagesProlongWebView) GetReplyTo() *InputReplyTo {
	if x != nil {
		return x.ReplyTo
	}
	return nil
}

func (x *TLMessagesProlongWebView) GetSendAs() *InputPeer {
	if x != nil {
		return x.SendAs
	}
	return nil
}

func (x *TLMessagesProlongWebView) GetReplyToMsgId() *wrapperspb.Int32Value {
	if x != nil {
		return x.ReplyToMsgId
	}
	return nil
}

func (x *TLMessagesProlongWebView) GetTopMsgId() *wrapperspb.Int32Value {
	if x != nil {
		return x.TopMsgId
	}
	return nil
}

type TLMessagesRequestSimpleWebView413A3E73 struct {
	state             protoimpl.MessageState  `protogen:"open.v1"`
	Constructor       TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	FromSwitchWebview bool                    `protobuf:"varint,3,opt,name=from_switch_webview,json=fromSwitchWebview,proto3" json:"from_switch_webview,omitempty"`
	FromSideMenu      bool                    `protobuf:"varint,4,opt,name=from_side_menu,json=fromSideMenu,proto3" json:"from_side_menu,omitempty"`
	Compact           bool                    `protobuf:"varint,5,opt,name=compact,proto3" json:"compact,omitempty"`
	Fullscreen        bool                    `protobuf:"varint,6,opt,name=fullscreen,proto3" json:"fullscreen,omitempty"`
	Bot               *InputUser              `protobuf:"bytes,7,opt,name=bot,proto3" json:"bot,omitempty"`
	Url               *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=url,proto3" json:"url,omitempty"`
	StartParam        *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=start_param,json=startParam,proto3" json:"start_param,omitempty"`
	ThemeParams       *DataJSON               `protobuf:"bytes,10,opt,name=theme_params,json=themeParams,proto3" json:"theme_params,omitempty"`
	Platform          string                  `protobuf:"bytes,11,opt,name=platform,proto3" json:"platform,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TLMessagesRequestSimpleWebView413A3E73) Reset() {
	*x = TLMessagesRequestSimpleWebView413A3E73{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[343]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesRequestSimpleWebView413A3E73) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesRequestSimpleWebView413A3E73) ProtoMessage() {}

func (x *TLMessagesRequestSimpleWebView413A3E73) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[343]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesRequestSimpleWebView413A3E73.ProtoReflect.Descriptor instead.
func (*TLMessagesRequestSimpleWebView413A3E73) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{343}
}

func (x *TLMessagesRequestSimpleWebView413A3E73) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesRequestSimpleWebView413A3E73) GetFromSwitchWebview() bool {
	if x != nil {
		return x.FromSwitchWebview
	}
	return false
}

func (x *TLMessagesRequestSimpleWebView413A3E73) GetFromSideMenu() bool {
	if x != nil {
		return x.FromSideMenu
	}
	return false
}

func (x *TLMessagesRequestSimpleWebView413A3E73) GetCompact() bool {
	if x != nil {
		return x.Compact
	}
	return false
}

func (x *TLMessagesRequestSimpleWebView413A3E73) GetFullscreen() bool {
	if x != nil {
		return x.Fullscreen
	}
	return false
}

func (x *TLMessagesRequestSimpleWebView413A3E73) GetBot() *InputUser {
	if x != nil {
		return x.Bot
	}
	return nil
}

func (x *TLMessagesRequestSimpleWebView413A3E73) GetUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *TLMessagesRequestSimpleWebView413A3E73) GetStartParam() *wrapperspb.StringValue {
	if x != nil {
		return x.StartParam
	}
	return nil
}

func (x *TLMessagesRequestSimpleWebView413A3E73) GetThemeParams() *DataJSON {
	if x != nil {
		return x.ThemeParams
	}
	return nil
}

func (x *TLMessagesRequestSimpleWebView413A3E73) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

type TLMessagesSendWebViewResultMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	BotQueryId    string                 `protobuf:"bytes,3,opt,name=bot_query_id,json=botQueryId,proto3" json:"bot_query_id,omitempty"`
	Result        *InputBotInlineResult  `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesSendWebViewResultMessage) Reset() {
	*x = TLMessagesSendWebViewResultMessage{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[344]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesSendWebViewResultMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesSendWebViewResultMessage) ProtoMessage() {}

func (x *TLMessagesSendWebViewResultMessage) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[344]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesSendWebViewResultMessage.ProtoReflect.Descriptor instead.
func (*TLMessagesSendWebViewResultMessage) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{344}
}

func (x *TLMessagesSendWebViewResultMessage) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesSendWebViewResultMessage) GetBotQueryId() string {
	if x != nil {
		return x.BotQueryId
	}
	return ""
}

func (x *TLMessagesSendWebViewResultMessage) GetResult() *InputBotInlineResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type TLMessagesSendWebViewData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Bot           *InputUser             `protobuf:"bytes,3,opt,name=bot,proto3" json:"bot,omitempty"`
	RandomId      int64                  `protobuf:"varint,4,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	ButtonText    string                 `protobuf:"bytes,5,opt,name=button_text,json=buttonText,proto3" json:"button_text,omitempty"`
	Data          string                 `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesSendWebViewData) Reset() {
	*x = TLMessagesSendWebViewData{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[345]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesSendWebViewData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesSendWebViewData) ProtoMessage() {}

func (x *TLMessagesSendWebViewData) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[345]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesSendWebViewData.ProtoReflect.Descriptor instead.
func (*TLMessagesSendWebViewData) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{345}
}

func (x *TLMessagesSendWebViewData) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesSendWebViewData) GetBot() *InputUser {
	if x != nil {
		return x.Bot
	}
	return nil
}

func (x *TLMessagesSendWebViewData) GetRandomId() int64 {
	if x != nil {
		return x.RandomId
	}
	return 0
}

func (x *TLMessagesSendWebViewData) GetButtonText() string {
	if x != nil {
		return x.ButtonText
	}
	return ""
}

func (x *TLMessagesSendWebViewData) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type TLMessagesTranscribeAudio struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	MsgId         int32                  `protobuf:"varint,4,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesTranscribeAudio) Reset() {
	*x = TLMessagesTranscribeAudio{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[346]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesTranscribeAudio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesTranscribeAudio) ProtoMessage() {}

func (x *TLMessagesTranscribeAudio) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[346]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesTranscribeAudio.ProtoReflect.Descriptor instead.
func (*TLMessagesTranscribeAudio) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{346}
}

func (x *TLMessagesTranscribeAudio) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesTranscribeAudio) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesTranscribeAudio) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

type TLMessagesRateTranscribedAudio struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Constructor     TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer            *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	MsgId           int32                  `protobuf:"varint,4,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	TranscriptionId int64                  `protobuf:"varint,5,opt,name=transcription_id,json=transcriptionId,proto3" json:"transcription_id,omitempty"`
	Good            *Bool                  `protobuf:"bytes,6,opt,name=good,proto3" json:"good,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TLMessagesRateTranscribedAudio) Reset() {
	*x = TLMessagesRateTranscribedAudio{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[347]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesRateTranscribedAudio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesRateTranscribedAudio) ProtoMessage() {}

func (x *TLMessagesRateTranscribedAudio) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[347]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesRateTranscribedAudio.ProtoReflect.Descriptor instead.
func (*TLMessagesRateTranscribedAudio) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{347}
}

func (x *TLMessagesRateTranscribedAudio) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesRateTranscribedAudio) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesRateTranscribedAudio) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *TLMessagesRateTranscribedAudio) GetTranscriptionId() int64 {
	if x != nil {
		return x.TranscriptionId
	}
	return 0
}

func (x *TLMessagesRateTranscribedAudio) GetGood() *Bool {
	if x != nil {
		return x.Good
	}
	return nil
}

type TLMessagesGetCustomEmojiDocuments struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	DocumentId    []int64                `protobuf:"varint,3,rep,packed,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetCustomEmojiDocuments) Reset() {
	*x = TLMessagesGetCustomEmojiDocuments{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[348]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetCustomEmojiDocuments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetCustomEmojiDocuments) ProtoMessage() {}

func (x *TLMessagesGetCustomEmojiDocuments) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[348]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetCustomEmojiDocuments.ProtoReflect.Descriptor instead.
func (*TLMessagesGetCustomEmojiDocuments) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{348}
}

func (x *TLMessagesGetCustomEmojiDocuments) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetCustomEmojiDocuments) GetDocumentId() []int64 {
	if x != nil {
		return x.DocumentId
	}
	return nil
}

type TLMessagesGetEmojiStickers struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Hash          int64                  `protobuf:"varint,3,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetEmojiStickers) Reset() {
	*x = TLMessagesGetEmojiStickers{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[349]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetEmojiStickers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetEmojiStickers) ProtoMessage() {}

func (x *TLMessagesGetEmojiStickers) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[349]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetEmojiStickers.ProtoReflect.Descriptor instead.
func (*TLMessagesGetEmojiStickers) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{349}
}

func (x *TLMessagesGetEmojiStickers) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetEmojiStickers) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLMessagesGetFeaturedEmojiStickers struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Hash          int64                  `protobuf:"varint,3,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetFeaturedEmojiStickers) Reset() {
	*x = TLMessagesGetFeaturedEmojiStickers{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[350]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetFeaturedEmojiStickers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetFeaturedEmojiStickers) ProtoMessage() {}

func (x *TLMessagesGetFeaturedEmojiStickers) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[350]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetFeaturedEmojiStickers.ProtoReflect.Descriptor instead.
func (*TLMessagesGetFeaturedEmojiStickers) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{350}
}

func (x *TLMessagesGetFeaturedEmojiStickers) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetFeaturedEmojiStickers) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLMessagesReportReaction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Id            int32                  `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	ReactionPeer  *InputPeer             `protobuf:"bytes,5,opt,name=reaction_peer,json=reactionPeer,proto3" json:"reaction_peer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesReportReaction) Reset() {
	*x = TLMessagesReportReaction{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[351]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesReportReaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesReportReaction) ProtoMessage() {}

func (x *TLMessagesReportReaction) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[351]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesReportReaction.ProtoReflect.Descriptor instead.
func (*TLMessagesReportReaction) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{351}
}

func (x *TLMessagesReportReaction) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesReportReaction) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesReportReaction) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TLMessagesReportReaction) GetReactionPeer() *InputPeer {
	if x != nil {
		return x.ReactionPeer
	}
	return nil
}

type TLMessagesGetTopReactions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Limit         int32                  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Hash          int64                  `protobuf:"varint,4,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetTopReactions) Reset() {
	*x = TLMessagesGetTopReactions{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[352]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetTopReactions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetTopReactions) ProtoMessage() {}

func (x *TLMessagesGetTopReactions) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[352]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetTopReactions.ProtoReflect.Descriptor instead.
func (*TLMessagesGetTopReactions) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{352}
}

func (x *TLMessagesGetTopReactions) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetTopReactions) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TLMessagesGetTopReactions) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLMessagesGetRecentReactions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Limit         int32                  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Hash          int64                  `protobuf:"varint,4,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetRecentReactions) Reset() {
	*x = TLMessagesGetRecentReactions{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[353]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetRecentReactions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetRecentReactions) ProtoMessage() {}

func (x *TLMessagesGetRecentReactions) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[353]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetRecentReactions.ProtoReflect.Descriptor instead.
func (*TLMessagesGetRecentReactions) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{353}
}

func (x *TLMessagesGetRecentReactions) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetRecentReactions) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TLMessagesGetRecentReactions) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLMessagesClearRecentReactions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesClearRecentReactions) Reset() {
	*x = TLMessagesClearRecentReactions{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[354]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesClearRecentReactions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesClearRecentReactions) ProtoMessage() {}

func (x *TLMessagesClearRecentReactions) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[354]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesClearRecentReactions.ProtoReflect.Descriptor instead.
func (*TLMessagesClearRecentReactions) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{354}
}

func (x *TLMessagesClearRecentReactions) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLMessagesGetExtendedMedia struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Id            []int32                `protobuf:"varint,4,rep,packed,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetExtendedMedia) Reset() {
	*x = TLMessagesGetExtendedMedia{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[355]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetExtendedMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetExtendedMedia) ProtoMessage() {}

func (x *TLMessagesGetExtendedMedia) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[355]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetExtendedMedia.ProtoReflect.Descriptor instead.
func (*TLMessagesGetExtendedMedia) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{355}
}

func (x *TLMessagesGetExtendedMedia) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetExtendedMedia) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesGetExtendedMedia) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

type TLMessagesSetDefaultHistoryTTL struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Period        int32                  `protobuf:"varint,3,opt,name=period,proto3" json:"period,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesSetDefaultHistoryTTL) Reset() {
	*x = TLMessagesSetDefaultHistoryTTL{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[356]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesSetDefaultHistoryTTL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesSetDefaultHistoryTTL) ProtoMessage() {}

func (x *TLMessagesSetDefaultHistoryTTL) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[356]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesSetDefaultHistoryTTL.ProtoReflect.Descriptor instead.
func (*TLMessagesSetDefaultHistoryTTL) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{356}
}

func (x *TLMessagesSetDefaultHistoryTTL) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesSetDefaultHistoryTTL) GetPeriod() int32 {
	if x != nil {
		return x.Period
	}
	return 0
}

type TLMessagesGetDefaultHistoryTTL struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetDefaultHistoryTTL) Reset() {
	*x = TLMessagesGetDefaultHistoryTTL{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[357]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetDefaultHistoryTTL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetDefaultHistoryTTL) ProtoMessage() {}

func (x *TLMessagesGetDefaultHistoryTTL) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[357]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetDefaultHistoryTTL.ProtoReflect.Descriptor instead.
func (*TLMessagesGetDefaultHistoryTTL) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{357}
}

func (x *TLMessagesGetDefaultHistoryTTL) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLMessagesSendBotRequestedPeer struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Constructor    TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer           *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	MsgId          int32                  `protobuf:"varint,4,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	ButtonId       int32                  `protobuf:"varint,5,opt,name=button_id,json=buttonId,proto3" json:"button_id,omitempty"`
	RequestedPeers []*InputPeer           `protobuf:"bytes,6,rep,name=requested_peers,json=requestedPeers,proto3" json:"requested_peers,omitempty"`
	RequestedPeer  *InputPeer             `protobuf:"bytes,7,opt,name=requested_peer,json=requestedPeer,proto3" json:"requested_peer,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TLMessagesSendBotRequestedPeer) Reset() {
	*x = TLMessagesSendBotRequestedPeer{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[358]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesSendBotRequestedPeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesSendBotRequestedPeer) ProtoMessage() {}

func (x *TLMessagesSendBotRequestedPeer) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[358]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesSendBotRequestedPeer.ProtoReflect.Descriptor instead.
func (*TLMessagesSendBotRequestedPeer) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{358}
}

func (x *TLMessagesSendBotRequestedPeer) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesSendBotRequestedPeer) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesSendBotRequestedPeer) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *TLMessagesSendBotRequestedPeer) GetButtonId() int32 {
	if x != nil {
		return x.ButtonId
	}
	return 0
}

func (x *TLMessagesSendBotRequestedPeer) GetRequestedPeers() []*InputPeer {
	if x != nil {
		return x.RequestedPeers
	}
	return nil
}

func (x *TLMessagesSendBotRequestedPeer) GetRequestedPeer() *InputPeer {
	if x != nil {
		return x.RequestedPeer
	}
	return nil
}

type TLMessagesGetEmojiGroups struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Hash          int32                  `protobuf:"varint,3,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetEmojiGroups) Reset() {
	*x = TLMessagesGetEmojiGroups{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[359]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetEmojiGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetEmojiGroups) ProtoMessage() {}

func (x *TLMessagesGetEmojiGroups) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[359]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetEmojiGroups.ProtoReflect.Descriptor instead.
func (*TLMessagesGetEmojiGroups) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{359}
}

func (x *TLMessagesGetEmojiGroups) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetEmojiGroups) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLMessagesGetEmojiStatusGroups struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Hash          int32                  `protobuf:"varint,3,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetEmojiStatusGroups) Reset() {
	*x = TLMessagesGetEmojiStatusGroups{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[360]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetEmojiStatusGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetEmojiStatusGroups) ProtoMessage() {}

func (x *TLMessagesGetEmojiStatusGroups) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[360]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetEmojiStatusGroups.ProtoReflect.Descriptor instead.
func (*TLMessagesGetEmojiStatusGroups) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{360}
}

func (x *TLMessagesGetEmojiStatusGroups) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetEmojiStatusGroups) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLMessagesGetEmojiProfilePhotoGroups struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Hash          int32                  `protobuf:"varint,3,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetEmojiProfilePhotoGroups) Reset() {
	*x = TLMessagesGetEmojiProfilePhotoGroups{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[361]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetEmojiProfilePhotoGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetEmojiProfilePhotoGroups) ProtoMessage() {}

func (x *TLMessagesGetEmojiProfilePhotoGroups) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[361]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetEmojiProfilePhotoGroups.ProtoReflect.Descriptor instead.
func (*TLMessagesGetEmojiProfilePhotoGroups) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{361}
}

func (x *TLMessagesGetEmojiProfilePhotoGroups) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetEmojiProfilePhotoGroups) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLMessagesSearchCustomEmoji struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Emoticon      string                 `protobuf:"bytes,3,opt,name=emoticon,proto3" json:"emoticon,omitempty"`
	Hash          int64                  `protobuf:"varint,4,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesSearchCustomEmoji) Reset() {
	*x = TLMessagesSearchCustomEmoji{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[362]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesSearchCustomEmoji) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesSearchCustomEmoji) ProtoMessage() {}

func (x *TLMessagesSearchCustomEmoji) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[362]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesSearchCustomEmoji.ProtoReflect.Descriptor instead.
func (*TLMessagesSearchCustomEmoji) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{362}
}

func (x *TLMessagesSearchCustomEmoji) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesSearchCustomEmoji) GetEmoticon() string {
	if x != nil {
		return x.Emoticon
	}
	return ""
}

func (x *TLMessagesSearchCustomEmoji) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLMessagesTogglePeerTranslations struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Disabled      bool                   `protobuf:"varint,3,opt,name=disabled,proto3" json:"disabled,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,4,opt,name=peer,proto3" json:"peer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesTogglePeerTranslations) Reset() {
	*x = TLMessagesTogglePeerTranslations{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[363]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesTogglePeerTranslations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesTogglePeerTranslations) ProtoMessage() {}

func (x *TLMessagesTogglePeerTranslations) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[363]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesTogglePeerTranslations.ProtoReflect.Descriptor instead.
func (*TLMessagesTogglePeerTranslations) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{363}
}

func (x *TLMessagesTogglePeerTranslations) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesTogglePeerTranslations) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *TLMessagesTogglePeerTranslations) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

type TLMessagesGetBotApp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	App           *InputBotApp           `protobuf:"bytes,3,opt,name=app,proto3" json:"app,omitempty"`
	Hash          int64                  `protobuf:"varint,4,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetBotApp) Reset() {
	*x = TLMessagesGetBotApp{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[364]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetBotApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetBotApp) ProtoMessage() {}

func (x *TLMessagesGetBotApp) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[364]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetBotApp.ProtoReflect.Descriptor instead.
func (*TLMessagesGetBotApp) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{364}
}

func (x *TLMessagesGetBotApp) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetBotApp) GetApp() *InputBotApp {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *TLMessagesGetBotApp) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLMessagesRequestAppWebView53618BCE struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Constructor   TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	WriteAllowed  bool                    `protobuf:"varint,3,opt,name=write_allowed,json=writeAllowed,proto3" json:"write_allowed,omitempty"`
	Compact       bool                    `protobuf:"varint,4,opt,name=compact,proto3" json:"compact,omitempty"`
	Fullscreen    bool                    `protobuf:"varint,5,opt,name=fullscreen,proto3" json:"fullscreen,omitempty"`
	Peer          *InputPeer              `protobuf:"bytes,6,opt,name=peer,proto3" json:"peer,omitempty"`
	App           *InputBotApp            `protobuf:"bytes,7,opt,name=app,proto3" json:"app,omitempty"`
	StartParam    *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=start_param,json=startParam,proto3" json:"start_param,omitempty"`
	ThemeParams   *DataJSON               `protobuf:"bytes,9,opt,name=theme_params,json=themeParams,proto3" json:"theme_params,omitempty"`
	Platform      string                  `protobuf:"bytes,10,opt,name=platform,proto3" json:"platform,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesRequestAppWebView53618BCE) Reset() {
	*x = TLMessagesRequestAppWebView53618BCE{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[365]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesRequestAppWebView53618BCE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesRequestAppWebView53618BCE) ProtoMessage() {}

func (x *TLMessagesRequestAppWebView53618BCE) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[365]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesRequestAppWebView53618BCE.ProtoReflect.Descriptor instead.
func (*TLMessagesRequestAppWebView53618BCE) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{365}
}

func (x *TLMessagesRequestAppWebView53618BCE) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesRequestAppWebView53618BCE) GetWriteAllowed() bool {
	if x != nil {
		return x.WriteAllowed
	}
	return false
}

func (x *TLMessagesRequestAppWebView53618BCE) GetCompact() bool {
	if x != nil {
		return x.Compact
	}
	return false
}

func (x *TLMessagesRequestAppWebView53618BCE) GetFullscreen() bool {
	if x != nil {
		return x.Fullscreen
	}
	return false
}

func (x *TLMessagesRequestAppWebView53618BCE) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesRequestAppWebView53618BCE) GetApp() *InputBotApp {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *TLMessagesRequestAppWebView53618BCE) GetStartParam() *wrapperspb.StringValue {
	if x != nil {
		return x.StartParam
	}
	return nil
}

func (x *TLMessagesRequestAppWebView53618BCE) GetThemeParams() *DataJSON {
	if x != nil {
		return x.ThemeParams
	}
	return nil
}

func (x *TLMessagesRequestAppWebView53618BCE) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

type TLMessagesSetChatWallPaper struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	ForBoth       bool                   `protobuf:"varint,3,opt,name=for_both,json=forBoth,proto3" json:"for_both,omitempty"`
	Revert        bool                   `protobuf:"varint,4,opt,name=revert,proto3" json:"revert,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,5,opt,name=peer,proto3" json:"peer,omitempty"`
	Wallpaper     *InputWallPaper        `protobuf:"bytes,6,opt,name=wallpaper,proto3" json:"wallpaper,omitempty"`
	Settings      *WallPaperSettings     `protobuf:"bytes,7,opt,name=settings,proto3" json:"settings,omitempty"`
	Id            *wrapperspb.Int32Value `protobuf:"bytes,8,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesSetChatWallPaper) Reset() {
	*x = TLMessagesSetChatWallPaper{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[366]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesSetChatWallPaper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesSetChatWallPaper) ProtoMessage() {}

func (x *TLMessagesSetChatWallPaper) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[366]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesSetChatWallPaper.ProtoReflect.Descriptor instead.
func (*TLMessagesSetChatWallPaper) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{366}
}

func (x *TLMessagesSetChatWallPaper) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesSetChatWallPaper) GetForBoth() bool {
	if x != nil {
		return x.ForBoth
	}
	return false
}

func (x *TLMessagesSetChatWallPaper) GetRevert() bool {
	if x != nil {
		return x.Revert
	}
	return false
}

func (x *TLMessagesSetChatWallPaper) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesSetChatWallPaper) GetWallpaper() *InputWallPaper {
	if x != nil {
		return x.Wallpaper
	}
	return nil
}

func (x *TLMessagesSetChatWallPaper) GetSettings() *WallPaperSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *TLMessagesSetChatWallPaper) GetId() *wrapperspb.Int32Value {
	if x != nil {
		return x.Id
	}
	return nil
}

type TLMessagesSearchEmojiStickerSets struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Constructor     TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	ExcludeFeatured bool                   `protobuf:"varint,3,opt,name=exclude_featured,json=excludeFeatured,proto3" json:"exclude_featured,omitempty"`
	Q               string                 `protobuf:"bytes,4,opt,name=q,proto3" json:"q,omitempty"`
	Hash            int64                  `protobuf:"varint,5,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TLMessagesSearchEmojiStickerSets) Reset() {
	*x = TLMessagesSearchEmojiStickerSets{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[367]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesSearchEmojiStickerSets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesSearchEmojiStickerSets) ProtoMessage() {}

func (x *TLMessagesSearchEmojiStickerSets) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[367]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesSearchEmojiStickerSets.ProtoReflect.Descriptor instead.
func (*TLMessagesSearchEmojiStickerSets) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{367}
}

func (x *TLMessagesSearchEmojiStickerSets) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesSearchEmojiStickerSets) GetExcludeFeatured() bool {
	if x != nil {
		return x.ExcludeFeatured
	}
	return false
}

func (x *TLMessagesSearchEmojiStickerSets) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *TLMessagesSearchEmojiStickerSets) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLMessagesGetSavedDialogs struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	ExcludePinned bool                   `protobuf:"varint,3,opt,name=exclude_pinned,json=excludePinned,proto3" json:"exclude_pinned,omitempty"`
	OffsetDate    int32                  `protobuf:"varint,4,opt,name=offset_date,json=offsetDate,proto3" json:"offset_date,omitempty"`
	OffsetId      int32                  `protobuf:"varint,5,opt,name=offset_id,json=offsetId,proto3" json:"offset_id,omitempty"`
	OffsetPeer    *InputPeer             `protobuf:"bytes,6,opt,name=offset_peer,json=offsetPeer,proto3" json:"offset_peer,omitempty"`
	Limit         int32                  `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	Hash          int64                  `protobuf:"varint,8,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetSavedDialogs) Reset() {
	*x = TLMessagesGetSavedDialogs{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[368]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetSavedDialogs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetSavedDialogs) ProtoMessage() {}

func (x *TLMessagesGetSavedDialogs) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[368]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetSavedDialogs.ProtoReflect.Descriptor instead.
func (*TLMessagesGetSavedDialogs) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{368}
}

func (x *TLMessagesGetSavedDialogs) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetSavedDialogs) GetExcludePinned() bool {
	if x != nil {
		return x.ExcludePinned
	}
	return false
}

func (x *TLMessagesGetSavedDialogs) GetOffsetDate() int32 {
	if x != nil {
		return x.OffsetDate
	}
	return 0
}

func (x *TLMessagesGetSavedDialogs) GetOffsetId() int32 {
	if x != nil {
		return x.OffsetId
	}
	return 0
}

func (x *TLMessagesGetSavedDialogs) GetOffsetPeer() *InputPeer {
	if x != nil {
		return x.OffsetPeer
	}
	return nil
}

func (x *TLMessagesGetSavedDialogs) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TLMessagesGetSavedDialogs) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLMessagesGetSavedHistory struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	OffsetId      int32                  `protobuf:"varint,4,opt,name=offset_id,json=offsetId,proto3" json:"offset_id,omitempty"`
	OffsetDate    int32                  `protobuf:"varint,5,opt,name=offset_date,json=offsetDate,proto3" json:"offset_date,omitempty"`
	AddOffset     int32                  `protobuf:"varint,6,opt,name=add_offset,json=addOffset,proto3" json:"add_offset,omitempty"`
	Limit         int32                  `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	MaxId         int32                  `protobuf:"varint,8,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	MinId         int32                  `protobuf:"varint,9,opt,name=min_id,json=minId,proto3" json:"min_id,omitempty"`
	Hash          int64                  `protobuf:"varint,10,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetSavedHistory) Reset() {
	*x = TLMessagesGetSavedHistory{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[369]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetSavedHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetSavedHistory) ProtoMessage() {}

func (x *TLMessagesGetSavedHistory) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[369]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetSavedHistory.ProtoReflect.Descriptor instead.
func (*TLMessagesGetSavedHistory) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{369}
}

func (x *TLMessagesGetSavedHistory) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetSavedHistory) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesGetSavedHistory) GetOffsetId() int32 {
	if x != nil {
		return x.OffsetId
	}
	return 0
}

func (x *TLMessagesGetSavedHistory) GetOffsetDate() int32 {
	if x != nil {
		return x.OffsetDate
	}
	return 0
}

func (x *TLMessagesGetSavedHistory) GetAddOffset() int32 {
	if x != nil {
		return x.AddOffset
	}
	return 0
}

func (x *TLMessagesGetSavedHistory) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TLMessagesGetSavedHistory) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

func (x *TLMessagesGetSavedHistory) GetMinId() int32 {
	if x != nil {
		return x.MinId
	}
	return 0
}

func (x *TLMessagesGetSavedHistory) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLMessagesDeleteSavedHistory struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	MaxId         int32                  `protobuf:"varint,4,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	MinDate       *wrapperspb.Int32Value `protobuf:"bytes,5,opt,name=min_date,json=minDate,proto3" json:"min_date,omitempty"`
	MaxDate       *wrapperspb.Int32Value `protobuf:"bytes,6,opt,name=max_date,json=maxDate,proto3" json:"max_date,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesDeleteSavedHistory) Reset() {
	*x = TLMessagesDeleteSavedHistory{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[370]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesDeleteSavedHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesDeleteSavedHistory) ProtoMessage() {}

func (x *TLMessagesDeleteSavedHistory) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[370]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesDeleteSavedHistory.ProtoReflect.Descriptor instead.
func (*TLMessagesDeleteSavedHistory) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{370}
}

func (x *TLMessagesDeleteSavedHistory) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesDeleteSavedHistory) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesDeleteSavedHistory) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

func (x *TLMessagesDeleteSavedHistory) GetMinDate() *wrapperspb.Int32Value {
	if x != nil {
		return x.MinDate
	}
	return nil
}

func (x *TLMessagesDeleteSavedHistory) GetMaxDate() *wrapperspb.Int32Value {
	if x != nil {
		return x.MaxDate
	}
	return nil
}

type TLMessagesGetPinnedSavedDialogs struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetPinnedSavedDialogs) Reset() {
	*x = TLMessagesGetPinnedSavedDialogs{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[371]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetPinnedSavedDialogs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetPinnedSavedDialogs) ProtoMessage() {}

func (x *TLMessagesGetPinnedSavedDialogs) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[371]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetPinnedSavedDialogs.ProtoReflect.Descriptor instead.
func (*TLMessagesGetPinnedSavedDialogs) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{371}
}

func (x *TLMessagesGetPinnedSavedDialogs) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLMessagesToggleSavedDialogPin struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Pinned        bool                   `protobuf:"varint,3,opt,name=pinned,proto3" json:"pinned,omitempty"`
	Peer          *InputDialogPeer       `protobuf:"bytes,4,opt,name=peer,proto3" json:"peer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesToggleSavedDialogPin) Reset() {
	*x = TLMessagesToggleSavedDialogPin{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[372]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesToggleSavedDialogPin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesToggleSavedDialogPin) ProtoMessage() {}

func (x *TLMessagesToggleSavedDialogPin) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[372]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesToggleSavedDialogPin.ProtoReflect.Descriptor instead.
func (*TLMessagesToggleSavedDialogPin) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{372}
}

func (x *TLMessagesToggleSavedDialogPin) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesToggleSavedDialogPin) GetPinned() bool {
	if x != nil {
		return x.Pinned
	}
	return false
}

func (x *TLMessagesToggleSavedDialogPin) GetPeer() *InputDialogPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

type TLMessagesReorderPinnedSavedDialogs struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Force         bool                   `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
	Order         []*InputDialogPeer     `protobuf:"bytes,4,rep,name=order,proto3" json:"order,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesReorderPinnedSavedDialogs) Reset() {
	*x = TLMessagesReorderPinnedSavedDialogs{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[373]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesReorderPinnedSavedDialogs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesReorderPinnedSavedDialogs) ProtoMessage() {}

func (x *TLMessagesReorderPinnedSavedDialogs) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[373]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesReorderPinnedSavedDialogs.ProtoReflect.Descriptor instead.
func (*TLMessagesReorderPinnedSavedDialogs) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{373}
}

func (x *TLMessagesReorderPinnedSavedDialogs) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesReorderPinnedSavedDialogs) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *TLMessagesReorderPinnedSavedDialogs) GetOrder() []*InputDialogPeer {
	if x != nil {
		return x.Order
	}
	return nil
}

type TLMessagesGetSavedReactionTags struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Hash          int64                  `protobuf:"varint,4,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetSavedReactionTags) Reset() {
	*x = TLMessagesGetSavedReactionTags{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[374]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetSavedReactionTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetSavedReactionTags) ProtoMessage() {}

func (x *TLMessagesGetSavedReactionTags) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[374]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetSavedReactionTags.ProtoReflect.Descriptor instead.
func (*TLMessagesGetSavedReactionTags) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{374}
}

func (x *TLMessagesGetSavedReactionTags) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetSavedReactionTags) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesGetSavedReactionTags) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLMessagesUpdateSavedReactionTag struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Constructor   TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Reaction      *Reaction               `protobuf:"bytes,3,opt,name=reaction,proto3" json:"reaction,omitempty"`
	Title         *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesUpdateSavedReactionTag) Reset() {
	*x = TLMessagesUpdateSavedReactionTag{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[375]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesUpdateSavedReactionTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesUpdateSavedReactionTag) ProtoMessage() {}

func (x *TLMessagesUpdateSavedReactionTag) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[375]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesUpdateSavedReactionTag.ProtoReflect.Descriptor instead.
func (*TLMessagesUpdateSavedReactionTag) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{375}
}

func (x *TLMessagesUpdateSavedReactionTag) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesUpdateSavedReactionTag) GetReaction() *Reaction {
	if x != nil {
		return x.Reaction
	}
	return nil
}

func (x *TLMessagesUpdateSavedReactionTag) GetTitle() *wrapperspb.StringValue {
	if x != nil {
		return x.Title
	}
	return nil
}

type TLMessagesGetDefaultTagReactions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Hash          int64                  `protobuf:"varint,3,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetDefaultTagReactions) Reset() {
	*x = TLMessagesGetDefaultTagReactions{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[376]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetDefaultTagReactions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetDefaultTagReactions) ProtoMessage() {}

func (x *TLMessagesGetDefaultTagReactions) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[376]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetDefaultTagReactions.ProtoReflect.Descriptor instead.
func (*TLMessagesGetDefaultTagReactions) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{376}
}

func (x *TLMessagesGetDefaultTagReactions) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetDefaultTagReactions) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLMessagesGetOutboxReadDate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	MsgId         int32                  `protobuf:"varint,4,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetOutboxReadDate) Reset() {
	*x = TLMessagesGetOutboxReadDate{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[377]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetOutboxReadDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetOutboxReadDate) ProtoMessage() {}

func (x *TLMessagesGetOutboxReadDate) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[377]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetOutboxReadDate.ProtoReflect.Descriptor instead.
func (*TLMessagesGetOutboxReadDate) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{377}
}

func (x *TLMessagesGetOutboxReadDate) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetOutboxReadDate) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesGetOutboxReadDate) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

type TLMessagesGetQuickReplies struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Hash          int64                  `protobuf:"varint,3,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetQuickReplies) Reset() {
	*x = TLMessagesGetQuickReplies{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[378]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetQuickReplies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetQuickReplies) ProtoMessage() {}

func (x *TLMessagesGetQuickReplies) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[378]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetQuickReplies.ProtoReflect.Descriptor instead.
func (*TLMessagesGetQuickReplies) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{378}
}

func (x *TLMessagesGetQuickReplies) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetQuickReplies) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLMessagesReorderQuickReplies struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Order         []int32                `protobuf:"varint,3,rep,packed,name=order,proto3" json:"order,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesReorderQuickReplies) Reset() {
	*x = TLMessagesReorderQuickReplies{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[379]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesReorderQuickReplies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesReorderQuickReplies) ProtoMessage() {}

func (x *TLMessagesReorderQuickReplies) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[379]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesReorderQuickReplies.ProtoReflect.Descriptor instead.
func (*TLMessagesReorderQuickReplies) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{379}
}

func (x *TLMessagesReorderQuickReplies) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesReorderQuickReplies) GetOrder() []int32 {
	if x != nil {
		return x.Order
	}
	return nil
}

type TLMessagesCheckQuickReplyShortcut struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Shortcut      string                 `protobuf:"bytes,3,opt,name=shortcut,proto3" json:"shortcut,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesCheckQuickReplyShortcut) Reset() {
	*x = TLMessagesCheckQuickReplyShortcut{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[380]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesCheckQuickReplyShortcut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesCheckQuickReplyShortcut) ProtoMessage() {}

func (x *TLMessagesCheckQuickReplyShortcut) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[380]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesCheckQuickReplyShortcut.ProtoReflect.Descriptor instead.
func (*TLMessagesCheckQuickReplyShortcut) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{380}
}

func (x *TLMessagesCheckQuickReplyShortcut) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesCheckQuickReplyShortcut) GetShortcut() string {
	if x != nil {
		return x.Shortcut
	}
	return ""
}

type TLMessagesEditQuickReplyShortcut struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	ShortcutId    int32                  `protobuf:"varint,3,opt,name=shortcut_id,json=shortcutId,proto3" json:"shortcut_id,omitempty"`
	Shortcut      string                 `protobuf:"bytes,4,opt,name=shortcut,proto3" json:"shortcut,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesEditQuickReplyShortcut) Reset() {
	*x = TLMessagesEditQuickReplyShortcut{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[381]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesEditQuickReplyShortcut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesEditQuickReplyShortcut) ProtoMessage() {}

func (x *TLMessagesEditQuickReplyShortcut) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[381]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesEditQuickReplyShortcut.ProtoReflect.Descriptor instead.
func (*TLMessagesEditQuickReplyShortcut) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{381}
}

func (x *TLMessagesEditQuickReplyShortcut) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesEditQuickReplyShortcut) GetShortcutId() int32 {
	if x != nil {
		return x.ShortcutId
	}
	return 0
}

func (x *TLMessagesEditQuickReplyShortcut) GetShortcut() string {
	if x != nil {
		return x.Shortcut
	}
	return ""
}

type TLMessagesDeleteQuickReplyShortcut struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	ShortcutId    int32                  `protobuf:"varint,3,opt,name=shortcut_id,json=shortcutId,proto3" json:"shortcut_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesDeleteQuickReplyShortcut) Reset() {
	*x = TLMessagesDeleteQuickReplyShortcut{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[382]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesDeleteQuickReplyShortcut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesDeleteQuickReplyShortcut) ProtoMessage() {}

func (x *TLMessagesDeleteQuickReplyShortcut) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[382]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesDeleteQuickReplyShortcut.ProtoReflect.Descriptor instead.
func (*TLMessagesDeleteQuickReplyShortcut) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{382}
}

func (x *TLMessagesDeleteQuickReplyShortcut) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesDeleteQuickReplyShortcut) GetShortcutId() int32 {
	if x != nil {
		return x.ShortcutId
	}
	return 0
}

type TLMessagesGetQuickReplyMessages struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	ShortcutId    int32                  `protobuf:"varint,3,opt,name=shortcut_id,json=shortcutId,proto3" json:"shortcut_id,omitempty"`
	Id            []int32                `protobuf:"varint,4,rep,packed,name=id,proto3" json:"id,omitempty"`
	Hash          int64                  `protobuf:"varint,5,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetQuickReplyMessages) Reset() {
	*x = TLMessagesGetQuickReplyMessages{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[383]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetQuickReplyMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetQuickReplyMessages) ProtoMessage() {}

func (x *TLMessagesGetQuickReplyMessages) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[383]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetQuickReplyMessages.ProtoReflect.Descriptor instead.
func (*TLMessagesGetQuickReplyMessages) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{383}
}

func (x *TLMessagesGetQuickReplyMessages) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetQuickReplyMessages) GetShortcutId() int32 {
	if x != nil {
		return x.ShortcutId
	}
	return 0
}

func (x *TLMessagesGetQuickReplyMessages) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TLMessagesGetQuickReplyMessages) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLMessagesSendQuickReplyMessages struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	ShortcutId    int32                  `protobuf:"varint,4,opt,name=shortcut_id,json=shortcutId,proto3" json:"shortcut_id,omitempty"`
	Id            []int32                `protobuf:"varint,5,rep,packed,name=id,proto3" json:"id,omitempty"`
	RandomId      []int64                `protobuf:"varint,6,rep,packed,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesSendQuickReplyMessages) Reset() {
	*x = TLMessagesSendQuickReplyMessages{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[384]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesSendQuickReplyMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesSendQuickReplyMessages) ProtoMessage() {}

func (x *TLMessagesSendQuickReplyMessages) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[384]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesSendQuickReplyMessages.ProtoReflect.Descriptor instead.
func (*TLMessagesSendQuickReplyMessages) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{384}
}

func (x *TLMessagesSendQuickReplyMessages) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesSendQuickReplyMessages) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesSendQuickReplyMessages) GetShortcutId() int32 {
	if x != nil {
		return x.ShortcutId
	}
	return 0
}

func (x *TLMessagesSendQuickReplyMessages) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TLMessagesSendQuickReplyMessages) GetRandomId() []int64 {
	if x != nil {
		return x.RandomId
	}
	return nil
}

type TLMessagesDeleteQuickReplyMessages struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	ShortcutId    int32                  `protobuf:"varint,3,opt,name=shortcut_id,json=shortcutId,proto3" json:"shortcut_id,omitempty"`
	Id            []int32                `protobuf:"varint,4,rep,packed,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesDeleteQuickReplyMessages) Reset() {
	*x = TLMessagesDeleteQuickReplyMessages{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[385]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesDeleteQuickReplyMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesDeleteQuickReplyMessages) ProtoMessage() {}

func (x *TLMessagesDeleteQuickReplyMessages) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[385]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesDeleteQuickReplyMessages.ProtoReflect.Descriptor instead.
func (*TLMessagesDeleteQuickReplyMessages) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{385}
}

func (x *TLMessagesDeleteQuickReplyMessages) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesDeleteQuickReplyMessages) GetShortcutId() int32 {
	if x != nil {
		return x.ShortcutId
	}
	return 0
}

func (x *TLMessagesDeleteQuickReplyMessages) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

type TLMessagesToggleDialogFilterTags struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Enabled       *Bool                  `protobuf:"bytes,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesToggleDialogFilterTags) Reset() {
	*x = TLMessagesToggleDialogFilterTags{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[386]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesToggleDialogFilterTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesToggleDialogFilterTags) ProtoMessage() {}

func (x *TLMessagesToggleDialogFilterTags) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[386]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesToggleDialogFilterTags.ProtoReflect.Descriptor instead.
func (*TLMessagesToggleDialogFilterTags) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{386}
}

func (x *TLMessagesToggleDialogFilterTags) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesToggleDialogFilterTags) GetEnabled() *Bool {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type TLMessagesGetMyStickers struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	OffsetId      int64                  `protobuf:"varint,3,opt,name=offset_id,json=offsetId,proto3" json:"offset_id,omitempty"`
	Limit         int32                  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetMyStickers) Reset() {
	*x = TLMessagesGetMyStickers{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[387]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetMyStickers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetMyStickers) ProtoMessage() {}

func (x *TLMessagesGetMyStickers) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[387]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetMyStickers.ProtoReflect.Descriptor instead.
func (*TLMessagesGetMyStickers) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{387}
}

func (x *TLMessagesGetMyStickers) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetMyStickers) GetOffsetId() int64 {
	if x != nil {
		return x.OffsetId
	}
	return 0
}

func (x *TLMessagesGetMyStickers) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TLMessagesGetEmojiStickerGroups struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Hash          int32                  `protobuf:"varint,3,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetEmojiStickerGroups) Reset() {
	*x = TLMessagesGetEmojiStickerGroups{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[388]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetEmojiStickerGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetEmojiStickerGroups) ProtoMessage() {}

func (x *TLMessagesGetEmojiStickerGroups) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[388]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetEmojiStickerGroups.ProtoReflect.Descriptor instead.
func (*TLMessagesGetEmojiStickerGroups) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{388}
}

func (x *TLMessagesGetEmojiStickerGroups) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetEmojiStickerGroups) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLMessagesGetAvailableEffects struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Hash          int32                  `protobuf:"varint,3,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetAvailableEffects) Reset() {
	*x = TLMessagesGetAvailableEffects{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[389]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetAvailableEffects) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetAvailableEffects) ProtoMessage() {}

func (x *TLMessagesGetAvailableEffects) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[389]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetAvailableEffects.ProtoReflect.Descriptor instead.
func (*TLMessagesGetAvailableEffects) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{389}
}

func (x *TLMessagesGetAvailableEffects) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetAvailableEffects) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLMessagesEditFactCheck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	MsgId         int32                  `protobuf:"varint,4,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	Text          *TextWithEntities      `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesEditFactCheck) Reset() {
	*x = TLMessagesEditFactCheck{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[390]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesEditFactCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesEditFactCheck) ProtoMessage() {}

func (x *TLMessagesEditFactCheck) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[390]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesEditFactCheck.ProtoReflect.Descriptor instead.
func (*TLMessagesEditFactCheck) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{390}
}

func (x *TLMessagesEditFactCheck) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesEditFactCheck) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesEditFactCheck) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *TLMessagesEditFactCheck) GetText() *TextWithEntities {
	if x != nil {
		return x.Text
	}
	return nil
}

type TLMessagesDeleteFactCheck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	MsgId         int32                  `protobuf:"varint,4,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesDeleteFactCheck) Reset() {
	*x = TLMessagesDeleteFactCheck{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[391]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesDeleteFactCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesDeleteFactCheck) ProtoMessage() {}

func (x *TLMessagesDeleteFactCheck) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[391]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesDeleteFactCheck.ProtoReflect.Descriptor instead.
func (*TLMessagesDeleteFactCheck) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{391}
}

func (x *TLMessagesDeleteFactCheck) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesDeleteFactCheck) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesDeleteFactCheck) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

type TLMessagesGetFactCheck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	MsgId         []int32                `protobuf:"varint,4,rep,packed,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetFactCheck) Reset() {
	*x = TLMessagesGetFactCheck{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[392]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetFactCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetFactCheck) ProtoMessage() {}

func (x *TLMessagesGetFactCheck) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[392]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetFactCheck.ProtoReflect.Descriptor instead.
func (*TLMessagesGetFactCheck) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{392}
}

func (x *TLMessagesGetFactCheck) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetFactCheck) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesGetFactCheck) GetMsgId() []int32 {
	if x != nil {
		return x.MsgId
	}
	return nil
}

type TLMessagesRequestMainWebView struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Constructor   TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Compact       bool                    `protobuf:"varint,3,opt,name=compact,proto3" json:"compact,omitempty"`
	Fullscreen    bool                    `protobuf:"varint,4,opt,name=fullscreen,proto3" json:"fullscreen,omitempty"`
	Peer          *InputPeer              `protobuf:"bytes,5,opt,name=peer,proto3" json:"peer,omitempty"`
	Bot           *InputUser              `protobuf:"bytes,6,opt,name=bot,proto3" json:"bot,omitempty"`
	StartParam    *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=start_param,json=startParam,proto3" json:"start_param,omitempty"`
	ThemeParams   *DataJSON               `protobuf:"bytes,8,opt,name=theme_params,json=themeParams,proto3" json:"theme_params,omitempty"`
	Platform      string                  `protobuf:"bytes,9,opt,name=platform,proto3" json:"platform,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesRequestMainWebView) Reset() {
	*x = TLMessagesRequestMainWebView{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[393]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesRequestMainWebView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesRequestMainWebView) ProtoMessage() {}

func (x *TLMessagesRequestMainWebView) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[393]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesRequestMainWebView.ProtoReflect.Descriptor instead.
func (*TLMessagesRequestMainWebView) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{393}
}

func (x *TLMessagesRequestMainWebView) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesRequestMainWebView) GetCompact() bool {
	if x != nil {
		return x.Compact
	}
	return false
}

func (x *TLMessagesRequestMainWebView) GetFullscreen() bool {
	if x != nil {
		return x.Fullscreen
	}
	return false
}

func (x *TLMessagesRequestMainWebView) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesRequestMainWebView) GetBot() *InputUser {
	if x != nil {
		return x.Bot
	}
	return nil
}

func (x *TLMessagesRequestMainWebView) GetStartParam() *wrapperspb.StringValue {
	if x != nil {
		return x.StartParam
	}
	return nil
}

func (x *TLMessagesRequestMainWebView) GetThemeParams() *DataJSON {
	if x != nil {
		return x.ThemeParams
	}
	return nil
}

func (x *TLMessagesRequestMainWebView) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

type TLMessagesSendPaidReaction struct {
	state                           protoimpl.MessageState `protogen:"open.v1"`
	Constructor                     TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer                            *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	MsgId                           int32                  `protobuf:"varint,4,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	Count                           int32                  `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`
	RandomId                        int64                  `protobuf:"varint,6,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	Private_FLAGPAIDREACTIONPRIVACY *PaidReactionPrivacy   `protobuf:"bytes,7,opt,name=private_FLAGPAIDREACTIONPRIVACY,json=privateFLAGPAIDREACTIONPRIVACY,proto3" json:"private_FLAGPAIDREACTIONPRIVACY,omitempty"`
	Private_FLAGBOOL                *Bool                  `protobuf:"bytes,8,opt,name=private_FLAGBOOL,json=privateFLAGBOOL,proto3" json:"private_FLAGBOOL,omitempty"`
	Private_FLAGBOOLEAN             bool                   `protobuf:"varint,9,opt,name=private_FLAGBOOLEAN,json=privateFLAGBOOLEAN,proto3" json:"private_FLAGBOOLEAN,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *TLMessagesSendPaidReaction) Reset() {
	*x = TLMessagesSendPaidReaction{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[394]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesSendPaidReaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesSendPaidReaction) ProtoMessage() {}

func (x *TLMessagesSendPaidReaction) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[394]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesSendPaidReaction.ProtoReflect.Descriptor instead.
func (*TLMessagesSendPaidReaction) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{394}
}

func (x *TLMessagesSendPaidReaction) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesSendPaidReaction) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesSendPaidReaction) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *TLMessagesSendPaidReaction) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TLMessagesSendPaidReaction) GetRandomId() int64 {
	if x != nil {
		return x.RandomId
	}
	return 0
}

func (x *TLMessagesSendPaidReaction) GetPrivate_FLAGPAIDREACTIONPRIVACY() *PaidReactionPrivacy {
	if x != nil {
		return x.Private_FLAGPAIDREACTIONPRIVACY
	}
	return nil
}

func (x *TLMessagesSendPaidReaction) GetPrivate_FLAGBOOL() *Bool {
	if x != nil {
		return x.Private_FLAGBOOL
	}
	return nil
}

func (x *TLMessagesSendPaidReaction) GetPrivate_FLAGBOOLEAN() bool {
	if x != nil {
		return x.Private_FLAGBOOLEAN
	}
	return false
}

type TLMessagesTogglePaidReactionPrivacy struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	Constructor                 TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer                        *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	MsgId                       int32                  `protobuf:"varint,4,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	Private_PAIDREACTIONPRIVACY *PaidReactionPrivacy   `protobuf:"bytes,5,opt,name=private_PAIDREACTIONPRIVACY,json=privatePAIDREACTIONPRIVACY,proto3" json:"private_PAIDREACTIONPRIVACY,omitempty"`
	Private_BOOL                *Bool                  `protobuf:"bytes,6,opt,name=private_BOOL,json=privateBOOL,proto3" json:"private_BOOL,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *TLMessagesTogglePaidReactionPrivacy) Reset() {
	*x = TLMessagesTogglePaidReactionPrivacy{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[395]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesTogglePaidReactionPrivacy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesTogglePaidReactionPrivacy) ProtoMessage() {}

func (x *TLMessagesTogglePaidReactionPrivacy) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[395]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesTogglePaidReactionPrivacy.ProtoReflect.Descriptor instead.
func (*TLMessagesTogglePaidReactionPrivacy) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{395}
}

func (x *TLMessagesTogglePaidReactionPrivacy) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesTogglePaidReactionPrivacy) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesTogglePaidReactionPrivacy) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *TLMessagesTogglePaidReactionPrivacy) GetPrivate_PAIDREACTIONPRIVACY() *PaidReactionPrivacy {
	if x != nil {
		return x.Private_PAIDREACTIONPRIVACY
	}
	return nil
}

func (x *TLMessagesTogglePaidReactionPrivacy) GetPrivate_BOOL() *Bool {
	if x != nil {
		return x.Private_BOOL
	}
	return nil
}

type TLMessagesGetPaidReactionPrivacy struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetPaidReactionPrivacy) Reset() {
	*x = TLMessagesGetPaidReactionPrivacy{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[396]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetPaidReactionPrivacy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetPaidReactionPrivacy) ProtoMessage() {}

func (x *TLMessagesGetPaidReactionPrivacy) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[396]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetPaidReactionPrivacy.ProtoReflect.Descriptor instead.
func (*TLMessagesGetPaidReactionPrivacy) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{396}
}

func (x *TLMessagesGetPaidReactionPrivacy) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLMessagesViewSponsoredMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	RandomId      []byte                 `protobuf:"bytes,3,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,4,opt,name=peer,proto3" json:"peer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesViewSponsoredMessage) Reset() {
	*x = TLMessagesViewSponsoredMessage{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[397]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesViewSponsoredMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesViewSponsoredMessage) ProtoMessage() {}

func (x *TLMessagesViewSponsoredMessage) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[397]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesViewSponsoredMessage.ProtoReflect.Descriptor instead.
func (*TLMessagesViewSponsoredMessage) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{397}
}

func (x *TLMessagesViewSponsoredMessage) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesViewSponsoredMessage) GetRandomId() []byte {
	if x != nil {
		return x.RandomId
	}
	return nil
}

func (x *TLMessagesViewSponsoredMessage) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

type TLMessagesClickSponsoredMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Media         bool                   `protobuf:"varint,3,opt,name=media,proto3" json:"media,omitempty"`
	Fullscreen    bool                   `protobuf:"varint,4,opt,name=fullscreen,proto3" json:"fullscreen,omitempty"`
	RandomId      []byte                 `protobuf:"bytes,5,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,6,opt,name=peer,proto3" json:"peer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesClickSponsoredMessage) Reset() {
	*x = TLMessagesClickSponsoredMessage{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[398]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesClickSponsoredMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesClickSponsoredMessage) ProtoMessage() {}

func (x *TLMessagesClickSponsoredMessage) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[398]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesClickSponsoredMessage.ProtoReflect.Descriptor instead.
func (*TLMessagesClickSponsoredMessage) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{398}
}

func (x *TLMessagesClickSponsoredMessage) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesClickSponsoredMessage) GetMedia() bool {
	if x != nil {
		return x.Media
	}
	return false
}

func (x *TLMessagesClickSponsoredMessage) GetFullscreen() bool {
	if x != nil {
		return x.Fullscreen
	}
	return false
}

func (x *TLMessagesClickSponsoredMessage) GetRandomId() []byte {
	if x != nil {
		return x.RandomId
	}
	return nil
}

func (x *TLMessagesClickSponsoredMessage) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

type TLMessagesReportSponsoredMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	RandomId      []byte                 `protobuf:"bytes,3,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	Option        []byte                 `protobuf:"bytes,4,opt,name=option,proto3" json:"option,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,5,opt,name=peer,proto3" json:"peer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesReportSponsoredMessage) Reset() {
	*x = TLMessagesReportSponsoredMessage{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[399]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesReportSponsoredMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesReportSponsoredMessage) ProtoMessage() {}

func (x *TLMessagesReportSponsoredMessage) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[399]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesReportSponsoredMessage.ProtoReflect.Descriptor instead.
func (*TLMessagesReportSponsoredMessage) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{399}
}

func (x *TLMessagesReportSponsoredMessage) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesReportSponsoredMessage) GetRandomId() []byte {
	if x != nil {
		return x.RandomId
	}
	return nil
}

func (x *TLMessagesReportSponsoredMessage) GetOption() []byte {
	if x != nil {
		return x.Option
	}
	return nil
}

func (x *TLMessagesReportSponsoredMessage) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

type TLMessagesGetSponsoredMessages struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetSponsoredMessages) Reset() {
	*x = TLMessagesGetSponsoredMessages{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[400]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetSponsoredMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetSponsoredMessages) ProtoMessage() {}

func (x *TLMessagesGetSponsoredMessages) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[400]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetSponsoredMessages.ProtoReflect.Descriptor instead.
func (*TLMessagesGetSponsoredMessages) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{400}
}

func (x *TLMessagesGetSponsoredMessages) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetSponsoredMessages) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

type TLMessagesSavePreparedInlineMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Result        *InputBotInlineResult  `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	UserId        *InputUser             `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerTypes     []*InlineQueryPeerType `protobuf:"bytes,5,rep,name=peer_types,json=peerTypes,proto3" json:"peer_types,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesSavePreparedInlineMessage) Reset() {
	*x = TLMessagesSavePreparedInlineMessage{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[401]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesSavePreparedInlineMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesSavePreparedInlineMessage) ProtoMessage() {}

func (x *TLMessagesSavePreparedInlineMessage) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[401]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesSavePreparedInlineMessage.ProtoReflect.Descriptor instead.
func (*TLMessagesSavePreparedInlineMessage) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{401}
}

func (x *TLMessagesSavePreparedInlineMessage) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesSavePreparedInlineMessage) GetResult() *InputBotInlineResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *TLMessagesSavePreparedInlineMessage) GetUserId() *InputUser {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *TLMessagesSavePreparedInlineMessage) GetPeerTypes() []*InlineQueryPeerType {
	if x != nil {
		return x.PeerTypes
	}
	return nil
}

type TLMessagesGetPreparedInlineMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Bot           *InputUser             `protobuf:"bytes,3,opt,name=bot,proto3" json:"bot,omitempty"`
	Id            string                 `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetPreparedInlineMessage) Reset() {
	*x = TLMessagesGetPreparedInlineMessage{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[402]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetPreparedInlineMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetPreparedInlineMessage) ProtoMessage() {}

func (x *TLMessagesGetPreparedInlineMessage) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[402]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetPreparedInlineMessage.ProtoReflect.Descriptor instead.
func (*TLMessagesGetPreparedInlineMessage) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{402}
}

func (x *TLMessagesGetPreparedInlineMessage) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetPreparedInlineMessage) GetBot() *InputUser {
	if x != nil {
		return x.Bot
	}
	return nil
}

func (x *TLMessagesGetPreparedInlineMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type TLMessagesSearchStickers struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Emojis        bool                   `protobuf:"varint,3,opt,name=emojis,proto3" json:"emojis,omitempty"`
	Q             string                 `protobuf:"bytes,4,opt,name=q,proto3" json:"q,omitempty"`
	Emoticon      string                 `protobuf:"bytes,5,opt,name=emoticon,proto3" json:"emoticon,omitempty"`
	LangCode      []string               `protobuf:"bytes,6,rep,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
	Offset        int32                  `protobuf:"varint,7,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit         int32                  `protobuf:"varint,8,opt,name=limit,proto3" json:"limit,omitempty"`
	Hash          int64                  `protobuf:"varint,9,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesSearchStickers) Reset() {
	*x = TLMessagesSearchStickers{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[403]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesSearchStickers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesSearchStickers) ProtoMessage() {}

func (x *TLMessagesSearchStickers) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[403]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesSearchStickers.ProtoReflect.Descriptor instead.
func (*TLMessagesSearchStickers) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{403}
}

func (x *TLMessagesSearchStickers) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesSearchStickers) GetEmojis() bool {
	if x != nil {
		return x.Emojis
	}
	return false
}

func (x *TLMessagesSearchStickers) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *TLMessagesSearchStickers) GetEmoticon() string {
	if x != nil {
		return x.Emoticon
	}
	return ""
}

func (x *TLMessagesSearchStickers) GetLangCode() []string {
	if x != nil {
		return x.LangCode
	}
	return nil
}

func (x *TLMessagesSearchStickers) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TLMessagesSearchStickers) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TLMessagesSearchStickers) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLMessagesReportMessagesDelivery struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Push          bool                   `protobuf:"varint,3,opt,name=push,proto3" json:"push,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,4,opt,name=peer,proto3" json:"peer,omitempty"`
	Id            []int32                `protobuf:"varint,5,rep,packed,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesReportMessagesDelivery) Reset() {
	*x = TLMessagesReportMessagesDelivery{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[404]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesReportMessagesDelivery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesReportMessagesDelivery) ProtoMessage() {}

func (x *TLMessagesReportMessagesDelivery) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[404]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesReportMessagesDelivery.ProtoReflect.Descriptor instead.
func (*TLMessagesReportMessagesDelivery) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{404}
}

func (x *TLMessagesReportMessagesDelivery) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesReportMessagesDelivery) GetPush() bool {
	if x != nil {
		return x.Push
	}
	return false
}

func (x *TLMessagesReportMessagesDelivery) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesReportMessagesDelivery) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

type TLUpdatesGetState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLUpdatesGetState) Reset() {
	*x = TLUpdatesGetState{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[405]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLUpdatesGetState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUpdatesGetState) ProtoMessage() {}

func (x *TLUpdatesGetState) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[405]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUpdatesGetState.ProtoReflect.Descriptor instead.
func (*TLUpdatesGetState) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{405}
}

func (x *TLUpdatesGetState) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLUpdatesGetDifference struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Pts           int32                  `protobuf:"varint,3,opt,name=pts,proto3" json:"pts,omitempty"`
	PtsLimit      *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=pts_limit,json=ptsLimit,proto3" json:"pts_limit,omitempty"`
	PtsTotalLimit *wrapperspb.Int32Value `protobuf:"bytes,5,opt,name=pts_total_limit,json=ptsTotalLimit,proto3" json:"pts_total_limit,omitempty"`
	Date          int32                  `protobuf:"varint,6,opt,name=date,proto3" json:"date,omitempty"`
	Qts           int32                  `protobuf:"varint,7,opt,name=qts,proto3" json:"qts,omitempty"`
	QtsLimit      *wrapperspb.Int32Value `protobuf:"bytes,8,opt,name=qts_limit,json=qtsLimit,proto3" json:"qts_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLUpdatesGetDifference) Reset() {
	*x = TLUpdatesGetDifference{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[406]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLUpdatesGetDifference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUpdatesGetDifference) ProtoMessage() {}

func (x *TLUpdatesGetDifference) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[406]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUpdatesGetDifference.ProtoReflect.Descriptor instead.
func (*TLUpdatesGetDifference) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{406}
}

func (x *TLUpdatesGetDifference) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUpdatesGetDifference) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *TLUpdatesGetDifference) GetPtsLimit() *wrapperspb.Int32Value {
	if x != nil {
		return x.PtsLimit
	}
	return nil
}

func (x *TLUpdatesGetDifference) GetPtsTotalLimit() *wrapperspb.Int32Value {
	if x != nil {
		return x.PtsTotalLimit
	}
	return nil
}

func (x *TLUpdatesGetDifference) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *TLUpdatesGetDifference) GetQts() int32 {
	if x != nil {
		return x.Qts
	}
	return 0
}

func (x *TLUpdatesGetDifference) GetQtsLimit() *wrapperspb.Int32Value {
	if x != nil {
		return x.QtsLimit
	}
	return nil
}

type TLUpdatesGetChannelDifference struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Force         bool                   `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,4,opt,name=channel,proto3" json:"channel,omitempty"`
	Filter        *ChannelMessagesFilter `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter,omitempty"`
	Pts           int32                  `protobuf:"varint,6,opt,name=pts,proto3" json:"pts,omitempty"`
	Limit         int32                  `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLUpdatesGetChannelDifference) Reset() {
	*x = TLUpdatesGetChannelDifference{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[407]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLUpdatesGetChannelDifference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUpdatesGetChannelDifference) ProtoMessage() {}

func (x *TLUpdatesGetChannelDifference) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[407]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUpdatesGetChannelDifference.ProtoReflect.Descriptor instead.
func (*TLUpdatesGetChannelDifference) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{407}
}

func (x *TLUpdatesGetChannelDifference) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUpdatesGetChannelDifference) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *TLUpdatesGetChannelDifference) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLUpdatesGetChannelDifference) GetFilter() *ChannelMessagesFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *TLUpdatesGetChannelDifference) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *TLUpdatesGetChannelDifference) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TLPhotosUpdateProfilePhoto struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Fallback      bool                   `protobuf:"varint,3,opt,name=fallback,proto3" json:"fallback,omitempty"`
	Bot           *InputUser             `protobuf:"bytes,4,opt,name=bot,proto3" json:"bot,omitempty"`
	Id            *InputPhoto            `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPhotosUpdateProfilePhoto) Reset() {
	*x = TLPhotosUpdateProfilePhoto{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[408]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPhotosUpdateProfilePhoto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPhotosUpdateProfilePhoto) ProtoMessage() {}

func (x *TLPhotosUpdateProfilePhoto) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[408]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPhotosUpdateProfilePhoto.ProtoReflect.Descriptor instead.
func (*TLPhotosUpdateProfilePhoto) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{408}
}

func (x *TLPhotosUpdateProfilePhoto) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPhotosUpdateProfilePhoto) GetFallback() bool {
	if x != nil {
		return x.Fallback
	}
	return false
}

func (x *TLPhotosUpdateProfilePhoto) GetBot() *InputUser {
	if x != nil {
		return x.Bot
	}
	return nil
}

func (x *TLPhotosUpdateProfilePhoto) GetId() *InputPhoto {
	if x != nil {
		return x.Id
	}
	return nil
}

type TLPhotosUploadProfilePhoto struct {
	state            protoimpl.MessageState  `protogen:"open.v1"`
	Constructor      TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Fallback         bool                    `protobuf:"varint,3,opt,name=fallback,proto3" json:"fallback,omitempty"`
	Bot              *InputUser              `protobuf:"bytes,4,opt,name=bot,proto3" json:"bot,omitempty"`
	File             *InputFile              `protobuf:"bytes,5,opt,name=file,proto3" json:"file,omitempty"`
	Video            *InputFile              `protobuf:"bytes,6,opt,name=video,proto3" json:"video,omitempty"`
	VideoStartTs     *wrapperspb.DoubleValue `protobuf:"bytes,7,opt,name=video_start_ts,json=videoStartTs,proto3" json:"video_start_ts,omitempty"`
	VideoEmojiMarkup *VideoSize              `protobuf:"bytes,8,opt,name=video_emoji_markup,json=videoEmojiMarkup,proto3" json:"video_emoji_markup,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TLPhotosUploadProfilePhoto) Reset() {
	*x = TLPhotosUploadProfilePhoto{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[409]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPhotosUploadProfilePhoto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPhotosUploadProfilePhoto) ProtoMessage() {}

func (x *TLPhotosUploadProfilePhoto) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[409]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPhotosUploadProfilePhoto.ProtoReflect.Descriptor instead.
func (*TLPhotosUploadProfilePhoto) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{409}
}

func (x *TLPhotosUploadProfilePhoto) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPhotosUploadProfilePhoto) GetFallback() bool {
	if x != nil {
		return x.Fallback
	}
	return false
}

func (x *TLPhotosUploadProfilePhoto) GetBot() *InputUser {
	if x != nil {
		return x.Bot
	}
	return nil
}

func (x *TLPhotosUploadProfilePhoto) GetFile() *InputFile {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *TLPhotosUploadProfilePhoto) GetVideo() *InputFile {
	if x != nil {
		return x.Video
	}
	return nil
}

func (x *TLPhotosUploadProfilePhoto) GetVideoStartTs() *wrapperspb.DoubleValue {
	if x != nil {
		return x.VideoStartTs
	}
	return nil
}

func (x *TLPhotosUploadProfilePhoto) GetVideoEmojiMarkup() *VideoSize {
	if x != nil {
		return x.VideoEmojiMarkup
	}
	return nil
}

type TLPhotosDeletePhotos struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Id            []*InputPhoto          `protobuf:"bytes,3,rep,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPhotosDeletePhotos) Reset() {
	*x = TLPhotosDeletePhotos{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[410]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPhotosDeletePhotos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPhotosDeletePhotos) ProtoMessage() {}

func (x *TLPhotosDeletePhotos) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[410]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPhotosDeletePhotos.ProtoReflect.Descriptor instead.
func (*TLPhotosDeletePhotos) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{410}
}

func (x *TLPhotosDeletePhotos) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPhotosDeletePhotos) GetId() []*InputPhoto {
	if x != nil {
		return x.Id
	}
	return nil
}

type TLPhotosGetUserPhotos struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	UserId        *InputUser             `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Offset        int32                  `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	MaxId         int64                  `protobuf:"varint,5,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	Limit         int32                  `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPhotosGetUserPhotos) Reset() {
	*x = TLPhotosGetUserPhotos{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[411]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPhotosGetUserPhotos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPhotosGetUserPhotos) ProtoMessage() {}

func (x *TLPhotosGetUserPhotos) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[411]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPhotosGetUserPhotos.ProtoReflect.Descriptor instead.
func (*TLPhotosGetUserPhotos) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{411}
}

func (x *TLPhotosGetUserPhotos) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPhotosGetUserPhotos) GetUserId() *InputUser {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *TLPhotosGetUserPhotos) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TLPhotosGetUserPhotos) GetMaxId() int64 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

func (x *TLPhotosGetUserPhotos) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TLPhotosUploadContactProfilePhoto struct {
	state            protoimpl.MessageState  `protogen:"open.v1"`
	Constructor      TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Suggest          bool                    `protobuf:"varint,3,opt,name=suggest,proto3" json:"suggest,omitempty"`
	Save             bool                    `protobuf:"varint,4,opt,name=save,proto3" json:"save,omitempty"`
	UserId           *InputUser              `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	File             *InputFile              `protobuf:"bytes,6,opt,name=file,proto3" json:"file,omitempty"`
	Video            *InputFile              `protobuf:"bytes,7,opt,name=video,proto3" json:"video,omitempty"`
	VideoStartTs     *wrapperspb.DoubleValue `protobuf:"bytes,8,opt,name=video_start_ts,json=videoStartTs,proto3" json:"video_start_ts,omitempty"`
	VideoEmojiMarkup *VideoSize              `protobuf:"bytes,9,opt,name=video_emoji_markup,json=videoEmojiMarkup,proto3" json:"video_emoji_markup,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TLPhotosUploadContactProfilePhoto) Reset() {
	*x = TLPhotosUploadContactProfilePhoto{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[412]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPhotosUploadContactProfilePhoto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPhotosUploadContactProfilePhoto) ProtoMessage() {}

func (x *TLPhotosUploadContactProfilePhoto) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[412]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPhotosUploadContactProfilePhoto.ProtoReflect.Descriptor instead.
func (*TLPhotosUploadContactProfilePhoto) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{412}
}

func (x *TLPhotosUploadContactProfilePhoto) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPhotosUploadContactProfilePhoto) GetSuggest() bool {
	if x != nil {
		return x.Suggest
	}
	return false
}

func (x *TLPhotosUploadContactProfilePhoto) GetSave() bool {
	if x != nil {
		return x.Save
	}
	return false
}

func (x *TLPhotosUploadContactProfilePhoto) GetUserId() *InputUser {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *TLPhotosUploadContactProfilePhoto) GetFile() *InputFile {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *TLPhotosUploadContactProfilePhoto) GetVideo() *InputFile {
	if x != nil {
		return x.Video
	}
	return nil
}

func (x *TLPhotosUploadContactProfilePhoto) GetVideoStartTs() *wrapperspb.DoubleValue {
	if x != nil {
		return x.VideoStartTs
	}
	return nil
}

func (x *TLPhotosUploadContactProfilePhoto) GetVideoEmojiMarkup() *VideoSize {
	if x != nil {
		return x.VideoEmojiMarkup
	}
	return nil
}

type TLUploadSaveFilePart struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	FileId        int64                  `protobuf:"varint,3,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	FilePart      int32                  `protobuf:"varint,4,opt,name=file_part,json=filePart,proto3" json:"file_part,omitempty"`
	Bytes         []byte                 `protobuf:"bytes,5,opt,name=bytes,proto3" json:"bytes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLUploadSaveFilePart) Reset() {
	*x = TLUploadSaveFilePart{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[413]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLUploadSaveFilePart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUploadSaveFilePart) ProtoMessage() {}

func (x *TLUploadSaveFilePart) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[413]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUploadSaveFilePart.ProtoReflect.Descriptor instead.
func (*TLUploadSaveFilePart) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{413}
}

func (x *TLUploadSaveFilePart) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUploadSaveFilePart) GetFileId() int64 {
	if x != nil {
		return x.FileId
	}
	return 0
}

func (x *TLUploadSaveFilePart) GetFilePart() int32 {
	if x != nil {
		return x.FilePart
	}
	return 0
}

func (x *TLUploadSaveFilePart) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

type TLUploadGetFile struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Precise       bool                   `protobuf:"varint,3,opt,name=precise,proto3" json:"precise,omitempty"`
	CdnSupported  bool                   `protobuf:"varint,4,opt,name=cdn_supported,json=cdnSupported,proto3" json:"cdn_supported,omitempty"`
	Location      *InputFileLocation     `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
	Offset_INT64  int64                  `protobuf:"varint,6,opt,name=offset_INT64,json=offsetINT64,proto3" json:"offset_INT64,omitempty"`
	Limit         int32                  `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset_INT32  int32                  `protobuf:"varint,8,opt,name=offset_INT32,json=offsetINT32,proto3" json:"offset_INT32,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLUploadGetFile) Reset() {
	*x = TLUploadGetFile{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[414]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLUploadGetFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUploadGetFile) ProtoMessage() {}

func (x *TLUploadGetFile) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[414]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUploadGetFile.ProtoReflect.Descriptor instead.
func (*TLUploadGetFile) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{414}
}

func (x *TLUploadGetFile) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUploadGetFile) GetPrecise() bool {
	if x != nil {
		return x.Precise
	}
	return false
}

func (x *TLUploadGetFile) GetCdnSupported() bool {
	if x != nil {
		return x.CdnSupported
	}
	return false
}

func (x *TLUploadGetFile) GetLocation() *InputFileLocation {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *TLUploadGetFile) GetOffset_INT64() int64 {
	if x != nil {
		return x.Offset_INT64
	}
	return 0
}

func (x *TLUploadGetFile) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TLUploadGetFile) GetOffset_INT32() int32 {
	if x != nil {
		return x.Offset_INT32
	}
	return 0
}

type TLUploadSaveBigFilePart struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Constructor    TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	FileId         int64                  `protobuf:"varint,3,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	FilePart       int32                  `protobuf:"varint,4,opt,name=file_part,json=filePart,proto3" json:"file_part,omitempty"`
	FileTotalParts int32                  `protobuf:"varint,5,opt,name=file_total_parts,json=fileTotalParts,proto3" json:"file_total_parts,omitempty"`
	Bytes          []byte                 `protobuf:"bytes,6,opt,name=bytes,proto3" json:"bytes,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TLUploadSaveBigFilePart) Reset() {
	*x = TLUploadSaveBigFilePart{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[415]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLUploadSaveBigFilePart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUploadSaveBigFilePart) ProtoMessage() {}

func (x *TLUploadSaveBigFilePart) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[415]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUploadSaveBigFilePart.ProtoReflect.Descriptor instead.
func (*TLUploadSaveBigFilePart) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{415}
}

func (x *TLUploadSaveBigFilePart) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUploadSaveBigFilePart) GetFileId() int64 {
	if x != nil {
		return x.FileId
	}
	return 0
}

func (x *TLUploadSaveBigFilePart) GetFilePart() int32 {
	if x != nil {
		return x.FilePart
	}
	return 0
}

func (x *TLUploadSaveBigFilePart) GetFileTotalParts() int32 {
	if x != nil {
		return x.FileTotalParts
	}
	return 0
}

func (x *TLUploadSaveBigFilePart) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

type TLUploadGetWebFile struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Location      *InputWebFileLocation  `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	Offset        int32                  `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit         int32                  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLUploadGetWebFile) Reset() {
	*x = TLUploadGetWebFile{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[416]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLUploadGetWebFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUploadGetWebFile) ProtoMessage() {}

func (x *TLUploadGetWebFile) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[416]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUploadGetWebFile.ProtoReflect.Descriptor instead.
func (*TLUploadGetWebFile) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{416}
}

func (x *TLUploadGetWebFile) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUploadGetWebFile) GetLocation() *InputWebFileLocation {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *TLUploadGetWebFile) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TLUploadGetWebFile) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TLUploadGetCdnFile struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	FileToken     []byte                 `protobuf:"bytes,3,opt,name=file_token,json=fileToken,proto3" json:"file_token,omitempty"`
	Offset_INT64  int64                  `protobuf:"varint,4,opt,name=offset_INT64,json=offsetINT64,proto3" json:"offset_INT64,omitempty"`
	Limit         int32                  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset_INT32  int32                  `protobuf:"varint,6,opt,name=offset_INT32,json=offsetINT32,proto3" json:"offset_INT32,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLUploadGetCdnFile) Reset() {
	*x = TLUploadGetCdnFile{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[417]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLUploadGetCdnFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUploadGetCdnFile) ProtoMessage() {}

func (x *TLUploadGetCdnFile) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[417]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUploadGetCdnFile.ProtoReflect.Descriptor instead.
func (*TLUploadGetCdnFile) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{417}
}

func (x *TLUploadGetCdnFile) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUploadGetCdnFile) GetFileToken() []byte {
	if x != nil {
		return x.FileToken
	}
	return nil
}

func (x *TLUploadGetCdnFile) GetOffset_INT64() int64 {
	if x != nil {
		return x.Offset_INT64
	}
	return 0
}

func (x *TLUploadGetCdnFile) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TLUploadGetCdnFile) GetOffset_INT32() int32 {
	if x != nil {
		return x.Offset_INT32
	}
	return 0
}

type TLUploadReuploadCdnFile struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	FileToken     []byte                 `protobuf:"bytes,3,opt,name=file_token,json=fileToken,proto3" json:"file_token,omitempty"`
	RequestToken  []byte                 `protobuf:"bytes,4,opt,name=request_token,json=requestToken,proto3" json:"request_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLUploadReuploadCdnFile) Reset() {
	*x = TLUploadReuploadCdnFile{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[418]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLUploadReuploadCdnFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUploadReuploadCdnFile) ProtoMessage() {}

func (x *TLUploadReuploadCdnFile) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[418]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUploadReuploadCdnFile.ProtoReflect.Descriptor instead.
func (*TLUploadReuploadCdnFile) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{418}
}

func (x *TLUploadReuploadCdnFile) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUploadReuploadCdnFile) GetFileToken() []byte {
	if x != nil {
		return x.FileToken
	}
	return nil
}

func (x *TLUploadReuploadCdnFile) GetRequestToken() []byte {
	if x != nil {
		return x.RequestToken
	}
	return nil
}

type TLUploadGetCdnFileHashes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	FileToken     []byte                 `protobuf:"bytes,3,opt,name=file_token,json=fileToken,proto3" json:"file_token,omitempty"`
	Offset_INT64  int64                  `protobuf:"varint,4,opt,name=offset_INT64,json=offsetINT64,proto3" json:"offset_INT64,omitempty"`
	Offset_INT32  int32                  `protobuf:"varint,5,opt,name=offset_INT32,json=offsetINT32,proto3" json:"offset_INT32,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLUploadGetCdnFileHashes) Reset() {
	*x = TLUploadGetCdnFileHashes{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[419]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLUploadGetCdnFileHashes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUploadGetCdnFileHashes) ProtoMessage() {}

func (x *TLUploadGetCdnFileHashes) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[419]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUploadGetCdnFileHashes.ProtoReflect.Descriptor instead.
func (*TLUploadGetCdnFileHashes) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{419}
}

func (x *TLUploadGetCdnFileHashes) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUploadGetCdnFileHashes) GetFileToken() []byte {
	if x != nil {
		return x.FileToken
	}
	return nil
}

func (x *TLUploadGetCdnFileHashes) GetOffset_INT64() int64 {
	if x != nil {
		return x.Offset_INT64
	}
	return 0
}

func (x *TLUploadGetCdnFileHashes) GetOffset_INT32() int32 {
	if x != nil {
		return x.Offset_INT32
	}
	return 0
}

type TLUploadGetFileHashes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Location      *InputFileLocation     `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	Offset_INT64  int64                  `protobuf:"varint,4,opt,name=offset_INT64,json=offsetINT64,proto3" json:"offset_INT64,omitempty"`
	Offset_INT32  int32                  `protobuf:"varint,5,opt,name=offset_INT32,json=offsetINT32,proto3" json:"offset_INT32,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLUploadGetFileHashes) Reset() {
	*x = TLUploadGetFileHashes{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[420]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLUploadGetFileHashes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUploadGetFileHashes) ProtoMessage() {}

func (x *TLUploadGetFileHashes) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[420]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUploadGetFileHashes.ProtoReflect.Descriptor instead.
func (*TLUploadGetFileHashes) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{420}
}

func (x *TLUploadGetFileHashes) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUploadGetFileHashes) GetLocation() *InputFileLocation {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *TLUploadGetFileHashes) GetOffset_INT64() int64 {
	if x != nil {
		return x.Offset_INT64
	}
	return 0
}

func (x *TLUploadGetFileHashes) GetOffset_INT32() int32 {
	if x != nil {
		return x.Offset_INT32
	}
	return 0
}

type TLHelpGetConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLHelpGetConfig) Reset() {
	*x = TLHelpGetConfig{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[421]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLHelpGetConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLHelpGetConfig) ProtoMessage() {}

func (x *TLHelpGetConfig) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[421]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLHelpGetConfig.ProtoReflect.Descriptor instead.
func (*TLHelpGetConfig) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{421}
}

func (x *TLHelpGetConfig) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLHelpGetNearestDc struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLHelpGetNearestDc) Reset() {
	*x = TLHelpGetNearestDc{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[422]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLHelpGetNearestDc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLHelpGetNearestDc) ProtoMessage() {}

func (x *TLHelpGetNearestDc) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[422]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLHelpGetNearestDc.ProtoReflect.Descriptor instead.
func (*TLHelpGetNearestDc) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{422}
}

func (x *TLHelpGetNearestDc) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLHelpGetAppUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Source        string                 `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLHelpGetAppUpdate) Reset() {
	*x = TLHelpGetAppUpdate{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[423]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLHelpGetAppUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLHelpGetAppUpdate) ProtoMessage() {}

func (x *TLHelpGetAppUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[423]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLHelpGetAppUpdate.ProtoReflect.Descriptor instead.
func (*TLHelpGetAppUpdate) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{423}
}

func (x *TLHelpGetAppUpdate) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLHelpGetAppUpdate) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type TLHelpGetInviteText struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLHelpGetInviteText) Reset() {
	*x = TLHelpGetInviteText{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[424]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLHelpGetInviteText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLHelpGetInviteText) ProtoMessage() {}

func (x *TLHelpGetInviteText) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[424]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLHelpGetInviteText.ProtoReflect.Descriptor instead.
func (*TLHelpGetInviteText) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{424}
}

func (x *TLHelpGetInviteText) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLHelpGetSupport struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLHelpGetSupport) Reset() {
	*x = TLHelpGetSupport{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[425]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLHelpGetSupport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLHelpGetSupport) ProtoMessage() {}

func (x *TLHelpGetSupport) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[425]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLHelpGetSupport.ProtoReflect.Descriptor instead.
func (*TLHelpGetSupport) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{425}
}

func (x *TLHelpGetSupport) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLHelpSetBotUpdatesStatus struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Constructor         TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	PendingUpdatesCount int32                  `protobuf:"varint,3,opt,name=pending_updates_count,json=pendingUpdatesCount,proto3" json:"pending_updates_count,omitempty"`
	Message             string                 `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *TLHelpSetBotUpdatesStatus) Reset() {
	*x = TLHelpSetBotUpdatesStatus{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[426]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLHelpSetBotUpdatesStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLHelpSetBotUpdatesStatus) ProtoMessage() {}

func (x *TLHelpSetBotUpdatesStatus) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[426]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLHelpSetBotUpdatesStatus.ProtoReflect.Descriptor instead.
func (*TLHelpSetBotUpdatesStatus) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{426}
}

func (x *TLHelpSetBotUpdatesStatus) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLHelpSetBotUpdatesStatus) GetPendingUpdatesCount() int32 {
	if x != nil {
		return x.PendingUpdatesCount
	}
	return 0
}

func (x *TLHelpSetBotUpdatesStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type TLHelpGetCdnConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLHelpGetCdnConfig) Reset() {
	*x = TLHelpGetCdnConfig{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[427]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLHelpGetCdnConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLHelpGetCdnConfig) ProtoMessage() {}

func (x *TLHelpGetCdnConfig) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[427]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLHelpGetCdnConfig.ProtoReflect.Descriptor instead.
func (*TLHelpGetCdnConfig) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{427}
}

func (x *TLHelpGetCdnConfig) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLHelpGetRecentMeUrls struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Referer       string                 `protobuf:"bytes,3,opt,name=referer,proto3" json:"referer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLHelpGetRecentMeUrls) Reset() {
	*x = TLHelpGetRecentMeUrls{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[428]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLHelpGetRecentMeUrls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLHelpGetRecentMeUrls) ProtoMessage() {}

func (x *TLHelpGetRecentMeUrls) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[428]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLHelpGetRecentMeUrls.ProtoReflect.Descriptor instead.
func (*TLHelpGetRecentMeUrls) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{428}
}

func (x *TLHelpGetRecentMeUrls) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLHelpGetRecentMeUrls) GetReferer() string {
	if x != nil {
		return x.Referer
	}
	return ""
}

type TLHelpGetTermsOfServiceUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLHelpGetTermsOfServiceUpdate) Reset() {
	*x = TLHelpGetTermsOfServiceUpdate{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[429]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLHelpGetTermsOfServiceUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLHelpGetTermsOfServiceUpdate) ProtoMessage() {}

func (x *TLHelpGetTermsOfServiceUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[429]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLHelpGetTermsOfServiceUpdate.ProtoReflect.Descriptor instead.
func (*TLHelpGetTermsOfServiceUpdate) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{429}
}

func (x *TLHelpGetTermsOfServiceUpdate) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLHelpAcceptTermsOfService struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Id            *DataJSON              `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLHelpAcceptTermsOfService) Reset() {
	*x = TLHelpAcceptTermsOfService{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[430]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLHelpAcceptTermsOfService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLHelpAcceptTermsOfService) ProtoMessage() {}

func (x *TLHelpAcceptTermsOfService) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[430]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLHelpAcceptTermsOfService.ProtoReflect.Descriptor instead.
func (*TLHelpAcceptTermsOfService) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{430}
}

func (x *TLHelpAcceptTermsOfService) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLHelpAcceptTermsOfService) GetId() *DataJSON {
	if x != nil {
		return x.Id
	}
	return nil
}

type TLHelpGetDeepLinkInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Path          string                 `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLHelpGetDeepLinkInfo) Reset() {
	*x = TLHelpGetDeepLinkInfo{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[431]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLHelpGetDeepLinkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLHelpGetDeepLinkInfo) ProtoMessage() {}

func (x *TLHelpGetDeepLinkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[431]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLHelpGetDeepLinkInfo.ProtoReflect.Descriptor instead.
func (*TLHelpGetDeepLinkInfo) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{431}
}

func (x *TLHelpGetDeepLinkInfo) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLHelpGetDeepLinkInfo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type TLHelpGetAppConfig61E3F854 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Hash          int32                  `protobuf:"varint,3,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLHelpGetAppConfig61E3F854) Reset() {
	*x = TLHelpGetAppConfig61E3F854{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[432]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLHelpGetAppConfig61E3F854) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLHelpGetAppConfig61E3F854) ProtoMessage() {}

func (x *TLHelpGetAppConfig61E3F854) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[432]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLHelpGetAppConfig61E3F854.ProtoReflect.Descriptor instead.
func (*TLHelpGetAppConfig61E3F854) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{432}
}

func (x *TLHelpGetAppConfig61E3F854) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLHelpGetAppConfig61E3F854) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLHelpSaveAppLog struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Events        []*InputAppEvent       `protobuf:"bytes,3,rep,name=events,proto3" json:"events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLHelpSaveAppLog) Reset() {
	*x = TLHelpSaveAppLog{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[433]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLHelpSaveAppLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLHelpSaveAppLog) ProtoMessage() {}

func (x *TLHelpSaveAppLog) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[433]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLHelpSaveAppLog.ProtoReflect.Descriptor instead.
func (*TLHelpSaveAppLog) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{433}
}

func (x *TLHelpSaveAppLog) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLHelpSaveAppLog) GetEvents() []*InputAppEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type TLHelpGetPassportConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Hash          int32                  `protobuf:"varint,3,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLHelpGetPassportConfig) Reset() {
	*x = TLHelpGetPassportConfig{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[434]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLHelpGetPassportConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLHelpGetPassportConfig) ProtoMessage() {}

func (x *TLHelpGetPassportConfig) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[434]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLHelpGetPassportConfig.ProtoReflect.Descriptor instead.
func (*TLHelpGetPassportConfig) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{434}
}

func (x *TLHelpGetPassportConfig) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLHelpGetPassportConfig) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLHelpGetSupportName struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLHelpGetSupportName) Reset() {
	*x = TLHelpGetSupportName{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[435]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLHelpGetSupportName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLHelpGetSupportName) ProtoMessage() {}

func (x *TLHelpGetSupportName) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[435]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLHelpGetSupportName.ProtoReflect.Descriptor instead.
func (*TLHelpGetSupportName) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{435}
}

func (x *TLHelpGetSupportName) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLHelpGetUserInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	UserId        *InputUser             `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLHelpGetUserInfo) Reset() {
	*x = TLHelpGetUserInfo{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[436]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLHelpGetUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLHelpGetUserInfo) ProtoMessage() {}

func (x *TLHelpGetUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[436]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLHelpGetUserInfo.ProtoReflect.Descriptor instead.
func (*TLHelpGetUserInfo) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{436}
}

func (x *TLHelpGetUserInfo) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLHelpGetUserInfo) GetUserId() *InputUser {
	if x != nil {
		return x.UserId
	}
	return nil
}

type TLHelpEditUserInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	UserId        *InputUser             `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Message       string                 `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Entities      []*MessageEntity       `protobuf:"bytes,5,rep,name=entities,proto3" json:"entities,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLHelpEditUserInfo) Reset() {
	*x = TLHelpEditUserInfo{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[437]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLHelpEditUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLHelpEditUserInfo) ProtoMessage() {}

func (x *TLHelpEditUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[437]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLHelpEditUserInfo.ProtoReflect.Descriptor instead.
func (*TLHelpEditUserInfo) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{437}
}

func (x *TLHelpEditUserInfo) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLHelpEditUserInfo) GetUserId() *InputUser {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *TLHelpEditUserInfo) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TLHelpEditUserInfo) GetEntities() []*MessageEntity {
	if x != nil {
		return x.Entities
	}
	return nil
}

type TLHelpGetPromoData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLHelpGetPromoData) Reset() {
	*x = TLHelpGetPromoData{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[438]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLHelpGetPromoData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLHelpGetPromoData) ProtoMessage() {}

func (x *TLHelpGetPromoData) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[438]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLHelpGetPromoData.ProtoReflect.Descriptor instead.
func (*TLHelpGetPromoData) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{438}
}

func (x *TLHelpGetPromoData) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLHelpHidePromoData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLHelpHidePromoData) Reset() {
	*x = TLHelpHidePromoData{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[439]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLHelpHidePromoData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLHelpHidePromoData) ProtoMessage() {}

func (x *TLHelpHidePromoData) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[439]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLHelpHidePromoData.ProtoReflect.Descriptor instead.
func (*TLHelpHidePromoData) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{439}
}

func (x *TLHelpHidePromoData) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLHelpHidePromoData) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

type TLHelpDismissSuggestion struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Suggestion    string                 `protobuf:"bytes,4,opt,name=suggestion,proto3" json:"suggestion,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLHelpDismissSuggestion) Reset() {
	*x = TLHelpDismissSuggestion{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[440]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLHelpDismissSuggestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLHelpDismissSuggestion) ProtoMessage() {}

func (x *TLHelpDismissSuggestion) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[440]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLHelpDismissSuggestion.ProtoReflect.Descriptor instead.
func (*TLHelpDismissSuggestion) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{440}
}

func (x *TLHelpDismissSuggestion) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLHelpDismissSuggestion) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLHelpDismissSuggestion) GetSuggestion() string {
	if x != nil {
		return x.Suggestion
	}
	return ""
}

type TLHelpGetCountriesList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	LangCode      string                 `protobuf:"bytes,3,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
	Hash          int32                  `protobuf:"varint,4,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLHelpGetCountriesList) Reset() {
	*x = TLHelpGetCountriesList{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[441]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLHelpGetCountriesList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLHelpGetCountriesList) ProtoMessage() {}

func (x *TLHelpGetCountriesList) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[441]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLHelpGetCountriesList.ProtoReflect.Descriptor instead.
func (*TLHelpGetCountriesList) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{441}
}

func (x *TLHelpGetCountriesList) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLHelpGetCountriesList) GetLangCode() string {
	if x != nil {
		return x.LangCode
	}
	return ""
}

func (x *TLHelpGetCountriesList) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLHelpGetPremiumPromo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLHelpGetPremiumPromo) Reset() {
	*x = TLHelpGetPremiumPromo{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[442]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLHelpGetPremiumPromo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLHelpGetPremiumPromo) ProtoMessage() {}

func (x *TLHelpGetPremiumPromo) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[442]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLHelpGetPremiumPromo.ProtoReflect.Descriptor instead.
func (*TLHelpGetPremiumPromo) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{442}
}

func (x *TLHelpGetPremiumPromo) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLHelpGetPeerColors struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Hash          int32                  `protobuf:"varint,3,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLHelpGetPeerColors) Reset() {
	*x = TLHelpGetPeerColors{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[443]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLHelpGetPeerColors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLHelpGetPeerColors) ProtoMessage() {}

func (x *TLHelpGetPeerColors) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[443]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLHelpGetPeerColors.ProtoReflect.Descriptor instead.
func (*TLHelpGetPeerColors) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{443}
}

func (x *TLHelpGetPeerColors) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLHelpGetPeerColors) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLHelpGetPeerProfileColors struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Hash          int32                  `protobuf:"varint,3,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLHelpGetPeerProfileColors) Reset() {
	*x = TLHelpGetPeerProfileColors{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[444]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLHelpGetPeerProfileColors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLHelpGetPeerProfileColors) ProtoMessage() {}

func (x *TLHelpGetPeerProfileColors) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[444]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLHelpGetPeerProfileColors.ProtoReflect.Descriptor instead.
func (*TLHelpGetPeerProfileColors) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{444}
}

func (x *TLHelpGetPeerProfileColors) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLHelpGetPeerProfileColors) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLHelpGetTimezonesList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Hash          int32                  `protobuf:"varint,3,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLHelpGetTimezonesList) Reset() {
	*x = TLHelpGetTimezonesList{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[445]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLHelpGetTimezonesList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLHelpGetTimezonesList) ProtoMessage() {}

func (x *TLHelpGetTimezonesList) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[445]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLHelpGetTimezonesList.ProtoReflect.Descriptor instead.
func (*TLHelpGetTimezonesList) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{445}
}

func (x *TLHelpGetTimezonesList) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLHelpGetTimezonesList) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLChannelsReadHistory struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	MaxId         int32                  `protobuf:"varint,4,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsReadHistory) Reset() {
	*x = TLChannelsReadHistory{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[446]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsReadHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsReadHistory) ProtoMessage() {}

func (x *TLChannelsReadHistory) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[446]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsReadHistory.ProtoReflect.Descriptor instead.
func (*TLChannelsReadHistory) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{446}
}

func (x *TLChannelsReadHistory) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsReadHistory) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsReadHistory) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

type TLChannelsDeleteMessages struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	Id            []int32                `protobuf:"varint,4,rep,packed,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsDeleteMessages) Reset() {
	*x = TLChannelsDeleteMessages{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[447]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsDeleteMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsDeleteMessages) ProtoMessage() {}

func (x *TLChannelsDeleteMessages) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[447]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsDeleteMessages.ProtoReflect.Descriptor instead.
func (*TLChannelsDeleteMessages) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{447}
}

func (x *TLChannelsDeleteMessages) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsDeleteMessages) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsDeleteMessages) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

type TLChannelsReportSpam struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	Participant   *InputPeer             `protobuf:"bytes,4,opt,name=participant,proto3" json:"participant,omitempty"`
	Id            []int32                `protobuf:"varint,5,rep,packed,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsReportSpam) Reset() {
	*x = TLChannelsReportSpam{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[448]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsReportSpam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsReportSpam) ProtoMessage() {}

func (x *TLChannelsReportSpam) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[448]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsReportSpam.ProtoReflect.Descriptor instead.
func (*TLChannelsReportSpam) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{448}
}

func (x *TLChannelsReportSpam) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsReportSpam) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsReportSpam) GetParticipant() *InputPeer {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *TLChannelsReportSpam) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

type TLChannelsGetMessages struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Constructor           TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel               *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	Id_VECTORINPUTMESSAGE []*InputMessage        `protobuf:"bytes,4,rep,name=id_VECTORINPUTMESSAGE,json=idVECTORINPUTMESSAGE,proto3" json:"id_VECTORINPUTMESSAGE,omitempty"`
	Id_VECTORINT32        []int32                `protobuf:"varint,5,rep,packed,name=id_VECTORINT32,json=idVECTORINT32,proto3" json:"id_VECTORINT32,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *TLChannelsGetMessages) Reset() {
	*x = TLChannelsGetMessages{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[449]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsGetMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsGetMessages) ProtoMessage() {}

func (x *TLChannelsGetMessages) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[449]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsGetMessages.ProtoReflect.Descriptor instead.
func (*TLChannelsGetMessages) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{449}
}

func (x *TLChannelsGetMessages) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsGetMessages) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsGetMessages) GetId_VECTORINPUTMESSAGE() []*InputMessage {
	if x != nil {
		return x.Id_VECTORINPUTMESSAGE
	}
	return nil
}

func (x *TLChannelsGetMessages) GetId_VECTORINT32() []int32 {
	if x != nil {
		return x.Id_VECTORINT32
	}
	return nil
}

type TLChannelsGetParticipants struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Constructor   TLConstructor              `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel              `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	Filter        *ChannelParticipantsFilter `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	Offset        int32                      `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit         int32                      `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	Hash          int64                      `protobuf:"varint,7,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsGetParticipants) Reset() {
	*x = TLChannelsGetParticipants{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[450]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsGetParticipants) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsGetParticipants) ProtoMessage() {}

func (x *TLChannelsGetParticipants) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[450]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsGetParticipants.ProtoReflect.Descriptor instead.
func (*TLChannelsGetParticipants) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{450}
}

func (x *TLChannelsGetParticipants) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsGetParticipants) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsGetParticipants) GetFilter() *ChannelParticipantsFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *TLChannelsGetParticipants) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TLChannelsGetParticipants) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TLChannelsGetParticipants) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLChannelsGetParticipant struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	Participant   *InputPeer             `protobuf:"bytes,4,opt,name=participant,proto3" json:"participant,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsGetParticipant) Reset() {
	*x = TLChannelsGetParticipant{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[451]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsGetParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsGetParticipant) ProtoMessage() {}

func (x *TLChannelsGetParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[451]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsGetParticipant.ProtoReflect.Descriptor instead.
func (*TLChannelsGetParticipant) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{451}
}

func (x *TLChannelsGetParticipant) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsGetParticipant) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsGetParticipant) GetParticipant() *InputPeer {
	if x != nil {
		return x.Participant
	}
	return nil
}

type TLChannelsGetChannels struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Id            []*InputChannel        `protobuf:"bytes,3,rep,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsGetChannels) Reset() {
	*x = TLChannelsGetChannels{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[452]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsGetChannels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsGetChannels) ProtoMessage() {}

func (x *TLChannelsGetChannels) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[452]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsGetChannels.ProtoReflect.Descriptor instead.
func (*TLChannelsGetChannels) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{452}
}

func (x *TLChannelsGetChannels) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsGetChannels) GetId() []*InputChannel {
	if x != nil {
		return x.Id
	}
	return nil
}

type TLChannelsGetFullChannel struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsGetFullChannel) Reset() {
	*x = TLChannelsGetFullChannel{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[453]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsGetFullChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsGetFullChannel) ProtoMessage() {}

func (x *TLChannelsGetFullChannel) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[453]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsGetFullChannel.ProtoReflect.Descriptor instead.
func (*TLChannelsGetFullChannel) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{453}
}

func (x *TLChannelsGetFullChannel) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsGetFullChannel) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

type TLChannelsCreateChannel struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Constructor   TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Broadcast     bool                    `protobuf:"varint,3,opt,name=broadcast,proto3" json:"broadcast,omitempty"`
	Megagroup     bool                    `protobuf:"varint,4,opt,name=megagroup,proto3" json:"megagroup,omitempty"`
	ForImport     bool                    `protobuf:"varint,5,opt,name=for_import,json=forImport,proto3" json:"for_import,omitempty"`
	Forum         bool                    `protobuf:"varint,6,opt,name=forum,proto3" json:"forum,omitempty"`
	Title         string                  `protobuf:"bytes,7,opt,name=title,proto3" json:"title,omitempty"`
	About         string                  `protobuf:"bytes,8,opt,name=about,proto3" json:"about,omitempty"`
	GeoPoint      *InputGeoPoint          `protobuf:"bytes,9,opt,name=geo_point,json=geoPoint,proto3" json:"geo_point,omitempty"`
	Address       *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=address,proto3" json:"address,omitempty"`
	TtlPeriod     *wrapperspb.Int32Value  `protobuf:"bytes,11,opt,name=ttl_period,json=ttlPeriod,proto3" json:"ttl_period,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsCreateChannel) Reset() {
	*x = TLChannelsCreateChannel{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[454]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsCreateChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsCreateChannel) ProtoMessage() {}

func (x *TLChannelsCreateChannel) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[454]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsCreateChannel.ProtoReflect.Descriptor instead.
func (*TLChannelsCreateChannel) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{454}
}

func (x *TLChannelsCreateChannel) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsCreateChannel) GetBroadcast() bool {
	if x != nil {
		return x.Broadcast
	}
	return false
}

func (x *TLChannelsCreateChannel) GetMegagroup() bool {
	if x != nil {
		return x.Megagroup
	}
	return false
}

func (x *TLChannelsCreateChannel) GetForImport() bool {
	if x != nil {
		return x.ForImport
	}
	return false
}

func (x *TLChannelsCreateChannel) GetForum() bool {
	if x != nil {
		return x.Forum
	}
	return false
}

func (x *TLChannelsCreateChannel) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TLChannelsCreateChannel) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

func (x *TLChannelsCreateChannel) GetGeoPoint() *InputGeoPoint {
	if x != nil {
		return x.GeoPoint
	}
	return nil
}

func (x *TLChannelsCreateChannel) GetAddress() *wrapperspb.StringValue {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *TLChannelsCreateChannel) GetTtlPeriod() *wrapperspb.Int32Value {
	if x != nil {
		return x.TtlPeriod
	}
	return nil
}

type TLChannelsEditAdmin struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	UserId        *InputUser             `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AdminRights   *ChatAdminRights       `protobuf:"bytes,5,opt,name=admin_rights,json=adminRights,proto3" json:"admin_rights,omitempty"`
	Rank          string                 `protobuf:"bytes,6,opt,name=rank,proto3" json:"rank,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsEditAdmin) Reset() {
	*x = TLChannelsEditAdmin{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[455]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsEditAdmin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsEditAdmin) ProtoMessage() {}

func (x *TLChannelsEditAdmin) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[455]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsEditAdmin.ProtoReflect.Descriptor instead.
func (*TLChannelsEditAdmin) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{455}
}

func (x *TLChannelsEditAdmin) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsEditAdmin) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsEditAdmin) GetUserId() *InputUser {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *TLChannelsEditAdmin) GetAdminRights() *ChatAdminRights {
	if x != nil {
		return x.AdminRights
	}
	return nil
}

func (x *TLChannelsEditAdmin) GetRank() string {
	if x != nil {
		return x.Rank
	}
	return ""
}

type TLChannelsEditTitle struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	Title         string                 `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsEditTitle) Reset() {
	*x = TLChannelsEditTitle{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[456]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsEditTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsEditTitle) ProtoMessage() {}

func (x *TLChannelsEditTitle) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[456]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsEditTitle.ProtoReflect.Descriptor instead.
func (*TLChannelsEditTitle) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{456}
}

func (x *TLChannelsEditTitle) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsEditTitle) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsEditTitle) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type TLChannelsEditPhoto struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	Photo         *InputChatPhoto        `protobuf:"bytes,4,opt,name=photo,proto3" json:"photo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsEditPhoto) Reset() {
	*x = TLChannelsEditPhoto{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[457]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsEditPhoto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsEditPhoto) ProtoMessage() {}

func (x *TLChannelsEditPhoto) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[457]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsEditPhoto.ProtoReflect.Descriptor instead.
func (*TLChannelsEditPhoto) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{457}
}

func (x *TLChannelsEditPhoto) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsEditPhoto) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsEditPhoto) GetPhoto() *InputChatPhoto {
	if x != nil {
		return x.Photo
	}
	return nil
}

type TLChannelsCheckUsername struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	Username      string                 `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsCheckUsername) Reset() {
	*x = TLChannelsCheckUsername{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[458]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsCheckUsername) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsCheckUsername) ProtoMessage() {}

func (x *TLChannelsCheckUsername) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[458]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsCheckUsername.ProtoReflect.Descriptor instead.
func (*TLChannelsCheckUsername) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{458}
}

func (x *TLChannelsCheckUsername) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsCheckUsername) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsCheckUsername) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type TLChannelsUpdateUsername struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	Username      string                 `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsUpdateUsername) Reset() {
	*x = TLChannelsUpdateUsername{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[459]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsUpdateUsername) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsUpdateUsername) ProtoMessage() {}

func (x *TLChannelsUpdateUsername) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[459]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsUpdateUsername.ProtoReflect.Descriptor instead.
func (*TLChannelsUpdateUsername) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{459}
}

func (x *TLChannelsUpdateUsername) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsUpdateUsername) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsUpdateUsername) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type TLChannelsJoinChannel struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsJoinChannel) Reset() {
	*x = TLChannelsJoinChannel{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[460]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsJoinChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsJoinChannel) ProtoMessage() {}

func (x *TLChannelsJoinChannel) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[460]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsJoinChannel.ProtoReflect.Descriptor instead.
func (*TLChannelsJoinChannel) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{460}
}

func (x *TLChannelsJoinChannel) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsJoinChannel) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

type TLChannelsLeaveChannel struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsLeaveChannel) Reset() {
	*x = TLChannelsLeaveChannel{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[461]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsLeaveChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsLeaveChannel) ProtoMessage() {}

func (x *TLChannelsLeaveChannel) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[461]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsLeaveChannel.ProtoReflect.Descriptor instead.
func (*TLChannelsLeaveChannel) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{461}
}

func (x *TLChannelsLeaveChannel) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsLeaveChannel) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

type TLChannelsInviteToChannelC9E33D54 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	Users         []*InputUser           `protobuf:"bytes,4,rep,name=users,proto3" json:"users,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsInviteToChannelC9E33D54) Reset() {
	*x = TLChannelsInviteToChannelC9E33D54{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[462]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsInviteToChannelC9E33D54) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsInviteToChannelC9E33D54) ProtoMessage() {}

func (x *TLChannelsInviteToChannelC9E33D54) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[462]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsInviteToChannelC9E33D54.ProtoReflect.Descriptor instead.
func (*TLChannelsInviteToChannelC9E33D54) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{462}
}

func (x *TLChannelsInviteToChannelC9E33D54) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsInviteToChannelC9E33D54) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsInviteToChannelC9E33D54) GetUsers() []*InputUser {
	if x != nil {
		return x.Users
	}
	return nil
}

type TLChannelsDeleteChannel struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsDeleteChannel) Reset() {
	*x = TLChannelsDeleteChannel{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[463]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsDeleteChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsDeleteChannel) ProtoMessage() {}

func (x *TLChannelsDeleteChannel) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[463]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsDeleteChannel.ProtoReflect.Descriptor instead.
func (*TLChannelsDeleteChannel) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{463}
}

func (x *TLChannelsDeleteChannel) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsDeleteChannel) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

type TLChannelsExportMessageLink struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Grouped       bool                   `protobuf:"varint,3,opt,name=grouped,proto3" json:"grouped,omitempty"`
	Thread        bool                   `protobuf:"varint,4,opt,name=thread,proto3" json:"thread,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,5,opt,name=channel,proto3" json:"channel,omitempty"`
	Id            int32                  `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsExportMessageLink) Reset() {
	*x = TLChannelsExportMessageLink{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[464]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsExportMessageLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsExportMessageLink) ProtoMessage() {}

func (x *TLChannelsExportMessageLink) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[464]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsExportMessageLink.ProtoReflect.Descriptor instead.
func (*TLChannelsExportMessageLink) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{464}
}

func (x *TLChannelsExportMessageLink) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsExportMessageLink) GetGrouped() bool {
	if x != nil {
		return x.Grouped
	}
	return false
}

func (x *TLChannelsExportMessageLink) GetThread() bool {
	if x != nil {
		return x.Thread
	}
	return false
}

func (x *TLChannelsExportMessageLink) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsExportMessageLink) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type TLChannelsToggleSignatures struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Constructor       TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	SignaturesEnabled bool                   `protobuf:"varint,3,opt,name=signatures_enabled,json=signaturesEnabled,proto3" json:"signatures_enabled,omitempty"`
	ProfilesEnabled   bool                   `protobuf:"varint,4,opt,name=profiles_enabled,json=profilesEnabled,proto3" json:"profiles_enabled,omitempty"`
	Channel           *InputChannel          `protobuf:"bytes,5,opt,name=channel,proto3" json:"channel,omitempty"`
	Enabled           *Bool                  `protobuf:"bytes,6,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TLChannelsToggleSignatures) Reset() {
	*x = TLChannelsToggleSignatures{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[465]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsToggleSignatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsToggleSignatures) ProtoMessage() {}

func (x *TLChannelsToggleSignatures) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[465]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsToggleSignatures.ProtoReflect.Descriptor instead.
func (*TLChannelsToggleSignatures) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{465}
}

func (x *TLChannelsToggleSignatures) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsToggleSignatures) GetSignaturesEnabled() bool {
	if x != nil {
		return x.SignaturesEnabled
	}
	return false
}

func (x *TLChannelsToggleSignatures) GetProfilesEnabled() bool {
	if x != nil {
		return x.ProfilesEnabled
	}
	return false
}

func (x *TLChannelsToggleSignatures) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsToggleSignatures) GetEnabled() *Bool {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type TLChannelsGetAdminedPublicChannels struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	ByLocation    bool                   `protobuf:"varint,3,opt,name=by_location,json=byLocation,proto3" json:"by_location,omitempty"`
	CheckLimit    bool                   `protobuf:"varint,4,opt,name=check_limit,json=checkLimit,proto3" json:"check_limit,omitempty"`
	ForPersonal   bool                   `protobuf:"varint,5,opt,name=for_personal,json=forPersonal,proto3" json:"for_personal,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsGetAdminedPublicChannels) Reset() {
	*x = TLChannelsGetAdminedPublicChannels{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[466]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsGetAdminedPublicChannels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsGetAdminedPublicChannels) ProtoMessage() {}

func (x *TLChannelsGetAdminedPublicChannels) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[466]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsGetAdminedPublicChannels.ProtoReflect.Descriptor instead.
func (*TLChannelsGetAdminedPublicChannels) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{466}
}

func (x *TLChannelsGetAdminedPublicChannels) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsGetAdminedPublicChannels) GetByLocation() bool {
	if x != nil {
		return x.ByLocation
	}
	return false
}

func (x *TLChannelsGetAdminedPublicChannels) GetCheckLimit() bool {
	if x != nil {
		return x.CheckLimit
	}
	return false
}

func (x *TLChannelsGetAdminedPublicChannels) GetForPersonal() bool {
	if x != nil {
		return x.ForPersonal
	}
	return false
}

type TLChannelsEditBanned struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	Participant   *InputPeer             `protobuf:"bytes,4,opt,name=participant,proto3" json:"participant,omitempty"`
	BannedRights  *ChatBannedRights      `protobuf:"bytes,5,opt,name=banned_rights,json=bannedRights,proto3" json:"banned_rights,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsEditBanned) Reset() {
	*x = TLChannelsEditBanned{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[467]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsEditBanned) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsEditBanned) ProtoMessage() {}

func (x *TLChannelsEditBanned) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[467]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsEditBanned.ProtoReflect.Descriptor instead.
func (*TLChannelsEditBanned) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{467}
}

func (x *TLChannelsEditBanned) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsEditBanned) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsEditBanned) GetParticipant() *InputPeer {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *TLChannelsEditBanned) GetBannedRights() *ChatBannedRights {
	if x != nil {
		return x.BannedRights
	}
	return nil
}

type TLChannelsGetAdminLog struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Constructor   TLConstructor                `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel                `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	Q             string                       `protobuf:"bytes,4,opt,name=q,proto3" json:"q,omitempty"`
	EventsFilter  *ChannelAdminLogEventsFilter `protobuf:"bytes,5,opt,name=events_filter,json=eventsFilter,proto3" json:"events_filter,omitempty"`
	Admins        []*InputUser                 `protobuf:"bytes,6,rep,name=admins,proto3" json:"admins,omitempty"`
	MaxId         int64                        `protobuf:"varint,7,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	MinId         int64                        `protobuf:"varint,8,opt,name=min_id,json=minId,proto3" json:"min_id,omitempty"`
	Limit         int32                        `protobuf:"varint,9,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsGetAdminLog) Reset() {
	*x = TLChannelsGetAdminLog{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[468]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsGetAdminLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsGetAdminLog) ProtoMessage() {}

func (x *TLChannelsGetAdminLog) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[468]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsGetAdminLog.ProtoReflect.Descriptor instead.
func (*TLChannelsGetAdminLog) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{468}
}

func (x *TLChannelsGetAdminLog) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsGetAdminLog) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsGetAdminLog) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *TLChannelsGetAdminLog) GetEventsFilter() *ChannelAdminLogEventsFilter {
	if x != nil {
		return x.EventsFilter
	}
	return nil
}

func (x *TLChannelsGetAdminLog) GetAdmins() []*InputUser {
	if x != nil {
		return x.Admins
	}
	return nil
}

func (x *TLChannelsGetAdminLog) GetMaxId() int64 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

func (x *TLChannelsGetAdminLog) GetMinId() int64 {
	if x != nil {
		return x.MinId
	}
	return 0
}

func (x *TLChannelsGetAdminLog) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TLChannelsSetStickers struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	Stickerset    *InputStickerSet       `protobuf:"bytes,4,opt,name=stickerset,proto3" json:"stickerset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsSetStickers) Reset() {
	*x = TLChannelsSetStickers{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[469]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsSetStickers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsSetStickers) ProtoMessage() {}

func (x *TLChannelsSetStickers) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[469]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsSetStickers.ProtoReflect.Descriptor instead.
func (*TLChannelsSetStickers) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{469}
}

func (x *TLChannelsSetStickers) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsSetStickers) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsSetStickers) GetStickerset() *InputStickerSet {
	if x != nil {
		return x.Stickerset
	}
	return nil
}

type TLChannelsReadMessageContents struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	Id            []int32                `protobuf:"varint,4,rep,packed,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsReadMessageContents) Reset() {
	*x = TLChannelsReadMessageContents{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[470]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsReadMessageContents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsReadMessageContents) ProtoMessage() {}

func (x *TLChannelsReadMessageContents) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[470]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsReadMessageContents.ProtoReflect.Descriptor instead.
func (*TLChannelsReadMessageContents) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{470}
}

func (x *TLChannelsReadMessageContents) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsReadMessageContents) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsReadMessageContents) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

type TLChannelsDeleteHistory9BAA9647 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	ForEveryone   bool                   `protobuf:"varint,3,opt,name=for_everyone,json=forEveryone,proto3" json:"for_everyone,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,4,opt,name=channel,proto3" json:"channel,omitempty"`
	MaxId         int32                  `protobuf:"varint,5,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsDeleteHistory9BAA9647) Reset() {
	*x = TLChannelsDeleteHistory9BAA9647{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[471]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsDeleteHistory9BAA9647) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsDeleteHistory9BAA9647) ProtoMessage() {}

func (x *TLChannelsDeleteHistory9BAA9647) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[471]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsDeleteHistory9BAA9647.ProtoReflect.Descriptor instead.
func (*TLChannelsDeleteHistory9BAA9647) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{471}
}

func (x *TLChannelsDeleteHistory9BAA9647) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsDeleteHistory9BAA9647) GetForEveryone() bool {
	if x != nil {
		return x.ForEveryone
	}
	return false
}

func (x *TLChannelsDeleteHistory9BAA9647) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsDeleteHistory9BAA9647) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

type TLChannelsTogglePreHistoryHidden struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	Enabled       *Bool                  `protobuf:"bytes,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsTogglePreHistoryHidden) Reset() {
	*x = TLChannelsTogglePreHistoryHidden{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[472]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsTogglePreHistoryHidden) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsTogglePreHistoryHidden) ProtoMessage() {}

func (x *TLChannelsTogglePreHistoryHidden) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[472]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsTogglePreHistoryHidden.ProtoReflect.Descriptor instead.
func (*TLChannelsTogglePreHistoryHidden) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{472}
}

func (x *TLChannelsTogglePreHistoryHidden) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsTogglePreHistoryHidden) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsTogglePreHistoryHidden) GetEnabled() *Bool {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type TLChannelsGetLeftChannels struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Offset        int32                  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsGetLeftChannels) Reset() {
	*x = TLChannelsGetLeftChannels{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[473]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsGetLeftChannels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsGetLeftChannels) ProtoMessage() {}

func (x *TLChannelsGetLeftChannels) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[473]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsGetLeftChannels.ProtoReflect.Descriptor instead.
func (*TLChannelsGetLeftChannels) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{473}
}

func (x *TLChannelsGetLeftChannels) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsGetLeftChannels) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type TLChannelsGetGroupsForDiscussion struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsGetGroupsForDiscussion) Reset() {
	*x = TLChannelsGetGroupsForDiscussion{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[474]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsGetGroupsForDiscussion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsGetGroupsForDiscussion) ProtoMessage() {}

func (x *TLChannelsGetGroupsForDiscussion) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[474]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsGetGroupsForDiscussion.ProtoReflect.Descriptor instead.
func (*TLChannelsGetGroupsForDiscussion) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{474}
}

func (x *TLChannelsGetGroupsForDiscussion) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLChannelsSetDiscussionGroup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Broadcast     *InputChannel          `protobuf:"bytes,3,opt,name=broadcast,proto3" json:"broadcast,omitempty"`
	Group         *InputChannel          `protobuf:"bytes,4,opt,name=group,proto3" json:"group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsSetDiscussionGroup) Reset() {
	*x = TLChannelsSetDiscussionGroup{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[475]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsSetDiscussionGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsSetDiscussionGroup) ProtoMessage() {}

func (x *TLChannelsSetDiscussionGroup) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[475]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsSetDiscussionGroup.ProtoReflect.Descriptor instead.
func (*TLChannelsSetDiscussionGroup) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{475}
}

func (x *TLChannelsSetDiscussionGroup) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsSetDiscussionGroup) GetBroadcast() *InputChannel {
	if x != nil {
		return x.Broadcast
	}
	return nil
}

func (x *TLChannelsSetDiscussionGroup) GetGroup() *InputChannel {
	if x != nil {
		return x.Group
	}
	return nil
}

type TLChannelsEditCreator struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	UserId        *InputUser             `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Password      *InputCheckPasswordSRP `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsEditCreator) Reset() {
	*x = TLChannelsEditCreator{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[476]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsEditCreator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsEditCreator) ProtoMessage() {}

func (x *TLChannelsEditCreator) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[476]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsEditCreator.ProtoReflect.Descriptor instead.
func (*TLChannelsEditCreator) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{476}
}

func (x *TLChannelsEditCreator) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsEditCreator) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsEditCreator) GetUserId() *InputUser {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *TLChannelsEditCreator) GetPassword() *InputCheckPasswordSRP {
	if x != nil {
		return x.Password
	}
	return nil
}

type TLChannelsEditLocation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	GeoPoint      *InputGeoPoint         `protobuf:"bytes,4,opt,name=geo_point,json=geoPoint,proto3" json:"geo_point,omitempty"`
	Address       string                 `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsEditLocation) Reset() {
	*x = TLChannelsEditLocation{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[477]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsEditLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsEditLocation) ProtoMessage() {}

func (x *TLChannelsEditLocation) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[477]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsEditLocation.ProtoReflect.Descriptor instead.
func (*TLChannelsEditLocation) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{477}
}

func (x *TLChannelsEditLocation) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsEditLocation) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsEditLocation) GetGeoPoint() *InputGeoPoint {
	if x != nil {
		return x.GeoPoint
	}
	return nil
}

func (x *TLChannelsEditLocation) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type TLChannelsToggleSlowMode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	Seconds       int32                  `protobuf:"varint,4,opt,name=seconds,proto3" json:"seconds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsToggleSlowMode) Reset() {
	*x = TLChannelsToggleSlowMode{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[478]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsToggleSlowMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsToggleSlowMode) ProtoMessage() {}

func (x *TLChannelsToggleSlowMode) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[478]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsToggleSlowMode.ProtoReflect.Descriptor instead.
func (*TLChannelsToggleSlowMode) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{478}
}

func (x *TLChannelsToggleSlowMode) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsToggleSlowMode) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsToggleSlowMode) GetSeconds() int32 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

type TLChannelsGetInactiveChannels struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsGetInactiveChannels) Reset() {
	*x = TLChannelsGetInactiveChannels{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[479]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsGetInactiveChannels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsGetInactiveChannels) ProtoMessage() {}

func (x *TLChannelsGetInactiveChannels) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[479]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsGetInactiveChannels.ProtoReflect.Descriptor instead.
func (*TLChannelsGetInactiveChannels) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{479}
}

func (x *TLChannelsGetInactiveChannels) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLChannelsConvertToGigagroup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsConvertToGigagroup) Reset() {
	*x = TLChannelsConvertToGigagroup{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[480]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsConvertToGigagroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsConvertToGigagroup) ProtoMessage() {}

func (x *TLChannelsConvertToGigagroup) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[480]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsConvertToGigagroup.ProtoReflect.Descriptor instead.
func (*TLChannelsConvertToGigagroup) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{480}
}

func (x *TLChannelsConvertToGigagroup) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsConvertToGigagroup) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

type TLChannelsGetSendAs struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Constructor      TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	ForPaidReactions bool                   `protobuf:"varint,3,opt,name=for_paid_reactions,json=forPaidReactions,proto3" json:"for_paid_reactions,omitempty"`
	Peer             *InputPeer             `protobuf:"bytes,4,opt,name=peer,proto3" json:"peer,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TLChannelsGetSendAs) Reset() {
	*x = TLChannelsGetSendAs{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[481]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsGetSendAs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsGetSendAs) ProtoMessage() {}

func (x *TLChannelsGetSendAs) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[481]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsGetSendAs.ProtoReflect.Descriptor instead.
func (*TLChannelsGetSendAs) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{481}
}

func (x *TLChannelsGetSendAs) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsGetSendAs) GetForPaidReactions() bool {
	if x != nil {
		return x.ForPaidReactions
	}
	return false
}

func (x *TLChannelsGetSendAs) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

type TLChannelsDeleteParticipantHistory struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	Participant   *InputPeer             `protobuf:"bytes,4,opt,name=participant,proto3" json:"participant,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsDeleteParticipantHistory) Reset() {
	*x = TLChannelsDeleteParticipantHistory{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[482]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsDeleteParticipantHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsDeleteParticipantHistory) ProtoMessage() {}

func (x *TLChannelsDeleteParticipantHistory) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[482]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsDeleteParticipantHistory.ProtoReflect.Descriptor instead.
func (*TLChannelsDeleteParticipantHistory) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{482}
}

func (x *TLChannelsDeleteParticipantHistory) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsDeleteParticipantHistory) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsDeleteParticipantHistory) GetParticipant() *InputPeer {
	if x != nil {
		return x.Participant
	}
	return nil
}

type TLChannelsToggleJoinToSend struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	Enabled       *Bool                  `protobuf:"bytes,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsToggleJoinToSend) Reset() {
	*x = TLChannelsToggleJoinToSend{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[483]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsToggleJoinToSend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsToggleJoinToSend) ProtoMessage() {}

func (x *TLChannelsToggleJoinToSend) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[483]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsToggleJoinToSend.ProtoReflect.Descriptor instead.
func (*TLChannelsToggleJoinToSend) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{483}
}

func (x *TLChannelsToggleJoinToSend) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsToggleJoinToSend) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsToggleJoinToSend) GetEnabled() *Bool {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type TLChannelsToggleJoinRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	Enabled       *Bool                  `protobuf:"bytes,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsToggleJoinRequest) Reset() {
	*x = TLChannelsToggleJoinRequest{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[484]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsToggleJoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsToggleJoinRequest) ProtoMessage() {}

func (x *TLChannelsToggleJoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[484]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsToggleJoinRequest.ProtoReflect.Descriptor instead.
func (*TLChannelsToggleJoinRequest) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{484}
}

func (x *TLChannelsToggleJoinRequest) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsToggleJoinRequest) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsToggleJoinRequest) GetEnabled() *Bool {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type TLChannelsReorderUsernames struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	Order         []string               `protobuf:"bytes,4,rep,name=order,proto3" json:"order,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsReorderUsernames) Reset() {
	*x = TLChannelsReorderUsernames{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[485]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsReorderUsernames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsReorderUsernames) ProtoMessage() {}

func (x *TLChannelsReorderUsernames) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[485]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsReorderUsernames.ProtoReflect.Descriptor instead.
func (*TLChannelsReorderUsernames) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{485}
}

func (x *TLChannelsReorderUsernames) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsReorderUsernames) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsReorderUsernames) GetOrder() []string {
	if x != nil {
		return x.Order
	}
	return nil
}

type TLChannelsToggleUsername struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	Username      string                 `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	Active        *Bool                  `protobuf:"bytes,5,opt,name=active,proto3" json:"active,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsToggleUsername) Reset() {
	*x = TLChannelsToggleUsername{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[486]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsToggleUsername) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsToggleUsername) ProtoMessage() {}

func (x *TLChannelsToggleUsername) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[486]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsToggleUsername.ProtoReflect.Descriptor instead.
func (*TLChannelsToggleUsername) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{486}
}

func (x *TLChannelsToggleUsername) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsToggleUsername) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsToggleUsername) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *TLChannelsToggleUsername) GetActive() *Bool {
	if x != nil {
		return x.Active
	}
	return nil
}

type TLChannelsDeactivateAllUsernames struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsDeactivateAllUsernames) Reset() {
	*x = TLChannelsDeactivateAllUsernames{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[487]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsDeactivateAllUsernames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsDeactivateAllUsernames) ProtoMessage() {}

func (x *TLChannelsDeactivateAllUsernames) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[487]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsDeactivateAllUsernames.ProtoReflect.Descriptor instead.
func (*TLChannelsDeactivateAllUsernames) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{487}
}

func (x *TLChannelsDeactivateAllUsernames) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsDeactivateAllUsernames) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

type TLChannelsToggleForum struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	Enabled       *Bool                  `protobuf:"bytes,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsToggleForum) Reset() {
	*x = TLChannelsToggleForum{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[488]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsToggleForum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsToggleForum) ProtoMessage() {}

func (x *TLChannelsToggleForum) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[488]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsToggleForum.ProtoReflect.Descriptor instead.
func (*TLChannelsToggleForum) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{488}
}

func (x *TLChannelsToggleForum) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsToggleForum) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsToggleForum) GetEnabled() *Bool {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type TLChannelsCreateForumTopic struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	Title         string                 `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	IconColor     *wrapperspb.Int32Value `protobuf:"bytes,5,opt,name=icon_color,json=iconColor,proto3" json:"icon_color,omitempty"`
	IconEmojiId   *wrapperspb.Int64Value `protobuf:"bytes,6,opt,name=icon_emoji_id,json=iconEmojiId,proto3" json:"icon_emoji_id,omitempty"`
	RandomId      int64                  `protobuf:"varint,7,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	SendAs        *InputPeer             `protobuf:"bytes,8,opt,name=send_as,json=sendAs,proto3" json:"send_as,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsCreateForumTopic) Reset() {
	*x = TLChannelsCreateForumTopic{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[489]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsCreateForumTopic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsCreateForumTopic) ProtoMessage() {}

func (x *TLChannelsCreateForumTopic) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[489]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsCreateForumTopic.ProtoReflect.Descriptor instead.
func (*TLChannelsCreateForumTopic) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{489}
}

func (x *TLChannelsCreateForumTopic) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsCreateForumTopic) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsCreateForumTopic) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TLChannelsCreateForumTopic) GetIconColor() *wrapperspb.Int32Value {
	if x != nil {
		return x.IconColor
	}
	return nil
}

func (x *TLChannelsCreateForumTopic) GetIconEmojiId() *wrapperspb.Int64Value {
	if x != nil {
		return x.IconEmojiId
	}
	return nil
}

func (x *TLChannelsCreateForumTopic) GetRandomId() int64 {
	if x != nil {
		return x.RandomId
	}
	return 0
}

func (x *TLChannelsCreateForumTopic) GetSendAs() *InputPeer {
	if x != nil {
		return x.SendAs
	}
	return nil
}

type TLChannelsGetForumTopics struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Constructor   TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel           `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	Q             *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=q,proto3" json:"q,omitempty"`
	OffsetDate    int32                   `protobuf:"varint,5,opt,name=offset_date,json=offsetDate,proto3" json:"offset_date,omitempty"`
	OffsetId      int32                   `protobuf:"varint,6,opt,name=offset_id,json=offsetId,proto3" json:"offset_id,omitempty"`
	OffsetTopic   int32                   `protobuf:"varint,7,opt,name=offset_topic,json=offsetTopic,proto3" json:"offset_topic,omitempty"`
	Limit         int32                   `protobuf:"varint,8,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsGetForumTopics) Reset() {
	*x = TLChannelsGetForumTopics{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[490]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsGetForumTopics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsGetForumTopics) ProtoMessage() {}

func (x *TLChannelsGetForumTopics) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[490]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsGetForumTopics.ProtoReflect.Descriptor instead.
func (*TLChannelsGetForumTopics) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{490}
}

func (x *TLChannelsGetForumTopics) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsGetForumTopics) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsGetForumTopics) GetQ() *wrapperspb.StringValue {
	if x != nil {
		return x.Q
	}
	return nil
}

func (x *TLChannelsGetForumTopics) GetOffsetDate() int32 {
	if x != nil {
		return x.OffsetDate
	}
	return 0
}

func (x *TLChannelsGetForumTopics) GetOffsetId() int32 {
	if x != nil {
		return x.OffsetId
	}
	return 0
}

func (x *TLChannelsGetForumTopics) GetOffsetTopic() int32 {
	if x != nil {
		return x.OffsetTopic
	}
	return 0
}

func (x *TLChannelsGetForumTopics) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TLChannelsGetForumTopicsByID struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	Topics        []int32                `protobuf:"varint,4,rep,packed,name=topics,proto3" json:"topics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsGetForumTopicsByID) Reset() {
	*x = TLChannelsGetForumTopicsByID{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[491]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsGetForumTopicsByID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsGetForumTopicsByID) ProtoMessage() {}

func (x *TLChannelsGetForumTopicsByID) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[491]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsGetForumTopicsByID.ProtoReflect.Descriptor instead.
func (*TLChannelsGetForumTopicsByID) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{491}
}

func (x *TLChannelsGetForumTopicsByID) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsGetForumTopicsByID) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsGetForumTopicsByID) GetTopics() []int32 {
	if x != nil {
		return x.Topics
	}
	return nil
}

type TLChannelsEditForumTopic struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Constructor   TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel           `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	TopicId       int32                   `protobuf:"varint,4,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Title         *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	IconEmojiId   *wrapperspb.Int64Value  `protobuf:"bytes,6,opt,name=icon_emoji_id,json=iconEmojiId,proto3" json:"icon_emoji_id,omitempty"`
	Closed        *Bool                   `protobuf:"bytes,7,opt,name=closed,proto3" json:"closed,omitempty"`
	Hidden        *Bool                   `protobuf:"bytes,8,opt,name=hidden,proto3" json:"hidden,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsEditForumTopic) Reset() {
	*x = TLChannelsEditForumTopic{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[492]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsEditForumTopic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsEditForumTopic) ProtoMessage() {}

func (x *TLChannelsEditForumTopic) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[492]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsEditForumTopic.ProtoReflect.Descriptor instead.
func (*TLChannelsEditForumTopic) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{492}
}

func (x *TLChannelsEditForumTopic) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsEditForumTopic) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsEditForumTopic) GetTopicId() int32 {
	if x != nil {
		return x.TopicId
	}
	return 0
}

func (x *TLChannelsEditForumTopic) GetTitle() *wrapperspb.StringValue {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *TLChannelsEditForumTopic) GetIconEmojiId() *wrapperspb.Int64Value {
	if x != nil {
		return x.IconEmojiId
	}
	return nil
}

func (x *TLChannelsEditForumTopic) GetClosed() *Bool {
	if x != nil {
		return x.Closed
	}
	return nil
}

func (x *TLChannelsEditForumTopic) GetHidden() *Bool {
	if x != nil {
		return x.Hidden
	}
	return nil
}

type TLChannelsUpdatePinnedForumTopic struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	TopicId       int32                  `protobuf:"varint,4,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Pinned        *Bool                  `protobuf:"bytes,5,opt,name=pinned,proto3" json:"pinned,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsUpdatePinnedForumTopic) Reset() {
	*x = TLChannelsUpdatePinnedForumTopic{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[493]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsUpdatePinnedForumTopic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsUpdatePinnedForumTopic) ProtoMessage() {}

func (x *TLChannelsUpdatePinnedForumTopic) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[493]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsUpdatePinnedForumTopic.ProtoReflect.Descriptor instead.
func (*TLChannelsUpdatePinnedForumTopic) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{493}
}

func (x *TLChannelsUpdatePinnedForumTopic) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsUpdatePinnedForumTopic) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsUpdatePinnedForumTopic) GetTopicId() int32 {
	if x != nil {
		return x.TopicId
	}
	return 0
}

func (x *TLChannelsUpdatePinnedForumTopic) GetPinned() *Bool {
	if x != nil {
		return x.Pinned
	}
	return nil
}

type TLChannelsDeleteTopicHistory struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	TopMsgId      int32                  `protobuf:"varint,4,opt,name=top_msg_id,json=topMsgId,proto3" json:"top_msg_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsDeleteTopicHistory) Reset() {
	*x = TLChannelsDeleteTopicHistory{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[494]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsDeleteTopicHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsDeleteTopicHistory) ProtoMessage() {}

func (x *TLChannelsDeleteTopicHistory) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[494]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsDeleteTopicHistory.ProtoReflect.Descriptor instead.
func (*TLChannelsDeleteTopicHistory) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{494}
}

func (x *TLChannelsDeleteTopicHistory) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsDeleteTopicHistory) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsDeleteTopicHistory) GetTopMsgId() int32 {
	if x != nil {
		return x.TopMsgId
	}
	return 0
}

type TLChannelsReorderPinnedForumTopics struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Force         bool                   `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,4,opt,name=channel,proto3" json:"channel,omitempty"`
	Order         []int32                `protobuf:"varint,5,rep,packed,name=order,proto3" json:"order,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsReorderPinnedForumTopics) Reset() {
	*x = TLChannelsReorderPinnedForumTopics{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[495]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsReorderPinnedForumTopics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsReorderPinnedForumTopics) ProtoMessage() {}

func (x *TLChannelsReorderPinnedForumTopics) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[495]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsReorderPinnedForumTopics.ProtoReflect.Descriptor instead.
func (*TLChannelsReorderPinnedForumTopics) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{495}
}

func (x *TLChannelsReorderPinnedForumTopics) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsReorderPinnedForumTopics) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *TLChannelsReorderPinnedForumTopics) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsReorderPinnedForumTopics) GetOrder() []int32 {
	if x != nil {
		return x.Order
	}
	return nil
}

type TLChannelsToggleAntiSpam struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	Enabled       *Bool                  `protobuf:"bytes,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsToggleAntiSpam) Reset() {
	*x = TLChannelsToggleAntiSpam{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[496]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsToggleAntiSpam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsToggleAntiSpam) ProtoMessage() {}

func (x *TLChannelsToggleAntiSpam) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[496]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsToggleAntiSpam.ProtoReflect.Descriptor instead.
func (*TLChannelsToggleAntiSpam) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{496}
}

func (x *TLChannelsToggleAntiSpam) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsToggleAntiSpam) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsToggleAntiSpam) GetEnabled() *Bool {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type TLChannelsReportAntiSpamFalsePositive struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	MsgId         int32                  `protobuf:"varint,4,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsReportAntiSpamFalsePositive) Reset() {
	*x = TLChannelsReportAntiSpamFalsePositive{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[497]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsReportAntiSpamFalsePositive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsReportAntiSpamFalsePositive) ProtoMessage() {}

func (x *TLChannelsReportAntiSpamFalsePositive) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[497]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsReportAntiSpamFalsePositive.ProtoReflect.Descriptor instead.
func (*TLChannelsReportAntiSpamFalsePositive) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{497}
}

func (x *TLChannelsReportAntiSpamFalsePositive) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsReportAntiSpamFalsePositive) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsReportAntiSpamFalsePositive) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

type TLChannelsToggleParticipantsHidden struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	Enabled       *Bool                  `protobuf:"bytes,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsToggleParticipantsHidden) Reset() {
	*x = TLChannelsToggleParticipantsHidden{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[498]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsToggleParticipantsHidden) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsToggleParticipantsHidden) ProtoMessage() {}

func (x *TLChannelsToggleParticipantsHidden) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[498]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsToggleParticipantsHidden.ProtoReflect.Descriptor instead.
func (*TLChannelsToggleParticipantsHidden) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{498}
}

func (x *TLChannelsToggleParticipantsHidden) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsToggleParticipantsHidden) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsToggleParticipantsHidden) GetEnabled() *Bool {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type TLChannelsUpdateColor struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Constructor       TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	ForProfile        bool                   `protobuf:"varint,3,opt,name=for_profile,json=forProfile,proto3" json:"for_profile,omitempty"`
	Channel           *InputChannel          `protobuf:"bytes,4,opt,name=channel,proto3" json:"channel,omitempty"`
	Color_FLAGINT32   *wrapperspb.Int32Value `protobuf:"bytes,5,opt,name=color_FLAGINT32,json=colorFLAGINT32,proto3" json:"color_FLAGINT32,omitempty"`
	BackgroundEmojiId *wrapperspb.Int64Value `protobuf:"bytes,6,opt,name=background_emoji_id,json=backgroundEmojiId,proto3" json:"background_emoji_id,omitempty"`
	Color_INT32       int32                  `protobuf:"varint,7,opt,name=color_INT32,json=colorINT32,proto3" json:"color_INT32,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TLChannelsUpdateColor) Reset() {
	*x = TLChannelsUpdateColor{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[499]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsUpdateColor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsUpdateColor) ProtoMessage() {}

func (x *TLChannelsUpdateColor) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[499]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsUpdateColor.ProtoReflect.Descriptor instead.
func (*TLChannelsUpdateColor) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{499}
}

func (x *TLChannelsUpdateColor) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsUpdateColor) GetForProfile() bool {
	if x != nil {
		return x.ForProfile
	}
	return false
}

func (x *TLChannelsUpdateColor) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsUpdateColor) GetColor_FLAGINT32() *wrapperspb.Int32Value {
	if x != nil {
		return x.Color_FLAGINT32
	}
	return nil
}

func (x *TLChannelsUpdateColor) GetBackgroundEmojiId() *wrapperspb.Int64Value {
	if x != nil {
		return x.BackgroundEmojiId
	}
	return nil
}

func (x *TLChannelsUpdateColor) GetColor_INT32() int32 {
	if x != nil {
		return x.Color_INT32
	}
	return 0
}

type TLChannelsToggleViewForumAsMessages struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	Enabled       *Bool                  `protobuf:"bytes,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsToggleViewForumAsMessages) Reset() {
	*x = TLChannelsToggleViewForumAsMessages{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[500]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsToggleViewForumAsMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsToggleViewForumAsMessages) ProtoMessage() {}

func (x *TLChannelsToggleViewForumAsMessages) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[500]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsToggleViewForumAsMessages.ProtoReflect.Descriptor instead.
func (*TLChannelsToggleViewForumAsMessages) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{500}
}

func (x *TLChannelsToggleViewForumAsMessages) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsToggleViewForumAsMessages) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsToggleViewForumAsMessages) GetEnabled() *Bool {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type TLChannelsGetChannelRecommendations struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsGetChannelRecommendations) Reset() {
	*x = TLChannelsGetChannelRecommendations{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[501]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsGetChannelRecommendations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsGetChannelRecommendations) ProtoMessage() {}

func (x *TLChannelsGetChannelRecommendations) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[501]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsGetChannelRecommendations.ProtoReflect.Descriptor instead.
func (*TLChannelsGetChannelRecommendations) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{501}
}

func (x *TLChannelsGetChannelRecommendations) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsGetChannelRecommendations) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

type TLChannelsUpdateEmojiStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	EmojiStatus   *EmojiStatus           `protobuf:"bytes,4,opt,name=emoji_status,json=emojiStatus,proto3" json:"emoji_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsUpdateEmojiStatus) Reset() {
	*x = TLChannelsUpdateEmojiStatus{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[502]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsUpdateEmojiStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsUpdateEmojiStatus) ProtoMessage() {}

func (x *TLChannelsUpdateEmojiStatus) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[502]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsUpdateEmojiStatus.ProtoReflect.Descriptor instead.
func (*TLChannelsUpdateEmojiStatus) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{502}
}

func (x *TLChannelsUpdateEmojiStatus) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsUpdateEmojiStatus) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsUpdateEmojiStatus) GetEmojiStatus() *EmojiStatus {
	if x != nil {
		return x.EmojiStatus
	}
	return nil
}

type TLChannelsSetBoostsToUnblockRestrictions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	Boosts        int32                  `protobuf:"varint,4,opt,name=boosts,proto3" json:"boosts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsSetBoostsToUnblockRestrictions) Reset() {
	*x = TLChannelsSetBoostsToUnblockRestrictions{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[503]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsSetBoostsToUnblockRestrictions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsSetBoostsToUnblockRestrictions) ProtoMessage() {}

func (x *TLChannelsSetBoostsToUnblockRestrictions) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[503]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsSetBoostsToUnblockRestrictions.ProtoReflect.Descriptor instead.
func (*TLChannelsSetBoostsToUnblockRestrictions) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{503}
}

func (x *TLChannelsSetBoostsToUnblockRestrictions) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsSetBoostsToUnblockRestrictions) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsSetBoostsToUnblockRestrictions) GetBoosts() int32 {
	if x != nil {
		return x.Boosts
	}
	return 0
}

type TLChannelsSetEmojiStickers struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	Stickerset    *InputStickerSet       `protobuf:"bytes,4,opt,name=stickerset,proto3" json:"stickerset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsSetEmojiStickers) Reset() {
	*x = TLChannelsSetEmojiStickers{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[504]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsSetEmojiStickers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsSetEmojiStickers) ProtoMessage() {}

func (x *TLChannelsSetEmojiStickers) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[504]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsSetEmojiStickers.ProtoReflect.Descriptor instead.
func (*TLChannelsSetEmojiStickers) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{504}
}

func (x *TLChannelsSetEmojiStickers) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsSetEmojiStickers) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsSetEmojiStickers) GetStickerset() *InputStickerSet {
	if x != nil {
		return x.Stickerset
	}
	return nil
}

type TLChannelsRestrictSponsoredMessages struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	Restricted    *Bool                  `protobuf:"bytes,4,opt,name=restricted,proto3" json:"restricted,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsRestrictSponsoredMessages) Reset() {
	*x = TLChannelsRestrictSponsoredMessages{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[505]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsRestrictSponsoredMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsRestrictSponsoredMessages) ProtoMessage() {}

func (x *TLChannelsRestrictSponsoredMessages) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[505]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsRestrictSponsoredMessages.ProtoReflect.Descriptor instead.
func (*TLChannelsRestrictSponsoredMessages) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{505}
}

func (x *TLChannelsRestrictSponsoredMessages) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsRestrictSponsoredMessages) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsRestrictSponsoredMessages) GetRestricted() *Bool {
	if x != nil {
		return x.Restricted
	}
	return nil
}

type TLChannelsSearchPosts struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Hashtag       string                 `protobuf:"bytes,3,opt,name=hashtag,proto3" json:"hashtag,omitempty"`
	OffsetRate    int32                  `protobuf:"varint,4,opt,name=offset_rate,json=offsetRate,proto3" json:"offset_rate,omitempty"`
	OffsetPeer    *InputPeer             `protobuf:"bytes,5,opt,name=offset_peer,json=offsetPeer,proto3" json:"offset_peer,omitempty"`
	OffsetId      int32                  `protobuf:"varint,6,opt,name=offset_id,json=offsetId,proto3" json:"offset_id,omitempty"`
	Limit         int32                  `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsSearchPosts) Reset() {
	*x = TLChannelsSearchPosts{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[506]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsSearchPosts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsSearchPosts) ProtoMessage() {}

func (x *TLChannelsSearchPosts) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[506]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsSearchPosts.ProtoReflect.Descriptor instead.
func (*TLChannelsSearchPosts) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{506}
}

func (x *TLChannelsSearchPosts) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsSearchPosts) GetHashtag() string {
	if x != nil {
		return x.Hashtag
	}
	return ""
}

func (x *TLChannelsSearchPosts) GetOffsetRate() int32 {
	if x != nil {
		return x.OffsetRate
	}
	return 0
}

func (x *TLChannelsSearchPosts) GetOffsetPeer() *InputPeer {
	if x != nil {
		return x.OffsetPeer
	}
	return nil
}

func (x *TLChannelsSearchPosts) GetOffsetId() int32 {
	if x != nil {
		return x.OffsetId
	}
	return 0
}

func (x *TLChannelsSearchPosts) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TLChannelsUpdatePaidMessagesPrice struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Constructor           TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel               *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	SendPaidMessagesStars int64                  `protobuf:"varint,4,opt,name=send_paid_messages_stars,json=sendPaidMessagesStars,proto3" json:"send_paid_messages_stars,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *TLChannelsUpdatePaidMessagesPrice) Reset() {
	*x = TLChannelsUpdatePaidMessagesPrice{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[507]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsUpdatePaidMessagesPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsUpdatePaidMessagesPrice) ProtoMessage() {}

func (x *TLChannelsUpdatePaidMessagesPrice) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[507]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsUpdatePaidMessagesPrice.ProtoReflect.Descriptor instead.
func (*TLChannelsUpdatePaidMessagesPrice) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{507}
}

func (x *TLChannelsUpdatePaidMessagesPrice) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsUpdatePaidMessagesPrice) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsUpdatePaidMessagesPrice) GetSendPaidMessagesStars() int64 {
	if x != nil {
		return x.SendPaidMessagesStars
	}
	return 0
}

type TLBotsSendCustomRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	CustomMethod  string                 `protobuf:"bytes,3,opt,name=custom_method,json=customMethod,proto3" json:"custom_method,omitempty"`
	Params        *DataJSON              `protobuf:"bytes,4,opt,name=params,proto3" json:"params,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLBotsSendCustomRequest) Reset() {
	*x = TLBotsSendCustomRequest{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[508]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLBotsSendCustomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLBotsSendCustomRequest) ProtoMessage() {}

func (x *TLBotsSendCustomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[508]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLBotsSendCustomRequest.ProtoReflect.Descriptor instead.
func (*TLBotsSendCustomRequest) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{508}
}

func (x *TLBotsSendCustomRequest) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLBotsSendCustomRequest) GetCustomMethod() string {
	if x != nil {
		return x.CustomMethod
	}
	return ""
}

func (x *TLBotsSendCustomRequest) GetParams() *DataJSON {
	if x != nil {
		return x.Params
	}
	return nil
}

type TLBotsAnswerWebhookJSONQuery struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	QueryId       int64                  `protobuf:"varint,3,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	Data          *DataJSON              `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLBotsAnswerWebhookJSONQuery) Reset() {
	*x = TLBotsAnswerWebhookJSONQuery{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[509]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLBotsAnswerWebhookJSONQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLBotsAnswerWebhookJSONQuery) ProtoMessage() {}

func (x *TLBotsAnswerWebhookJSONQuery) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[509]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLBotsAnswerWebhookJSONQuery.ProtoReflect.Descriptor instead.
func (*TLBotsAnswerWebhookJSONQuery) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{509}
}

func (x *TLBotsAnswerWebhookJSONQuery) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLBotsAnswerWebhookJSONQuery) GetQueryId() int64 {
	if x != nil {
		return x.QueryId
	}
	return 0
}

func (x *TLBotsAnswerWebhookJSONQuery) GetData() *DataJSON {
	if x != nil {
		return x.Data
	}
	return nil
}

type TLBotsSetBotCommands struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Scope         *BotCommandScope       `protobuf:"bytes,3,opt,name=scope,proto3" json:"scope,omitempty"`
	LangCode      string                 `protobuf:"bytes,4,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
	Commands      []*BotCommand          `protobuf:"bytes,5,rep,name=commands,proto3" json:"commands,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLBotsSetBotCommands) Reset() {
	*x = TLBotsSetBotCommands{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[510]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLBotsSetBotCommands) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLBotsSetBotCommands) ProtoMessage() {}

func (x *TLBotsSetBotCommands) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[510]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLBotsSetBotCommands.ProtoReflect.Descriptor instead.
func (*TLBotsSetBotCommands) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{510}
}

func (x *TLBotsSetBotCommands) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLBotsSetBotCommands) GetScope() *BotCommandScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *TLBotsSetBotCommands) GetLangCode() string {
	if x != nil {
		return x.LangCode
	}
	return ""
}

func (x *TLBotsSetBotCommands) GetCommands() []*BotCommand {
	if x != nil {
		return x.Commands
	}
	return nil
}

type TLBotsResetBotCommands struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Scope         *BotCommandScope       `protobuf:"bytes,3,opt,name=scope,proto3" json:"scope,omitempty"`
	LangCode      string                 `protobuf:"bytes,4,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLBotsResetBotCommands) Reset() {
	*x = TLBotsResetBotCommands{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[511]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLBotsResetBotCommands) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLBotsResetBotCommands) ProtoMessage() {}

func (x *TLBotsResetBotCommands) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[511]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLBotsResetBotCommands.ProtoReflect.Descriptor instead.
func (*TLBotsResetBotCommands) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{511}
}

func (x *TLBotsResetBotCommands) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLBotsResetBotCommands) GetScope() *BotCommandScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *TLBotsResetBotCommands) GetLangCode() string {
	if x != nil {
		return x.LangCode
	}
	return ""
}

type TLBotsGetBotCommands struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Scope         *BotCommandScope       `protobuf:"bytes,3,opt,name=scope,proto3" json:"scope,omitempty"`
	LangCode      string                 `protobuf:"bytes,4,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLBotsGetBotCommands) Reset() {
	*x = TLBotsGetBotCommands{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[512]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLBotsGetBotCommands) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLBotsGetBotCommands) ProtoMessage() {}

func (x *TLBotsGetBotCommands) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[512]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLBotsGetBotCommands.ProtoReflect.Descriptor instead.
func (*TLBotsGetBotCommands) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{512}
}

func (x *TLBotsGetBotCommands) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLBotsGetBotCommands) GetScope() *BotCommandScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *TLBotsGetBotCommands) GetLangCode() string {
	if x != nil {
		return x.LangCode
	}
	return ""
}

type TLBotsSetBotMenuButton struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	UserId        *InputUser             `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Button        *BotMenuButton         `protobuf:"bytes,4,opt,name=button,proto3" json:"button,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLBotsSetBotMenuButton) Reset() {
	*x = TLBotsSetBotMenuButton{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[513]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLBotsSetBotMenuButton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLBotsSetBotMenuButton) ProtoMessage() {}

func (x *TLBotsSetBotMenuButton) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[513]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLBotsSetBotMenuButton.ProtoReflect.Descriptor instead.
func (*TLBotsSetBotMenuButton) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{513}
}

func (x *TLBotsSetBotMenuButton) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLBotsSetBotMenuButton) GetUserId() *InputUser {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *TLBotsSetBotMenuButton) GetButton() *BotMenuButton {
	if x != nil {
		return x.Button
	}
	return nil
}

type TLBotsGetBotMenuButton struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	UserId        *InputUser             `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLBotsGetBotMenuButton) Reset() {
	*x = TLBotsGetBotMenuButton{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[514]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLBotsGetBotMenuButton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLBotsGetBotMenuButton) ProtoMessage() {}

func (x *TLBotsGetBotMenuButton) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[514]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLBotsGetBotMenuButton.ProtoReflect.Descriptor instead.
func (*TLBotsGetBotMenuButton) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{514}
}

func (x *TLBotsGetBotMenuButton) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLBotsGetBotMenuButton) GetUserId() *InputUser {
	if x != nil {
		return x.UserId
	}
	return nil
}

type TLBotsSetBotBroadcastDefaultAdminRights struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	AdminRights   *ChatAdminRights       `protobuf:"bytes,3,opt,name=admin_rights,json=adminRights,proto3" json:"admin_rights,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLBotsSetBotBroadcastDefaultAdminRights) Reset() {
	*x = TLBotsSetBotBroadcastDefaultAdminRights{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[515]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLBotsSetBotBroadcastDefaultAdminRights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLBotsSetBotBroadcastDefaultAdminRights) ProtoMessage() {}

func (x *TLBotsSetBotBroadcastDefaultAdminRights) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[515]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLBotsSetBotBroadcastDefaultAdminRights.ProtoReflect.Descriptor instead.
func (*TLBotsSetBotBroadcastDefaultAdminRights) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{515}
}

func (x *TLBotsSetBotBroadcastDefaultAdminRights) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLBotsSetBotBroadcastDefaultAdminRights) GetAdminRights() *ChatAdminRights {
	if x != nil {
		return x.AdminRights
	}
	return nil
}

type TLBotsSetBotGroupDefaultAdminRights struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	AdminRights   *ChatAdminRights       `protobuf:"bytes,3,opt,name=admin_rights,json=adminRights,proto3" json:"admin_rights,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLBotsSetBotGroupDefaultAdminRights) Reset() {
	*x = TLBotsSetBotGroupDefaultAdminRights{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[516]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLBotsSetBotGroupDefaultAdminRights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLBotsSetBotGroupDefaultAdminRights) ProtoMessage() {}

func (x *TLBotsSetBotGroupDefaultAdminRights) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[516]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLBotsSetBotGroupDefaultAdminRights.ProtoReflect.Descriptor instead.
func (*TLBotsSetBotGroupDefaultAdminRights) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{516}
}

func (x *TLBotsSetBotGroupDefaultAdminRights) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLBotsSetBotGroupDefaultAdminRights) GetAdminRights() *ChatAdminRights {
	if x != nil {
		return x.AdminRights
	}
	return nil
}

type TLBotsSetBotInfo struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Constructor   TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Bot           *InputUser              `protobuf:"bytes,3,opt,name=bot,proto3" json:"bot,omitempty"`
	LangCode      string                  `protobuf:"bytes,4,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
	Name          *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	About         *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=about,proto3" json:"about,omitempty"`
	Description   *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLBotsSetBotInfo) Reset() {
	*x = TLBotsSetBotInfo{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[517]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLBotsSetBotInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLBotsSetBotInfo) ProtoMessage() {}

func (x *TLBotsSetBotInfo) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[517]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLBotsSetBotInfo.ProtoReflect.Descriptor instead.
func (*TLBotsSetBotInfo) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{517}
}

func (x *TLBotsSetBotInfo) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLBotsSetBotInfo) GetBot() *InputUser {
	if x != nil {
		return x.Bot
	}
	return nil
}

func (x *TLBotsSetBotInfo) GetLangCode() string {
	if x != nil {
		return x.LangCode
	}
	return ""
}

func (x *TLBotsSetBotInfo) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *TLBotsSetBotInfo) GetAbout() *wrapperspb.StringValue {
	if x != nil {
		return x.About
	}
	return nil
}

func (x *TLBotsSetBotInfo) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

type TLBotsGetBotInfoDCD914FD struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Bot           *InputUser             `protobuf:"bytes,3,opt,name=bot,proto3" json:"bot,omitempty"`
	LangCode      string                 `protobuf:"bytes,4,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLBotsGetBotInfoDCD914FD) Reset() {
	*x = TLBotsGetBotInfoDCD914FD{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[518]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLBotsGetBotInfoDCD914FD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLBotsGetBotInfoDCD914FD) ProtoMessage() {}

func (x *TLBotsGetBotInfoDCD914FD) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[518]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLBotsGetBotInfoDCD914FD.ProtoReflect.Descriptor instead.
func (*TLBotsGetBotInfoDCD914FD) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{518}
}

func (x *TLBotsGetBotInfoDCD914FD) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLBotsGetBotInfoDCD914FD) GetBot() *InputUser {
	if x != nil {
		return x.Bot
	}
	return nil
}

func (x *TLBotsGetBotInfoDCD914FD) GetLangCode() string {
	if x != nil {
		return x.LangCode
	}
	return ""
}

type TLBotsReorderUsernames struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Bot           *InputUser             `protobuf:"bytes,3,opt,name=bot,proto3" json:"bot,omitempty"`
	Order         []string               `protobuf:"bytes,4,rep,name=order,proto3" json:"order,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLBotsReorderUsernames) Reset() {
	*x = TLBotsReorderUsernames{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[519]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLBotsReorderUsernames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLBotsReorderUsernames) ProtoMessage() {}

func (x *TLBotsReorderUsernames) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[519]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLBotsReorderUsernames.ProtoReflect.Descriptor instead.
func (*TLBotsReorderUsernames) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{519}
}

func (x *TLBotsReorderUsernames) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLBotsReorderUsernames) GetBot() *InputUser {
	if x != nil {
		return x.Bot
	}
	return nil
}

func (x *TLBotsReorderUsernames) GetOrder() []string {
	if x != nil {
		return x.Order
	}
	return nil
}

type TLBotsToggleUsername struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Bot           *InputUser             `protobuf:"bytes,3,opt,name=bot,proto3" json:"bot,omitempty"`
	Username      string                 `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	Active        *Bool                  `protobuf:"bytes,5,opt,name=active,proto3" json:"active,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLBotsToggleUsername) Reset() {
	*x = TLBotsToggleUsername{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[520]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLBotsToggleUsername) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLBotsToggleUsername) ProtoMessage() {}

func (x *TLBotsToggleUsername) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[520]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLBotsToggleUsername.ProtoReflect.Descriptor instead.
func (*TLBotsToggleUsername) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{520}
}

func (x *TLBotsToggleUsername) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLBotsToggleUsername) GetBot() *InputUser {
	if x != nil {
		return x.Bot
	}
	return nil
}

func (x *TLBotsToggleUsername) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *TLBotsToggleUsername) GetActive() *Bool {
	if x != nil {
		return x.Active
	}
	return nil
}

type TLBotsCanSendMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Bot           *InputUser             `protobuf:"bytes,3,opt,name=bot,proto3" json:"bot,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLBotsCanSendMessage) Reset() {
	*x = TLBotsCanSendMessage{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[521]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLBotsCanSendMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLBotsCanSendMessage) ProtoMessage() {}

func (x *TLBotsCanSendMessage) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[521]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLBotsCanSendMessage.ProtoReflect.Descriptor instead.
func (*TLBotsCanSendMessage) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{521}
}

func (x *TLBotsCanSendMessage) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLBotsCanSendMessage) GetBot() *InputUser {
	if x != nil {
		return x.Bot
	}
	return nil
}

type TLBotsAllowSendMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Bot           *InputUser             `protobuf:"bytes,3,opt,name=bot,proto3" json:"bot,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLBotsAllowSendMessage) Reset() {
	*x = TLBotsAllowSendMessage{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[522]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLBotsAllowSendMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLBotsAllowSendMessage) ProtoMessage() {}

func (x *TLBotsAllowSendMessage) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[522]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLBotsAllowSendMessage.ProtoReflect.Descriptor instead.
func (*TLBotsAllowSendMessage) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{522}
}

func (x *TLBotsAllowSendMessage) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLBotsAllowSendMessage) GetBot() *InputUser {
	if x != nil {
		return x.Bot
	}
	return nil
}

type TLBotsInvokeWebViewCustomMethod struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Bot           *InputUser             `protobuf:"bytes,3,opt,name=bot,proto3" json:"bot,omitempty"`
	CustomMethod  string                 `protobuf:"bytes,4,opt,name=custom_method,json=customMethod,proto3" json:"custom_method,omitempty"`
	Params        *DataJSON              `protobuf:"bytes,5,opt,name=params,proto3" json:"params,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLBotsInvokeWebViewCustomMethod) Reset() {
	*x = TLBotsInvokeWebViewCustomMethod{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[523]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLBotsInvokeWebViewCustomMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLBotsInvokeWebViewCustomMethod) ProtoMessage() {}

func (x *TLBotsInvokeWebViewCustomMethod) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[523]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLBotsInvokeWebViewCustomMethod.ProtoReflect.Descriptor instead.
func (*TLBotsInvokeWebViewCustomMethod) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{523}
}

func (x *TLBotsInvokeWebViewCustomMethod) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLBotsInvokeWebViewCustomMethod) GetBot() *InputUser {
	if x != nil {
		return x.Bot
	}
	return nil
}

func (x *TLBotsInvokeWebViewCustomMethod) GetCustomMethod() string {
	if x != nil {
		return x.CustomMethod
	}
	return ""
}

func (x *TLBotsInvokeWebViewCustomMethod) GetParams() *DataJSON {
	if x != nil {
		return x.Params
	}
	return nil
}

type TLBotsGetPopularAppBots struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Offset        string                 `protobuf:"bytes,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit         int32                  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLBotsGetPopularAppBots) Reset() {
	*x = TLBotsGetPopularAppBots{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[524]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLBotsGetPopularAppBots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLBotsGetPopularAppBots) ProtoMessage() {}

func (x *TLBotsGetPopularAppBots) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[524]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLBotsGetPopularAppBots.ProtoReflect.Descriptor instead.
func (*TLBotsGetPopularAppBots) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{524}
}

func (x *TLBotsGetPopularAppBots) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLBotsGetPopularAppBots) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *TLBotsGetPopularAppBots) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TLBotsAddPreviewMedia struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Bot           *InputUser             `protobuf:"bytes,3,opt,name=bot,proto3" json:"bot,omitempty"`
	LangCode      string                 `protobuf:"bytes,4,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
	Media         *InputMedia            `protobuf:"bytes,5,opt,name=media,proto3" json:"media,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLBotsAddPreviewMedia) Reset() {
	*x = TLBotsAddPreviewMedia{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[525]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLBotsAddPreviewMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLBotsAddPreviewMedia) ProtoMessage() {}

func (x *TLBotsAddPreviewMedia) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[525]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLBotsAddPreviewMedia.ProtoReflect.Descriptor instead.
func (*TLBotsAddPreviewMedia) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{525}
}

func (x *TLBotsAddPreviewMedia) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLBotsAddPreviewMedia) GetBot() *InputUser {
	if x != nil {
		return x.Bot
	}
	return nil
}

func (x *TLBotsAddPreviewMedia) GetLangCode() string {
	if x != nil {
		return x.LangCode
	}
	return ""
}

func (x *TLBotsAddPreviewMedia) GetMedia() *InputMedia {
	if x != nil {
		return x.Media
	}
	return nil
}

type TLBotsEditPreviewMedia struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Bot           *InputUser             `protobuf:"bytes,3,opt,name=bot,proto3" json:"bot,omitempty"`
	LangCode      string                 `protobuf:"bytes,4,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
	Media         *InputMedia            `protobuf:"bytes,5,opt,name=media,proto3" json:"media,omitempty"`
	NewMedia      *InputMedia            `protobuf:"bytes,6,opt,name=new_media,json=newMedia,proto3" json:"new_media,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLBotsEditPreviewMedia) Reset() {
	*x = TLBotsEditPreviewMedia{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[526]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLBotsEditPreviewMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLBotsEditPreviewMedia) ProtoMessage() {}

func (x *TLBotsEditPreviewMedia) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[526]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLBotsEditPreviewMedia.ProtoReflect.Descriptor instead.
func (*TLBotsEditPreviewMedia) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{526}
}

func (x *TLBotsEditPreviewMedia) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLBotsEditPreviewMedia) GetBot() *InputUser {
	if x != nil {
		return x.Bot
	}
	return nil
}

func (x *TLBotsEditPreviewMedia) GetLangCode() string {
	if x != nil {
		return x.LangCode
	}
	return ""
}

func (x *TLBotsEditPreviewMedia) GetMedia() *InputMedia {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *TLBotsEditPreviewMedia) GetNewMedia() *InputMedia {
	if x != nil {
		return x.NewMedia
	}
	return nil
}

type TLBotsDeletePreviewMedia struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Bot           *InputUser             `protobuf:"bytes,3,opt,name=bot,proto3" json:"bot,omitempty"`
	LangCode      string                 `protobuf:"bytes,4,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
	Media         []*InputMedia          `protobuf:"bytes,5,rep,name=media,proto3" json:"media,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLBotsDeletePreviewMedia) Reset() {
	*x = TLBotsDeletePreviewMedia{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[527]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLBotsDeletePreviewMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLBotsDeletePreviewMedia) ProtoMessage() {}

func (x *TLBotsDeletePreviewMedia) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[527]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLBotsDeletePreviewMedia.ProtoReflect.Descriptor instead.
func (*TLBotsDeletePreviewMedia) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{527}
}

func (x *TLBotsDeletePreviewMedia) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLBotsDeletePreviewMedia) GetBot() *InputUser {
	if x != nil {
		return x.Bot
	}
	return nil
}

func (x *TLBotsDeletePreviewMedia) GetLangCode() string {
	if x != nil {
		return x.LangCode
	}
	return ""
}

func (x *TLBotsDeletePreviewMedia) GetMedia() []*InputMedia {
	if x != nil {
		return x.Media
	}
	return nil
}

type TLBotsReorderPreviewMedias struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Bot           *InputUser             `protobuf:"bytes,3,opt,name=bot,proto3" json:"bot,omitempty"`
	LangCode      string                 `protobuf:"bytes,4,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
	Order         []*InputMedia          `protobuf:"bytes,5,rep,name=order,proto3" json:"order,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLBotsReorderPreviewMedias) Reset() {
	*x = TLBotsReorderPreviewMedias{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[528]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLBotsReorderPreviewMedias) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLBotsReorderPreviewMedias) ProtoMessage() {}

func (x *TLBotsReorderPreviewMedias) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[528]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLBotsReorderPreviewMedias.ProtoReflect.Descriptor instead.
func (*TLBotsReorderPreviewMedias) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{528}
}

func (x *TLBotsReorderPreviewMedias) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLBotsReorderPreviewMedias) GetBot() *InputUser {
	if x != nil {
		return x.Bot
	}
	return nil
}

func (x *TLBotsReorderPreviewMedias) GetLangCode() string {
	if x != nil {
		return x.LangCode
	}
	return ""
}

func (x *TLBotsReorderPreviewMedias) GetOrder() []*InputMedia {
	if x != nil {
		return x.Order
	}
	return nil
}

type TLBotsGetPreviewInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Bot           *InputUser             `protobuf:"bytes,3,opt,name=bot,proto3" json:"bot,omitempty"`
	LangCode      string                 `protobuf:"bytes,4,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLBotsGetPreviewInfo) Reset() {
	*x = TLBotsGetPreviewInfo{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[529]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLBotsGetPreviewInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLBotsGetPreviewInfo) ProtoMessage() {}

func (x *TLBotsGetPreviewInfo) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[529]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLBotsGetPreviewInfo.ProtoReflect.Descriptor instead.
func (*TLBotsGetPreviewInfo) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{529}
}

func (x *TLBotsGetPreviewInfo) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLBotsGetPreviewInfo) GetBot() *InputUser {
	if x != nil {
		return x.Bot
	}
	return nil
}

func (x *TLBotsGetPreviewInfo) GetLangCode() string {
	if x != nil {
		return x.LangCode
	}
	return ""
}

type TLBotsGetPreviewMedias struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Bot           *InputUser             `protobuf:"bytes,3,opt,name=bot,proto3" json:"bot,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLBotsGetPreviewMedias) Reset() {
	*x = TLBotsGetPreviewMedias{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[530]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLBotsGetPreviewMedias) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLBotsGetPreviewMedias) ProtoMessage() {}

func (x *TLBotsGetPreviewMedias) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[530]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLBotsGetPreviewMedias.ProtoReflect.Descriptor instead.
func (*TLBotsGetPreviewMedias) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{530}
}

func (x *TLBotsGetPreviewMedias) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLBotsGetPreviewMedias) GetBot() *InputUser {
	if x != nil {
		return x.Bot
	}
	return nil
}

type TLBotsUpdateUserEmojiStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	UserId        *InputUser             `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	EmojiStatus   *EmojiStatus           `protobuf:"bytes,4,opt,name=emoji_status,json=emojiStatus,proto3" json:"emoji_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLBotsUpdateUserEmojiStatus) Reset() {
	*x = TLBotsUpdateUserEmojiStatus{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[531]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLBotsUpdateUserEmojiStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLBotsUpdateUserEmojiStatus) ProtoMessage() {}

func (x *TLBotsUpdateUserEmojiStatus) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[531]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLBotsUpdateUserEmojiStatus.ProtoReflect.Descriptor instead.
func (*TLBotsUpdateUserEmojiStatus) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{531}
}

func (x *TLBotsUpdateUserEmojiStatus) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLBotsUpdateUserEmojiStatus) GetUserId() *InputUser {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *TLBotsUpdateUserEmojiStatus) GetEmojiStatus() *EmojiStatus {
	if x != nil {
		return x.EmojiStatus
	}
	return nil
}

type TLBotsToggleUserEmojiStatusPermission struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Bot           *InputUser             `protobuf:"bytes,3,opt,name=bot,proto3" json:"bot,omitempty"`
	Enabled       *Bool                  `protobuf:"bytes,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLBotsToggleUserEmojiStatusPermission) Reset() {
	*x = TLBotsToggleUserEmojiStatusPermission{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[532]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLBotsToggleUserEmojiStatusPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLBotsToggleUserEmojiStatusPermission) ProtoMessage() {}

func (x *TLBotsToggleUserEmojiStatusPermission) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[532]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLBotsToggleUserEmojiStatusPermission.ProtoReflect.Descriptor instead.
func (*TLBotsToggleUserEmojiStatusPermission) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{532}
}

func (x *TLBotsToggleUserEmojiStatusPermission) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLBotsToggleUserEmojiStatusPermission) GetBot() *InputUser {
	if x != nil {
		return x.Bot
	}
	return nil
}

func (x *TLBotsToggleUserEmojiStatusPermission) GetEnabled() *Bool {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type TLBotsCheckDownloadFileParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Bot           *InputUser             `protobuf:"bytes,3,opt,name=bot,proto3" json:"bot,omitempty"`
	FileName      string                 `protobuf:"bytes,4,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	Url           string                 `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLBotsCheckDownloadFileParams) Reset() {
	*x = TLBotsCheckDownloadFileParams{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[533]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLBotsCheckDownloadFileParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLBotsCheckDownloadFileParams) ProtoMessage() {}

func (x *TLBotsCheckDownloadFileParams) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[533]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLBotsCheckDownloadFileParams.ProtoReflect.Descriptor instead.
func (*TLBotsCheckDownloadFileParams) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{533}
}

func (x *TLBotsCheckDownloadFileParams) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLBotsCheckDownloadFileParams) GetBot() *InputUser {
	if x != nil {
		return x.Bot
	}
	return nil
}

func (x *TLBotsCheckDownloadFileParams) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *TLBotsCheckDownloadFileParams) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type TLBotsGetAdminedBots struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLBotsGetAdminedBots) Reset() {
	*x = TLBotsGetAdminedBots{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[534]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLBotsGetAdminedBots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLBotsGetAdminedBots) ProtoMessage() {}

func (x *TLBotsGetAdminedBots) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[534]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLBotsGetAdminedBots.ProtoReflect.Descriptor instead.
func (*TLBotsGetAdminedBots) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{534}
}

func (x *TLBotsGetAdminedBots) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLBotsUpdateStarRefProgram struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Constructor        TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Bot                *InputUser             `protobuf:"bytes,3,opt,name=bot,proto3" json:"bot,omitempty"`
	CommissionPermille int32                  `protobuf:"varint,4,opt,name=commission_permille,json=commissionPermille,proto3" json:"commission_permille,omitempty"`
	DurationMonths     *wrapperspb.Int32Value `protobuf:"bytes,5,opt,name=duration_months,json=durationMonths,proto3" json:"duration_months,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *TLBotsUpdateStarRefProgram) Reset() {
	*x = TLBotsUpdateStarRefProgram{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[535]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLBotsUpdateStarRefProgram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLBotsUpdateStarRefProgram) ProtoMessage() {}

func (x *TLBotsUpdateStarRefProgram) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[535]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLBotsUpdateStarRefProgram.ProtoReflect.Descriptor instead.
func (*TLBotsUpdateStarRefProgram) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{535}
}

func (x *TLBotsUpdateStarRefProgram) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLBotsUpdateStarRefProgram) GetBot() *InputUser {
	if x != nil {
		return x.Bot
	}
	return nil
}

func (x *TLBotsUpdateStarRefProgram) GetCommissionPermille() int32 {
	if x != nil {
		return x.CommissionPermille
	}
	return 0
}

func (x *TLBotsUpdateStarRefProgram) GetDurationMonths() *wrapperspb.Int32Value {
	if x != nil {
		return x.DurationMonths
	}
	return nil
}

type TLBotsSetCustomVerification struct {
	state             protoimpl.MessageState  `protogen:"open.v1"`
	Constructor       TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Enabled           bool                    `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Bot               *InputUser              `protobuf:"bytes,4,opt,name=bot,proto3" json:"bot,omitempty"`
	Peer              *InputPeer              `protobuf:"bytes,5,opt,name=peer,proto3" json:"peer,omitempty"`
	CustomDescription *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=custom_description,json=customDescription,proto3" json:"custom_description,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TLBotsSetCustomVerification) Reset() {
	*x = TLBotsSetCustomVerification{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[536]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLBotsSetCustomVerification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLBotsSetCustomVerification) ProtoMessage() {}

func (x *TLBotsSetCustomVerification) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[536]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLBotsSetCustomVerification.ProtoReflect.Descriptor instead.
func (*TLBotsSetCustomVerification) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{536}
}

func (x *TLBotsSetCustomVerification) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLBotsSetCustomVerification) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *TLBotsSetCustomVerification) GetBot() *InputUser {
	if x != nil {
		return x.Bot
	}
	return nil
}

func (x *TLBotsSetCustomVerification) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLBotsSetCustomVerification) GetCustomDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.CustomDescription
	}
	return nil
}

type TLBotsGetBotRecommendations struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Bot           *InputUser             `protobuf:"bytes,3,opt,name=bot,proto3" json:"bot,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLBotsGetBotRecommendations) Reset() {
	*x = TLBotsGetBotRecommendations{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[537]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLBotsGetBotRecommendations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLBotsGetBotRecommendations) ProtoMessage() {}

func (x *TLBotsGetBotRecommendations) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[537]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLBotsGetBotRecommendations.ProtoReflect.Descriptor instead.
func (*TLBotsGetBotRecommendations) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{537}
}

func (x *TLBotsGetBotRecommendations) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLBotsGetBotRecommendations) GetBot() *InputUser {
	if x != nil {
		return x.Bot
	}
	return nil
}

type TLPaymentsGetPaymentForm struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Invoice       *InputInvoice          `protobuf:"bytes,3,opt,name=invoice,proto3" json:"invoice,omitempty"`
	ThemeParams   *DataJSON              `protobuf:"bytes,4,opt,name=theme_params,json=themeParams,proto3" json:"theme_params,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,5,opt,name=peer,proto3" json:"peer,omitempty"`
	MsgId         int32                  `protobuf:"varint,6,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPaymentsGetPaymentForm) Reset() {
	*x = TLPaymentsGetPaymentForm{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[538]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsGetPaymentForm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsGetPaymentForm) ProtoMessage() {}

func (x *TLPaymentsGetPaymentForm) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[538]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsGetPaymentForm.ProtoReflect.Descriptor instead.
func (*TLPaymentsGetPaymentForm) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{538}
}

func (x *TLPaymentsGetPaymentForm) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsGetPaymentForm) GetInvoice() *InputInvoice {
	if x != nil {
		return x.Invoice
	}
	return nil
}

func (x *TLPaymentsGetPaymentForm) GetThemeParams() *DataJSON {
	if x != nil {
		return x.ThemeParams
	}
	return nil
}

func (x *TLPaymentsGetPaymentForm) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLPaymentsGetPaymentForm) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

type TLPaymentsGetPaymentReceipt struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	MsgId         int32                  `protobuf:"varint,4,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPaymentsGetPaymentReceipt) Reset() {
	*x = TLPaymentsGetPaymentReceipt{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[539]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsGetPaymentReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsGetPaymentReceipt) ProtoMessage() {}

func (x *TLPaymentsGetPaymentReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[539]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsGetPaymentReceipt.ProtoReflect.Descriptor instead.
func (*TLPaymentsGetPaymentReceipt) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{539}
}

func (x *TLPaymentsGetPaymentReceipt) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsGetPaymentReceipt) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLPaymentsGetPaymentReceipt) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

type TLPaymentsValidateRequestedInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Save          bool                   `protobuf:"varint,3,opt,name=save,proto3" json:"save,omitempty"`
	Invoice       *InputInvoice          `protobuf:"bytes,4,opt,name=invoice,proto3" json:"invoice,omitempty"`
	Info          *PaymentRequestedInfo  `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,6,opt,name=peer,proto3" json:"peer,omitempty"`
	MsgId         int32                  `protobuf:"varint,7,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPaymentsValidateRequestedInfo) Reset() {
	*x = TLPaymentsValidateRequestedInfo{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[540]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsValidateRequestedInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsValidateRequestedInfo) ProtoMessage() {}

func (x *TLPaymentsValidateRequestedInfo) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[540]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsValidateRequestedInfo.ProtoReflect.Descriptor instead.
func (*TLPaymentsValidateRequestedInfo) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{540}
}

func (x *TLPaymentsValidateRequestedInfo) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsValidateRequestedInfo) GetSave() bool {
	if x != nil {
		return x.Save
	}
	return false
}

func (x *TLPaymentsValidateRequestedInfo) GetInvoice() *InputInvoice {
	if x != nil {
		return x.Invoice
	}
	return nil
}

func (x *TLPaymentsValidateRequestedInfo) GetInfo() *PaymentRequestedInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *TLPaymentsValidateRequestedInfo) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLPaymentsValidateRequestedInfo) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

type TLPaymentsSendPaymentForm struct {
	state            protoimpl.MessageState   `protogen:"open.v1"`
	Constructor      TLConstructor            `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	FormId           int64                    `protobuf:"varint,3,opt,name=form_id,json=formId,proto3" json:"form_id,omitempty"`
	Invoice          *InputInvoice            `protobuf:"bytes,4,opt,name=invoice,proto3" json:"invoice,omitempty"`
	RequestedInfoId  *wrapperspb.StringValue  `protobuf:"bytes,5,opt,name=requested_info_id,json=requestedInfoId,proto3" json:"requested_info_id,omitempty"`
	ShippingOptionId *wrapperspb.StringValue  `protobuf:"bytes,6,opt,name=shipping_option_id,json=shippingOptionId,proto3" json:"shipping_option_id,omitempty"`
	Credentials      *InputPaymentCredentials `protobuf:"bytes,7,opt,name=credentials,proto3" json:"credentials,omitempty"`
	TipAmount        *wrapperspb.Int64Value   `protobuf:"bytes,8,opt,name=tip_amount,json=tipAmount,proto3" json:"tip_amount,omitempty"`
	Peer             *InputPeer               `protobuf:"bytes,9,opt,name=peer,proto3" json:"peer,omitempty"`
	MsgId            int32                    `protobuf:"varint,10,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TLPaymentsSendPaymentForm) Reset() {
	*x = TLPaymentsSendPaymentForm{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[541]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsSendPaymentForm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsSendPaymentForm) ProtoMessage() {}

func (x *TLPaymentsSendPaymentForm) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[541]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsSendPaymentForm.ProtoReflect.Descriptor instead.
func (*TLPaymentsSendPaymentForm) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{541}
}

func (x *TLPaymentsSendPaymentForm) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsSendPaymentForm) GetFormId() int64 {
	if x != nil {
		return x.FormId
	}
	return 0
}

func (x *TLPaymentsSendPaymentForm) GetInvoice() *InputInvoice {
	if x != nil {
		return x.Invoice
	}
	return nil
}

func (x *TLPaymentsSendPaymentForm) GetRequestedInfoId() *wrapperspb.StringValue {
	if x != nil {
		return x.RequestedInfoId
	}
	return nil
}

func (x *TLPaymentsSendPaymentForm) GetShippingOptionId() *wrapperspb.StringValue {
	if x != nil {
		return x.ShippingOptionId
	}
	return nil
}

func (x *TLPaymentsSendPaymentForm) GetCredentials() *InputPaymentCredentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *TLPaymentsSendPaymentForm) GetTipAmount() *wrapperspb.Int64Value {
	if x != nil {
		return x.TipAmount
	}
	return nil
}

func (x *TLPaymentsSendPaymentForm) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLPaymentsSendPaymentForm) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

type TLPaymentsGetSavedInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPaymentsGetSavedInfo) Reset() {
	*x = TLPaymentsGetSavedInfo{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[542]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsGetSavedInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsGetSavedInfo) ProtoMessage() {}

func (x *TLPaymentsGetSavedInfo) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[542]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsGetSavedInfo.ProtoReflect.Descriptor instead.
func (*TLPaymentsGetSavedInfo) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{542}
}

func (x *TLPaymentsGetSavedInfo) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLPaymentsClearSavedInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Credentials   bool                   `protobuf:"varint,3,opt,name=credentials,proto3" json:"credentials,omitempty"`
	Info          bool                   `protobuf:"varint,4,opt,name=info,proto3" json:"info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPaymentsClearSavedInfo) Reset() {
	*x = TLPaymentsClearSavedInfo{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[543]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsClearSavedInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsClearSavedInfo) ProtoMessage() {}

func (x *TLPaymentsClearSavedInfo) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[543]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsClearSavedInfo.ProtoReflect.Descriptor instead.
func (*TLPaymentsClearSavedInfo) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{543}
}

func (x *TLPaymentsClearSavedInfo) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsClearSavedInfo) GetCredentials() bool {
	if x != nil {
		return x.Credentials
	}
	return false
}

func (x *TLPaymentsClearSavedInfo) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type TLPaymentsGetBankCardData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Number        string                 `protobuf:"bytes,3,opt,name=number,proto3" json:"number,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPaymentsGetBankCardData) Reset() {
	*x = TLPaymentsGetBankCardData{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[544]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsGetBankCardData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsGetBankCardData) ProtoMessage() {}

func (x *TLPaymentsGetBankCardData) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[544]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsGetBankCardData.ProtoReflect.Descriptor instead.
func (*TLPaymentsGetBankCardData) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{544}
}

func (x *TLPaymentsGetBankCardData) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsGetBankCardData) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

type TLPaymentsExportInvoice struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	InvoiceMedia  *InputMedia            `protobuf:"bytes,3,opt,name=invoice_media,json=invoiceMedia,proto3" json:"invoice_media,omitempty"`
	UserId        *InputUser             `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPaymentsExportInvoice) Reset() {
	*x = TLPaymentsExportInvoice{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[545]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsExportInvoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsExportInvoice) ProtoMessage() {}

func (x *TLPaymentsExportInvoice) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[545]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsExportInvoice.ProtoReflect.Descriptor instead.
func (*TLPaymentsExportInvoice) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{545}
}

func (x *TLPaymentsExportInvoice) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsExportInvoice) GetInvoiceMedia() *InputMedia {
	if x != nil {
		return x.InvoiceMedia
	}
	return nil
}

func (x *TLPaymentsExportInvoice) GetUserId() *InputUser {
	if x != nil {
		return x.UserId
	}
	return nil
}

type TLPaymentsAssignAppStoreTransaction struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Constructor   TLConstructor             `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Receipt       []byte                    `protobuf:"bytes,3,opt,name=receipt,proto3" json:"receipt,omitempty"`
	Purpose       *InputStorePaymentPurpose `protobuf:"bytes,4,opt,name=purpose,proto3" json:"purpose,omitempty"`
	Restore       bool                      `protobuf:"varint,5,opt,name=restore,proto3" json:"restore,omitempty"`
	TransactionId string                    `protobuf:"bytes,6,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPaymentsAssignAppStoreTransaction) Reset() {
	*x = TLPaymentsAssignAppStoreTransaction{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[546]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsAssignAppStoreTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsAssignAppStoreTransaction) ProtoMessage() {}

func (x *TLPaymentsAssignAppStoreTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[546]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsAssignAppStoreTransaction.ProtoReflect.Descriptor instead.
func (*TLPaymentsAssignAppStoreTransaction) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{546}
}

func (x *TLPaymentsAssignAppStoreTransaction) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsAssignAppStoreTransaction) GetReceipt() []byte {
	if x != nil {
		return x.Receipt
	}
	return nil
}

func (x *TLPaymentsAssignAppStoreTransaction) GetPurpose() *InputStorePaymentPurpose {
	if x != nil {
		return x.Purpose
	}
	return nil
}

func (x *TLPaymentsAssignAppStoreTransaction) GetRestore() bool {
	if x != nil {
		return x.Restore
	}
	return false
}

func (x *TLPaymentsAssignAppStoreTransaction) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

type TLPaymentsAssignPlayMarketTransaction struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Constructor   TLConstructor             `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Receipt       *DataJSON                 `protobuf:"bytes,3,opt,name=receipt,proto3" json:"receipt,omitempty"`
	Purpose       *InputStorePaymentPurpose `protobuf:"bytes,4,opt,name=purpose,proto3" json:"purpose,omitempty"`
	PurchaseToken string                    `protobuf:"bytes,5,opt,name=purchase_token,json=purchaseToken,proto3" json:"purchase_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPaymentsAssignPlayMarketTransaction) Reset() {
	*x = TLPaymentsAssignPlayMarketTransaction{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[547]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsAssignPlayMarketTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsAssignPlayMarketTransaction) ProtoMessage() {}

func (x *TLPaymentsAssignPlayMarketTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[547]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsAssignPlayMarketTransaction.ProtoReflect.Descriptor instead.
func (*TLPaymentsAssignPlayMarketTransaction) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{547}
}

func (x *TLPaymentsAssignPlayMarketTransaction) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsAssignPlayMarketTransaction) GetReceipt() *DataJSON {
	if x != nil {
		return x.Receipt
	}
	return nil
}

func (x *TLPaymentsAssignPlayMarketTransaction) GetPurpose() *InputStorePaymentPurpose {
	if x != nil {
		return x.Purpose
	}
	return nil
}

func (x *TLPaymentsAssignPlayMarketTransaction) GetPurchaseToken() string {
	if x != nil {
		return x.PurchaseToken
	}
	return ""
}

type TLPaymentsGetPremiumGiftCodeOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	BoostPeer     *InputPeer             `protobuf:"bytes,3,opt,name=boost_peer,json=boostPeer,proto3" json:"boost_peer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPaymentsGetPremiumGiftCodeOptions) Reset() {
	*x = TLPaymentsGetPremiumGiftCodeOptions{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[548]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsGetPremiumGiftCodeOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsGetPremiumGiftCodeOptions) ProtoMessage() {}

func (x *TLPaymentsGetPremiumGiftCodeOptions) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[548]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsGetPremiumGiftCodeOptions.ProtoReflect.Descriptor instead.
func (*TLPaymentsGetPremiumGiftCodeOptions) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{548}
}

func (x *TLPaymentsGetPremiumGiftCodeOptions) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsGetPremiumGiftCodeOptions) GetBoostPeer() *InputPeer {
	if x != nil {
		return x.BoostPeer
	}
	return nil
}

type TLPaymentsCheckGiftCode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Slug          string                 `protobuf:"bytes,3,opt,name=slug,proto3" json:"slug,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPaymentsCheckGiftCode) Reset() {
	*x = TLPaymentsCheckGiftCode{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[549]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsCheckGiftCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsCheckGiftCode) ProtoMessage() {}

func (x *TLPaymentsCheckGiftCode) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[549]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsCheckGiftCode.ProtoReflect.Descriptor instead.
func (*TLPaymentsCheckGiftCode) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{549}
}

func (x *TLPaymentsCheckGiftCode) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsCheckGiftCode) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

type TLPaymentsApplyGiftCode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Slug          string                 `protobuf:"bytes,3,opt,name=slug,proto3" json:"slug,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPaymentsApplyGiftCode) Reset() {
	*x = TLPaymentsApplyGiftCode{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[550]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsApplyGiftCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsApplyGiftCode) ProtoMessage() {}

func (x *TLPaymentsApplyGiftCode) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[550]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsApplyGiftCode.ProtoReflect.Descriptor instead.
func (*TLPaymentsApplyGiftCode) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{550}
}

func (x *TLPaymentsApplyGiftCode) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsApplyGiftCode) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

type TLPaymentsGetGiveawayInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	MsgId         int32                  `protobuf:"varint,4,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPaymentsGetGiveawayInfo) Reset() {
	*x = TLPaymentsGetGiveawayInfo{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[551]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsGetGiveawayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsGetGiveawayInfo) ProtoMessage() {}

func (x *TLPaymentsGetGiveawayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[551]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsGetGiveawayInfo.ProtoReflect.Descriptor instead.
func (*TLPaymentsGetGiveawayInfo) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{551}
}

func (x *TLPaymentsGetGiveawayInfo) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsGetGiveawayInfo) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLPaymentsGetGiveawayInfo) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

type TLPaymentsLaunchPrepaidGiveaway struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Constructor   TLConstructor             `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer                `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	GiveawayId    int64                     `protobuf:"varint,4,opt,name=giveaway_id,json=giveawayId,proto3" json:"giveaway_id,omitempty"`
	Purpose       *InputStorePaymentPurpose `protobuf:"bytes,5,opt,name=purpose,proto3" json:"purpose,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPaymentsLaunchPrepaidGiveaway) Reset() {
	*x = TLPaymentsLaunchPrepaidGiveaway{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[552]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsLaunchPrepaidGiveaway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsLaunchPrepaidGiveaway) ProtoMessage() {}

func (x *TLPaymentsLaunchPrepaidGiveaway) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[552]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsLaunchPrepaidGiveaway.ProtoReflect.Descriptor instead.
func (*TLPaymentsLaunchPrepaidGiveaway) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{552}
}

func (x *TLPaymentsLaunchPrepaidGiveaway) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsLaunchPrepaidGiveaway) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLPaymentsLaunchPrepaidGiveaway) GetGiveawayId() int64 {
	if x != nil {
		return x.GiveawayId
	}
	return 0
}

func (x *TLPaymentsLaunchPrepaidGiveaway) GetPurpose() *InputStorePaymentPurpose {
	if x != nil {
		return x.Purpose
	}
	return nil
}

type TLPaymentsGetStarsTopupOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPaymentsGetStarsTopupOptions) Reset() {
	*x = TLPaymentsGetStarsTopupOptions{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[553]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsGetStarsTopupOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsGetStarsTopupOptions) ProtoMessage() {}

func (x *TLPaymentsGetStarsTopupOptions) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[553]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsGetStarsTopupOptions.ProtoReflect.Descriptor instead.
func (*TLPaymentsGetStarsTopupOptions) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{553}
}

func (x *TLPaymentsGetStarsTopupOptions) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLPaymentsGetStarsStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPaymentsGetStarsStatus) Reset() {
	*x = TLPaymentsGetStarsStatus{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[554]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsGetStarsStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsGetStarsStatus) ProtoMessage() {}

func (x *TLPaymentsGetStarsStatus) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[554]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsGetStarsStatus.ProtoReflect.Descriptor instead.
func (*TLPaymentsGetStarsStatus) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{554}
}

func (x *TLPaymentsGetStarsStatus) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsGetStarsStatus) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

type TLPaymentsGetStarsTransactions struct {
	state          protoimpl.MessageState  `protogen:"open.v1"`
	Constructor    TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Inbound        bool                    `protobuf:"varint,3,opt,name=inbound,proto3" json:"inbound,omitempty"`
	Outbound       bool                    `protobuf:"varint,4,opt,name=outbound,proto3" json:"outbound,omitempty"`
	Ascending      bool                    `protobuf:"varint,5,opt,name=ascending,proto3" json:"ascending,omitempty"`
	SubscriptionId *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	Peer           *InputPeer              `protobuf:"bytes,7,opt,name=peer,proto3" json:"peer,omitempty"`
	Offset         string                  `protobuf:"bytes,8,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit          int32                   `protobuf:"varint,9,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TLPaymentsGetStarsTransactions) Reset() {
	*x = TLPaymentsGetStarsTransactions{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[555]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsGetStarsTransactions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsGetStarsTransactions) ProtoMessage() {}

func (x *TLPaymentsGetStarsTransactions) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[555]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsGetStarsTransactions.ProtoReflect.Descriptor instead.
func (*TLPaymentsGetStarsTransactions) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{555}
}

func (x *TLPaymentsGetStarsTransactions) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsGetStarsTransactions) GetInbound() bool {
	if x != nil {
		return x.Inbound
	}
	return false
}

func (x *TLPaymentsGetStarsTransactions) GetOutbound() bool {
	if x != nil {
		return x.Outbound
	}
	return false
}

func (x *TLPaymentsGetStarsTransactions) GetAscending() bool {
	if x != nil {
		return x.Ascending
	}
	return false
}

func (x *TLPaymentsGetStarsTransactions) GetSubscriptionId() *wrapperspb.StringValue {
	if x != nil {
		return x.SubscriptionId
	}
	return nil
}

func (x *TLPaymentsGetStarsTransactions) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLPaymentsGetStarsTransactions) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *TLPaymentsGetStarsTransactions) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TLPaymentsSendStarsForm struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	FormId        int64                  `protobuf:"varint,3,opt,name=form_id,json=formId,proto3" json:"form_id,omitempty"`
	Invoice       *InputInvoice          `protobuf:"bytes,4,opt,name=invoice,proto3" json:"invoice,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPaymentsSendStarsForm) Reset() {
	*x = TLPaymentsSendStarsForm{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[556]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsSendStarsForm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsSendStarsForm) ProtoMessage() {}

func (x *TLPaymentsSendStarsForm) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[556]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsSendStarsForm.ProtoReflect.Descriptor instead.
func (*TLPaymentsSendStarsForm) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{556}
}

func (x *TLPaymentsSendStarsForm) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsSendStarsForm) GetFormId() int64 {
	if x != nil {
		return x.FormId
	}
	return 0
}

func (x *TLPaymentsSendStarsForm) GetInvoice() *InputInvoice {
	if x != nil {
		return x.Invoice
	}
	return nil
}

type TLPaymentsRefundStarsCharge struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	UserId        *InputUser             `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChargeId      string                 `protobuf:"bytes,4,opt,name=charge_id,json=chargeId,proto3" json:"charge_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPaymentsRefundStarsCharge) Reset() {
	*x = TLPaymentsRefundStarsCharge{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[557]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsRefundStarsCharge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsRefundStarsCharge) ProtoMessage() {}

func (x *TLPaymentsRefundStarsCharge) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[557]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsRefundStarsCharge.ProtoReflect.Descriptor instead.
func (*TLPaymentsRefundStarsCharge) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{557}
}

func (x *TLPaymentsRefundStarsCharge) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsRefundStarsCharge) GetUserId() *InputUser {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *TLPaymentsRefundStarsCharge) GetChargeId() string {
	if x != nil {
		return x.ChargeId
	}
	return ""
}

type TLPaymentsGetStarsRevenueStats struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Dark          bool                   `protobuf:"varint,3,opt,name=dark,proto3" json:"dark,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,4,opt,name=peer,proto3" json:"peer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPaymentsGetStarsRevenueStats) Reset() {
	*x = TLPaymentsGetStarsRevenueStats{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[558]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsGetStarsRevenueStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsGetStarsRevenueStats) ProtoMessage() {}

func (x *TLPaymentsGetStarsRevenueStats) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[558]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsGetStarsRevenueStats.ProtoReflect.Descriptor instead.
func (*TLPaymentsGetStarsRevenueStats) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{558}
}

func (x *TLPaymentsGetStarsRevenueStats) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsGetStarsRevenueStats) GetDark() bool {
	if x != nil {
		return x.Dark
	}
	return false
}

func (x *TLPaymentsGetStarsRevenueStats) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

type TLPaymentsGetStarsRevenueWithdrawalUrl struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Stars         int64                  `protobuf:"varint,4,opt,name=stars,proto3" json:"stars,omitempty"`
	Password      *InputCheckPasswordSRP `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPaymentsGetStarsRevenueWithdrawalUrl) Reset() {
	*x = TLPaymentsGetStarsRevenueWithdrawalUrl{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[559]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsGetStarsRevenueWithdrawalUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsGetStarsRevenueWithdrawalUrl) ProtoMessage() {}

func (x *TLPaymentsGetStarsRevenueWithdrawalUrl) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[559]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsGetStarsRevenueWithdrawalUrl.ProtoReflect.Descriptor instead.
func (*TLPaymentsGetStarsRevenueWithdrawalUrl) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{559}
}

func (x *TLPaymentsGetStarsRevenueWithdrawalUrl) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsGetStarsRevenueWithdrawalUrl) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLPaymentsGetStarsRevenueWithdrawalUrl) GetStars() int64 {
	if x != nil {
		return x.Stars
	}
	return 0
}

func (x *TLPaymentsGetStarsRevenueWithdrawalUrl) GetPassword() *InputCheckPasswordSRP {
	if x != nil {
		return x.Password
	}
	return nil
}

type TLPaymentsGetStarsRevenueAdsAccountUrl struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPaymentsGetStarsRevenueAdsAccountUrl) Reset() {
	*x = TLPaymentsGetStarsRevenueAdsAccountUrl{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[560]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsGetStarsRevenueAdsAccountUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsGetStarsRevenueAdsAccountUrl) ProtoMessage() {}

func (x *TLPaymentsGetStarsRevenueAdsAccountUrl) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[560]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsGetStarsRevenueAdsAccountUrl.ProtoReflect.Descriptor instead.
func (*TLPaymentsGetStarsRevenueAdsAccountUrl) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{560}
}

func (x *TLPaymentsGetStarsRevenueAdsAccountUrl) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsGetStarsRevenueAdsAccountUrl) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

type TLPaymentsGetStarsTransactionsByID struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Constructor   TLConstructor            `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer               `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Id            []*InputStarsTransaction `protobuf:"bytes,4,rep,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPaymentsGetStarsTransactionsByID) Reset() {
	*x = TLPaymentsGetStarsTransactionsByID{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[561]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsGetStarsTransactionsByID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsGetStarsTransactionsByID) ProtoMessage() {}

func (x *TLPaymentsGetStarsTransactionsByID) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[561]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsGetStarsTransactionsByID.ProtoReflect.Descriptor instead.
func (*TLPaymentsGetStarsTransactionsByID) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{561}
}

func (x *TLPaymentsGetStarsTransactionsByID) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsGetStarsTransactionsByID) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLPaymentsGetStarsTransactionsByID) GetId() []*InputStarsTransaction {
	if x != nil {
		return x.Id
	}
	return nil
}

type TLPaymentsGetStarsGiftOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	UserId        *InputUser             `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPaymentsGetStarsGiftOptions) Reset() {
	*x = TLPaymentsGetStarsGiftOptions{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[562]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsGetStarsGiftOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsGetStarsGiftOptions) ProtoMessage() {}

func (x *TLPaymentsGetStarsGiftOptions) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[562]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsGetStarsGiftOptions.ProtoReflect.Descriptor instead.
func (*TLPaymentsGetStarsGiftOptions) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{562}
}

func (x *TLPaymentsGetStarsGiftOptions) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsGetStarsGiftOptions) GetUserId() *InputUser {
	if x != nil {
		return x.UserId
	}
	return nil
}

type TLPaymentsGetStarsSubscriptions struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Constructor    TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	MissingBalance bool                   `protobuf:"varint,3,opt,name=missing_balance,json=missingBalance,proto3" json:"missing_balance,omitempty"`
	Peer           *InputPeer             `protobuf:"bytes,4,opt,name=peer,proto3" json:"peer,omitempty"`
	Offset         string                 `protobuf:"bytes,5,opt,name=offset,proto3" json:"offset,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TLPaymentsGetStarsSubscriptions) Reset() {
	*x = TLPaymentsGetStarsSubscriptions{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[563]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsGetStarsSubscriptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsGetStarsSubscriptions) ProtoMessage() {}

func (x *TLPaymentsGetStarsSubscriptions) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[563]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsGetStarsSubscriptions.ProtoReflect.Descriptor instead.
func (*TLPaymentsGetStarsSubscriptions) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{563}
}

func (x *TLPaymentsGetStarsSubscriptions) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsGetStarsSubscriptions) GetMissingBalance() bool {
	if x != nil {
		return x.MissingBalance
	}
	return false
}

func (x *TLPaymentsGetStarsSubscriptions) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLPaymentsGetStarsSubscriptions) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

type TLPaymentsChangeStarsSubscription struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Constructor    TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer           *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	SubscriptionId string                 `protobuf:"bytes,4,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	Canceled       *Bool                  `protobuf:"bytes,5,opt,name=canceled,proto3" json:"canceled,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TLPaymentsChangeStarsSubscription) Reset() {
	*x = TLPaymentsChangeStarsSubscription{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[564]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsChangeStarsSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsChangeStarsSubscription) ProtoMessage() {}

func (x *TLPaymentsChangeStarsSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[564]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsChangeStarsSubscription.ProtoReflect.Descriptor instead.
func (*TLPaymentsChangeStarsSubscription) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{564}
}

func (x *TLPaymentsChangeStarsSubscription) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsChangeStarsSubscription) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLPaymentsChangeStarsSubscription) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *TLPaymentsChangeStarsSubscription) GetCanceled() *Bool {
	if x != nil {
		return x.Canceled
	}
	return nil
}

type TLPaymentsFulfillStarsSubscription struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Constructor    TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer           *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	SubscriptionId string                 `protobuf:"bytes,4,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TLPaymentsFulfillStarsSubscription) Reset() {
	*x = TLPaymentsFulfillStarsSubscription{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[565]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsFulfillStarsSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsFulfillStarsSubscription) ProtoMessage() {}

func (x *TLPaymentsFulfillStarsSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[565]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsFulfillStarsSubscription.ProtoReflect.Descriptor instead.
func (*TLPaymentsFulfillStarsSubscription) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{565}
}

func (x *TLPaymentsFulfillStarsSubscription) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsFulfillStarsSubscription) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLPaymentsFulfillStarsSubscription) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

type TLPaymentsGetStarsGiveawayOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPaymentsGetStarsGiveawayOptions) Reset() {
	*x = TLPaymentsGetStarsGiveawayOptions{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[566]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsGetStarsGiveawayOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsGetStarsGiveawayOptions) ProtoMessage() {}

func (x *TLPaymentsGetStarsGiveawayOptions) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[566]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsGetStarsGiveawayOptions.ProtoReflect.Descriptor instead.
func (*TLPaymentsGetStarsGiveawayOptions) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{566}
}

func (x *TLPaymentsGetStarsGiveawayOptions) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLPaymentsGetStarGifts struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Hash          int32                  `protobuf:"varint,3,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPaymentsGetStarGifts) Reset() {
	*x = TLPaymentsGetStarGifts{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[567]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsGetStarGifts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsGetStarGifts) ProtoMessage() {}

func (x *TLPaymentsGetStarGifts) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[567]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsGetStarGifts.ProtoReflect.Descriptor instead.
func (*TLPaymentsGetStarGifts) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{567}
}

func (x *TLPaymentsGetStarGifts) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsGetStarGifts) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLPaymentsSaveStarGift struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Unsave        bool                   `protobuf:"varint,3,opt,name=unsave,proto3" json:"unsave,omitempty"`
	Stargift      *InputSavedStarGift    `protobuf:"bytes,4,opt,name=stargift,proto3" json:"stargift,omitempty"`
	MsgId         int32                  `protobuf:"varint,5,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	UserId        *InputUser             `protobuf:"bytes,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPaymentsSaveStarGift) Reset() {
	*x = TLPaymentsSaveStarGift{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[568]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsSaveStarGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsSaveStarGift) ProtoMessage() {}

func (x *TLPaymentsSaveStarGift) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[568]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsSaveStarGift.ProtoReflect.Descriptor instead.
func (*TLPaymentsSaveStarGift) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{568}
}

func (x *TLPaymentsSaveStarGift) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsSaveStarGift) GetUnsave() bool {
	if x != nil {
		return x.Unsave
	}
	return false
}

func (x *TLPaymentsSaveStarGift) GetStargift() *InputSavedStarGift {
	if x != nil {
		return x.Stargift
	}
	return nil
}

func (x *TLPaymentsSaveStarGift) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *TLPaymentsSaveStarGift) GetUserId() *InputUser {
	if x != nil {
		return x.UserId
	}
	return nil
}

type TLPaymentsConvertStarGift struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Stargift      *InputSavedStarGift    `protobuf:"bytes,3,opt,name=stargift,proto3" json:"stargift,omitempty"`
	MsgId         int32                  `protobuf:"varint,4,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	UserId        *InputUser             `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPaymentsConvertStarGift) Reset() {
	*x = TLPaymentsConvertStarGift{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[569]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsConvertStarGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsConvertStarGift) ProtoMessage() {}

func (x *TLPaymentsConvertStarGift) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[569]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsConvertStarGift.ProtoReflect.Descriptor instead.
func (*TLPaymentsConvertStarGift) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{569}
}

func (x *TLPaymentsConvertStarGift) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsConvertStarGift) GetStargift() *InputSavedStarGift {
	if x != nil {
		return x.Stargift
	}
	return nil
}

func (x *TLPaymentsConvertStarGift) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *TLPaymentsConvertStarGift) GetUserId() *InputUser {
	if x != nil {
		return x.UserId
	}
	return nil
}

type TLPaymentsBotCancelStarsSubscription struct {
	state               protoimpl.MessageState  `protogen:"open.v1"`
	Constructor         TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Restore             bool                    `protobuf:"varint,3,opt,name=restore,proto3" json:"restore,omitempty"`
	UserId              *InputUser              `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChargeId_STRING     string                  `protobuf:"bytes,5,opt,name=charge_id_STRING,json=chargeIdSTRING,proto3" json:"charge_id_STRING,omitempty"`
	InvoiceSlug         *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=invoice_slug,json=invoiceSlug,proto3" json:"invoice_slug,omitempty"`
	ChargeId_FLAGSTRING *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=charge_id_FLAGSTRING,json=chargeIdFLAGSTRING,proto3" json:"charge_id_FLAGSTRING,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *TLPaymentsBotCancelStarsSubscription) Reset() {
	*x = TLPaymentsBotCancelStarsSubscription{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[570]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsBotCancelStarsSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsBotCancelStarsSubscription) ProtoMessage() {}

func (x *TLPaymentsBotCancelStarsSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[570]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsBotCancelStarsSubscription.ProtoReflect.Descriptor instead.
func (*TLPaymentsBotCancelStarsSubscription) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{570}
}

func (x *TLPaymentsBotCancelStarsSubscription) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsBotCancelStarsSubscription) GetRestore() bool {
	if x != nil {
		return x.Restore
	}
	return false
}

func (x *TLPaymentsBotCancelStarsSubscription) GetUserId() *InputUser {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *TLPaymentsBotCancelStarsSubscription) GetChargeId_STRING() string {
	if x != nil {
		return x.ChargeId_STRING
	}
	return ""
}

func (x *TLPaymentsBotCancelStarsSubscription) GetInvoiceSlug() *wrapperspb.StringValue {
	if x != nil {
		return x.InvoiceSlug
	}
	return nil
}

func (x *TLPaymentsBotCancelStarsSubscription) GetChargeId_FLAGSTRING() *wrapperspb.StringValue {
	if x != nil {
		return x.ChargeId_FLAGSTRING
	}
	return nil
}

type TLPaymentsGetConnectedStarRefBots struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Constructor   TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer              `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	OffsetDate    *wrapperspb.Int32Value  `protobuf:"bytes,4,opt,name=offset_date,json=offsetDate,proto3" json:"offset_date,omitempty"`
	OffsetLink    *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=offset_link,json=offsetLink,proto3" json:"offset_link,omitempty"`
	Limit         int32                   `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPaymentsGetConnectedStarRefBots) Reset() {
	*x = TLPaymentsGetConnectedStarRefBots{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[571]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsGetConnectedStarRefBots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsGetConnectedStarRefBots) ProtoMessage() {}

func (x *TLPaymentsGetConnectedStarRefBots) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[571]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsGetConnectedStarRefBots.ProtoReflect.Descriptor instead.
func (*TLPaymentsGetConnectedStarRefBots) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{571}
}

func (x *TLPaymentsGetConnectedStarRefBots) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsGetConnectedStarRefBots) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLPaymentsGetConnectedStarRefBots) GetOffsetDate() *wrapperspb.Int32Value {
	if x != nil {
		return x.OffsetDate
	}
	return nil
}

func (x *TLPaymentsGetConnectedStarRefBots) GetOffsetLink() *wrapperspb.StringValue {
	if x != nil {
		return x.OffsetLink
	}
	return nil
}

func (x *TLPaymentsGetConnectedStarRefBots) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TLPaymentsGetConnectedStarRefBot struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Bot           *InputUser             `protobuf:"bytes,4,opt,name=bot,proto3" json:"bot,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPaymentsGetConnectedStarRefBot) Reset() {
	*x = TLPaymentsGetConnectedStarRefBot{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[572]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsGetConnectedStarRefBot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsGetConnectedStarRefBot) ProtoMessage() {}

func (x *TLPaymentsGetConnectedStarRefBot) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[572]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsGetConnectedStarRefBot.ProtoReflect.Descriptor instead.
func (*TLPaymentsGetConnectedStarRefBot) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{572}
}

func (x *TLPaymentsGetConnectedStarRefBot) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsGetConnectedStarRefBot) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLPaymentsGetConnectedStarRefBot) GetBot() *InputUser {
	if x != nil {
		return x.Bot
	}
	return nil
}

type TLPaymentsGetSuggestedStarRefBots struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Constructor    TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	OrderByRevenue bool                   `protobuf:"varint,3,opt,name=order_by_revenue,json=orderByRevenue,proto3" json:"order_by_revenue,omitempty"`
	OrderByDate    bool                   `protobuf:"varint,4,opt,name=order_by_date,json=orderByDate,proto3" json:"order_by_date,omitempty"`
	Peer           *InputPeer             `protobuf:"bytes,5,opt,name=peer,proto3" json:"peer,omitempty"`
	Offset         string                 `protobuf:"bytes,6,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit          int32                  `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TLPaymentsGetSuggestedStarRefBots) Reset() {
	*x = TLPaymentsGetSuggestedStarRefBots{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[573]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsGetSuggestedStarRefBots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsGetSuggestedStarRefBots) ProtoMessage() {}

func (x *TLPaymentsGetSuggestedStarRefBots) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[573]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsGetSuggestedStarRefBots.ProtoReflect.Descriptor instead.
func (*TLPaymentsGetSuggestedStarRefBots) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{573}
}

func (x *TLPaymentsGetSuggestedStarRefBots) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsGetSuggestedStarRefBots) GetOrderByRevenue() bool {
	if x != nil {
		return x.OrderByRevenue
	}
	return false
}

func (x *TLPaymentsGetSuggestedStarRefBots) GetOrderByDate() bool {
	if x != nil {
		return x.OrderByDate
	}
	return false
}

func (x *TLPaymentsGetSuggestedStarRefBots) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLPaymentsGetSuggestedStarRefBots) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *TLPaymentsGetSuggestedStarRefBots) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TLPaymentsConnectStarRefBot struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Bot           *InputUser             `protobuf:"bytes,4,opt,name=bot,proto3" json:"bot,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPaymentsConnectStarRefBot) Reset() {
	*x = TLPaymentsConnectStarRefBot{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[574]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsConnectStarRefBot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsConnectStarRefBot) ProtoMessage() {}

func (x *TLPaymentsConnectStarRefBot) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[574]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsConnectStarRefBot.ProtoReflect.Descriptor instead.
func (*TLPaymentsConnectStarRefBot) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{574}
}

func (x *TLPaymentsConnectStarRefBot) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsConnectStarRefBot) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLPaymentsConnectStarRefBot) GetBot() *InputUser {
	if x != nil {
		return x.Bot
	}
	return nil
}

type TLPaymentsEditConnectedStarRefBot struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Revoked       bool                   `protobuf:"varint,3,opt,name=revoked,proto3" json:"revoked,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,4,opt,name=peer,proto3" json:"peer,omitempty"`
	Link          string                 `protobuf:"bytes,5,opt,name=link,proto3" json:"link,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPaymentsEditConnectedStarRefBot) Reset() {
	*x = TLPaymentsEditConnectedStarRefBot{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[575]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsEditConnectedStarRefBot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsEditConnectedStarRefBot) ProtoMessage() {}

func (x *TLPaymentsEditConnectedStarRefBot) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[575]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsEditConnectedStarRefBot.ProtoReflect.Descriptor instead.
func (*TLPaymentsEditConnectedStarRefBot) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{575}
}

func (x *TLPaymentsEditConnectedStarRefBot) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsEditConnectedStarRefBot) GetRevoked() bool {
	if x != nil {
		return x.Revoked
	}
	return false
}

func (x *TLPaymentsEditConnectedStarRefBot) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLPaymentsEditConnectedStarRefBot) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

type TLPaymentsGetStarGiftUpgradePreview struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	GiftId        int64                  `protobuf:"varint,3,opt,name=gift_id,json=giftId,proto3" json:"gift_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPaymentsGetStarGiftUpgradePreview) Reset() {
	*x = TLPaymentsGetStarGiftUpgradePreview{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[576]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsGetStarGiftUpgradePreview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsGetStarGiftUpgradePreview) ProtoMessage() {}

func (x *TLPaymentsGetStarGiftUpgradePreview) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[576]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsGetStarGiftUpgradePreview.ProtoReflect.Descriptor instead.
func (*TLPaymentsGetStarGiftUpgradePreview) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{576}
}

func (x *TLPaymentsGetStarGiftUpgradePreview) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsGetStarGiftUpgradePreview) GetGiftId() int64 {
	if x != nil {
		return x.GiftId
	}
	return 0
}

type TLPaymentsUpgradeStarGift struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Constructor         TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	KeepOriginalDetails bool                   `protobuf:"varint,3,opt,name=keep_original_details,json=keepOriginalDetails,proto3" json:"keep_original_details,omitempty"`
	Stargift            *InputSavedStarGift    `protobuf:"bytes,4,opt,name=stargift,proto3" json:"stargift,omitempty"`
	MsgId               int32                  `protobuf:"varint,5,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *TLPaymentsUpgradeStarGift) Reset() {
	*x = TLPaymentsUpgradeStarGift{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[577]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsUpgradeStarGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsUpgradeStarGift) ProtoMessage() {}

func (x *TLPaymentsUpgradeStarGift) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[577]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsUpgradeStarGift.ProtoReflect.Descriptor instead.
func (*TLPaymentsUpgradeStarGift) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{577}
}

func (x *TLPaymentsUpgradeStarGift) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsUpgradeStarGift) GetKeepOriginalDetails() bool {
	if x != nil {
		return x.KeepOriginalDetails
	}
	return false
}

func (x *TLPaymentsUpgradeStarGift) GetStargift() *InputSavedStarGift {
	if x != nil {
		return x.Stargift
	}
	return nil
}

func (x *TLPaymentsUpgradeStarGift) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

type TLPaymentsTransferStarGift struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Constructor    TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Stargift       *InputSavedStarGift    `protobuf:"bytes,3,opt,name=stargift,proto3" json:"stargift,omitempty"`
	ToId_INPUTPEER *InputPeer             `protobuf:"bytes,4,opt,name=to_id_INPUTPEER,json=toIdINPUTPEER,proto3" json:"to_id_INPUTPEER,omitempty"`
	MsgId          int32                  `protobuf:"varint,5,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	ToId_INPUTUSER *InputUser             `protobuf:"bytes,6,opt,name=to_id_INPUTUSER,json=toIdINPUTUSER,proto3" json:"to_id_INPUTUSER,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TLPaymentsTransferStarGift) Reset() {
	*x = TLPaymentsTransferStarGift{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[578]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsTransferStarGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsTransferStarGift) ProtoMessage() {}

func (x *TLPaymentsTransferStarGift) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[578]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsTransferStarGift.ProtoReflect.Descriptor instead.
func (*TLPaymentsTransferStarGift) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{578}
}

func (x *TLPaymentsTransferStarGift) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsTransferStarGift) GetStargift() *InputSavedStarGift {
	if x != nil {
		return x.Stargift
	}
	return nil
}

func (x *TLPaymentsTransferStarGift) GetToId_INPUTPEER() *InputPeer {
	if x != nil {
		return x.ToId_INPUTPEER
	}
	return nil
}

func (x *TLPaymentsTransferStarGift) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *TLPaymentsTransferStarGift) GetToId_INPUTUSER() *InputUser {
	if x != nil {
		return x.ToId_INPUTUSER
	}
	return nil
}

type TLPaymentsGetUniqueStarGift struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Slug          string                 `protobuf:"bytes,3,opt,name=slug,proto3" json:"slug,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPaymentsGetUniqueStarGift) Reset() {
	*x = TLPaymentsGetUniqueStarGift{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[579]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsGetUniqueStarGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsGetUniqueStarGift) ProtoMessage() {}

func (x *TLPaymentsGetUniqueStarGift) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[579]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsGetUniqueStarGift.ProtoReflect.Descriptor instead.
func (*TLPaymentsGetUniqueStarGift) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{579}
}

func (x *TLPaymentsGetUniqueStarGift) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsGetUniqueStarGift) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

type TLPaymentsGetSavedStarGifts struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Constructor      TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	ExcludeUnsaved   bool                   `protobuf:"varint,3,opt,name=exclude_unsaved,json=excludeUnsaved,proto3" json:"exclude_unsaved,omitempty"`
	ExcludeSaved     bool                   `protobuf:"varint,4,opt,name=exclude_saved,json=excludeSaved,proto3" json:"exclude_saved,omitempty"`
	ExcludeUnlimited bool                   `protobuf:"varint,5,opt,name=exclude_unlimited,json=excludeUnlimited,proto3" json:"exclude_unlimited,omitempty"`
	ExcludeLimited   bool                   `protobuf:"varint,6,opt,name=exclude_limited,json=excludeLimited,proto3" json:"exclude_limited,omitempty"`
	ExcludeUnique    bool                   `protobuf:"varint,7,opt,name=exclude_unique,json=excludeUnique,proto3" json:"exclude_unique,omitempty"`
	SortByValue      bool                   `protobuf:"varint,8,opt,name=sort_by_value,json=sortByValue,proto3" json:"sort_by_value,omitempty"`
	Peer             *InputPeer             `protobuf:"bytes,9,opt,name=peer,proto3" json:"peer,omitempty"`
	Offset           string                 `protobuf:"bytes,10,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit            int32                  `protobuf:"varint,11,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TLPaymentsGetSavedStarGifts) Reset() {
	*x = TLPaymentsGetSavedStarGifts{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[580]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsGetSavedStarGifts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsGetSavedStarGifts) ProtoMessage() {}

func (x *TLPaymentsGetSavedStarGifts) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[580]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsGetSavedStarGifts.ProtoReflect.Descriptor instead.
func (*TLPaymentsGetSavedStarGifts) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{580}
}

func (x *TLPaymentsGetSavedStarGifts) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsGetSavedStarGifts) GetExcludeUnsaved() bool {
	if x != nil {
		return x.ExcludeUnsaved
	}
	return false
}

func (x *TLPaymentsGetSavedStarGifts) GetExcludeSaved() bool {
	if x != nil {
		return x.ExcludeSaved
	}
	return false
}

func (x *TLPaymentsGetSavedStarGifts) GetExcludeUnlimited() bool {
	if x != nil {
		return x.ExcludeUnlimited
	}
	return false
}

func (x *TLPaymentsGetSavedStarGifts) GetExcludeLimited() bool {
	if x != nil {
		return x.ExcludeLimited
	}
	return false
}

func (x *TLPaymentsGetSavedStarGifts) GetExcludeUnique() bool {
	if x != nil {
		return x.ExcludeUnique
	}
	return false
}

func (x *TLPaymentsGetSavedStarGifts) GetSortByValue() bool {
	if x != nil {
		return x.SortByValue
	}
	return false
}

func (x *TLPaymentsGetSavedStarGifts) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLPaymentsGetSavedStarGifts) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *TLPaymentsGetSavedStarGifts) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TLPaymentsGetSavedStarGift struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Stargift      []*InputSavedStarGift  `protobuf:"bytes,3,rep,name=stargift,proto3" json:"stargift,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPaymentsGetSavedStarGift) Reset() {
	*x = TLPaymentsGetSavedStarGift{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[581]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsGetSavedStarGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsGetSavedStarGift) ProtoMessage() {}

func (x *TLPaymentsGetSavedStarGift) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[581]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsGetSavedStarGift.ProtoReflect.Descriptor instead.
func (*TLPaymentsGetSavedStarGift) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{581}
}

func (x *TLPaymentsGetSavedStarGift) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsGetSavedStarGift) GetStargift() []*InputSavedStarGift {
	if x != nil {
		return x.Stargift
	}
	return nil
}

type TLPaymentsGetStarGiftWithdrawalUrl struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Stargift      *InputSavedStarGift    `protobuf:"bytes,3,opt,name=stargift,proto3" json:"stargift,omitempty"`
	Password      *InputCheckPasswordSRP `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPaymentsGetStarGiftWithdrawalUrl) Reset() {
	*x = TLPaymentsGetStarGiftWithdrawalUrl{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[582]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsGetStarGiftWithdrawalUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsGetStarGiftWithdrawalUrl) ProtoMessage() {}

func (x *TLPaymentsGetStarGiftWithdrawalUrl) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[582]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsGetStarGiftWithdrawalUrl.ProtoReflect.Descriptor instead.
func (*TLPaymentsGetStarGiftWithdrawalUrl) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{582}
}

func (x *TLPaymentsGetStarGiftWithdrawalUrl) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsGetStarGiftWithdrawalUrl) GetStargift() *InputSavedStarGift {
	if x != nil {
		return x.Stargift
	}
	return nil
}

func (x *TLPaymentsGetStarGiftWithdrawalUrl) GetPassword() *InputCheckPasswordSRP {
	if x != nil {
		return x.Password
	}
	return nil
}

type TLPaymentsToggleChatStarGiftNotifications struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Enabled       bool                   `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,4,opt,name=peer,proto3" json:"peer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPaymentsToggleChatStarGiftNotifications) Reset() {
	*x = TLPaymentsToggleChatStarGiftNotifications{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[583]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsToggleChatStarGiftNotifications) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsToggleChatStarGiftNotifications) ProtoMessage() {}

func (x *TLPaymentsToggleChatStarGiftNotifications) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[583]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsToggleChatStarGiftNotifications.ProtoReflect.Descriptor instead.
func (*TLPaymentsToggleChatStarGiftNotifications) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{583}
}

func (x *TLPaymentsToggleChatStarGiftNotifications) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsToggleChatStarGiftNotifications) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *TLPaymentsToggleChatStarGiftNotifications) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

type TLPaymentsToggleStarGiftsPinnedToTop struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Stargift      []*InputSavedStarGift  `protobuf:"bytes,4,rep,name=stargift,proto3" json:"stargift,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPaymentsToggleStarGiftsPinnedToTop) Reset() {
	*x = TLPaymentsToggleStarGiftsPinnedToTop{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[584]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsToggleStarGiftsPinnedToTop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsToggleStarGiftsPinnedToTop) ProtoMessage() {}

func (x *TLPaymentsToggleStarGiftsPinnedToTop) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[584]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsToggleStarGiftsPinnedToTop.ProtoReflect.Descriptor instead.
func (*TLPaymentsToggleStarGiftsPinnedToTop) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{584}
}

func (x *TLPaymentsToggleStarGiftsPinnedToTop) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsToggleStarGiftsPinnedToTop) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLPaymentsToggleStarGiftsPinnedToTop) GetStargift() []*InputSavedStarGift {
	if x != nil {
		return x.Stargift
	}
	return nil
}

type TLPaymentsCanPurchaseStore struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Constructor   TLConstructor             `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Purpose       *InputStorePaymentPurpose `protobuf:"bytes,3,opt,name=purpose,proto3" json:"purpose,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPaymentsCanPurchaseStore) Reset() {
	*x = TLPaymentsCanPurchaseStore{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[585]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsCanPurchaseStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsCanPurchaseStore) ProtoMessage() {}

func (x *TLPaymentsCanPurchaseStore) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[585]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsCanPurchaseStore.ProtoReflect.Descriptor instead.
func (*TLPaymentsCanPurchaseStore) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{585}
}

func (x *TLPaymentsCanPurchaseStore) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsCanPurchaseStore) GetPurpose() *InputStorePaymentPurpose {
	if x != nil {
		return x.Purpose
	}
	return nil
}

type TLStickersCreateStickerSet struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Constructor   TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Masks         bool                    `protobuf:"varint,3,opt,name=masks,proto3" json:"masks,omitempty"`
	Emojis        bool                    `protobuf:"varint,4,opt,name=emojis,proto3" json:"emojis,omitempty"`
	TextColor     bool                    `protobuf:"varint,5,opt,name=text_color,json=textColor,proto3" json:"text_color,omitempty"`
	UserId        *InputUser              `protobuf:"bytes,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Title         string                  `protobuf:"bytes,7,opt,name=title,proto3" json:"title,omitempty"`
	ShortName     string                  `protobuf:"bytes,8,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Thumb         *InputDocument          `protobuf:"bytes,9,opt,name=thumb,proto3" json:"thumb,omitempty"`
	Stickers      []*InputStickerSetItem  `protobuf:"bytes,10,rep,name=stickers,proto3" json:"stickers,omitempty"`
	Software      *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=software,proto3" json:"software,omitempty"`
	Animated      bool                    `protobuf:"varint,12,opt,name=animated,proto3" json:"animated,omitempty"`
	Videos        bool                    `protobuf:"varint,13,opt,name=videos,proto3" json:"videos,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStickersCreateStickerSet) Reset() {
	*x = TLStickersCreateStickerSet{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[586]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStickersCreateStickerSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStickersCreateStickerSet) ProtoMessage() {}

func (x *TLStickersCreateStickerSet) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[586]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStickersCreateStickerSet.ProtoReflect.Descriptor instead.
func (*TLStickersCreateStickerSet) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{586}
}

func (x *TLStickersCreateStickerSet) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStickersCreateStickerSet) GetMasks() bool {
	if x != nil {
		return x.Masks
	}
	return false
}

func (x *TLStickersCreateStickerSet) GetEmojis() bool {
	if x != nil {
		return x.Emojis
	}
	return false
}

func (x *TLStickersCreateStickerSet) GetTextColor() bool {
	if x != nil {
		return x.TextColor
	}
	return false
}

func (x *TLStickersCreateStickerSet) GetUserId() *InputUser {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *TLStickersCreateStickerSet) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TLStickersCreateStickerSet) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *TLStickersCreateStickerSet) GetThumb() *InputDocument {
	if x != nil {
		return x.Thumb
	}
	return nil
}

func (x *TLStickersCreateStickerSet) GetStickers() []*InputStickerSetItem {
	if x != nil {
		return x.Stickers
	}
	return nil
}

func (x *TLStickersCreateStickerSet) GetSoftware() *wrapperspb.StringValue {
	if x != nil {
		return x.Software
	}
	return nil
}

func (x *TLStickersCreateStickerSet) GetAnimated() bool {
	if x != nil {
		return x.Animated
	}
	return false
}

func (x *TLStickersCreateStickerSet) GetVideos() bool {
	if x != nil {
		return x.Videos
	}
	return false
}

type TLStickersRemoveStickerFromSet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Sticker       *InputDocument         `protobuf:"bytes,3,opt,name=sticker,proto3" json:"sticker,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStickersRemoveStickerFromSet) Reset() {
	*x = TLStickersRemoveStickerFromSet{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[587]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStickersRemoveStickerFromSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStickersRemoveStickerFromSet) ProtoMessage() {}

func (x *TLStickersRemoveStickerFromSet) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[587]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStickersRemoveStickerFromSet.ProtoReflect.Descriptor instead.
func (*TLStickersRemoveStickerFromSet) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{587}
}

func (x *TLStickersRemoveStickerFromSet) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStickersRemoveStickerFromSet) GetSticker() *InputDocument {
	if x != nil {
		return x.Sticker
	}
	return nil
}

type TLStickersChangeStickerPosition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Sticker       *InputDocument         `protobuf:"bytes,3,opt,name=sticker,proto3" json:"sticker,omitempty"`
	Position      int32                  `protobuf:"varint,4,opt,name=position,proto3" json:"position,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStickersChangeStickerPosition) Reset() {
	*x = TLStickersChangeStickerPosition{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[588]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStickersChangeStickerPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStickersChangeStickerPosition) ProtoMessage() {}

func (x *TLStickersChangeStickerPosition) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[588]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStickersChangeStickerPosition.ProtoReflect.Descriptor instead.
func (*TLStickersChangeStickerPosition) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{588}
}

func (x *TLStickersChangeStickerPosition) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStickersChangeStickerPosition) GetSticker() *InputDocument {
	if x != nil {
		return x.Sticker
	}
	return nil
}

func (x *TLStickersChangeStickerPosition) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

type TLStickersAddStickerToSet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Stickerset    *InputStickerSet       `protobuf:"bytes,3,opt,name=stickerset,proto3" json:"stickerset,omitempty"`
	Sticker       *InputStickerSetItem   `protobuf:"bytes,4,opt,name=sticker,proto3" json:"sticker,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStickersAddStickerToSet) Reset() {
	*x = TLStickersAddStickerToSet{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[589]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStickersAddStickerToSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStickersAddStickerToSet) ProtoMessage() {}

func (x *TLStickersAddStickerToSet) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[589]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStickersAddStickerToSet.ProtoReflect.Descriptor instead.
func (*TLStickersAddStickerToSet) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{589}
}

func (x *TLStickersAddStickerToSet) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStickersAddStickerToSet) GetStickerset() *InputStickerSet {
	if x != nil {
		return x.Stickerset
	}
	return nil
}

func (x *TLStickersAddStickerToSet) GetSticker() *InputStickerSetItem {
	if x != nil {
		return x.Sticker
	}
	return nil
}

type TLStickersSetStickerSetThumb struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Constructor     TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Stickerset      *InputStickerSet       `protobuf:"bytes,3,opt,name=stickerset,proto3" json:"stickerset,omitempty"`
	Thumb           *InputDocument         `protobuf:"bytes,4,opt,name=thumb,proto3" json:"thumb,omitempty"`
	ThumbDocumentId *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=thumb_document_id,json=thumbDocumentId,proto3" json:"thumb_document_id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TLStickersSetStickerSetThumb) Reset() {
	*x = TLStickersSetStickerSetThumb{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[590]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStickersSetStickerSetThumb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStickersSetStickerSetThumb) ProtoMessage() {}

func (x *TLStickersSetStickerSetThumb) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[590]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStickersSetStickerSetThumb.ProtoReflect.Descriptor instead.
func (*TLStickersSetStickerSetThumb) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{590}
}

func (x *TLStickersSetStickerSetThumb) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStickersSetStickerSetThumb) GetStickerset() *InputStickerSet {
	if x != nil {
		return x.Stickerset
	}
	return nil
}

func (x *TLStickersSetStickerSetThumb) GetThumb() *InputDocument {
	if x != nil {
		return x.Thumb
	}
	return nil
}

func (x *TLStickersSetStickerSetThumb) GetThumbDocumentId() *wrapperspb.Int64Value {
	if x != nil {
		return x.ThumbDocumentId
	}
	return nil
}

type TLStickersCheckShortName struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	ShortName     string                 `protobuf:"bytes,3,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStickersCheckShortName) Reset() {
	*x = TLStickersCheckShortName{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[591]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStickersCheckShortName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStickersCheckShortName) ProtoMessage() {}

func (x *TLStickersCheckShortName) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[591]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStickersCheckShortName.ProtoReflect.Descriptor instead.
func (*TLStickersCheckShortName) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{591}
}

func (x *TLStickersCheckShortName) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStickersCheckShortName) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

type TLStickersSuggestShortName struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Title         string                 `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStickersSuggestShortName) Reset() {
	*x = TLStickersSuggestShortName{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[592]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStickersSuggestShortName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStickersSuggestShortName) ProtoMessage() {}

func (x *TLStickersSuggestShortName) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[592]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStickersSuggestShortName.ProtoReflect.Descriptor instead.
func (*TLStickersSuggestShortName) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{592}
}

func (x *TLStickersSuggestShortName) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStickersSuggestShortName) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type TLStickersChangeSticker struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Constructor   TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Sticker       *InputDocument          `protobuf:"bytes,3,opt,name=sticker,proto3" json:"sticker,omitempty"`
	Emoji         *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=emoji,proto3" json:"emoji,omitempty"`
	MaskCoords    *MaskCoords             `protobuf:"bytes,5,opt,name=mask_coords,json=maskCoords,proto3" json:"mask_coords,omitempty"`
	Keywords      *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=keywords,proto3" json:"keywords,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStickersChangeSticker) Reset() {
	*x = TLStickersChangeSticker{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[593]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStickersChangeSticker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStickersChangeSticker) ProtoMessage() {}

func (x *TLStickersChangeSticker) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[593]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStickersChangeSticker.ProtoReflect.Descriptor instead.
func (*TLStickersChangeSticker) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{593}
}

func (x *TLStickersChangeSticker) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStickersChangeSticker) GetSticker() *InputDocument {
	if x != nil {
		return x.Sticker
	}
	return nil
}

func (x *TLStickersChangeSticker) GetEmoji() *wrapperspb.StringValue {
	if x != nil {
		return x.Emoji
	}
	return nil
}

func (x *TLStickersChangeSticker) GetMaskCoords() *MaskCoords {
	if x != nil {
		return x.MaskCoords
	}
	return nil
}

func (x *TLStickersChangeSticker) GetKeywords() *wrapperspb.StringValue {
	if x != nil {
		return x.Keywords
	}
	return nil
}

type TLStickersRenameStickerSet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Stickerset    *InputStickerSet       `protobuf:"bytes,3,opt,name=stickerset,proto3" json:"stickerset,omitempty"`
	Title         string                 `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStickersRenameStickerSet) Reset() {
	*x = TLStickersRenameStickerSet{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[594]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStickersRenameStickerSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStickersRenameStickerSet) ProtoMessage() {}

func (x *TLStickersRenameStickerSet) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[594]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStickersRenameStickerSet.ProtoReflect.Descriptor instead.
func (*TLStickersRenameStickerSet) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{594}
}

func (x *TLStickersRenameStickerSet) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStickersRenameStickerSet) GetStickerset() *InputStickerSet {
	if x != nil {
		return x.Stickerset
	}
	return nil
}

func (x *TLStickersRenameStickerSet) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type TLStickersDeleteStickerSet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Stickerset    *InputStickerSet       `protobuf:"bytes,3,opt,name=stickerset,proto3" json:"stickerset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStickersDeleteStickerSet) Reset() {
	*x = TLStickersDeleteStickerSet{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[595]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStickersDeleteStickerSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStickersDeleteStickerSet) ProtoMessage() {}

func (x *TLStickersDeleteStickerSet) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[595]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStickersDeleteStickerSet.ProtoReflect.Descriptor instead.
func (*TLStickersDeleteStickerSet) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{595}
}

func (x *TLStickersDeleteStickerSet) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStickersDeleteStickerSet) GetStickerset() *InputStickerSet {
	if x != nil {
		return x.Stickerset
	}
	return nil
}

type TLStickersReplaceSticker struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Sticker       *InputDocument         `protobuf:"bytes,3,opt,name=sticker,proto3" json:"sticker,omitempty"`
	NewSticker    *InputStickerSetItem   `protobuf:"bytes,4,opt,name=new_sticker,json=newSticker,proto3" json:"new_sticker,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStickersReplaceSticker) Reset() {
	*x = TLStickersReplaceSticker{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[596]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStickersReplaceSticker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStickersReplaceSticker) ProtoMessage() {}

func (x *TLStickersReplaceSticker) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[596]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStickersReplaceSticker.ProtoReflect.Descriptor instead.
func (*TLStickersReplaceSticker) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{596}
}

func (x *TLStickersReplaceSticker) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStickersReplaceSticker) GetSticker() *InputDocument {
	if x != nil {
		return x.Sticker
	}
	return nil
}

func (x *TLStickersReplaceSticker) GetNewSticker() *InputStickerSetItem {
	if x != nil {
		return x.NewSticker
	}
	return nil
}

type TLPhoneGetCallConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPhoneGetCallConfig) Reset() {
	*x = TLPhoneGetCallConfig{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[597]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPhoneGetCallConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPhoneGetCallConfig) ProtoMessage() {}

func (x *TLPhoneGetCallConfig) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[597]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPhoneGetCallConfig.ProtoReflect.Descriptor instead.
func (*TLPhoneGetCallConfig) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{597}
}

func (x *TLPhoneGetCallConfig) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLPhoneRequestCall struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Constructor    TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Video          bool                   `protobuf:"varint,3,opt,name=video,proto3" json:"video,omitempty"`
	UserId         *InputUser             `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ConferenceCall *InputGroupCall        `protobuf:"bytes,5,opt,name=conference_call,json=conferenceCall,proto3" json:"conference_call,omitempty"`
	RandomId       int32                  `protobuf:"varint,6,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	GAHash         []byte                 `protobuf:"bytes,7,opt,name=g_a_hash,json=gAHash,proto3" json:"g_a_hash,omitempty"`
	Protocol       *PhoneCallProtocol     `protobuf:"bytes,8,opt,name=protocol,proto3" json:"protocol,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TLPhoneRequestCall) Reset() {
	*x = TLPhoneRequestCall{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[598]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPhoneRequestCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPhoneRequestCall) ProtoMessage() {}

func (x *TLPhoneRequestCall) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[598]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPhoneRequestCall.ProtoReflect.Descriptor instead.
func (*TLPhoneRequestCall) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{598}
}

func (x *TLPhoneRequestCall) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPhoneRequestCall) GetVideo() bool {
	if x != nil {
		return x.Video
	}
	return false
}

func (x *TLPhoneRequestCall) GetUserId() *InputUser {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *TLPhoneRequestCall) GetConferenceCall() *InputGroupCall {
	if x != nil {
		return x.ConferenceCall
	}
	return nil
}

func (x *TLPhoneRequestCall) GetRandomId() int32 {
	if x != nil {
		return x.RandomId
	}
	return 0
}

func (x *TLPhoneRequestCall) GetGAHash() []byte {
	if x != nil {
		return x.GAHash
	}
	return nil
}

func (x *TLPhoneRequestCall) GetProtocol() *PhoneCallProtocol {
	if x != nil {
		return x.Protocol
	}
	return nil
}

type TLPhoneAcceptCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPhoneCall        `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	GB            []byte                 `protobuf:"bytes,4,opt,name=g_b,json=gB,proto3" json:"g_b,omitempty"`
	Protocol      *PhoneCallProtocol     `protobuf:"bytes,5,opt,name=protocol,proto3" json:"protocol,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPhoneAcceptCall) Reset() {
	*x = TLPhoneAcceptCall{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[599]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPhoneAcceptCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPhoneAcceptCall) ProtoMessage() {}

func (x *TLPhoneAcceptCall) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[599]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPhoneAcceptCall.ProtoReflect.Descriptor instead.
func (*TLPhoneAcceptCall) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{599}
}

func (x *TLPhoneAcceptCall) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPhoneAcceptCall) GetPeer() *InputPhoneCall {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLPhoneAcceptCall) GetGB() []byte {
	if x != nil {
		return x.GB
	}
	return nil
}

func (x *TLPhoneAcceptCall) GetProtocol() *PhoneCallProtocol {
	if x != nil {
		return x.Protocol
	}
	return nil
}

type TLPhoneConfirmCall struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Constructor    TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer           *InputPhoneCall        `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	GA             []byte                 `protobuf:"bytes,4,opt,name=g_a,json=gA,proto3" json:"g_a,omitempty"`
	KeyFingerprint int64                  `protobuf:"varint,5,opt,name=key_fingerprint,json=keyFingerprint,proto3" json:"key_fingerprint,omitempty"`
	Protocol       *PhoneCallProtocol     `protobuf:"bytes,6,opt,name=protocol,proto3" json:"protocol,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TLPhoneConfirmCall) Reset() {
	*x = TLPhoneConfirmCall{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[600]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPhoneConfirmCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPhoneConfirmCall) ProtoMessage() {}

func (x *TLPhoneConfirmCall) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[600]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPhoneConfirmCall.ProtoReflect.Descriptor instead.
func (*TLPhoneConfirmCall) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{600}
}

func (x *TLPhoneConfirmCall) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPhoneConfirmCall) GetPeer() *InputPhoneCall {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLPhoneConfirmCall) GetGA() []byte {
	if x != nil {
		return x.GA
	}
	return nil
}

func (x *TLPhoneConfirmCall) GetKeyFingerprint() int64 {
	if x != nil {
		return x.KeyFingerprint
	}
	return 0
}

func (x *TLPhoneConfirmCall) GetProtocol() *PhoneCallProtocol {
	if x != nil {
		return x.Protocol
	}
	return nil
}

type TLPhoneReceivedCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPhoneCall        `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPhoneReceivedCall) Reset() {
	*x = TLPhoneReceivedCall{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[601]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPhoneReceivedCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPhoneReceivedCall) ProtoMessage() {}

func (x *TLPhoneReceivedCall) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[601]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPhoneReceivedCall.ProtoReflect.Descriptor instead.
func (*TLPhoneReceivedCall) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{601}
}

func (x *TLPhoneReceivedCall) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPhoneReceivedCall) GetPeer() *InputPhoneCall {
	if x != nil {
		return x.Peer
	}
	return nil
}

type TLPhoneDiscardCall struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Constructor   TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Video         bool                    `protobuf:"varint,3,opt,name=video,proto3" json:"video,omitempty"`
	Peer          *InputPhoneCall         `protobuf:"bytes,4,opt,name=peer,proto3" json:"peer,omitempty"`
	Duration      int32                   `protobuf:"varint,5,opt,name=duration,proto3" json:"duration,omitempty"`
	Reason        *PhoneCallDiscardReason `protobuf:"bytes,6,opt,name=reason,proto3" json:"reason,omitempty"`
	ConnectionId  int64                   `protobuf:"varint,7,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPhoneDiscardCall) Reset() {
	*x = TLPhoneDiscardCall{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[602]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPhoneDiscardCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPhoneDiscardCall) ProtoMessage() {}

func (x *TLPhoneDiscardCall) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[602]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPhoneDiscardCall.ProtoReflect.Descriptor instead.
func (*TLPhoneDiscardCall) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{602}
}

func (x *TLPhoneDiscardCall) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPhoneDiscardCall) GetVideo() bool {
	if x != nil {
		return x.Video
	}
	return false
}

func (x *TLPhoneDiscardCall) GetPeer() *InputPhoneCall {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLPhoneDiscardCall) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *TLPhoneDiscardCall) GetReason() *PhoneCallDiscardReason {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *TLPhoneDiscardCall) GetConnectionId() int64 {
	if x != nil {
		return x.ConnectionId
	}
	return 0
}

type TLPhoneSetCallRating struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Constructor    TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	UserInitiative bool                   `protobuf:"varint,3,opt,name=user_initiative,json=userInitiative,proto3" json:"user_initiative,omitempty"`
	Peer           *InputPhoneCall        `protobuf:"bytes,4,opt,name=peer,proto3" json:"peer,omitempty"`
	Rating         int32                  `protobuf:"varint,5,opt,name=rating,proto3" json:"rating,omitempty"`
	Comment        string                 `protobuf:"bytes,6,opt,name=comment,proto3" json:"comment,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TLPhoneSetCallRating) Reset() {
	*x = TLPhoneSetCallRating{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[603]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPhoneSetCallRating) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPhoneSetCallRating) ProtoMessage() {}

func (x *TLPhoneSetCallRating) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[603]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPhoneSetCallRating.ProtoReflect.Descriptor instead.
func (*TLPhoneSetCallRating) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{603}
}

func (x *TLPhoneSetCallRating) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPhoneSetCallRating) GetUserInitiative() bool {
	if x != nil {
		return x.UserInitiative
	}
	return false
}

func (x *TLPhoneSetCallRating) GetPeer() *InputPhoneCall {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLPhoneSetCallRating) GetRating() int32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *TLPhoneSetCallRating) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type TLPhoneSaveCallDebug struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPhoneCall        `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Debug         *DataJSON              `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPhoneSaveCallDebug) Reset() {
	*x = TLPhoneSaveCallDebug{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[604]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPhoneSaveCallDebug) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPhoneSaveCallDebug) ProtoMessage() {}

func (x *TLPhoneSaveCallDebug) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[604]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPhoneSaveCallDebug.ProtoReflect.Descriptor instead.
func (*TLPhoneSaveCallDebug) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{604}
}

func (x *TLPhoneSaveCallDebug) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPhoneSaveCallDebug) GetPeer() *InputPhoneCall {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLPhoneSaveCallDebug) GetDebug() *DataJSON {
	if x != nil {
		return x.Debug
	}
	return nil
}

type TLPhoneSendSignalingData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPhoneCall        `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Data          []byte                 `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPhoneSendSignalingData) Reset() {
	*x = TLPhoneSendSignalingData{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[605]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPhoneSendSignalingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPhoneSendSignalingData) ProtoMessage() {}

func (x *TLPhoneSendSignalingData) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[605]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPhoneSendSignalingData.ProtoReflect.Descriptor instead.
func (*TLPhoneSendSignalingData) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{605}
}

func (x *TLPhoneSendSignalingData) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPhoneSendSignalingData) GetPeer() *InputPhoneCall {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLPhoneSendSignalingData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type TLPhoneCreateGroupCall struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Constructor   TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	RtmpStream    bool                    `protobuf:"varint,3,opt,name=rtmp_stream,json=rtmpStream,proto3" json:"rtmp_stream,omitempty"`
	Peer          *InputPeer              `protobuf:"bytes,4,opt,name=peer,proto3" json:"peer,omitempty"`
	RandomId      int32                   `protobuf:"varint,5,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	Title         *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	ScheduleDate  *wrapperspb.Int32Value  `protobuf:"bytes,7,opt,name=schedule_date,json=scheduleDate,proto3" json:"schedule_date,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPhoneCreateGroupCall) Reset() {
	*x = TLPhoneCreateGroupCall{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[606]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPhoneCreateGroupCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPhoneCreateGroupCall) ProtoMessage() {}

func (x *TLPhoneCreateGroupCall) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[606]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPhoneCreateGroupCall.ProtoReflect.Descriptor instead.
func (*TLPhoneCreateGroupCall) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{606}
}

func (x *TLPhoneCreateGroupCall) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPhoneCreateGroupCall) GetRtmpStream() bool {
	if x != nil {
		return x.RtmpStream
	}
	return false
}

func (x *TLPhoneCreateGroupCall) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLPhoneCreateGroupCall) GetRandomId() int32 {
	if x != nil {
		return x.RandomId
	}
	return 0
}

func (x *TLPhoneCreateGroupCall) GetTitle() *wrapperspb.StringValue {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *TLPhoneCreateGroupCall) GetScheduleDate() *wrapperspb.Int32Value {
	if x != nil {
		return x.ScheduleDate
	}
	return nil
}

type TLPhoneJoinGroupCall struct {
	state          protoimpl.MessageState  `protogen:"open.v1"`
	Constructor    TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Muted          bool                    `protobuf:"varint,3,opt,name=muted,proto3" json:"muted,omitempty"`
	VideoStopped   bool                    `protobuf:"varint,4,opt,name=video_stopped,json=videoStopped,proto3" json:"video_stopped,omitempty"`
	Call           *InputGroupCall         `protobuf:"bytes,5,opt,name=call,proto3" json:"call,omitempty"`
	JoinAs         *InputPeer              `protobuf:"bytes,6,opt,name=join_as,json=joinAs,proto3" json:"join_as,omitempty"`
	InviteHash     *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=invite_hash,json=inviteHash,proto3" json:"invite_hash,omitempty"`
	KeyFingerprint *wrapperspb.Int64Value  `protobuf:"bytes,8,opt,name=key_fingerprint,json=keyFingerprint,proto3" json:"key_fingerprint,omitempty"`
	Params         *DataJSON               `protobuf:"bytes,9,opt,name=params,proto3" json:"params,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TLPhoneJoinGroupCall) Reset() {
	*x = TLPhoneJoinGroupCall{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[607]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPhoneJoinGroupCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPhoneJoinGroupCall) ProtoMessage() {}

func (x *TLPhoneJoinGroupCall) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[607]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPhoneJoinGroupCall.ProtoReflect.Descriptor instead.
func (*TLPhoneJoinGroupCall) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{607}
}

func (x *TLPhoneJoinGroupCall) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPhoneJoinGroupCall) GetMuted() bool {
	if x != nil {
		return x.Muted
	}
	return false
}

func (x *TLPhoneJoinGroupCall) GetVideoStopped() bool {
	if x != nil {
		return x.VideoStopped
	}
	return false
}

func (x *TLPhoneJoinGroupCall) GetCall() *InputGroupCall {
	if x != nil {
		return x.Call
	}
	return nil
}

func (x *TLPhoneJoinGroupCall) GetJoinAs() *InputPeer {
	if x != nil {
		return x.JoinAs
	}
	return nil
}

func (x *TLPhoneJoinGroupCall) GetInviteHash() *wrapperspb.StringValue {
	if x != nil {
		return x.InviteHash
	}
	return nil
}

func (x *TLPhoneJoinGroupCall) GetKeyFingerprint() *wrapperspb.Int64Value {
	if x != nil {
		return x.KeyFingerprint
	}
	return nil
}

func (x *TLPhoneJoinGroupCall) GetParams() *DataJSON {
	if x != nil {
		return x.Params
	}
	return nil
}

type TLPhoneLeaveGroupCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Call          *InputGroupCall        `protobuf:"bytes,3,opt,name=call,proto3" json:"call,omitempty"`
	Source        int32                  `protobuf:"varint,4,opt,name=source,proto3" json:"source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPhoneLeaveGroupCall) Reset() {
	*x = TLPhoneLeaveGroupCall{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[608]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPhoneLeaveGroupCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPhoneLeaveGroupCall) ProtoMessage() {}

func (x *TLPhoneLeaveGroupCall) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[608]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPhoneLeaveGroupCall.ProtoReflect.Descriptor instead.
func (*TLPhoneLeaveGroupCall) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{608}
}

func (x *TLPhoneLeaveGroupCall) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPhoneLeaveGroupCall) GetCall() *InputGroupCall {
	if x != nil {
		return x.Call
	}
	return nil
}

func (x *TLPhoneLeaveGroupCall) GetSource() int32 {
	if x != nil {
		return x.Source
	}
	return 0
}

type TLPhoneInviteToGroupCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Call          *InputGroupCall        `protobuf:"bytes,3,opt,name=call,proto3" json:"call,omitempty"`
	Users         []*InputUser           `protobuf:"bytes,4,rep,name=users,proto3" json:"users,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPhoneInviteToGroupCall) Reset() {
	*x = TLPhoneInviteToGroupCall{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[609]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPhoneInviteToGroupCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPhoneInviteToGroupCall) ProtoMessage() {}

func (x *TLPhoneInviteToGroupCall) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[609]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPhoneInviteToGroupCall.ProtoReflect.Descriptor instead.
func (*TLPhoneInviteToGroupCall) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{609}
}

func (x *TLPhoneInviteToGroupCall) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPhoneInviteToGroupCall) GetCall() *InputGroupCall {
	if x != nil {
		return x.Call
	}
	return nil
}

func (x *TLPhoneInviteToGroupCall) GetUsers() []*InputUser {
	if x != nil {
		return x.Users
	}
	return nil
}

type TLPhoneDiscardGroupCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Call          *InputGroupCall        `protobuf:"bytes,3,opt,name=call,proto3" json:"call,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPhoneDiscardGroupCall) Reset() {
	*x = TLPhoneDiscardGroupCall{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[610]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPhoneDiscardGroupCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPhoneDiscardGroupCall) ProtoMessage() {}

func (x *TLPhoneDiscardGroupCall) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[610]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPhoneDiscardGroupCall.ProtoReflect.Descriptor instead.
func (*TLPhoneDiscardGroupCall) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{610}
}

func (x *TLPhoneDiscardGroupCall) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPhoneDiscardGroupCall) GetCall() *InputGroupCall {
	if x != nil {
		return x.Call
	}
	return nil
}

type TLPhoneToggleGroupCallSettings struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Constructor     TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	ResetInviteHash bool                   `protobuf:"varint,3,opt,name=reset_invite_hash,json=resetInviteHash,proto3" json:"reset_invite_hash,omitempty"`
	Call            *InputGroupCall        `protobuf:"bytes,4,opt,name=call,proto3" json:"call,omitempty"`
	JoinMuted       *Bool                  `protobuf:"bytes,5,opt,name=join_muted,json=joinMuted,proto3" json:"join_muted,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TLPhoneToggleGroupCallSettings) Reset() {
	*x = TLPhoneToggleGroupCallSettings{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[611]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPhoneToggleGroupCallSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPhoneToggleGroupCallSettings) ProtoMessage() {}

func (x *TLPhoneToggleGroupCallSettings) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[611]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPhoneToggleGroupCallSettings.ProtoReflect.Descriptor instead.
func (*TLPhoneToggleGroupCallSettings) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{611}
}

func (x *TLPhoneToggleGroupCallSettings) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPhoneToggleGroupCallSettings) GetResetInviteHash() bool {
	if x != nil {
		return x.ResetInviteHash
	}
	return false
}

func (x *TLPhoneToggleGroupCallSettings) GetCall() *InputGroupCall {
	if x != nil {
		return x.Call
	}
	return nil
}

func (x *TLPhoneToggleGroupCallSettings) GetJoinMuted() *Bool {
	if x != nil {
		return x.JoinMuted
	}
	return nil
}

type TLPhoneGetGroupCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Call          *InputGroupCall        `protobuf:"bytes,3,opt,name=call,proto3" json:"call,omitempty"`
	Limit         int32                  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPhoneGetGroupCall) Reset() {
	*x = TLPhoneGetGroupCall{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[612]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPhoneGetGroupCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPhoneGetGroupCall) ProtoMessage() {}

func (x *TLPhoneGetGroupCall) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[612]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPhoneGetGroupCall.ProtoReflect.Descriptor instead.
func (*TLPhoneGetGroupCall) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{612}
}

func (x *TLPhoneGetGroupCall) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPhoneGetGroupCall) GetCall() *InputGroupCall {
	if x != nil {
		return x.Call
	}
	return nil
}

func (x *TLPhoneGetGroupCall) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TLPhoneGetGroupParticipants struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Call          *InputGroupCall        `protobuf:"bytes,3,opt,name=call,proto3" json:"call,omitempty"`
	Ids           []*InputPeer           `protobuf:"bytes,4,rep,name=ids,proto3" json:"ids,omitempty"`
	Sources       []int32                `protobuf:"varint,5,rep,packed,name=sources,proto3" json:"sources,omitempty"`
	Offset        string                 `protobuf:"bytes,6,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit         int32                  `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPhoneGetGroupParticipants) Reset() {
	*x = TLPhoneGetGroupParticipants{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[613]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPhoneGetGroupParticipants) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPhoneGetGroupParticipants) ProtoMessage() {}

func (x *TLPhoneGetGroupParticipants) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[613]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPhoneGetGroupParticipants.ProtoReflect.Descriptor instead.
func (*TLPhoneGetGroupParticipants) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{613}
}

func (x *TLPhoneGetGroupParticipants) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPhoneGetGroupParticipants) GetCall() *InputGroupCall {
	if x != nil {
		return x.Call
	}
	return nil
}

func (x *TLPhoneGetGroupParticipants) GetIds() []*InputPeer {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *TLPhoneGetGroupParticipants) GetSources() []int32 {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *TLPhoneGetGroupParticipants) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *TLPhoneGetGroupParticipants) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TLPhoneCheckGroupCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Call          *InputGroupCall        `protobuf:"bytes,3,opt,name=call,proto3" json:"call,omitempty"`
	Sources       []int32                `protobuf:"varint,4,rep,packed,name=sources,proto3" json:"sources,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPhoneCheckGroupCall) Reset() {
	*x = TLPhoneCheckGroupCall{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[614]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPhoneCheckGroupCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPhoneCheckGroupCall) ProtoMessage() {}

func (x *TLPhoneCheckGroupCall) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[614]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPhoneCheckGroupCall.ProtoReflect.Descriptor instead.
func (*TLPhoneCheckGroupCall) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{614}
}

func (x *TLPhoneCheckGroupCall) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPhoneCheckGroupCall) GetCall() *InputGroupCall {
	if x != nil {
		return x.Call
	}
	return nil
}

func (x *TLPhoneCheckGroupCall) GetSources() []int32 {
	if x != nil {
		return x.Sources
	}
	return nil
}

type TLPhoneToggleGroupCallRecord struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Constructor   TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Start         bool                    `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
	Video         bool                    `protobuf:"varint,4,opt,name=video,proto3" json:"video,omitempty"`
	Call          *InputGroupCall         `protobuf:"bytes,5,opt,name=call,proto3" json:"call,omitempty"`
	Title         *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	VideoPortrait *Bool                   `protobuf:"bytes,7,opt,name=video_portrait,json=videoPortrait,proto3" json:"video_portrait,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPhoneToggleGroupCallRecord) Reset() {
	*x = TLPhoneToggleGroupCallRecord{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[615]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPhoneToggleGroupCallRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPhoneToggleGroupCallRecord) ProtoMessage() {}

func (x *TLPhoneToggleGroupCallRecord) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[615]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPhoneToggleGroupCallRecord.ProtoReflect.Descriptor instead.
func (*TLPhoneToggleGroupCallRecord) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{615}
}

func (x *TLPhoneToggleGroupCallRecord) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPhoneToggleGroupCallRecord) GetStart() bool {
	if x != nil {
		return x.Start
	}
	return false
}

func (x *TLPhoneToggleGroupCallRecord) GetVideo() bool {
	if x != nil {
		return x.Video
	}
	return false
}

func (x *TLPhoneToggleGroupCallRecord) GetCall() *InputGroupCall {
	if x != nil {
		return x.Call
	}
	return nil
}

func (x *TLPhoneToggleGroupCallRecord) GetTitle() *wrapperspb.StringValue {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *TLPhoneToggleGroupCallRecord) GetVideoPortrait() *Bool {
	if x != nil {
		return x.VideoPortrait
	}
	return nil
}

type TLPhoneEditGroupCallParticipant struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Constructor        TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Call               *InputGroupCall        `protobuf:"bytes,3,opt,name=call,proto3" json:"call,omitempty"`
	Participant        *InputPeer             `protobuf:"bytes,4,opt,name=participant,proto3" json:"participant,omitempty"`
	Muted              *Bool                  `protobuf:"bytes,5,opt,name=muted,proto3" json:"muted,omitempty"`
	Volume             *wrapperspb.Int32Value `protobuf:"bytes,6,opt,name=volume,proto3" json:"volume,omitempty"`
	RaiseHand          *Bool                  `protobuf:"bytes,7,opt,name=raise_hand,json=raiseHand,proto3" json:"raise_hand,omitempty"`
	VideoStopped       *Bool                  `protobuf:"bytes,8,opt,name=video_stopped,json=videoStopped,proto3" json:"video_stopped,omitempty"`
	VideoPaused        *Bool                  `protobuf:"bytes,9,opt,name=video_paused,json=videoPaused,proto3" json:"video_paused,omitempty"`
	PresentationPaused *Bool                  `protobuf:"bytes,10,opt,name=presentation_paused,json=presentationPaused,proto3" json:"presentation_paused,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *TLPhoneEditGroupCallParticipant) Reset() {
	*x = TLPhoneEditGroupCallParticipant{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[616]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPhoneEditGroupCallParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPhoneEditGroupCallParticipant) ProtoMessage() {}

func (x *TLPhoneEditGroupCallParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[616]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPhoneEditGroupCallParticipant.ProtoReflect.Descriptor instead.
func (*TLPhoneEditGroupCallParticipant) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{616}
}

func (x *TLPhoneEditGroupCallParticipant) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPhoneEditGroupCallParticipant) GetCall() *InputGroupCall {
	if x != nil {
		return x.Call
	}
	return nil
}

func (x *TLPhoneEditGroupCallParticipant) GetParticipant() *InputPeer {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *TLPhoneEditGroupCallParticipant) GetMuted() *Bool {
	if x != nil {
		return x.Muted
	}
	return nil
}

func (x *TLPhoneEditGroupCallParticipant) GetVolume() *wrapperspb.Int32Value {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *TLPhoneEditGroupCallParticipant) GetRaiseHand() *Bool {
	if x != nil {
		return x.RaiseHand
	}
	return nil
}

func (x *TLPhoneEditGroupCallParticipant) GetVideoStopped() *Bool {
	if x != nil {
		return x.VideoStopped
	}
	return nil
}

func (x *TLPhoneEditGroupCallParticipant) GetVideoPaused() *Bool {
	if x != nil {
		return x.VideoPaused
	}
	return nil
}

func (x *TLPhoneEditGroupCallParticipant) GetPresentationPaused() *Bool {
	if x != nil {
		return x.PresentationPaused
	}
	return nil
}

type TLPhoneEditGroupCallTitle struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Call          *InputGroupCall        `protobuf:"bytes,3,opt,name=call,proto3" json:"call,omitempty"`
	Title         string                 `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPhoneEditGroupCallTitle) Reset() {
	*x = TLPhoneEditGroupCallTitle{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[617]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPhoneEditGroupCallTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPhoneEditGroupCallTitle) ProtoMessage() {}

func (x *TLPhoneEditGroupCallTitle) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[617]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPhoneEditGroupCallTitle.ProtoReflect.Descriptor instead.
func (*TLPhoneEditGroupCallTitle) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{617}
}

func (x *TLPhoneEditGroupCallTitle) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPhoneEditGroupCallTitle) GetCall() *InputGroupCall {
	if x != nil {
		return x.Call
	}
	return nil
}

func (x *TLPhoneEditGroupCallTitle) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type TLPhoneGetGroupCallJoinAs struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPhoneGetGroupCallJoinAs) Reset() {
	*x = TLPhoneGetGroupCallJoinAs{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[618]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPhoneGetGroupCallJoinAs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPhoneGetGroupCallJoinAs) ProtoMessage() {}

func (x *TLPhoneGetGroupCallJoinAs) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[618]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPhoneGetGroupCallJoinAs.ProtoReflect.Descriptor instead.
func (*TLPhoneGetGroupCallJoinAs) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{618}
}

func (x *TLPhoneGetGroupCallJoinAs) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPhoneGetGroupCallJoinAs) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

type TLPhoneExportGroupCallInvite struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	CanSelfUnmute bool                   `protobuf:"varint,3,opt,name=can_self_unmute,json=canSelfUnmute,proto3" json:"can_self_unmute,omitempty"`
	Call          *InputGroupCall        `protobuf:"bytes,4,opt,name=call,proto3" json:"call,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPhoneExportGroupCallInvite) Reset() {
	*x = TLPhoneExportGroupCallInvite{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[619]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPhoneExportGroupCallInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPhoneExportGroupCallInvite) ProtoMessage() {}

func (x *TLPhoneExportGroupCallInvite) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[619]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPhoneExportGroupCallInvite.ProtoReflect.Descriptor instead.
func (*TLPhoneExportGroupCallInvite) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{619}
}

func (x *TLPhoneExportGroupCallInvite) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPhoneExportGroupCallInvite) GetCanSelfUnmute() bool {
	if x != nil {
		return x.CanSelfUnmute
	}
	return false
}

func (x *TLPhoneExportGroupCallInvite) GetCall() *InputGroupCall {
	if x != nil {
		return x.Call
	}
	return nil
}

type TLPhoneToggleGroupCallStartSubscription struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Call          *InputGroupCall        `protobuf:"bytes,3,opt,name=call,proto3" json:"call,omitempty"`
	Subscribed    *Bool                  `protobuf:"bytes,4,opt,name=subscribed,proto3" json:"subscribed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPhoneToggleGroupCallStartSubscription) Reset() {
	*x = TLPhoneToggleGroupCallStartSubscription{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[620]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPhoneToggleGroupCallStartSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPhoneToggleGroupCallStartSubscription) ProtoMessage() {}

func (x *TLPhoneToggleGroupCallStartSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[620]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPhoneToggleGroupCallStartSubscription.ProtoReflect.Descriptor instead.
func (*TLPhoneToggleGroupCallStartSubscription) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{620}
}

func (x *TLPhoneToggleGroupCallStartSubscription) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPhoneToggleGroupCallStartSubscription) GetCall() *InputGroupCall {
	if x != nil {
		return x.Call
	}
	return nil
}

func (x *TLPhoneToggleGroupCallStartSubscription) GetSubscribed() *Bool {
	if x != nil {
		return x.Subscribed
	}
	return nil
}

type TLPhoneStartScheduledGroupCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Call          *InputGroupCall        `protobuf:"bytes,3,opt,name=call,proto3" json:"call,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPhoneStartScheduledGroupCall) Reset() {
	*x = TLPhoneStartScheduledGroupCall{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[621]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPhoneStartScheduledGroupCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPhoneStartScheduledGroupCall) ProtoMessage() {}

func (x *TLPhoneStartScheduledGroupCall) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[621]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPhoneStartScheduledGroupCall.ProtoReflect.Descriptor instead.
func (*TLPhoneStartScheduledGroupCall) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{621}
}

func (x *TLPhoneStartScheduledGroupCall) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPhoneStartScheduledGroupCall) GetCall() *InputGroupCall {
	if x != nil {
		return x.Call
	}
	return nil
}

type TLPhoneSaveDefaultGroupCallJoinAs struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	JoinAs        *InputPeer             `protobuf:"bytes,4,opt,name=join_as,json=joinAs,proto3" json:"join_as,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPhoneSaveDefaultGroupCallJoinAs) Reset() {
	*x = TLPhoneSaveDefaultGroupCallJoinAs{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[622]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPhoneSaveDefaultGroupCallJoinAs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPhoneSaveDefaultGroupCallJoinAs) ProtoMessage() {}

func (x *TLPhoneSaveDefaultGroupCallJoinAs) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[622]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPhoneSaveDefaultGroupCallJoinAs.ProtoReflect.Descriptor instead.
func (*TLPhoneSaveDefaultGroupCallJoinAs) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{622}
}

func (x *TLPhoneSaveDefaultGroupCallJoinAs) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPhoneSaveDefaultGroupCallJoinAs) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLPhoneSaveDefaultGroupCallJoinAs) GetJoinAs() *InputPeer {
	if x != nil {
		return x.JoinAs
	}
	return nil
}

type TLPhoneJoinGroupCallPresentation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Call          *InputGroupCall        `protobuf:"bytes,3,opt,name=call,proto3" json:"call,omitempty"`
	Params        *DataJSON              `protobuf:"bytes,4,opt,name=params,proto3" json:"params,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPhoneJoinGroupCallPresentation) Reset() {
	*x = TLPhoneJoinGroupCallPresentation{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[623]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPhoneJoinGroupCallPresentation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPhoneJoinGroupCallPresentation) ProtoMessage() {}

func (x *TLPhoneJoinGroupCallPresentation) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[623]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPhoneJoinGroupCallPresentation.ProtoReflect.Descriptor instead.
func (*TLPhoneJoinGroupCallPresentation) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{623}
}

func (x *TLPhoneJoinGroupCallPresentation) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPhoneJoinGroupCallPresentation) GetCall() *InputGroupCall {
	if x != nil {
		return x.Call
	}
	return nil
}

func (x *TLPhoneJoinGroupCallPresentation) GetParams() *DataJSON {
	if x != nil {
		return x.Params
	}
	return nil
}

type TLPhoneLeaveGroupCallPresentation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Call          *InputGroupCall        `protobuf:"bytes,3,opt,name=call,proto3" json:"call,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPhoneLeaveGroupCallPresentation) Reset() {
	*x = TLPhoneLeaveGroupCallPresentation{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[624]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPhoneLeaveGroupCallPresentation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPhoneLeaveGroupCallPresentation) ProtoMessage() {}

func (x *TLPhoneLeaveGroupCallPresentation) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[624]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPhoneLeaveGroupCallPresentation.ProtoReflect.Descriptor instead.
func (*TLPhoneLeaveGroupCallPresentation) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{624}
}

func (x *TLPhoneLeaveGroupCallPresentation) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPhoneLeaveGroupCallPresentation) GetCall() *InputGroupCall {
	if x != nil {
		return x.Call
	}
	return nil
}

type TLPhoneGetGroupCallStreamChannels struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Call          *InputGroupCall        `protobuf:"bytes,3,opt,name=call,proto3" json:"call,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPhoneGetGroupCallStreamChannels) Reset() {
	*x = TLPhoneGetGroupCallStreamChannels{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[625]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPhoneGetGroupCallStreamChannels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPhoneGetGroupCallStreamChannels) ProtoMessage() {}

func (x *TLPhoneGetGroupCallStreamChannels) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[625]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPhoneGetGroupCallStreamChannels.ProtoReflect.Descriptor instead.
func (*TLPhoneGetGroupCallStreamChannels) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{625}
}

func (x *TLPhoneGetGroupCallStreamChannels) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPhoneGetGroupCallStreamChannels) GetCall() *InputGroupCall {
	if x != nil {
		return x.Call
	}
	return nil
}

type TLPhoneGetGroupCallStreamRtmpUrl struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Revoke        *Bool                  `protobuf:"bytes,4,opt,name=revoke,proto3" json:"revoke,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPhoneGetGroupCallStreamRtmpUrl) Reset() {
	*x = TLPhoneGetGroupCallStreamRtmpUrl{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[626]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPhoneGetGroupCallStreamRtmpUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPhoneGetGroupCallStreamRtmpUrl) ProtoMessage() {}

func (x *TLPhoneGetGroupCallStreamRtmpUrl) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[626]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPhoneGetGroupCallStreamRtmpUrl.ProtoReflect.Descriptor instead.
func (*TLPhoneGetGroupCallStreamRtmpUrl) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{626}
}

func (x *TLPhoneGetGroupCallStreamRtmpUrl) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPhoneGetGroupCallStreamRtmpUrl) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLPhoneGetGroupCallStreamRtmpUrl) GetRevoke() *Bool {
	if x != nil {
		return x.Revoke
	}
	return nil
}

type TLPhoneSaveCallLog struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPhoneCall        `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	File          *InputFile             `protobuf:"bytes,4,opt,name=file,proto3" json:"file,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPhoneSaveCallLog) Reset() {
	*x = TLPhoneSaveCallLog{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[627]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPhoneSaveCallLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPhoneSaveCallLog) ProtoMessage() {}

func (x *TLPhoneSaveCallLog) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[627]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPhoneSaveCallLog.ProtoReflect.Descriptor instead.
func (*TLPhoneSaveCallLog) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{627}
}

func (x *TLPhoneSaveCallLog) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPhoneSaveCallLog) GetPeer() *InputPhoneCall {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLPhoneSaveCallLog) GetFile() *InputFile {
	if x != nil {
		return x.File
	}
	return nil
}

type TLPhoneCreateConferenceCall struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Constructor    TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer           *InputPhoneCall        `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	KeyFingerprint int64                  `protobuf:"varint,4,opt,name=key_fingerprint,json=keyFingerprint,proto3" json:"key_fingerprint,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TLPhoneCreateConferenceCall) Reset() {
	*x = TLPhoneCreateConferenceCall{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[628]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPhoneCreateConferenceCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPhoneCreateConferenceCall) ProtoMessage() {}

func (x *TLPhoneCreateConferenceCall) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[628]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPhoneCreateConferenceCall.ProtoReflect.Descriptor instead.
func (*TLPhoneCreateConferenceCall) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{628}
}

func (x *TLPhoneCreateConferenceCall) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPhoneCreateConferenceCall) GetPeer() *InputPhoneCall {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLPhoneCreateConferenceCall) GetKeyFingerprint() int64 {
	if x != nil {
		return x.KeyFingerprint
	}
	return 0
}

type TLLangpackGetLangPack struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	LangPack      string                 `protobuf:"bytes,3,opt,name=lang_pack,json=langPack,proto3" json:"lang_pack,omitempty"`
	LangCode      string                 `protobuf:"bytes,4,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLLangpackGetLangPack) Reset() {
	*x = TLLangpackGetLangPack{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[629]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLLangpackGetLangPack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLLangpackGetLangPack) ProtoMessage() {}

func (x *TLLangpackGetLangPack) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[629]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLLangpackGetLangPack.ProtoReflect.Descriptor instead.
func (*TLLangpackGetLangPack) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{629}
}

func (x *TLLangpackGetLangPack) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLLangpackGetLangPack) GetLangPack() string {
	if x != nil {
		return x.LangPack
	}
	return ""
}

func (x *TLLangpackGetLangPack) GetLangCode() string {
	if x != nil {
		return x.LangCode
	}
	return ""
}

type TLLangpackGetStrings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	LangPack      string                 `protobuf:"bytes,3,opt,name=lang_pack,json=langPack,proto3" json:"lang_pack,omitempty"`
	LangCode      string                 `protobuf:"bytes,4,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
	Keys          []string               `protobuf:"bytes,5,rep,name=keys,proto3" json:"keys,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLLangpackGetStrings) Reset() {
	*x = TLLangpackGetStrings{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[630]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLLangpackGetStrings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLLangpackGetStrings) ProtoMessage() {}

func (x *TLLangpackGetStrings) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[630]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLLangpackGetStrings.ProtoReflect.Descriptor instead.
func (*TLLangpackGetStrings) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{630}
}

func (x *TLLangpackGetStrings) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLLangpackGetStrings) GetLangPack() string {
	if x != nil {
		return x.LangPack
	}
	return ""
}

func (x *TLLangpackGetStrings) GetLangCode() string {
	if x != nil {
		return x.LangCode
	}
	return ""
}

func (x *TLLangpackGetStrings) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

type TLLangpackGetDifference struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	LangPack      string                 `protobuf:"bytes,3,opt,name=lang_pack,json=langPack,proto3" json:"lang_pack,omitempty"`
	LangCode      string                 `protobuf:"bytes,4,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
	FromVersion   int32                  `protobuf:"varint,5,opt,name=from_version,json=fromVersion,proto3" json:"from_version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLLangpackGetDifference) Reset() {
	*x = TLLangpackGetDifference{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[631]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLLangpackGetDifference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLLangpackGetDifference) ProtoMessage() {}

func (x *TLLangpackGetDifference) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[631]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLLangpackGetDifference.ProtoReflect.Descriptor instead.
func (*TLLangpackGetDifference) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{631}
}

func (x *TLLangpackGetDifference) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLLangpackGetDifference) GetLangPack() string {
	if x != nil {
		return x.LangPack
	}
	return ""
}

func (x *TLLangpackGetDifference) GetLangCode() string {
	if x != nil {
		return x.LangCode
	}
	return ""
}

func (x *TLLangpackGetDifference) GetFromVersion() int32 {
	if x != nil {
		return x.FromVersion
	}
	return 0
}

type TLLangpackGetLanguages struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	LangPack      string                 `protobuf:"bytes,3,opt,name=lang_pack,json=langPack,proto3" json:"lang_pack,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLLangpackGetLanguages) Reset() {
	*x = TLLangpackGetLanguages{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[632]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLLangpackGetLanguages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLLangpackGetLanguages) ProtoMessage() {}

func (x *TLLangpackGetLanguages) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[632]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLLangpackGetLanguages.ProtoReflect.Descriptor instead.
func (*TLLangpackGetLanguages) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{632}
}

func (x *TLLangpackGetLanguages) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLLangpackGetLanguages) GetLangPack() string {
	if x != nil {
		return x.LangPack
	}
	return ""
}

type TLLangpackGetLanguage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	LangPack      string                 `protobuf:"bytes,3,opt,name=lang_pack,json=langPack,proto3" json:"lang_pack,omitempty"`
	LangCode      string                 `protobuf:"bytes,4,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLLangpackGetLanguage) Reset() {
	*x = TLLangpackGetLanguage{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[633]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLLangpackGetLanguage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLLangpackGetLanguage) ProtoMessage() {}

func (x *TLLangpackGetLanguage) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[633]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLLangpackGetLanguage.ProtoReflect.Descriptor instead.
func (*TLLangpackGetLanguage) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{633}
}

func (x *TLLangpackGetLanguage) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLLangpackGetLanguage) GetLangPack() string {
	if x != nil {
		return x.LangPack
	}
	return ""
}

func (x *TLLangpackGetLanguage) GetLangCode() string {
	if x != nil {
		return x.LangCode
	}
	return ""
}

type TLFoldersEditPeerFolders struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	FolderPeers   []*InputFolderPeer     `protobuf:"bytes,3,rep,name=folder_peers,json=folderPeers,proto3" json:"folder_peers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLFoldersEditPeerFolders) Reset() {
	*x = TLFoldersEditPeerFolders{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[634]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLFoldersEditPeerFolders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLFoldersEditPeerFolders) ProtoMessage() {}

func (x *TLFoldersEditPeerFolders) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[634]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLFoldersEditPeerFolders.ProtoReflect.Descriptor instead.
func (*TLFoldersEditPeerFolders) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{634}
}

func (x *TLFoldersEditPeerFolders) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLFoldersEditPeerFolders) GetFolderPeers() []*InputFolderPeer {
	if x != nil {
		return x.FolderPeers
	}
	return nil
}

type TLStatsGetBroadcastStats struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Dark          bool                   `protobuf:"varint,3,opt,name=dark,proto3" json:"dark,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,4,opt,name=channel,proto3" json:"channel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStatsGetBroadcastStats) Reset() {
	*x = TLStatsGetBroadcastStats{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[635]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStatsGetBroadcastStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStatsGetBroadcastStats) ProtoMessage() {}

func (x *TLStatsGetBroadcastStats) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[635]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStatsGetBroadcastStats.ProtoReflect.Descriptor instead.
func (*TLStatsGetBroadcastStats) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{635}
}

func (x *TLStatsGetBroadcastStats) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStatsGetBroadcastStats) GetDark() bool {
	if x != nil {
		return x.Dark
	}
	return false
}

func (x *TLStatsGetBroadcastStats) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

type TLStatsLoadAsyncGraph struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Token         string                 `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	X             *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=x,proto3" json:"x,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStatsLoadAsyncGraph) Reset() {
	*x = TLStatsLoadAsyncGraph{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[636]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStatsLoadAsyncGraph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStatsLoadAsyncGraph) ProtoMessage() {}

func (x *TLStatsLoadAsyncGraph) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[636]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStatsLoadAsyncGraph.ProtoReflect.Descriptor instead.
func (*TLStatsLoadAsyncGraph) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{636}
}

func (x *TLStatsLoadAsyncGraph) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStatsLoadAsyncGraph) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *TLStatsLoadAsyncGraph) GetX() *wrapperspb.Int64Value {
	if x != nil {
		return x.X
	}
	return nil
}

type TLStatsGetMegagroupStats struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Dark          bool                   `protobuf:"varint,3,opt,name=dark,proto3" json:"dark,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,4,opt,name=channel,proto3" json:"channel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStatsGetMegagroupStats) Reset() {
	*x = TLStatsGetMegagroupStats{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[637]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStatsGetMegagroupStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStatsGetMegagroupStats) ProtoMessage() {}

func (x *TLStatsGetMegagroupStats) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[637]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStatsGetMegagroupStats.ProtoReflect.Descriptor instead.
func (*TLStatsGetMegagroupStats) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{637}
}

func (x *TLStatsGetMegagroupStats) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStatsGetMegagroupStats) GetDark() bool {
	if x != nil {
		return x.Dark
	}
	return false
}

func (x *TLStatsGetMegagroupStats) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

type TLStatsGetMessagePublicForwards5F150144 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	MsgId         int32                  `protobuf:"varint,4,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	Offset        string                 `protobuf:"bytes,5,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit         int32                  `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStatsGetMessagePublicForwards5F150144) Reset() {
	*x = TLStatsGetMessagePublicForwards5F150144{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[638]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStatsGetMessagePublicForwards5F150144) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStatsGetMessagePublicForwards5F150144) ProtoMessage() {}

func (x *TLStatsGetMessagePublicForwards5F150144) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[638]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStatsGetMessagePublicForwards5F150144.ProtoReflect.Descriptor instead.
func (*TLStatsGetMessagePublicForwards5F150144) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{638}
}

func (x *TLStatsGetMessagePublicForwards5F150144) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStatsGetMessagePublicForwards5F150144) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLStatsGetMessagePublicForwards5F150144) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *TLStatsGetMessagePublicForwards5F150144) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *TLStatsGetMessagePublicForwards5F150144) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TLStatsGetMessageStats struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Dark          bool                   `protobuf:"varint,3,opt,name=dark,proto3" json:"dark,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,4,opt,name=channel,proto3" json:"channel,omitempty"`
	MsgId         int32                  `protobuf:"varint,5,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStatsGetMessageStats) Reset() {
	*x = TLStatsGetMessageStats{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[639]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStatsGetMessageStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStatsGetMessageStats) ProtoMessage() {}

func (x *TLStatsGetMessageStats) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[639]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStatsGetMessageStats.ProtoReflect.Descriptor instead.
func (*TLStatsGetMessageStats) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{639}
}

func (x *TLStatsGetMessageStats) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStatsGetMessageStats) GetDark() bool {
	if x != nil {
		return x.Dark
	}
	return false
}

func (x *TLStatsGetMessageStats) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLStatsGetMessageStats) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

type TLStatsGetStoryStats struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Dark          bool                   `protobuf:"varint,3,opt,name=dark,proto3" json:"dark,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,4,opt,name=peer,proto3" json:"peer,omitempty"`
	Id            int32                  `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStatsGetStoryStats) Reset() {
	*x = TLStatsGetStoryStats{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[640]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStatsGetStoryStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStatsGetStoryStats) ProtoMessage() {}

func (x *TLStatsGetStoryStats) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[640]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStatsGetStoryStats.ProtoReflect.Descriptor instead.
func (*TLStatsGetStoryStats) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{640}
}

func (x *TLStatsGetStoryStats) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStatsGetStoryStats) GetDark() bool {
	if x != nil {
		return x.Dark
	}
	return false
}

func (x *TLStatsGetStoryStats) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLStatsGetStoryStats) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type TLStatsGetStoryPublicForwards struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Id            int32                  `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	Offset        string                 `protobuf:"bytes,5,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit         int32                  `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStatsGetStoryPublicForwards) Reset() {
	*x = TLStatsGetStoryPublicForwards{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[641]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStatsGetStoryPublicForwards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStatsGetStoryPublicForwards) ProtoMessage() {}

func (x *TLStatsGetStoryPublicForwards) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[641]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStatsGetStoryPublicForwards.ProtoReflect.Descriptor instead.
func (*TLStatsGetStoryPublicForwards) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{641}
}

func (x *TLStatsGetStoryPublicForwards) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStatsGetStoryPublicForwards) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLStatsGetStoryPublicForwards) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TLStatsGetStoryPublicForwards) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *TLStatsGetStoryPublicForwards) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TLStatsGetBroadcastRevenueStats struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Dark          bool                   `protobuf:"varint,3,opt,name=dark,proto3" json:"dark,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,4,opt,name=peer,proto3" json:"peer,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,5,opt,name=channel,proto3" json:"channel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStatsGetBroadcastRevenueStats) Reset() {
	*x = TLStatsGetBroadcastRevenueStats{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[642]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStatsGetBroadcastRevenueStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStatsGetBroadcastRevenueStats) ProtoMessage() {}

func (x *TLStatsGetBroadcastRevenueStats) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[642]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStatsGetBroadcastRevenueStats.ProtoReflect.Descriptor instead.
func (*TLStatsGetBroadcastRevenueStats) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{642}
}

func (x *TLStatsGetBroadcastRevenueStats) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStatsGetBroadcastRevenueStats) GetDark() bool {
	if x != nil {
		return x.Dark
	}
	return false
}

func (x *TLStatsGetBroadcastRevenueStats) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLStatsGetBroadcastRevenueStats) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

type TLStatsGetBroadcastRevenueWithdrawalUrl struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Password      *InputCheckPasswordSRP `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,5,opt,name=channel,proto3" json:"channel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStatsGetBroadcastRevenueWithdrawalUrl) Reset() {
	*x = TLStatsGetBroadcastRevenueWithdrawalUrl{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[643]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStatsGetBroadcastRevenueWithdrawalUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStatsGetBroadcastRevenueWithdrawalUrl) ProtoMessage() {}

func (x *TLStatsGetBroadcastRevenueWithdrawalUrl) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[643]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStatsGetBroadcastRevenueWithdrawalUrl.ProtoReflect.Descriptor instead.
func (*TLStatsGetBroadcastRevenueWithdrawalUrl) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{643}
}

func (x *TLStatsGetBroadcastRevenueWithdrawalUrl) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStatsGetBroadcastRevenueWithdrawalUrl) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLStatsGetBroadcastRevenueWithdrawalUrl) GetPassword() *InputCheckPasswordSRP {
	if x != nil {
		return x.Password
	}
	return nil
}

func (x *TLStatsGetBroadcastRevenueWithdrawalUrl) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

type TLStatsGetBroadcastRevenueTransactions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Offset        int32                  `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit         int32                  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,6,opt,name=channel,proto3" json:"channel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStatsGetBroadcastRevenueTransactions) Reset() {
	*x = TLStatsGetBroadcastRevenueTransactions{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[644]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStatsGetBroadcastRevenueTransactions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStatsGetBroadcastRevenueTransactions) ProtoMessage() {}

func (x *TLStatsGetBroadcastRevenueTransactions) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[644]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStatsGetBroadcastRevenueTransactions.ProtoReflect.Descriptor instead.
func (*TLStatsGetBroadcastRevenueTransactions) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{644}
}

func (x *TLStatsGetBroadcastRevenueTransactions) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStatsGetBroadcastRevenueTransactions) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLStatsGetBroadcastRevenueTransactions) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TLStatsGetBroadcastRevenueTransactions) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TLStatsGetBroadcastRevenueTransactions) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

type TLChatlistsExportChatlistInvite struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Chatlist      *InputChatlist         `protobuf:"bytes,3,opt,name=chatlist,proto3" json:"chatlist,omitempty"`
	Title         string                 `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Peers         []*InputPeer           `protobuf:"bytes,5,rep,name=peers,proto3" json:"peers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChatlistsExportChatlistInvite) Reset() {
	*x = TLChatlistsExportChatlistInvite{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[645]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChatlistsExportChatlistInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatlistsExportChatlistInvite) ProtoMessage() {}

func (x *TLChatlistsExportChatlistInvite) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[645]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatlistsExportChatlistInvite.ProtoReflect.Descriptor instead.
func (*TLChatlistsExportChatlistInvite) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{645}
}

func (x *TLChatlistsExportChatlistInvite) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChatlistsExportChatlistInvite) GetChatlist() *InputChatlist {
	if x != nil {
		return x.Chatlist
	}
	return nil
}

func (x *TLChatlistsExportChatlistInvite) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TLChatlistsExportChatlistInvite) GetPeers() []*InputPeer {
	if x != nil {
		return x.Peers
	}
	return nil
}

type TLChatlistsDeleteExportedInvite struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Chatlist      *InputChatlist         `protobuf:"bytes,3,opt,name=chatlist,proto3" json:"chatlist,omitempty"`
	Slug          string                 `protobuf:"bytes,4,opt,name=slug,proto3" json:"slug,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChatlistsDeleteExportedInvite) Reset() {
	*x = TLChatlistsDeleteExportedInvite{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[646]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChatlistsDeleteExportedInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatlistsDeleteExportedInvite) ProtoMessage() {}

func (x *TLChatlistsDeleteExportedInvite) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[646]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatlistsDeleteExportedInvite.ProtoReflect.Descriptor instead.
func (*TLChatlistsDeleteExportedInvite) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{646}
}

func (x *TLChatlistsDeleteExportedInvite) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChatlistsDeleteExportedInvite) GetChatlist() *InputChatlist {
	if x != nil {
		return x.Chatlist
	}
	return nil
}

func (x *TLChatlistsDeleteExportedInvite) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

type TLChatlistsEditExportedInvite struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Constructor   TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Chatlist      *InputChatlist          `protobuf:"bytes,3,opt,name=chatlist,proto3" json:"chatlist,omitempty"`
	Slug          string                  `protobuf:"bytes,4,opt,name=slug,proto3" json:"slug,omitempty"`
	Title         *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Peers         []*InputPeer            `protobuf:"bytes,6,rep,name=peers,proto3" json:"peers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChatlistsEditExportedInvite) Reset() {
	*x = TLChatlistsEditExportedInvite{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[647]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChatlistsEditExportedInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatlistsEditExportedInvite) ProtoMessage() {}

func (x *TLChatlistsEditExportedInvite) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[647]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatlistsEditExportedInvite.ProtoReflect.Descriptor instead.
func (*TLChatlistsEditExportedInvite) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{647}
}

func (x *TLChatlistsEditExportedInvite) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChatlistsEditExportedInvite) GetChatlist() *InputChatlist {
	if x != nil {
		return x.Chatlist
	}
	return nil
}

func (x *TLChatlistsEditExportedInvite) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *TLChatlistsEditExportedInvite) GetTitle() *wrapperspb.StringValue {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *TLChatlistsEditExportedInvite) GetPeers() []*InputPeer {
	if x != nil {
		return x.Peers
	}
	return nil
}

type TLChatlistsGetExportedInvites struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Chatlist      *InputChatlist         `protobuf:"bytes,3,opt,name=chatlist,proto3" json:"chatlist,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChatlistsGetExportedInvites) Reset() {
	*x = TLChatlistsGetExportedInvites{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[648]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChatlistsGetExportedInvites) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatlistsGetExportedInvites) ProtoMessage() {}

func (x *TLChatlistsGetExportedInvites) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[648]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatlistsGetExportedInvites.ProtoReflect.Descriptor instead.
func (*TLChatlistsGetExportedInvites) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{648}
}

func (x *TLChatlistsGetExportedInvites) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChatlistsGetExportedInvites) GetChatlist() *InputChatlist {
	if x != nil {
		return x.Chatlist
	}
	return nil
}

type TLChatlistsCheckChatlistInvite struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Slug          string                 `protobuf:"bytes,3,opt,name=slug,proto3" json:"slug,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChatlistsCheckChatlistInvite) Reset() {
	*x = TLChatlistsCheckChatlistInvite{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[649]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChatlistsCheckChatlistInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatlistsCheckChatlistInvite) ProtoMessage() {}

func (x *TLChatlistsCheckChatlistInvite) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[649]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatlistsCheckChatlistInvite.ProtoReflect.Descriptor instead.
func (*TLChatlistsCheckChatlistInvite) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{649}
}

func (x *TLChatlistsCheckChatlistInvite) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChatlistsCheckChatlistInvite) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

type TLChatlistsJoinChatlistInvite struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Slug          string                 `protobuf:"bytes,3,opt,name=slug,proto3" json:"slug,omitempty"`
	Peers         []*InputPeer           `protobuf:"bytes,4,rep,name=peers,proto3" json:"peers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChatlistsJoinChatlistInvite) Reset() {
	*x = TLChatlistsJoinChatlistInvite{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[650]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChatlistsJoinChatlistInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatlistsJoinChatlistInvite) ProtoMessage() {}

func (x *TLChatlistsJoinChatlistInvite) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[650]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatlistsJoinChatlistInvite.ProtoReflect.Descriptor instead.
func (*TLChatlistsJoinChatlistInvite) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{650}
}

func (x *TLChatlistsJoinChatlistInvite) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChatlistsJoinChatlistInvite) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *TLChatlistsJoinChatlistInvite) GetPeers() []*InputPeer {
	if x != nil {
		return x.Peers
	}
	return nil
}

type TLChatlistsGetChatlistUpdates struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Chatlist      *InputChatlist         `protobuf:"bytes,3,opt,name=chatlist,proto3" json:"chatlist,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChatlistsGetChatlistUpdates) Reset() {
	*x = TLChatlistsGetChatlistUpdates{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[651]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChatlistsGetChatlistUpdates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatlistsGetChatlistUpdates) ProtoMessage() {}

func (x *TLChatlistsGetChatlistUpdates) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[651]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatlistsGetChatlistUpdates.ProtoReflect.Descriptor instead.
func (*TLChatlistsGetChatlistUpdates) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{651}
}

func (x *TLChatlistsGetChatlistUpdates) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChatlistsGetChatlistUpdates) GetChatlist() *InputChatlist {
	if x != nil {
		return x.Chatlist
	}
	return nil
}

type TLChatlistsJoinChatlistUpdates struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Chatlist      *InputChatlist         `protobuf:"bytes,3,opt,name=chatlist,proto3" json:"chatlist,omitempty"`
	Peers         []*InputPeer           `protobuf:"bytes,4,rep,name=peers,proto3" json:"peers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChatlistsJoinChatlistUpdates) Reset() {
	*x = TLChatlistsJoinChatlistUpdates{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[652]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChatlistsJoinChatlistUpdates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatlistsJoinChatlistUpdates) ProtoMessage() {}

func (x *TLChatlistsJoinChatlistUpdates) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[652]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatlistsJoinChatlistUpdates.ProtoReflect.Descriptor instead.
func (*TLChatlistsJoinChatlistUpdates) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{652}
}

func (x *TLChatlistsJoinChatlistUpdates) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChatlistsJoinChatlistUpdates) GetChatlist() *InputChatlist {
	if x != nil {
		return x.Chatlist
	}
	return nil
}

func (x *TLChatlistsJoinChatlistUpdates) GetPeers() []*InputPeer {
	if x != nil {
		return x.Peers
	}
	return nil
}

type TLChatlistsHideChatlistUpdates struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Chatlist      *InputChatlist         `protobuf:"bytes,3,opt,name=chatlist,proto3" json:"chatlist,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChatlistsHideChatlistUpdates) Reset() {
	*x = TLChatlistsHideChatlistUpdates{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[653]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChatlistsHideChatlistUpdates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatlistsHideChatlistUpdates) ProtoMessage() {}

func (x *TLChatlistsHideChatlistUpdates) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[653]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatlistsHideChatlistUpdates.ProtoReflect.Descriptor instead.
func (*TLChatlistsHideChatlistUpdates) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{653}
}

func (x *TLChatlistsHideChatlistUpdates) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChatlistsHideChatlistUpdates) GetChatlist() *InputChatlist {
	if x != nil {
		return x.Chatlist
	}
	return nil
}

type TLChatlistsGetLeaveChatlistSuggestions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Chatlist      *InputChatlist         `protobuf:"bytes,3,opt,name=chatlist,proto3" json:"chatlist,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChatlistsGetLeaveChatlistSuggestions) Reset() {
	*x = TLChatlistsGetLeaveChatlistSuggestions{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[654]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChatlistsGetLeaveChatlistSuggestions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatlistsGetLeaveChatlistSuggestions) ProtoMessage() {}

func (x *TLChatlistsGetLeaveChatlistSuggestions) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[654]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatlistsGetLeaveChatlistSuggestions.ProtoReflect.Descriptor instead.
func (*TLChatlistsGetLeaveChatlistSuggestions) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{654}
}

func (x *TLChatlistsGetLeaveChatlistSuggestions) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChatlistsGetLeaveChatlistSuggestions) GetChatlist() *InputChatlist {
	if x != nil {
		return x.Chatlist
	}
	return nil
}

type TLChatlistsLeaveChatlist struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Chatlist      *InputChatlist         `protobuf:"bytes,3,opt,name=chatlist,proto3" json:"chatlist,omitempty"`
	Peers         []*InputPeer           `protobuf:"bytes,4,rep,name=peers,proto3" json:"peers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChatlistsLeaveChatlist) Reset() {
	*x = TLChatlistsLeaveChatlist{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[655]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChatlistsLeaveChatlist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatlistsLeaveChatlist) ProtoMessage() {}

func (x *TLChatlistsLeaveChatlist) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[655]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatlistsLeaveChatlist.ProtoReflect.Descriptor instead.
func (*TLChatlistsLeaveChatlist) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{655}
}

func (x *TLChatlistsLeaveChatlist) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChatlistsLeaveChatlist) GetChatlist() *InputChatlist {
	if x != nil {
		return x.Chatlist
	}
	return nil
}

func (x *TLChatlistsLeaveChatlist) GetPeers() []*InputPeer {
	if x != nil {
		return x.Peers
	}
	return nil
}

type TLStoriesCanSendStory struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStoriesCanSendStory) Reset() {
	*x = TLStoriesCanSendStory{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[656]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStoriesCanSendStory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStoriesCanSendStory) ProtoMessage() {}

func (x *TLStoriesCanSendStory) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[656]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStoriesCanSendStory.ProtoReflect.Descriptor instead.
func (*TLStoriesCanSendStory) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{656}
}

func (x *TLStoriesCanSendStory) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStoriesCanSendStory) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

type TLStoriesSendStory struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Constructor   TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Pinned        bool                    `protobuf:"varint,3,opt,name=pinned,proto3" json:"pinned,omitempty"`
	Noforwards    bool                    `protobuf:"varint,4,opt,name=noforwards,proto3" json:"noforwards,omitempty"`
	FwdModified   bool                    `protobuf:"varint,5,opt,name=fwd_modified,json=fwdModified,proto3" json:"fwd_modified,omitempty"`
	Peer          *InputPeer              `protobuf:"bytes,6,opt,name=peer,proto3" json:"peer,omitempty"`
	Media         *InputMedia             `protobuf:"bytes,7,opt,name=media,proto3" json:"media,omitempty"`
	MediaAreas    []*MediaArea            `protobuf:"bytes,8,rep,name=media_areas,json=mediaAreas,proto3" json:"media_areas,omitempty"`
	Caption       *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=caption,proto3" json:"caption,omitempty"`
	Entities      []*MessageEntity        `protobuf:"bytes,10,rep,name=entities,proto3" json:"entities,omitempty"`
	PrivacyRules  []*InputPrivacyRule     `protobuf:"bytes,11,rep,name=privacy_rules,json=privacyRules,proto3" json:"privacy_rules,omitempty"`
	RandomId      int64                   `protobuf:"varint,12,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	Period        *wrapperspb.Int32Value  `protobuf:"bytes,13,opt,name=period,proto3" json:"period,omitempty"`
	FwdFromId     *InputPeer              `protobuf:"bytes,14,opt,name=fwd_from_id,json=fwdFromId,proto3" json:"fwd_from_id,omitempty"`
	FwdFromStory  *wrapperspb.Int32Value  `protobuf:"bytes,15,opt,name=fwd_from_story,json=fwdFromStory,proto3" json:"fwd_from_story,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStoriesSendStory) Reset() {
	*x = TLStoriesSendStory{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[657]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStoriesSendStory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStoriesSendStory) ProtoMessage() {}

func (x *TLStoriesSendStory) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[657]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStoriesSendStory.ProtoReflect.Descriptor instead.
func (*TLStoriesSendStory) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{657}
}

func (x *TLStoriesSendStory) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStoriesSendStory) GetPinned() bool {
	if x != nil {
		return x.Pinned
	}
	return false
}

func (x *TLStoriesSendStory) GetNoforwards() bool {
	if x != nil {
		return x.Noforwards
	}
	return false
}

func (x *TLStoriesSendStory) GetFwdModified() bool {
	if x != nil {
		return x.FwdModified
	}
	return false
}

func (x *TLStoriesSendStory) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLStoriesSendStory) GetMedia() *InputMedia {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *TLStoriesSendStory) GetMediaAreas() []*MediaArea {
	if x != nil {
		return x.MediaAreas
	}
	return nil
}

func (x *TLStoriesSendStory) GetCaption() *wrapperspb.StringValue {
	if x != nil {
		return x.Caption
	}
	return nil
}

func (x *TLStoriesSendStory) GetEntities() []*MessageEntity {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *TLStoriesSendStory) GetPrivacyRules() []*InputPrivacyRule {
	if x != nil {
		return x.PrivacyRules
	}
	return nil
}

func (x *TLStoriesSendStory) GetRandomId() int64 {
	if x != nil {
		return x.RandomId
	}
	return 0
}

func (x *TLStoriesSendStory) GetPeriod() *wrapperspb.Int32Value {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *TLStoriesSendStory) GetFwdFromId() *InputPeer {
	if x != nil {
		return x.FwdFromId
	}
	return nil
}

func (x *TLStoriesSendStory) GetFwdFromStory() *wrapperspb.Int32Value {
	if x != nil {
		return x.FwdFromStory
	}
	return nil
}

type TLStoriesEditStory struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Constructor   TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer              `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Id            int32                   `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	Media         *InputMedia             `protobuf:"bytes,5,opt,name=media,proto3" json:"media,omitempty"`
	MediaAreas    []*MediaArea            `protobuf:"bytes,6,rep,name=media_areas,json=mediaAreas,proto3" json:"media_areas,omitempty"`
	Caption       *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=caption,proto3" json:"caption,omitempty"`
	Entities      []*MessageEntity        `protobuf:"bytes,8,rep,name=entities,proto3" json:"entities,omitempty"`
	PrivacyRules  []*InputPrivacyRule     `protobuf:"bytes,9,rep,name=privacy_rules,json=privacyRules,proto3" json:"privacy_rules,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStoriesEditStory) Reset() {
	*x = TLStoriesEditStory{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[658]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStoriesEditStory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStoriesEditStory) ProtoMessage() {}

func (x *TLStoriesEditStory) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[658]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStoriesEditStory.ProtoReflect.Descriptor instead.
func (*TLStoriesEditStory) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{658}
}

func (x *TLStoriesEditStory) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStoriesEditStory) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLStoriesEditStory) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TLStoriesEditStory) GetMedia() *InputMedia {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *TLStoriesEditStory) GetMediaAreas() []*MediaArea {
	if x != nil {
		return x.MediaAreas
	}
	return nil
}

func (x *TLStoriesEditStory) GetCaption() *wrapperspb.StringValue {
	if x != nil {
		return x.Caption
	}
	return nil
}

func (x *TLStoriesEditStory) GetEntities() []*MessageEntity {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *TLStoriesEditStory) GetPrivacyRules() []*InputPrivacyRule {
	if x != nil {
		return x.PrivacyRules
	}
	return nil
}

type TLStoriesDeleteStories struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Id            []int32                `protobuf:"varint,4,rep,packed,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStoriesDeleteStories) Reset() {
	*x = TLStoriesDeleteStories{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[659]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStoriesDeleteStories) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStoriesDeleteStories) ProtoMessage() {}

func (x *TLStoriesDeleteStories) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[659]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStoriesDeleteStories.ProtoReflect.Descriptor instead.
func (*TLStoriesDeleteStories) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{659}
}

func (x *TLStoriesDeleteStories) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStoriesDeleteStories) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLStoriesDeleteStories) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

type TLStoriesTogglePinned struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Id            []int32                `protobuf:"varint,4,rep,packed,name=id,proto3" json:"id,omitempty"`
	Pinned        *Bool                  `protobuf:"bytes,5,opt,name=pinned,proto3" json:"pinned,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStoriesTogglePinned) Reset() {
	*x = TLStoriesTogglePinned{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[660]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStoriesTogglePinned) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStoriesTogglePinned) ProtoMessage() {}

func (x *TLStoriesTogglePinned) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[660]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStoriesTogglePinned.ProtoReflect.Descriptor instead.
func (*TLStoriesTogglePinned) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{660}
}

func (x *TLStoriesTogglePinned) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStoriesTogglePinned) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLStoriesTogglePinned) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TLStoriesTogglePinned) GetPinned() *Bool {
	if x != nil {
		return x.Pinned
	}
	return nil
}

type TLStoriesGetAllStories struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Constructor   TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Next          bool                    `protobuf:"varint,3,opt,name=next,proto3" json:"next,omitempty"`
	Hidden        bool                    `protobuf:"varint,4,opt,name=hidden,proto3" json:"hidden,omitempty"`
	State         *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStoriesGetAllStories) Reset() {
	*x = TLStoriesGetAllStories{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[661]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStoriesGetAllStories) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStoriesGetAllStories) ProtoMessage() {}

func (x *TLStoriesGetAllStories) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[661]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStoriesGetAllStories.ProtoReflect.Descriptor instead.
func (*TLStoriesGetAllStories) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{661}
}

func (x *TLStoriesGetAllStories) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStoriesGetAllStories) GetNext() bool {
	if x != nil {
		return x.Next
	}
	return false
}

func (x *TLStoriesGetAllStories) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *TLStoriesGetAllStories) GetState() *wrapperspb.StringValue {
	if x != nil {
		return x.State
	}
	return nil
}

type TLStoriesGetPinnedStories struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	OffsetId      int32                  `protobuf:"varint,4,opt,name=offset_id,json=offsetId,proto3" json:"offset_id,omitempty"`
	Limit         int32                  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	UserId        *InputUser             `protobuf:"bytes,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStoriesGetPinnedStories) Reset() {
	*x = TLStoriesGetPinnedStories{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[662]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStoriesGetPinnedStories) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStoriesGetPinnedStories) ProtoMessage() {}

func (x *TLStoriesGetPinnedStories) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[662]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStoriesGetPinnedStories.ProtoReflect.Descriptor instead.
func (*TLStoriesGetPinnedStories) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{662}
}

func (x *TLStoriesGetPinnedStories) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStoriesGetPinnedStories) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLStoriesGetPinnedStories) GetOffsetId() int32 {
	if x != nil {
		return x.OffsetId
	}
	return 0
}

func (x *TLStoriesGetPinnedStories) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TLStoriesGetPinnedStories) GetUserId() *InputUser {
	if x != nil {
		return x.UserId
	}
	return nil
}

type TLStoriesGetStoriesArchive struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	OffsetId      int32                  `protobuf:"varint,4,opt,name=offset_id,json=offsetId,proto3" json:"offset_id,omitempty"`
	Limit         int32                  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStoriesGetStoriesArchive) Reset() {
	*x = TLStoriesGetStoriesArchive{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[663]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStoriesGetStoriesArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStoriesGetStoriesArchive) ProtoMessage() {}

func (x *TLStoriesGetStoriesArchive) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[663]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStoriesGetStoriesArchive.ProtoReflect.Descriptor instead.
func (*TLStoriesGetStoriesArchive) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{663}
}

func (x *TLStoriesGetStoriesArchive) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStoriesGetStoriesArchive) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLStoriesGetStoriesArchive) GetOffsetId() int32 {
	if x != nil {
		return x.OffsetId
	}
	return 0
}

func (x *TLStoriesGetStoriesArchive) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TLStoriesGetStoriesByID struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Id            []int32                `protobuf:"varint,4,rep,packed,name=id,proto3" json:"id,omitempty"`
	UserId        *InputUser             `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStoriesGetStoriesByID) Reset() {
	*x = TLStoriesGetStoriesByID{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[664]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStoriesGetStoriesByID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStoriesGetStoriesByID) ProtoMessage() {}

func (x *TLStoriesGetStoriesByID) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[664]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStoriesGetStoriesByID.ProtoReflect.Descriptor instead.
func (*TLStoriesGetStoriesByID) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{664}
}

func (x *TLStoriesGetStoriesByID) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStoriesGetStoriesByID) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLStoriesGetStoriesByID) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TLStoriesGetStoriesByID) GetUserId() *InputUser {
	if x != nil {
		return x.UserId
	}
	return nil
}

type TLStoriesToggleAllStoriesHidden struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Hidden        *Bool                  `protobuf:"bytes,3,opt,name=hidden,proto3" json:"hidden,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStoriesToggleAllStoriesHidden) Reset() {
	*x = TLStoriesToggleAllStoriesHidden{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[665]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStoriesToggleAllStoriesHidden) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStoriesToggleAllStoriesHidden) ProtoMessage() {}

func (x *TLStoriesToggleAllStoriesHidden) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[665]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStoriesToggleAllStoriesHidden.ProtoReflect.Descriptor instead.
func (*TLStoriesToggleAllStoriesHidden) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{665}
}

func (x *TLStoriesToggleAllStoriesHidden) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStoriesToggleAllStoriesHidden) GetHidden() *Bool {
	if x != nil {
		return x.Hidden
	}
	return nil
}

type TLStoriesReadStories struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	MaxId         int32                  `protobuf:"varint,4,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	UserId        *InputUser             `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStoriesReadStories) Reset() {
	*x = TLStoriesReadStories{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[666]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStoriesReadStories) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStoriesReadStories) ProtoMessage() {}

func (x *TLStoriesReadStories) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[666]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStoriesReadStories.ProtoReflect.Descriptor instead.
func (*TLStoriesReadStories) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{666}
}

func (x *TLStoriesReadStories) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStoriesReadStories) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLStoriesReadStories) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

func (x *TLStoriesReadStories) GetUserId() *InputUser {
	if x != nil {
		return x.UserId
	}
	return nil
}

type TLStoriesIncrementStoryViews struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Id            []int32                `protobuf:"varint,4,rep,packed,name=id,proto3" json:"id,omitempty"`
	UserId        *InputUser             `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStoriesIncrementStoryViews) Reset() {
	*x = TLStoriesIncrementStoryViews{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[667]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStoriesIncrementStoryViews) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStoriesIncrementStoryViews) ProtoMessage() {}

func (x *TLStoriesIncrementStoryViews) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[667]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStoriesIncrementStoryViews.ProtoReflect.Descriptor instead.
func (*TLStoriesIncrementStoryViews) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{667}
}

func (x *TLStoriesIncrementStoryViews) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStoriesIncrementStoryViews) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLStoriesIncrementStoryViews) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TLStoriesIncrementStoryViews) GetUserId() *InputUser {
	if x != nil {
		return x.UserId
	}
	return nil
}

type TLStoriesGetStoryViewsList struct {
	state          protoimpl.MessageState  `protogen:"open.v1"`
	Constructor    TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	JustContacts   bool                    `protobuf:"varint,3,opt,name=just_contacts,json=justContacts,proto3" json:"just_contacts,omitempty"`
	ReactionsFirst bool                    `protobuf:"varint,4,opt,name=reactions_first,json=reactionsFirst,proto3" json:"reactions_first,omitempty"`
	ForwardsFirst  bool                    `protobuf:"varint,5,opt,name=forwards_first,json=forwardsFirst,proto3" json:"forwards_first,omitempty"`
	Peer           *InputPeer              `protobuf:"bytes,6,opt,name=peer,proto3" json:"peer,omitempty"`
	Q              *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=q,proto3" json:"q,omitempty"`
	Id             int32                   `protobuf:"varint,8,opt,name=id,proto3" json:"id,omitempty"`
	Offset         string                  `protobuf:"bytes,9,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit          int32                   `protobuf:"varint,10,opt,name=limit,proto3" json:"limit,omitempty"`
	OffsetDate     int32                   `protobuf:"varint,11,opt,name=offset_date,json=offsetDate,proto3" json:"offset_date,omitempty"`
	OffsetId       int64                   `protobuf:"varint,12,opt,name=offset_id,json=offsetId,proto3" json:"offset_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TLStoriesGetStoryViewsList) Reset() {
	*x = TLStoriesGetStoryViewsList{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[668]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStoriesGetStoryViewsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStoriesGetStoryViewsList) ProtoMessage() {}

func (x *TLStoriesGetStoryViewsList) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[668]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStoriesGetStoryViewsList.ProtoReflect.Descriptor instead.
func (*TLStoriesGetStoryViewsList) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{668}
}

func (x *TLStoriesGetStoryViewsList) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStoriesGetStoryViewsList) GetJustContacts() bool {
	if x != nil {
		return x.JustContacts
	}
	return false
}

func (x *TLStoriesGetStoryViewsList) GetReactionsFirst() bool {
	if x != nil {
		return x.ReactionsFirst
	}
	return false
}

func (x *TLStoriesGetStoryViewsList) GetForwardsFirst() bool {
	if x != nil {
		return x.ForwardsFirst
	}
	return false
}

func (x *TLStoriesGetStoryViewsList) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLStoriesGetStoryViewsList) GetQ() *wrapperspb.StringValue {
	if x != nil {
		return x.Q
	}
	return nil
}

func (x *TLStoriesGetStoryViewsList) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TLStoriesGetStoryViewsList) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *TLStoriesGetStoryViewsList) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TLStoriesGetStoryViewsList) GetOffsetDate() int32 {
	if x != nil {
		return x.OffsetDate
	}
	return 0
}

func (x *TLStoriesGetStoryViewsList) GetOffsetId() int64 {
	if x != nil {
		return x.OffsetId
	}
	return 0
}

type TLStoriesGetStoriesViews struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Id            []int32                `protobuf:"varint,4,rep,packed,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStoriesGetStoriesViews) Reset() {
	*x = TLStoriesGetStoriesViews{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[669]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStoriesGetStoriesViews) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStoriesGetStoriesViews) ProtoMessage() {}

func (x *TLStoriesGetStoriesViews) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[669]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStoriesGetStoriesViews.ProtoReflect.Descriptor instead.
func (*TLStoriesGetStoriesViews) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{669}
}

func (x *TLStoriesGetStoriesViews) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStoriesGetStoriesViews) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLStoriesGetStoriesViews) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

type TLStoriesExportStoryLink struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Id            int32                  `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	UserId        *InputUser             `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStoriesExportStoryLink) Reset() {
	*x = TLStoriesExportStoryLink{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[670]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStoriesExportStoryLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStoriesExportStoryLink) ProtoMessage() {}

func (x *TLStoriesExportStoryLink) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[670]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStoriesExportStoryLink.ProtoReflect.Descriptor instead.
func (*TLStoriesExportStoryLink) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{670}
}

func (x *TLStoriesExportStoryLink) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStoriesExportStoryLink) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLStoriesExportStoryLink) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TLStoriesExportStoryLink) GetUserId() *InputUser {
	if x != nil {
		return x.UserId
	}
	return nil
}

type TLStoriesReport19D8EB45 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Id            []int32                `protobuf:"varint,4,rep,packed,name=id,proto3" json:"id,omitempty"`
	Option        []byte                 `protobuf:"bytes,5,opt,name=option,proto3" json:"option,omitempty"`
	Message       string                 `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStoriesReport19D8EB45) Reset() {
	*x = TLStoriesReport19D8EB45{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[671]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStoriesReport19D8EB45) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStoriesReport19D8EB45) ProtoMessage() {}

func (x *TLStoriesReport19D8EB45) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[671]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStoriesReport19D8EB45.ProtoReflect.Descriptor instead.
func (*TLStoriesReport19D8EB45) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{671}
}

func (x *TLStoriesReport19D8EB45) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStoriesReport19D8EB45) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLStoriesReport19D8EB45) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TLStoriesReport19D8EB45) GetOption() []byte {
	if x != nil {
		return x.Option
	}
	return nil
}

func (x *TLStoriesReport19D8EB45) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type TLStoriesActivateStealthMode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Past          bool                   `protobuf:"varint,3,opt,name=past,proto3" json:"past,omitempty"`
	Future        bool                   `protobuf:"varint,4,opt,name=future,proto3" json:"future,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStoriesActivateStealthMode) Reset() {
	*x = TLStoriesActivateStealthMode{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[672]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStoriesActivateStealthMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStoriesActivateStealthMode) ProtoMessage() {}

func (x *TLStoriesActivateStealthMode) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[672]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStoriesActivateStealthMode.ProtoReflect.Descriptor instead.
func (*TLStoriesActivateStealthMode) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{672}
}

func (x *TLStoriesActivateStealthMode) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStoriesActivateStealthMode) GetPast() bool {
	if x != nil {
		return x.Past
	}
	return false
}

func (x *TLStoriesActivateStealthMode) GetFuture() bool {
	if x != nil {
		return x.Future
	}
	return false
}

type TLStoriesSendReaction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	AddToRecent   bool                   `protobuf:"varint,3,opt,name=add_to_recent,json=addToRecent,proto3" json:"add_to_recent,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,4,opt,name=peer,proto3" json:"peer,omitempty"`
	StoryId       int32                  `protobuf:"varint,5,opt,name=story_id,json=storyId,proto3" json:"story_id,omitempty"`
	Reaction      *Reaction              `protobuf:"bytes,6,opt,name=reaction,proto3" json:"reaction,omitempty"`
	UserId        *InputUser             `protobuf:"bytes,7,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStoriesSendReaction) Reset() {
	*x = TLStoriesSendReaction{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[673]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStoriesSendReaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStoriesSendReaction) ProtoMessage() {}

func (x *TLStoriesSendReaction) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[673]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStoriesSendReaction.ProtoReflect.Descriptor instead.
func (*TLStoriesSendReaction) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{673}
}

func (x *TLStoriesSendReaction) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStoriesSendReaction) GetAddToRecent() bool {
	if x != nil {
		return x.AddToRecent
	}
	return false
}

func (x *TLStoriesSendReaction) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLStoriesSendReaction) GetStoryId() int32 {
	if x != nil {
		return x.StoryId
	}
	return 0
}

func (x *TLStoriesSendReaction) GetReaction() *Reaction {
	if x != nil {
		return x.Reaction
	}
	return nil
}

func (x *TLStoriesSendReaction) GetUserId() *InputUser {
	if x != nil {
		return x.UserId
	}
	return nil
}

type TLStoriesGetPeerStories struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStoriesGetPeerStories) Reset() {
	*x = TLStoriesGetPeerStories{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[674]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStoriesGetPeerStories) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStoriesGetPeerStories) ProtoMessage() {}

func (x *TLStoriesGetPeerStories) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[674]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStoriesGetPeerStories.ProtoReflect.Descriptor instead.
func (*TLStoriesGetPeerStories) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{674}
}

func (x *TLStoriesGetPeerStories) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStoriesGetPeerStories) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

type TLStoriesGetAllReadPeerStories struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStoriesGetAllReadPeerStories) Reset() {
	*x = TLStoriesGetAllReadPeerStories{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[675]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStoriesGetAllReadPeerStories) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStoriesGetAllReadPeerStories) ProtoMessage() {}

func (x *TLStoriesGetAllReadPeerStories) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[675]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStoriesGetAllReadPeerStories.ProtoReflect.Descriptor instead.
func (*TLStoriesGetAllReadPeerStories) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{675}
}

func (x *TLStoriesGetAllReadPeerStories) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLStoriesGetPeerMaxIDs struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Id            []*InputPeer           `protobuf:"bytes,3,rep,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStoriesGetPeerMaxIDs) Reset() {
	*x = TLStoriesGetPeerMaxIDs{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[676]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStoriesGetPeerMaxIDs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStoriesGetPeerMaxIDs) ProtoMessage() {}

func (x *TLStoriesGetPeerMaxIDs) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[676]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStoriesGetPeerMaxIDs.ProtoReflect.Descriptor instead.
func (*TLStoriesGetPeerMaxIDs) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{676}
}

func (x *TLStoriesGetPeerMaxIDs) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStoriesGetPeerMaxIDs) GetId() []*InputPeer {
	if x != nil {
		return x.Id
	}
	return nil
}

type TLStoriesGetChatsToSend struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStoriesGetChatsToSend) Reset() {
	*x = TLStoriesGetChatsToSend{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[677]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStoriesGetChatsToSend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStoriesGetChatsToSend) ProtoMessage() {}

func (x *TLStoriesGetChatsToSend) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[677]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStoriesGetChatsToSend.ProtoReflect.Descriptor instead.
func (*TLStoriesGetChatsToSend) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{677}
}

func (x *TLStoriesGetChatsToSend) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLStoriesTogglePeerStoriesHidden struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Hidden        *Bool                  `protobuf:"bytes,4,opt,name=hidden,proto3" json:"hidden,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStoriesTogglePeerStoriesHidden) Reset() {
	*x = TLStoriesTogglePeerStoriesHidden{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[678]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStoriesTogglePeerStoriesHidden) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStoriesTogglePeerStoriesHidden) ProtoMessage() {}

func (x *TLStoriesTogglePeerStoriesHidden) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[678]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStoriesTogglePeerStoriesHidden.ProtoReflect.Descriptor instead.
func (*TLStoriesTogglePeerStoriesHidden) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{678}
}

func (x *TLStoriesTogglePeerStoriesHidden) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStoriesTogglePeerStoriesHidden) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLStoriesTogglePeerStoriesHidden) GetHidden() *Bool {
	if x != nil {
		return x.Hidden
	}
	return nil
}

type TLStoriesGetStoryReactionsList struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Constructor   TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	ForwardsFirst bool                    `protobuf:"varint,3,opt,name=forwards_first,json=forwardsFirst,proto3" json:"forwards_first,omitempty"`
	Peer          *InputPeer              `protobuf:"bytes,4,opt,name=peer,proto3" json:"peer,omitempty"`
	Id            int32                   `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	Reaction      *Reaction               `protobuf:"bytes,6,opt,name=reaction,proto3" json:"reaction,omitempty"`
	Offset        *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit         int32                   `protobuf:"varint,8,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStoriesGetStoryReactionsList) Reset() {
	*x = TLStoriesGetStoryReactionsList{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[679]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStoriesGetStoryReactionsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStoriesGetStoryReactionsList) ProtoMessage() {}

func (x *TLStoriesGetStoryReactionsList) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[679]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStoriesGetStoryReactionsList.ProtoReflect.Descriptor instead.
func (*TLStoriesGetStoryReactionsList) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{679}
}

func (x *TLStoriesGetStoryReactionsList) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStoriesGetStoryReactionsList) GetForwardsFirst() bool {
	if x != nil {
		return x.ForwardsFirst
	}
	return false
}

func (x *TLStoriesGetStoryReactionsList) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLStoriesGetStoryReactionsList) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TLStoriesGetStoryReactionsList) GetReaction() *Reaction {
	if x != nil {
		return x.Reaction
	}
	return nil
}

func (x *TLStoriesGetStoryReactionsList) GetOffset() *wrapperspb.StringValue {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *TLStoriesGetStoryReactionsList) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TLStoriesTogglePinnedToTop struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Id            []int32                `protobuf:"varint,4,rep,packed,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStoriesTogglePinnedToTop) Reset() {
	*x = TLStoriesTogglePinnedToTop{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[680]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStoriesTogglePinnedToTop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStoriesTogglePinnedToTop) ProtoMessage() {}

func (x *TLStoriesTogglePinnedToTop) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[680]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStoriesTogglePinnedToTop.ProtoReflect.Descriptor instead.
func (*TLStoriesTogglePinnedToTop) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{680}
}

func (x *TLStoriesTogglePinnedToTop) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStoriesTogglePinnedToTop) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLStoriesTogglePinnedToTop) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

type TLStoriesSearchPosts struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Constructor   TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Hashtag       *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=hashtag,proto3" json:"hashtag,omitempty"`
	Area          *MediaArea              `protobuf:"bytes,4,opt,name=area,proto3" json:"area,omitempty"`
	Peer          *InputPeer              `protobuf:"bytes,5,opt,name=peer,proto3" json:"peer,omitempty"`
	Offset        string                  `protobuf:"bytes,6,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit         int32                   `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStoriesSearchPosts) Reset() {
	*x = TLStoriesSearchPosts{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[681]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStoriesSearchPosts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStoriesSearchPosts) ProtoMessage() {}

func (x *TLStoriesSearchPosts) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[681]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStoriesSearchPosts.ProtoReflect.Descriptor instead.
func (*TLStoriesSearchPosts) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{681}
}

func (x *TLStoriesSearchPosts) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStoriesSearchPosts) GetHashtag() *wrapperspb.StringValue {
	if x != nil {
		return x.Hashtag
	}
	return nil
}

func (x *TLStoriesSearchPosts) GetArea() *MediaArea {
	if x != nil {
		return x.Area
	}
	return nil
}

func (x *TLStoriesSearchPosts) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLStoriesSearchPosts) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *TLStoriesSearchPosts) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TLPremiumGetBoostsList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Gifts         bool                   `protobuf:"varint,3,opt,name=gifts,proto3" json:"gifts,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,4,opt,name=peer,proto3" json:"peer,omitempty"`
	Offset        string                 `protobuf:"bytes,5,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit         int32                  `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPremiumGetBoostsList) Reset() {
	*x = TLPremiumGetBoostsList{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[682]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPremiumGetBoostsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPremiumGetBoostsList) ProtoMessage() {}

func (x *TLPremiumGetBoostsList) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[682]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPremiumGetBoostsList.ProtoReflect.Descriptor instead.
func (*TLPremiumGetBoostsList) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{682}
}

func (x *TLPremiumGetBoostsList) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPremiumGetBoostsList) GetGifts() bool {
	if x != nil {
		return x.Gifts
	}
	return false
}

func (x *TLPremiumGetBoostsList) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLPremiumGetBoostsList) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *TLPremiumGetBoostsList) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TLPremiumGetMyBoosts struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPremiumGetMyBoosts) Reset() {
	*x = TLPremiumGetMyBoosts{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[683]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPremiumGetMyBoosts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPremiumGetMyBoosts) ProtoMessage() {}

func (x *TLPremiumGetMyBoosts) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[683]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPremiumGetMyBoosts.ProtoReflect.Descriptor instead.
func (*TLPremiumGetMyBoosts) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{683}
}

func (x *TLPremiumGetMyBoosts) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLPremiumApplyBoost struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Slots         []int32                `protobuf:"varint,3,rep,packed,name=slots,proto3" json:"slots,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,4,opt,name=peer,proto3" json:"peer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPremiumApplyBoost) Reset() {
	*x = TLPremiumApplyBoost{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[684]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPremiumApplyBoost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPremiumApplyBoost) ProtoMessage() {}

func (x *TLPremiumApplyBoost) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[684]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPremiumApplyBoost.ProtoReflect.Descriptor instead.
func (*TLPremiumApplyBoost) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{684}
}

func (x *TLPremiumApplyBoost) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPremiumApplyBoost) GetSlots() []int32 {
	if x != nil {
		return x.Slots
	}
	return nil
}

func (x *TLPremiumApplyBoost) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

type TLPremiumGetBoostsStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPremiumGetBoostsStatus) Reset() {
	*x = TLPremiumGetBoostsStatus{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[685]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPremiumGetBoostsStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPremiumGetBoostsStatus) ProtoMessage() {}

func (x *TLPremiumGetBoostsStatus) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[685]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPremiumGetBoostsStatus.ProtoReflect.Descriptor instead.
func (*TLPremiumGetBoostsStatus) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{685}
}

func (x *TLPremiumGetBoostsStatus) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPremiumGetBoostsStatus) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

type TLPremiumGetUserBoosts struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	UserId        *InputUser             `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPremiumGetUserBoosts) Reset() {
	*x = TLPremiumGetUserBoosts{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[686]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPremiumGetUserBoosts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPremiumGetUserBoosts) ProtoMessage() {}

func (x *TLPremiumGetUserBoosts) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[686]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPremiumGetUserBoosts.ProtoReflect.Descriptor instead.
func (*TLPremiumGetUserBoosts) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{686}
}

func (x *TLPremiumGetUserBoosts) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPremiumGetUserBoosts) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLPremiumGetUserBoosts) GetUserId() *InputUser {
	if x != nil {
		return x.UserId
	}
	return nil
}

type TLSmsjobsIsEligibleToJoin struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLSmsjobsIsEligibleToJoin) Reset() {
	*x = TLSmsjobsIsEligibleToJoin{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[687]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLSmsjobsIsEligibleToJoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSmsjobsIsEligibleToJoin) ProtoMessage() {}

func (x *TLSmsjobsIsEligibleToJoin) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[687]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSmsjobsIsEligibleToJoin.ProtoReflect.Descriptor instead.
func (*TLSmsjobsIsEligibleToJoin) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{687}
}

func (x *TLSmsjobsIsEligibleToJoin) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLSmsjobsJoin struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLSmsjobsJoin) Reset() {
	*x = TLSmsjobsJoin{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[688]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLSmsjobsJoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSmsjobsJoin) ProtoMessage() {}

func (x *TLSmsjobsJoin) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[688]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSmsjobsJoin.ProtoReflect.Descriptor instead.
func (*TLSmsjobsJoin) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{688}
}

func (x *TLSmsjobsJoin) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLSmsjobsLeave struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLSmsjobsLeave) Reset() {
	*x = TLSmsjobsLeave{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[689]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLSmsjobsLeave) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSmsjobsLeave) ProtoMessage() {}

func (x *TLSmsjobsLeave) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[689]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSmsjobsLeave.ProtoReflect.Descriptor instead.
func (*TLSmsjobsLeave) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{689}
}

func (x *TLSmsjobsLeave) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLSmsjobsUpdateSettings struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Constructor        TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	AllowInternational bool                   `protobuf:"varint,3,opt,name=allow_international,json=allowInternational,proto3" json:"allow_international,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *TLSmsjobsUpdateSettings) Reset() {
	*x = TLSmsjobsUpdateSettings{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[690]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLSmsjobsUpdateSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSmsjobsUpdateSettings) ProtoMessage() {}

func (x *TLSmsjobsUpdateSettings) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[690]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSmsjobsUpdateSettings.ProtoReflect.Descriptor instead.
func (*TLSmsjobsUpdateSettings) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{690}
}

func (x *TLSmsjobsUpdateSettings) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLSmsjobsUpdateSettings) GetAllowInternational() bool {
	if x != nil {
		return x.AllowInternational
	}
	return false
}

type TLSmsjobsGetStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLSmsjobsGetStatus) Reset() {
	*x = TLSmsjobsGetStatus{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[691]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLSmsjobsGetStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSmsjobsGetStatus) ProtoMessage() {}

func (x *TLSmsjobsGetStatus) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[691]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSmsjobsGetStatus.ProtoReflect.Descriptor instead.
func (*TLSmsjobsGetStatus) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{691}
}

func (x *TLSmsjobsGetStatus) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLSmsjobsGetSmsJob struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	JobId         string                 `protobuf:"bytes,3,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLSmsjobsGetSmsJob) Reset() {
	*x = TLSmsjobsGetSmsJob{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[692]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLSmsjobsGetSmsJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSmsjobsGetSmsJob) ProtoMessage() {}

func (x *TLSmsjobsGetSmsJob) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[692]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSmsjobsGetSmsJob.ProtoReflect.Descriptor instead.
func (*TLSmsjobsGetSmsJob) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{692}
}

func (x *TLSmsjobsGetSmsJob) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLSmsjobsGetSmsJob) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

type TLSmsjobsFinishJob struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Constructor   TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	JobId         string                  `protobuf:"bytes,3,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Error         *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLSmsjobsFinishJob) Reset() {
	*x = TLSmsjobsFinishJob{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[693]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLSmsjobsFinishJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSmsjobsFinishJob) ProtoMessage() {}

func (x *TLSmsjobsFinishJob) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[693]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSmsjobsFinishJob.ProtoReflect.Descriptor instead.
func (*TLSmsjobsFinishJob) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{693}
}

func (x *TLSmsjobsFinishJob) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLSmsjobsFinishJob) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *TLSmsjobsFinishJob) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

type TLFragmentGetCollectibleInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Collectible   *InputCollectible      `protobuf:"bytes,3,opt,name=collectible,proto3" json:"collectible,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLFragmentGetCollectibleInfo) Reset() {
	*x = TLFragmentGetCollectibleInfo{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[694]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLFragmentGetCollectibleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLFragmentGetCollectibleInfo) ProtoMessage() {}

func (x *TLFragmentGetCollectibleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[694]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLFragmentGetCollectibleInfo.ProtoReflect.Descriptor instead.
func (*TLFragmentGetCollectibleInfo) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{694}
}

func (x *TLFragmentGetCollectibleInfo) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLFragmentGetCollectibleInfo) GetCollectible() *InputCollectible {
	if x != nil {
		return x.Collectible
	}
	return nil
}

type TLPaymentsCanPurchasePremium struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Constructor   TLConstructor             `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Purpose       *InputStorePaymentPurpose `protobuf:"bytes,3,opt,name=purpose,proto3" json:"purpose,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPaymentsCanPurchasePremium) Reset() {
	*x = TLPaymentsCanPurchasePremium{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[695]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsCanPurchasePremium) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsCanPurchasePremium) ProtoMessage() {}

func (x *TLPaymentsCanPurchasePremium) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[695]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsCanPurchasePremium.ProtoReflect.Descriptor instead.
func (*TLPaymentsCanPurchasePremium) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{695}
}

func (x *TLPaymentsCanPurchasePremium) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsCanPurchasePremium) GetPurpose() *InputStorePaymentPurpose {
	if x != nil {
		return x.Purpose
	}
	return nil
}

type TLUsersGetIsPremiumRequiredToContact struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Id            []*InputUser           `protobuf:"bytes,3,rep,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLUsersGetIsPremiumRequiredToContact) Reset() {
	*x = TLUsersGetIsPremiumRequiredToContact{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[696]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLUsersGetIsPremiumRequiredToContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUsersGetIsPremiumRequiredToContact) ProtoMessage() {}

func (x *TLUsersGetIsPremiumRequiredToContact) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[696]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUsersGetIsPremiumRequiredToContact.ProtoReflect.Descriptor instead.
func (*TLUsersGetIsPremiumRequiredToContact) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{696}
}

func (x *TLUsersGetIsPremiumRequiredToContact) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUsersGetIsPremiumRequiredToContact) GetId() []*InputUser {
	if x != nil {
		return x.Id
	}
	return nil
}

type TLPaymentsGetUserStarGifts struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	UserId        *InputUser             `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Offset        string                 `protobuf:"bytes,4,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit         int32                  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPaymentsGetUserStarGifts) Reset() {
	*x = TLPaymentsGetUserStarGifts{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[697]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsGetUserStarGifts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsGetUserStarGifts) ProtoMessage() {}

func (x *TLPaymentsGetUserStarGifts) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[697]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsGetUserStarGifts.ProtoReflect.Descriptor instead.
func (*TLPaymentsGetUserStarGifts) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{697}
}

func (x *TLPaymentsGetUserStarGifts) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsGetUserStarGifts) GetUserId() *InputUser {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *TLPaymentsGetUserStarGifts) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *TLPaymentsGetUserStarGifts) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TLPaymentsGetUserStarGift struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	MsgId         []int32                `protobuf:"varint,3,rep,packed,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPaymentsGetUserStarGift) Reset() {
	*x = TLPaymentsGetUserStarGift{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[698]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsGetUserStarGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsGetUserStarGift) ProtoMessage() {}

func (x *TLPaymentsGetUserStarGift) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[698]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsGetUserStarGift.ProtoReflect.Descriptor instead.
func (*TLPaymentsGetUserStarGift) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{698}
}

func (x *TLPaymentsGetUserStarGift) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsGetUserStarGift) GetMsgId() []int32 {
	if x != nil {
		return x.MsgId
	}
	return nil
}

type TLMessagesGetWebPagePreview8B68B0CC struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Entities      []*MessageEntity       `protobuf:"bytes,4,rep,name=entities,proto3" json:"entities,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetWebPagePreview8B68B0CC) Reset() {
	*x = TLMessagesGetWebPagePreview8B68B0CC{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[699]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetWebPagePreview8B68B0CC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetWebPagePreview8B68B0CC) ProtoMessage() {}

func (x *TLMessagesGetWebPagePreview8B68B0CC) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[699]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetWebPagePreview8B68B0CC.ProtoReflect.Descriptor instead.
func (*TLMessagesGetWebPagePreview8B68B0CC) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{699}
}

func (x *TLMessagesGetWebPagePreview8B68B0CC) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetWebPagePreview8B68B0CC) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TLMessagesGetWebPagePreview8B68B0CC) GetEntities() []*MessageEntity {
	if x != nil {
		return x.Entities
	}
	return nil
}

type TLChannelsViewSponsoredMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	RandomId      []byte                 `protobuf:"bytes,4,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsViewSponsoredMessage) Reset() {
	*x = TLChannelsViewSponsoredMessage{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[700]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsViewSponsoredMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsViewSponsoredMessage) ProtoMessage() {}

func (x *TLChannelsViewSponsoredMessage) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[700]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsViewSponsoredMessage.ProtoReflect.Descriptor instead.
func (*TLChannelsViewSponsoredMessage) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{700}
}

func (x *TLChannelsViewSponsoredMessage) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsViewSponsoredMessage) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsViewSponsoredMessage) GetRandomId() []byte {
	if x != nil {
		return x.RandomId
	}
	return nil
}

type TLChannelsGetSponsoredMessages struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsGetSponsoredMessages) Reset() {
	*x = TLChannelsGetSponsoredMessages{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[701]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsGetSponsoredMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsGetSponsoredMessages) ProtoMessage() {}

func (x *TLChannelsGetSponsoredMessages) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[701]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsGetSponsoredMessages.ProtoReflect.Descriptor instead.
func (*TLChannelsGetSponsoredMessages) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{701}
}

func (x *TLChannelsGetSponsoredMessages) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsGetSponsoredMessages) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

type TLChannelsClickSponsoredMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Media         bool                   `protobuf:"varint,3,opt,name=media,proto3" json:"media,omitempty"`
	Fullscreen    bool                   `protobuf:"varint,4,opt,name=fullscreen,proto3" json:"fullscreen,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,5,opt,name=channel,proto3" json:"channel,omitempty"`
	RandomId      []byte                 `protobuf:"bytes,6,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsClickSponsoredMessage) Reset() {
	*x = TLChannelsClickSponsoredMessage{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[702]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsClickSponsoredMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsClickSponsoredMessage) ProtoMessage() {}

func (x *TLChannelsClickSponsoredMessage) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[702]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsClickSponsoredMessage.ProtoReflect.Descriptor instead.
func (*TLChannelsClickSponsoredMessage) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{702}
}

func (x *TLChannelsClickSponsoredMessage) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsClickSponsoredMessage) GetMedia() bool {
	if x != nil {
		return x.Media
	}
	return false
}

func (x *TLChannelsClickSponsoredMessage) GetFullscreen() bool {
	if x != nil {
		return x.Fullscreen
	}
	return false
}

func (x *TLChannelsClickSponsoredMessage) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsClickSponsoredMessage) GetRandomId() []byte {
	if x != nil {
		return x.RandomId
	}
	return nil
}

type TLChannelsReportSponsoredMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	RandomId      []byte                 `protobuf:"bytes,4,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	Option        []byte                 `protobuf:"bytes,5,opt,name=option,proto3" json:"option,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsReportSponsoredMessage) Reset() {
	*x = TLChannelsReportSponsoredMessage{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[703]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsReportSponsoredMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsReportSponsoredMessage) ProtoMessage() {}

func (x *TLChannelsReportSponsoredMessage) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[703]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsReportSponsoredMessage.ProtoReflect.Descriptor instead.
func (*TLChannelsReportSponsoredMessage) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{703}
}

func (x *TLChannelsReportSponsoredMessage) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsReportSponsoredMessage) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsReportSponsoredMessage) GetRandomId() []byte {
	if x != nil {
		return x.RandomId
	}
	return nil
}

func (x *TLChannelsReportSponsoredMessage) GetOption() []byte {
	if x != nil {
		return x.Option
	}
	return nil
}

type TLMessagesReport8953AB4E struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Id            []int32                `protobuf:"varint,4,rep,packed,name=id,proto3" json:"id,omitempty"`
	Reason        *ReportReason          `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	Message       string                 `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesReport8953AB4E) Reset() {
	*x = TLMessagesReport8953AB4E{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[704]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesReport8953AB4E) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesReport8953AB4E) ProtoMessage() {}

func (x *TLMessagesReport8953AB4E) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[704]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesReport8953AB4E.ProtoReflect.Descriptor instead.
func (*TLMessagesReport8953AB4E) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{704}
}

func (x *TLMessagesReport8953AB4E) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesReport8953AB4E) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesReport8953AB4E) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TLMessagesReport8953AB4E) GetReason() *ReportReason {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *TLMessagesReport8953AB4E) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type TLStoriesReport1923FA8C struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Id            []int32                `protobuf:"varint,4,rep,packed,name=id,proto3" json:"id,omitempty"`
	Reason        *ReportReason          `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	Message       string                 `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStoriesReport1923FA8C) Reset() {
	*x = TLStoriesReport1923FA8C{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[705]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStoriesReport1923FA8C) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStoriesReport1923FA8C) ProtoMessage() {}

func (x *TLStoriesReport1923FA8C) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[705]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStoriesReport1923FA8C.ProtoReflect.Descriptor instead.
func (*TLStoriesReport1923FA8C) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{705}
}

func (x *TLStoriesReport1923FA8C) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStoriesReport1923FA8C) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLStoriesReport1923FA8C) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TLStoriesReport1923FA8C) GetReason() *ReportReason {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *TLStoriesReport1923FA8C) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type TLMessagesRequestSimpleWebView1A46500A struct {
	state             protoimpl.MessageState  `protogen:"open.v1"`
	Constructor       TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	FromSwitchWebview bool                    `protobuf:"varint,3,opt,name=from_switch_webview,json=fromSwitchWebview,proto3" json:"from_switch_webview,omitempty"`
	FromSideMenu      bool                    `protobuf:"varint,4,opt,name=from_side_menu,json=fromSideMenu,proto3" json:"from_side_menu,omitempty"`
	Bot               *InputUser              `protobuf:"bytes,5,opt,name=bot,proto3" json:"bot,omitempty"`
	Url               *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	StartParam        *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=start_param,json=startParam,proto3" json:"start_param,omitempty"`
	ThemeParams       *DataJSON               `protobuf:"bytes,8,opt,name=theme_params,json=themeParams,proto3" json:"theme_params,omitempty"`
	Platform          string                  `protobuf:"bytes,9,opt,name=platform,proto3" json:"platform,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TLMessagesRequestSimpleWebView1A46500A) Reset() {
	*x = TLMessagesRequestSimpleWebView1A46500A{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[706]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesRequestSimpleWebView1A46500A) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesRequestSimpleWebView1A46500A) ProtoMessage() {}

func (x *TLMessagesRequestSimpleWebView1A46500A) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[706]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesRequestSimpleWebView1A46500A.ProtoReflect.Descriptor instead.
func (*TLMessagesRequestSimpleWebView1A46500A) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{706}
}

func (x *TLMessagesRequestSimpleWebView1A46500A) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesRequestSimpleWebView1A46500A) GetFromSwitchWebview() bool {
	if x != nil {
		return x.FromSwitchWebview
	}
	return false
}

func (x *TLMessagesRequestSimpleWebView1A46500A) GetFromSideMenu() bool {
	if x != nil {
		return x.FromSideMenu
	}
	return false
}

func (x *TLMessagesRequestSimpleWebView1A46500A) GetBot() *InputUser {
	if x != nil {
		return x.Bot
	}
	return nil
}

func (x *TLMessagesRequestSimpleWebView1A46500A) GetUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *TLMessagesRequestSimpleWebView1A46500A) GetStartParam() *wrapperspb.StringValue {
	if x != nil {
		return x.StartParam
	}
	return nil
}

func (x *TLMessagesRequestSimpleWebView1A46500A) GetThemeParams() *DataJSON {
	if x != nil {
		return x.ThemeParams
	}
	return nil
}

func (x *TLMessagesRequestSimpleWebView1A46500A) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

type TLMessagesRequestAppWebView8C5A3B3C struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Constructor   TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	WriteAllowed  bool                    `protobuf:"varint,3,opt,name=write_allowed,json=writeAllowed,proto3" json:"write_allowed,omitempty"`
	Peer          *InputPeer              `protobuf:"bytes,4,opt,name=peer,proto3" json:"peer,omitempty"`
	App           *InputBotApp            `protobuf:"bytes,5,opt,name=app,proto3" json:"app,omitempty"`
	StartParam    *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=start_param,json=startParam,proto3" json:"start_param,omitempty"`
	ThemeParams   *DataJSON               `protobuf:"bytes,7,opt,name=theme_params,json=themeParams,proto3" json:"theme_params,omitempty"`
	Platform      string                  `protobuf:"bytes,8,opt,name=platform,proto3" json:"platform,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesRequestAppWebView8C5A3B3C) Reset() {
	*x = TLMessagesRequestAppWebView8C5A3B3C{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[707]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesRequestAppWebView8C5A3B3C) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesRequestAppWebView8C5A3B3C) ProtoMessage() {}

func (x *TLMessagesRequestAppWebView8C5A3B3C) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[707]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesRequestAppWebView8C5A3B3C.ProtoReflect.Descriptor instead.
func (*TLMessagesRequestAppWebView8C5A3B3C) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{707}
}

func (x *TLMessagesRequestAppWebView8C5A3B3C) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesRequestAppWebView8C5A3B3C) GetWriteAllowed() bool {
	if x != nil {
		return x.WriteAllowed
	}
	return false
}

func (x *TLMessagesRequestAppWebView8C5A3B3C) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesRequestAppWebView8C5A3B3C) GetApp() *InputBotApp {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *TLMessagesRequestAppWebView8C5A3B3C) GetStartParam() *wrapperspb.StringValue {
	if x != nil {
		return x.StartParam
	}
	return nil
}

func (x *TLMessagesRequestAppWebView8C5A3B3C) GetThemeParams() *DataJSON {
	if x != nil {
		return x.ThemeParams
	}
	return nil
}

func (x *TLMessagesRequestAppWebView8C5A3B3C) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

type TLMessagesAddChatUserF24753E3 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	ChatId        int64                  `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	UserId        *InputUser             `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	FwdLimit      int32                  `protobuf:"varint,5,opt,name=fwd_limit,json=fwdLimit,proto3" json:"fwd_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesAddChatUserF24753E3) Reset() {
	*x = TLMessagesAddChatUserF24753E3{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[708]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesAddChatUserF24753E3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesAddChatUserF24753E3) ProtoMessage() {}

func (x *TLMessagesAddChatUserF24753E3) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[708]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesAddChatUserF24753E3.ProtoReflect.Descriptor instead.
func (*TLMessagesAddChatUserF24753E3) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{708}
}

func (x *TLMessagesAddChatUserF24753E3) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesAddChatUserF24753E3) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *TLMessagesAddChatUserF24753E3) GetUserId() *InputUser {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *TLMessagesAddChatUserF24753E3) GetFwdLimit() int32 {
	if x != nil {
		return x.FwdLimit
	}
	return 0
}

type TLMessagesCreateChat34A818 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Users         []*InputUser           `protobuf:"bytes,3,rep,name=users,proto3" json:"users,omitempty"`
	Title         string                 `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	TtlPeriod     *wrapperspb.Int32Value `protobuf:"bytes,5,opt,name=ttl_period,json=ttlPeriod,proto3" json:"ttl_period,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesCreateChat34A818) Reset() {
	*x = TLMessagesCreateChat34A818{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[709]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesCreateChat34A818) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesCreateChat34A818) ProtoMessage() {}

func (x *TLMessagesCreateChat34A818) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[709]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesCreateChat34A818.ProtoReflect.Descriptor instead.
func (*TLMessagesCreateChat34A818) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{709}
}

func (x *TLMessagesCreateChat34A818) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesCreateChat34A818) GetUsers() []*InputUser {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *TLMessagesCreateChat34A818) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TLMessagesCreateChat34A818) GetTtlPeriod() *wrapperspb.Int32Value {
	if x != nil {
		return x.TtlPeriod
	}
	return nil
}

type TLChannelsInviteToChannel199F3A6C struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	Users         []*InputUser           `protobuf:"bytes,4,rep,name=users,proto3" json:"users,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsInviteToChannel199F3A6C) Reset() {
	*x = TLChannelsInviteToChannel199F3A6C{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[710]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsInviteToChannel199F3A6C) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsInviteToChannel199F3A6C) ProtoMessage() {}

func (x *TLChannelsInviteToChannel199F3A6C) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[710]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsInviteToChannel199F3A6C.ProtoReflect.Descriptor instead.
func (*TLChannelsInviteToChannel199F3A6C) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{710}
}

func (x *TLChannelsInviteToChannel199F3A6C) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsInviteToChannel199F3A6C) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsInviteToChannel199F3A6C) GetUsers() []*InputUser {
	if x != nil {
		return x.Users
	}
	return nil
}

type TLMessagesGetDialogFiltersF19ED96D struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetDialogFiltersF19ED96D) Reset() {
	*x = TLMessagesGetDialogFiltersF19ED96D{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[711]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetDialogFiltersF19ED96D) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetDialogFiltersF19ED96D) ProtoMessage() {}

func (x *TLMessagesGetDialogFiltersF19ED96D) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[711]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetDialogFiltersF19ED96D.ProtoReflect.Descriptor instead.
func (*TLMessagesGetDialogFiltersF19ED96D) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{711}
}

func (x *TLMessagesGetDialogFiltersF19ED96D) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLHelpGetAppChangelog struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Constructor    TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	PrevAppVersion string                 `protobuf:"bytes,3,opt,name=prev_app_version,json=prevAppVersion,proto3" json:"prev_app_version,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TLHelpGetAppChangelog) Reset() {
	*x = TLHelpGetAppChangelog{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[712]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLHelpGetAppChangelog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLHelpGetAppChangelog) ProtoMessage() {}

func (x *TLHelpGetAppChangelog) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[712]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLHelpGetAppChangelog.ProtoReflect.Descriptor instead.
func (*TLHelpGetAppChangelog) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{712}
}

func (x *TLHelpGetAppChangelog) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLHelpGetAppChangelog) GetPrevAppVersion() string {
	if x != nil {
		return x.PrevAppVersion
	}
	return ""
}

type TLStatsGetMessagePublicForwards5630281B struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	MsgId         int32                  `protobuf:"varint,4,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	OffsetRate    int32                  `protobuf:"varint,5,opt,name=offset_rate,json=offsetRate,proto3" json:"offset_rate,omitempty"`
	OffsetPeer    *InputPeer             `protobuf:"bytes,6,opt,name=offset_peer,json=offsetPeer,proto3" json:"offset_peer,omitempty"`
	OffsetId      int32                  `protobuf:"varint,7,opt,name=offset_id,json=offsetId,proto3" json:"offset_id,omitempty"`
	Limit         int32                  `protobuf:"varint,8,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStatsGetMessagePublicForwards5630281B) Reset() {
	*x = TLStatsGetMessagePublicForwards5630281B{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[713]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStatsGetMessagePublicForwards5630281B) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStatsGetMessagePublicForwards5630281B) ProtoMessage() {}

func (x *TLStatsGetMessagePublicForwards5630281B) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[713]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStatsGetMessagePublicForwards5630281B.ProtoReflect.Descriptor instead.
func (*TLStatsGetMessagePublicForwards5630281B) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{713}
}

func (x *TLStatsGetMessagePublicForwards5630281B) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStatsGetMessagePublicForwards5630281B) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLStatsGetMessagePublicForwards5630281B) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *TLStatsGetMessagePublicForwards5630281B) GetOffsetRate() int32 {
	if x != nil {
		return x.OffsetRate
	}
	return 0
}

func (x *TLStatsGetMessagePublicForwards5630281B) GetOffsetPeer() *InputPeer {
	if x != nil {
		return x.OffsetPeer
	}
	return nil
}

func (x *TLStatsGetMessagePublicForwards5630281B) GetOffsetId() int32 {
	if x != nil {
		return x.OffsetId
	}
	return 0
}

func (x *TLStatsGetMessagePublicForwards5630281B) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TLStoriesGetBoostsStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStoriesGetBoostsStatus) Reset() {
	*x = TLStoriesGetBoostsStatus{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[714]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStoriesGetBoostsStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStoriesGetBoostsStatus) ProtoMessage() {}

func (x *TLStoriesGetBoostsStatus) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[714]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStoriesGetBoostsStatus.ProtoReflect.Descriptor instead.
func (*TLStoriesGetBoostsStatus) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{714}
}

func (x *TLStoriesGetBoostsStatus) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStoriesGetBoostsStatus) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

type TLStoriesGetBoostersList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Offset        string                 `protobuf:"bytes,4,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit         int32                  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStoriesGetBoostersList) Reset() {
	*x = TLStoriesGetBoostersList{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[715]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStoriesGetBoostersList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStoriesGetBoostersList) ProtoMessage() {}

func (x *TLStoriesGetBoostersList) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[715]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStoriesGetBoostersList.ProtoReflect.Descriptor instead.
func (*TLStoriesGetBoostersList) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{715}
}

func (x *TLStoriesGetBoostersList) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStoriesGetBoostersList) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLStoriesGetBoostersList) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *TLStoriesGetBoostersList) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TLStoriesCanApplyBoost struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStoriesCanApplyBoost) Reset() {
	*x = TLStoriesCanApplyBoost{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[716]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStoriesCanApplyBoost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStoriesCanApplyBoost) ProtoMessage() {}

func (x *TLStoriesCanApplyBoost) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[716]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStoriesCanApplyBoost.ProtoReflect.Descriptor instead.
func (*TLStoriesCanApplyBoost) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{716}
}

func (x *TLStoriesCanApplyBoost) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStoriesCanApplyBoost) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

type TLStoriesApplyBoost struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStoriesApplyBoost) Reset() {
	*x = TLStoriesApplyBoost{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[717]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStoriesApplyBoost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStoriesApplyBoost) ProtoMessage() {}

func (x *TLStoriesApplyBoost) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[717]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStoriesApplyBoost.ProtoReflect.Descriptor instead.
func (*TLStoriesApplyBoost) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{717}
}

func (x *TLStoriesApplyBoost) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStoriesApplyBoost) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

type TLMessagesGetWebPage32CA8F91 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Url           string                 `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Hash          int32                  `protobuf:"varint,4,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetWebPage32CA8F91) Reset() {
	*x = TLMessagesGetWebPage32CA8F91{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[718]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetWebPage32CA8F91) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetWebPage32CA8F91) ProtoMessage() {}

func (x *TLMessagesGetWebPage32CA8F91) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[718]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetWebPage32CA8F91.ProtoReflect.Descriptor instead.
func (*TLMessagesGetWebPage32CA8F91) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{718}
}

func (x *TLMessagesGetWebPage32CA8F91) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetWebPage32CA8F91) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *TLMessagesGetWebPage32CA8F91) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type TLUsersGetStoriesMaxIDs struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Id            []*InputUser           `protobuf:"bytes,3,rep,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLUsersGetStoriesMaxIDs) Reset() {
	*x = TLUsersGetStoriesMaxIDs{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[719]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLUsersGetStoriesMaxIDs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUsersGetStoriesMaxIDs) ProtoMessage() {}

func (x *TLUsersGetStoriesMaxIDs) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[719]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUsersGetStoriesMaxIDs.ProtoReflect.Descriptor instead.
func (*TLUsersGetStoriesMaxIDs) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{719}
}

func (x *TLUsersGetStoriesMaxIDs) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUsersGetStoriesMaxIDs) GetId() []*InputUser {
	if x != nil {
		return x.Id
	}
	return nil
}

type TLContactsToggleStoriesHidden struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Id            *InputUser             `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Hidden        *Bool                  `protobuf:"bytes,4,opt,name=hidden,proto3" json:"hidden,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLContactsToggleStoriesHidden) Reset() {
	*x = TLContactsToggleStoriesHidden{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[720]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLContactsToggleStoriesHidden) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLContactsToggleStoriesHidden) ProtoMessage() {}

func (x *TLContactsToggleStoriesHidden) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[720]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLContactsToggleStoriesHidden.ProtoReflect.Descriptor instead.
func (*TLContactsToggleStoriesHidden) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{720}
}

func (x *TLContactsToggleStoriesHidden) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLContactsToggleStoriesHidden) GetId() *InputUser {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TLContactsToggleStoriesHidden) GetHidden() *Bool {
	if x != nil {
		return x.Hidden
	}
	return nil
}

type TLStoriesGetUserStories struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	UserId        *InputUser             `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStoriesGetUserStories) Reset() {
	*x = TLStoriesGetUserStories{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[721]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStoriesGetUserStories) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStoriesGetUserStories) ProtoMessage() {}

func (x *TLStoriesGetUserStories) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[721]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStoriesGetUserStories.ProtoReflect.Descriptor instead.
func (*TLStoriesGetUserStories) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{721}
}

func (x *TLStoriesGetUserStories) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStoriesGetUserStories) GetUserId() *InputUser {
	if x != nil {
		return x.UserId
	}
	return nil
}

type TLStoriesGetAllReadUserStories struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStoriesGetAllReadUserStories) Reset() {
	*x = TLStoriesGetAllReadUserStories{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[722]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStoriesGetAllReadUserStories) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStoriesGetAllReadUserStories) ProtoMessage() {}

func (x *TLStoriesGetAllReadUserStories) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[722]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStoriesGetAllReadUserStories.ProtoReflect.Descriptor instead.
func (*TLStoriesGetAllReadUserStories) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{722}
}

func (x *TLStoriesGetAllReadUserStories) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLStoriesReportC95BE06A struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	UserId        *InputUser             `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Id            []int32                `protobuf:"varint,4,rep,packed,name=id,proto3" json:"id,omitempty"`
	Reason        *ReportReason          `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	Message       string                 `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLStoriesReportC95BE06A) Reset() {
	*x = TLStoriesReportC95BE06A{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[723]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLStoriesReportC95BE06A) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStoriesReportC95BE06A) ProtoMessage() {}

func (x *TLStoriesReportC95BE06A) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[723]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStoriesReportC95BE06A.ProtoReflect.Descriptor instead.
func (*TLStoriesReportC95BE06A) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{723}
}

func (x *TLStoriesReportC95BE06A) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStoriesReportC95BE06A) GetUserId() *InputUser {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *TLStoriesReportC95BE06A) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TLStoriesReportC95BE06A) GetReason() *ReportReason {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *TLStoriesReportC95BE06A) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type TLMessagesRequestSimpleWebView299BEC8E struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Constructor       TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	FromSwitchWebview bool                   `protobuf:"varint,3,opt,name=from_switch_webview,json=fromSwitchWebview,proto3" json:"from_switch_webview,omitempty"`
	Bot               *InputUser             `protobuf:"bytes,4,opt,name=bot,proto3" json:"bot,omitempty"`
	Url               string                 `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	ThemeParams       *DataJSON              `protobuf:"bytes,6,opt,name=theme_params,json=themeParams,proto3" json:"theme_params,omitempty"`
	Platform          string                 `protobuf:"bytes,7,opt,name=platform,proto3" json:"platform,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TLMessagesRequestSimpleWebView299BEC8E) Reset() {
	*x = TLMessagesRequestSimpleWebView299BEC8E{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[724]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesRequestSimpleWebView299BEC8E) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesRequestSimpleWebView299BEC8E) ProtoMessage() {}

func (x *TLMessagesRequestSimpleWebView299BEC8E) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[724]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesRequestSimpleWebView299BEC8E.ProtoReflect.Descriptor instead.
func (*TLMessagesRequestSimpleWebView299BEC8E) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{724}
}

func (x *TLMessagesRequestSimpleWebView299BEC8E) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesRequestSimpleWebView299BEC8E) GetFromSwitchWebview() bool {
	if x != nil {
		return x.FromSwitchWebview
	}
	return false
}

func (x *TLMessagesRequestSimpleWebView299BEC8E) GetBot() *InputUser {
	if x != nil {
		return x.Bot
	}
	return nil
}

func (x *TLMessagesRequestSimpleWebView299BEC8E) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *TLMessagesRequestSimpleWebView299BEC8E) GetThemeParams() *DataJSON {
	if x != nil {
		return x.ThemeParams
	}
	return nil
}

func (x *TLMessagesRequestSimpleWebView299BEC8E) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

type TLMessagesGetAllChats struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	ExceptIds     []int64                `protobuf:"varint,3,rep,packed,name=except_ids,json=exceptIds,proto3" json:"except_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetAllChats) Reset() {
	*x = TLMessagesGetAllChats{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[725]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetAllChats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetAllChats) ProtoMessage() {}

func (x *TLMessagesGetAllChats) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[725]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetAllChats.ProtoReflect.Descriptor instead.
func (*TLMessagesGetAllChats) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{725}
}

func (x *TLMessagesGetAllChats) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetAllChats) GetExceptIds() []int64 {
	if x != nil {
		return x.ExceptIds
	}
	return nil
}

type TLBotsGetBotInfo75EC12E6 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	LangCode      string                 `protobuf:"bytes,3,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLBotsGetBotInfo75EC12E6) Reset() {
	*x = TLBotsGetBotInfo75EC12E6{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[726]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLBotsGetBotInfo75EC12E6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLBotsGetBotInfo75EC12E6) ProtoMessage() {}

func (x *TLBotsGetBotInfo75EC12E6) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[726]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLBotsGetBotInfo75EC12E6.ProtoReflect.Descriptor instead.
func (*TLBotsGetBotInfo75EC12E6) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{726}
}

func (x *TLBotsGetBotInfo75EC12E6) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLBotsGetBotInfo75EC12E6) GetLangCode() string {
	if x != nil {
		return x.LangCode
	}
	return ""
}

type TLFoldersDeleteFolder struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	FolderId      int32                  `protobuf:"varint,3,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLFoldersDeleteFolder) Reset() {
	*x = TLFoldersDeleteFolder{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[727]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLFoldersDeleteFolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLFoldersDeleteFolder) ProtoMessage() {}

func (x *TLFoldersDeleteFolder) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[727]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLFoldersDeleteFolder.ProtoReflect.Descriptor instead.
func (*TLFoldersDeleteFolder) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{727}
}

func (x *TLFoldersDeleteFolder) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLFoldersDeleteFolder) GetFolderId() int32 {
	if x != nil {
		return x.FolderId
	}
	return 0
}

type TLMessagesGetMessageReadParticipants2C6F97B7 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Peer          *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	MsgId         int32                  `protobuf:"varint,4,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesGetMessageReadParticipants2C6F97B7) Reset() {
	*x = TLMessagesGetMessageReadParticipants2C6F97B7{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[728]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesGetMessageReadParticipants2C6F97B7) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesGetMessageReadParticipants2C6F97B7) ProtoMessage() {}

func (x *TLMessagesGetMessageReadParticipants2C6F97B7) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[728]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesGetMessageReadParticipants2C6F97B7.ProtoReflect.Descriptor instead.
func (*TLMessagesGetMessageReadParticipants2C6F97B7) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{728}
}

func (x *TLMessagesGetMessageReadParticipants2C6F97B7) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesGetMessageReadParticipants2C6F97B7) GetPeer() *InputPeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLMessagesGetMessageReadParticipants2C6F97B7) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

type TLHelpGetAppConfig98914110 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLHelpGetAppConfig98914110) Reset() {
	*x = TLHelpGetAppConfig98914110{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[729]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLHelpGetAppConfig98914110) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLHelpGetAppConfig98914110) ProtoMessage() {}

func (x *TLHelpGetAppConfig98914110) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[729]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLHelpGetAppConfig98914110.ProtoReflect.Descriptor instead.
func (*TLHelpGetAppConfig98914110) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{729}
}

func (x *TLHelpGetAppConfig98914110) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLMessagesCreateChat9CB126E struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Users         []*InputUser           `protobuf:"bytes,3,rep,name=users,proto3" json:"users,omitempty"`
	Title         string                 `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesCreateChat9CB126E) Reset() {
	*x = TLMessagesCreateChat9CB126E{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[730]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesCreateChat9CB126E) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesCreateChat9CB126E) ProtoMessage() {}

func (x *TLMessagesCreateChat9CB126E) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[730]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesCreateChat9CB126E.ProtoReflect.Descriptor instead.
func (*TLMessagesCreateChat9CB126E) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{730}
}

func (x *TLMessagesCreateChat9CB126E) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesCreateChat9CB126E) GetUsers() []*InputUser {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *TLMessagesCreateChat9CB126E) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type TLAccountVerifyEmailECBA39DB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Email         string                 `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Code          string                 `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountVerifyEmailECBA39DB) Reset() {
	*x = TLAccountVerifyEmailECBA39DB{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[731]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountVerifyEmailECBA39DB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountVerifyEmailECBA39DB) ProtoMessage() {}

func (x *TLAccountVerifyEmailECBA39DB) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[731]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountVerifyEmailECBA39DB.ProtoReflect.Descriptor instead.
func (*TLAccountVerifyEmailECBA39DB) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{731}
}

func (x *TLAccountVerifyEmailECBA39DB) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountVerifyEmailECBA39DB) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *TLAccountVerifyEmailECBA39DB) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type TLMessagesRequestSimpleWebView6ABB2F73 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Bot           *InputUser             `protobuf:"bytes,3,opt,name=bot,proto3" json:"bot,omitempty"`
	Url           string                 `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	ThemeParams   *DataJSON              `protobuf:"bytes,5,opt,name=theme_params,json=themeParams,proto3" json:"theme_params,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLMessagesRequestSimpleWebView6ABB2F73) Reset() {
	*x = TLMessagesRequestSimpleWebView6ABB2F73{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[732]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLMessagesRequestSimpleWebView6ABB2F73) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessagesRequestSimpleWebView6ABB2F73) ProtoMessage() {}

func (x *TLMessagesRequestSimpleWebView6ABB2F73) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[732]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessagesRequestSimpleWebView6ABB2F73.ProtoReflect.Descriptor instead.
func (*TLMessagesRequestSimpleWebView6ABB2F73) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{732}
}

func (x *TLMessagesRequestSimpleWebView6ABB2F73) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessagesRequestSimpleWebView6ABB2F73) GetBot() *InputUser {
	if x != nil {
		return x.Bot
	}
	return nil
}

func (x *TLMessagesRequestSimpleWebView6ABB2F73) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *TLMessagesRequestSimpleWebView6ABB2F73) GetThemeParams() *DataJSON {
	if x != nil {
		return x.ThemeParams
	}
	return nil
}

type TLPaymentsRequestRecurringPayment struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Constructor         TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	UserId              *InputUser             `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RecurringInitCharge string                 `protobuf:"bytes,4,opt,name=recurring_init_charge,json=recurringInitCharge,proto3" json:"recurring_init_charge,omitempty"`
	InvoiceMedia        *InputMedia            `protobuf:"bytes,5,opt,name=invoice_media,json=invoiceMedia,proto3" json:"invoice_media,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *TLPaymentsRequestRecurringPayment) Reset() {
	*x = TLPaymentsRequestRecurringPayment{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[733]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsRequestRecurringPayment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsRequestRecurringPayment) ProtoMessage() {}

func (x *TLPaymentsRequestRecurringPayment) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[733]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsRequestRecurringPayment.ProtoReflect.Descriptor instead.
func (*TLPaymentsRequestRecurringPayment) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{733}
}

func (x *TLPaymentsRequestRecurringPayment) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsRequestRecurringPayment) GetUserId() *InputUser {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *TLPaymentsRequestRecurringPayment) GetRecurringInitCharge() string {
	if x != nil {
		return x.RecurringInitCharge
	}
	return ""
}

func (x *TLPaymentsRequestRecurringPayment) GetInvoiceMedia() *InputMedia {
	if x != nil {
		return x.InvoiceMedia
	}
	return nil
}

type TLPaymentsRestorePlayMarketReceipt struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Receipt       []byte                 `protobuf:"bytes,3,opt,name=receipt,proto3" json:"receipt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPaymentsRestorePlayMarketReceipt) Reset() {
	*x = TLPaymentsRestorePlayMarketReceipt{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[734]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPaymentsRestorePlayMarketReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPaymentsRestorePlayMarketReceipt) ProtoMessage() {}

func (x *TLPaymentsRestorePlayMarketReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[734]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPaymentsRestorePlayMarketReceipt.ProtoReflect.Descriptor instead.
func (*TLPaymentsRestorePlayMarketReceipt) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{734}
}

func (x *TLPaymentsRestorePlayMarketReceipt) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPaymentsRestorePlayMarketReceipt) GetReceipt() []byte {
	if x != nil {
		return x.Receipt
	}
	return nil
}

type TLChannelsDeleteHistoryAF369D42 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Channel       *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	MaxId         int32                  `protobuf:"varint,4,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLChannelsDeleteHistoryAF369D42) Reset() {
	*x = TLChannelsDeleteHistoryAF369D42{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[735]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLChannelsDeleteHistoryAF369D42) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChannelsDeleteHistoryAF369D42) ProtoMessage() {}

func (x *TLChannelsDeleteHistoryAF369D42) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[735]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChannelsDeleteHistoryAF369D42.ProtoReflect.Descriptor instead.
func (*TLChannelsDeleteHistoryAF369D42) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{735}
}

func (x *TLChannelsDeleteHistoryAF369D42) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChannelsDeleteHistoryAF369D42) GetChannel() *InputChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *TLChannelsDeleteHistoryAF369D42) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

type TLHelpTest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLHelpTest) Reset() {
	*x = TLHelpTest{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[736]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLHelpTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLHelpTest) ProtoMessage() {}

func (x *TLHelpTest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[736]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLHelpTest.ProtoReflect.Descriptor instead.
func (*TLHelpTest) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{736}
}

func (x *TLHelpTest) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLPredefinedCreatePredefinedUser struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Constructor   TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Phone         string                  `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	FirstName     *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName      *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Username      *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=username,proto3" json:"username,omitempty"`
	Code          string                  `protobuf:"bytes,7,opt,name=code,proto3" json:"code,omitempty"`
	Verified      bool                    `protobuf:"varint,8,opt,name=verified,proto3" json:"verified,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPredefinedCreatePredefinedUser) Reset() {
	*x = TLPredefinedCreatePredefinedUser{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[737]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPredefinedCreatePredefinedUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPredefinedCreatePredefinedUser) ProtoMessage() {}

func (x *TLPredefinedCreatePredefinedUser) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[737]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPredefinedCreatePredefinedUser.ProtoReflect.Descriptor instead.
func (*TLPredefinedCreatePredefinedUser) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{737}
}

func (x *TLPredefinedCreatePredefinedUser) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPredefinedCreatePredefinedUser) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *TLPredefinedCreatePredefinedUser) GetFirstName() *wrapperspb.StringValue {
	if x != nil {
		return x.FirstName
	}
	return nil
}

func (x *TLPredefinedCreatePredefinedUser) GetLastName() *wrapperspb.StringValue {
	if x != nil {
		return x.LastName
	}
	return nil
}

func (x *TLPredefinedCreatePredefinedUser) GetUsername() *wrapperspb.StringValue {
	if x != nil {
		return x.Username
	}
	return nil
}

func (x *TLPredefinedCreatePredefinedUser) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *TLPredefinedCreatePredefinedUser) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

type TLPredefinedUpdatePredefinedUsername struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Phone         string                 `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	Username      string                 `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPredefinedUpdatePredefinedUsername) Reset() {
	*x = TLPredefinedUpdatePredefinedUsername{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[738]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPredefinedUpdatePredefinedUsername) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPredefinedUpdatePredefinedUsername) ProtoMessage() {}

func (x *TLPredefinedUpdatePredefinedUsername) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[738]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPredefinedUpdatePredefinedUsername.ProtoReflect.Descriptor instead.
func (*TLPredefinedUpdatePredefinedUsername) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{738}
}

func (x *TLPredefinedUpdatePredefinedUsername) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPredefinedUpdatePredefinedUsername) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *TLPredefinedUpdatePredefinedUsername) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type TLPredefinedUpdatePredefinedProfile struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Constructor   TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Phone         string                  `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	FirstName     *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName      *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	About         *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=about,proto3" json:"about,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPredefinedUpdatePredefinedProfile) Reset() {
	*x = TLPredefinedUpdatePredefinedProfile{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[739]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPredefinedUpdatePredefinedProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPredefinedUpdatePredefinedProfile) ProtoMessage() {}

func (x *TLPredefinedUpdatePredefinedProfile) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[739]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPredefinedUpdatePredefinedProfile.ProtoReflect.Descriptor instead.
func (*TLPredefinedUpdatePredefinedProfile) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{739}
}

func (x *TLPredefinedUpdatePredefinedProfile) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPredefinedUpdatePredefinedProfile) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *TLPredefinedUpdatePredefinedProfile) GetFirstName() *wrapperspb.StringValue {
	if x != nil {
		return x.FirstName
	}
	return nil
}

func (x *TLPredefinedUpdatePredefinedProfile) GetLastName() *wrapperspb.StringValue {
	if x != nil {
		return x.LastName
	}
	return nil
}

func (x *TLPredefinedUpdatePredefinedProfile) GetAbout() *wrapperspb.StringValue {
	if x != nil {
		return x.About
	}
	return nil
}

type TLPredefinedUpdatePredefinedVerified struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Phone         string                 `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	Verified      bool                   `protobuf:"varint,4,opt,name=verified,proto3" json:"verified,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPredefinedUpdatePredefinedVerified) Reset() {
	*x = TLPredefinedUpdatePredefinedVerified{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[740]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPredefinedUpdatePredefinedVerified) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPredefinedUpdatePredefinedVerified) ProtoMessage() {}

func (x *TLPredefinedUpdatePredefinedVerified) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[740]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPredefinedUpdatePredefinedVerified.ProtoReflect.Descriptor instead.
func (*TLPredefinedUpdatePredefinedVerified) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{740}
}

func (x *TLPredefinedUpdatePredefinedVerified) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPredefinedUpdatePredefinedVerified) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *TLPredefinedUpdatePredefinedVerified) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

type TLPredefinedUpdatePredefinedCode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Phone         string                 `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	Code          string                 `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPredefinedUpdatePredefinedCode) Reset() {
	*x = TLPredefinedUpdatePredefinedCode{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[741]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPredefinedUpdatePredefinedCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPredefinedUpdatePredefinedCode) ProtoMessage() {}

func (x *TLPredefinedUpdatePredefinedCode) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[741]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPredefinedUpdatePredefinedCode.ProtoReflect.Descriptor instead.
func (*TLPredefinedUpdatePredefinedCode) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{741}
}

func (x *TLPredefinedUpdatePredefinedCode) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPredefinedUpdatePredefinedCode) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *TLPredefinedUpdatePredefinedCode) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type TLPredefinedGetPredefinedUser struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Phone         string                 `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPredefinedGetPredefinedUser) Reset() {
	*x = TLPredefinedGetPredefinedUser{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[742]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPredefinedGetPredefinedUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPredefinedGetPredefinedUser) ProtoMessage() {}

func (x *TLPredefinedGetPredefinedUser) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[742]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPredefinedGetPredefinedUser.ProtoReflect.Descriptor instead.
func (*TLPredefinedGetPredefinedUser) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{742}
}

func (x *TLPredefinedGetPredefinedUser) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLPredefinedGetPredefinedUser) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

type TLPredefinedGetPredefinedUsers struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLPredefinedGetPredefinedUsers) Reset() {
	*x = TLPredefinedGetPredefinedUsers{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[743]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLPredefinedGetPredefinedUsers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPredefinedGetPredefinedUsers) ProtoMessage() {}

func (x *TLPredefinedGetPredefinedUsers) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[743]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPredefinedGetPredefinedUsers.ProtoReflect.Descriptor instead.
func (*TLPredefinedGetPredefinedUsers) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{743}
}

func (x *TLPredefinedGetPredefinedUsers) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLUsersGetMe struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Id            int64                  `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	Token         string                 `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLUsersGetMe) Reset() {
	*x = TLUsersGetMe{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[744]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLUsersGetMe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUsersGetMe) ProtoMessage() {}

func (x *TLUsersGetMe) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[744]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUsersGetMe.ProtoReflect.Descriptor instead.
func (*TLUsersGetMe) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{744}
}

func (x *TLUsersGetMe) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUsersGetMe) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TLUsersGetMe) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type TLAccountUpdateVerified struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Id            int64                  `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	Verified      bool                   `protobuf:"varint,4,opt,name=verified,proto3" json:"verified,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAccountUpdateVerified) Reset() {
	*x = TLAccountUpdateVerified{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[745]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAccountUpdateVerified) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAccountUpdateVerified) ProtoMessage() {}

func (x *TLAccountUpdateVerified) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[745]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAccountUpdateVerified.ProtoReflect.Descriptor instead.
func (*TLAccountUpdateVerified) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{745}
}

func (x *TLAccountUpdateVerified) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAccountUpdateVerified) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TLAccountUpdateVerified) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

type TLAuthToggleBan struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Constructor   TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Phone         string                  `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	Predefined    bool                    `protobuf:"varint,4,opt,name=predefined,proto3" json:"predefined,omitempty"`
	Expires       *wrapperspb.Int32Value  `protobuf:"bytes,5,opt,name=expires,proto3" json:"expires,omitempty"`
	Reason        *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLAuthToggleBan) Reset() {
	*x = TLAuthToggleBan{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[746]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLAuthToggleBan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAuthToggleBan) ProtoMessage() {}

func (x *TLAuthToggleBan) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[746]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAuthToggleBan.ProtoReflect.Descriptor instead.
func (*TLAuthToggleBan) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{746}
}

func (x *TLAuthToggleBan) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAuthToggleBan) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *TLAuthToggleBan) GetPredefined() bool {
	if x != nil {
		return x.Predefined
	}
	return false
}

func (x *TLAuthToggleBan) GetExpires() *wrapperspb.Int32Value {
	if x != nil {
		return x.Expires
	}
	return nil
}

func (x *TLAuthToggleBan) GetReason() *wrapperspb.StringValue {
	if x != nil {
		return x.Reason
	}
	return nil
}

type TLBizInvokeBizDataRaw struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constructor   TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	BizData       *BizDataRaw            `protobuf:"bytes,3,opt,name=biz_data,json=bizData,proto3" json:"biz_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLBizInvokeBizDataRaw) Reset() {
	*x = TLBizInvokeBizDataRaw{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[747]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLBizInvokeBizDataRaw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLBizInvokeBizDataRaw) ProtoMessage() {}

func (x *TLBizInvokeBizDataRaw) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[747]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLBizInvokeBizDataRaw.ProtoReflect.Descriptor instead.
func (*TLBizInvokeBizDataRaw) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{747}
}

func (x *TLBizInvokeBizDataRaw) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLBizInvokeBizDataRaw) GetBizData() *BizDataRaw {
	if x != nil {
		return x.BizData
	}
	return nil
}

// --------------------------------------------------------------------------------------------
// Vector api result type
type Vector_SecureValue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Datas         []*SecureValue         `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vector_SecureValue) Reset() {
	*x = Vector_SecureValue{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[748]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vector_SecureValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_SecureValue) ProtoMessage() {}

func (x *Vector_SecureValue) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[748]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_SecureValue.ProtoReflect.Descriptor instead.
func (*Vector_SecureValue) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{748}
}

func (x *Vector_SecureValue) GetDatas() []*SecureValue {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_WallPaper struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Datas         []*WallPaper           `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vector_WallPaper) Reset() {
	*x = Vector_WallPaper{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[749]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vector_WallPaper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_WallPaper) ProtoMessage() {}

func (x *Vector_WallPaper) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[749]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_WallPaper.ProtoReflect.Descriptor instead.
func (*Vector_WallPaper) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{749}
}

func (x *Vector_WallPaper) GetDatas() []*WallPaper {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_User struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Datas         []*User                `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vector_User) Reset() {
	*x = Vector_User{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[750]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vector_User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_User) ProtoMessage() {}

func (x *Vector_User) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[750]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_User.ProtoReflect.Descriptor instead.
func (*Vector_User) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{750}
}

func (x *Vector_User) GetDatas() []*User {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_RequirementToContact struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Datas         []*RequirementToContact `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vector_RequirementToContact) Reset() {
	*x = Vector_RequirementToContact{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[751]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vector_RequirementToContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_RequirementToContact) ProtoMessage() {}

func (x *Vector_RequirementToContact) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[751]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_RequirementToContact.ProtoReflect.Descriptor instead.
func (*Vector_RequirementToContact) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{751}
}

func (x *Vector_RequirementToContact) GetDatas() []*RequirementToContact {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_Int struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Datas         []int32                `protobuf:"varint,1,rep,packed,name=datas,proto3" json:"datas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vector_Int) Reset() {
	*x = Vector_Int{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[752]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vector_Int) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_Int) ProtoMessage() {}

func (x *Vector_Int) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[752]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_Int.ProtoReflect.Descriptor instead.
func (*Vector_Int) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{752}
}

func (x *Vector_Int) GetDatas() []int32 {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_ContactStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Datas         []*ContactStatus       `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vector_ContactStatus) Reset() {
	*x = Vector_ContactStatus{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[753]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vector_ContactStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_ContactStatus) ProtoMessage() {}

func (x *Vector_ContactStatus) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[753]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_ContactStatus.ProtoReflect.Descriptor instead.
func (*Vector_ContactStatus) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{753}
}

func (x *Vector_ContactStatus) GetDatas() []*ContactStatus {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_SavedContact struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Datas         []*SavedContact        `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vector_SavedContact) Reset() {
	*x = Vector_SavedContact{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[754]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vector_SavedContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_SavedContact) ProtoMessage() {}

func (x *Vector_SavedContact) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[754]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_SavedContact.ProtoReflect.Descriptor instead.
func (*Vector_SavedContact) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{754}
}

func (x *Vector_SavedContact) GetDatas() []*SavedContact {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_ReceivedNotifyMessage struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Datas         []*ReceivedNotifyMessage `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vector_ReceivedNotifyMessage) Reset() {
	*x = Vector_ReceivedNotifyMessage{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[755]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vector_ReceivedNotifyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_ReceivedNotifyMessage) ProtoMessage() {}

func (x *Vector_ReceivedNotifyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[755]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_ReceivedNotifyMessage.ProtoReflect.Descriptor instead.
func (*Vector_ReceivedNotifyMessage) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{755}
}

func (x *Vector_ReceivedNotifyMessage) GetDatas() []*ReceivedNotifyMessage {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_Long struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Datas         []int64                `protobuf:"varint,1,rep,packed,name=datas,proto3" json:"datas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vector_Long) Reset() {
	*x = Vector_Long{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[756]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vector_Long) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_Long) ProtoMessage() {}

func (x *Vector_Long) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[756]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_Long.ProtoReflect.Descriptor instead.
func (*Vector_Long) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{756}
}

func (x *Vector_Long) GetDatas() []int64 {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_StickerSetCovered struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Datas         []*StickerSetCovered   `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vector_StickerSetCovered) Reset() {
	*x = Vector_StickerSetCovered{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[757]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vector_StickerSetCovered) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_StickerSetCovered) ProtoMessage() {}

func (x *Vector_StickerSetCovered) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[757]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_StickerSetCovered.ProtoReflect.Descriptor instead.
func (*Vector_StickerSetCovered) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{757}
}

func (x *Vector_StickerSetCovered) GetDatas() []*StickerSetCovered {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_MessageRange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Datas         []*MessageRange        `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vector_MessageRange) Reset() {
	*x = Vector_MessageRange{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[758]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vector_MessageRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_MessageRange) ProtoMessage() {}

func (x *Vector_MessageRange) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[758]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_MessageRange.ProtoReflect.Descriptor instead.
func (*Vector_MessageRange) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{758}
}

func (x *Vector_MessageRange) GetDatas() []*MessageRange {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_DialogPeer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Datas         []*DialogPeer          `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vector_DialogPeer) Reset() {
	*x = Vector_DialogPeer{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[759]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vector_DialogPeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_DialogPeer) ProtoMessage() {}

func (x *Vector_DialogPeer) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[759]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_DialogPeer.ProtoReflect.Descriptor instead.
func (*Vector_DialogPeer) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{759}
}

func (x *Vector_DialogPeer) GetDatas() []*DialogPeer {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_EmojiLanguage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Datas         []*EmojiLanguage       `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vector_EmojiLanguage) Reset() {
	*x = Vector_EmojiLanguage{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[760]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vector_EmojiLanguage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_EmojiLanguage) ProtoMessage() {}

func (x *Vector_EmojiLanguage) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[760]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_EmojiLanguage.ProtoReflect.Descriptor instead.
func (*Vector_EmojiLanguage) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{760}
}

func (x *Vector_EmojiLanguage) GetDatas() []*EmojiLanguage {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_Messages_SearchCounter struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Datas         []*Messages_SearchCounter `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vector_Messages_SearchCounter) Reset() {
	*x = Vector_Messages_SearchCounter{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[761]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vector_Messages_SearchCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_Messages_SearchCounter) ProtoMessage() {}

func (x *Vector_Messages_SearchCounter) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[761]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_Messages_SearchCounter.ProtoReflect.Descriptor instead.
func (*Vector_Messages_SearchCounter) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{761}
}

func (x *Vector_Messages_SearchCounter) GetDatas() []*Messages_SearchCounter {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_DialogFilterSuggested struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Datas         []*DialogFilterSuggested `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vector_DialogFilterSuggested) Reset() {
	*x = Vector_DialogFilterSuggested{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[762]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vector_DialogFilterSuggested) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_DialogFilterSuggested) ProtoMessage() {}

func (x *Vector_DialogFilterSuggested) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[762]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_DialogFilterSuggested.ProtoReflect.Descriptor instead.
func (*Vector_DialogFilterSuggested) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{762}
}

func (x *Vector_DialogFilterSuggested) GetDatas() []*DialogFilterSuggested {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_ReadParticipantDate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Datas         []*ReadParticipantDate `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vector_ReadParticipantDate) Reset() {
	*x = Vector_ReadParticipantDate{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[763]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vector_ReadParticipantDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_ReadParticipantDate) ProtoMessage() {}

func (x *Vector_ReadParticipantDate) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[763]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_ReadParticipantDate.ProtoReflect.Descriptor instead.
func (*Vector_ReadParticipantDate) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{763}
}

func (x *Vector_ReadParticipantDate) GetDatas() []*ReadParticipantDate {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_Document struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Datas         []*Document            `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vector_Document) Reset() {
	*x = Vector_Document{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[764]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vector_Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_Document) ProtoMessage() {}

func (x *Vector_Document) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[764]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_Document.ProtoReflect.Descriptor instead.
func (*Vector_Document) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{764}
}

func (x *Vector_Document) GetDatas() []*Document {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_FactCheck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Datas         []*FactCheck           `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vector_FactCheck) Reset() {
	*x = Vector_FactCheck{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[765]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vector_FactCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_FactCheck) ProtoMessage() {}

func (x *Vector_FactCheck) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[765]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_FactCheck.ProtoReflect.Descriptor instead.
func (*Vector_FactCheck) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{765}
}

func (x *Vector_FactCheck) GetDatas() []*FactCheck {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_FileHash struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Datas         []*FileHash            `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vector_FileHash) Reset() {
	*x = Vector_FileHash{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[766]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vector_FileHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_FileHash) ProtoMessage() {}

func (x *Vector_FileHash) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[766]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_FileHash.ProtoReflect.Descriptor instead.
func (*Vector_FileHash) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{766}
}

func (x *Vector_FileHash) GetDatas() []*FileHash {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_BotCommand struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Datas         []*BotCommand          `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vector_BotCommand) Reset() {
	*x = Vector_BotCommand{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[767]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vector_BotCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_BotCommand) ProtoMessage() {}

func (x *Vector_BotCommand) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[767]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_BotCommand.ProtoReflect.Descriptor instead.
func (*Vector_BotCommand) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{767}
}

func (x *Vector_BotCommand) GetDatas() []*BotCommand {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_BotPreviewMedia struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Datas         []*BotPreviewMedia     `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vector_BotPreviewMedia) Reset() {
	*x = Vector_BotPreviewMedia{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[768]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vector_BotPreviewMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_BotPreviewMedia) ProtoMessage() {}

func (x *Vector_BotPreviewMedia) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[768]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_BotPreviewMedia.ProtoReflect.Descriptor instead.
func (*Vector_BotPreviewMedia) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{768}
}

func (x *Vector_BotPreviewMedia) GetDatas() []*BotPreviewMedia {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_PremiumGiftCodeOption struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Datas         []*PremiumGiftCodeOption `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vector_PremiumGiftCodeOption) Reset() {
	*x = Vector_PremiumGiftCodeOption{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[769]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vector_PremiumGiftCodeOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_PremiumGiftCodeOption) ProtoMessage() {}

func (x *Vector_PremiumGiftCodeOption) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[769]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_PremiumGiftCodeOption.ProtoReflect.Descriptor instead.
func (*Vector_PremiumGiftCodeOption) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{769}
}

func (x *Vector_PremiumGiftCodeOption) GetDatas() []*PremiumGiftCodeOption {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_StarsTopupOption struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Datas         []*StarsTopupOption    `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vector_StarsTopupOption) Reset() {
	*x = Vector_StarsTopupOption{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[770]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vector_StarsTopupOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_StarsTopupOption) ProtoMessage() {}

func (x *Vector_StarsTopupOption) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[770]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_StarsTopupOption.ProtoReflect.Descriptor instead.
func (*Vector_StarsTopupOption) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{770}
}

func (x *Vector_StarsTopupOption) GetDatas() []*StarsTopupOption {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_StarsGiftOption struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Datas         []*StarsGiftOption     `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vector_StarsGiftOption) Reset() {
	*x = Vector_StarsGiftOption{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[771]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vector_StarsGiftOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_StarsGiftOption) ProtoMessage() {}

func (x *Vector_StarsGiftOption) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[771]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_StarsGiftOption.ProtoReflect.Descriptor instead.
func (*Vector_StarsGiftOption) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{771}
}

func (x *Vector_StarsGiftOption) GetDatas() []*StarsGiftOption {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_StarsGiveawayOption struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Datas         []*StarsGiveawayOption `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vector_StarsGiveawayOption) Reset() {
	*x = Vector_StarsGiveawayOption{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[772]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vector_StarsGiveawayOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_StarsGiveawayOption) ProtoMessage() {}

func (x *Vector_StarsGiveawayOption) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[772]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_StarsGiveawayOption.ProtoReflect.Descriptor instead.
func (*Vector_StarsGiveawayOption) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{772}
}

func (x *Vector_StarsGiveawayOption) GetDatas() []*StarsGiveawayOption {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_LangPackString struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Datas         []*LangPackString      `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vector_LangPackString) Reset() {
	*x = Vector_LangPackString{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[773]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vector_LangPackString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_LangPackString) ProtoMessage() {}

func (x *Vector_LangPackString) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[773]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_LangPackString.ProtoReflect.Descriptor instead.
func (*Vector_LangPackString) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{773}
}

func (x *Vector_LangPackString) GetDatas() []*LangPackString {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_LangPackLanguage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Datas         []*LangPackLanguage    `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vector_LangPackLanguage) Reset() {
	*x = Vector_LangPackLanguage{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[774]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vector_LangPackLanguage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_LangPackLanguage) ProtoMessage() {}

func (x *Vector_LangPackLanguage) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[774]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_LangPackLanguage.ProtoReflect.Descriptor instead.
func (*Vector_LangPackLanguage) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{774}
}

func (x *Vector_LangPackLanguage) GetDatas() []*LangPackLanguage {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_Peer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Datas         []*Peer                `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vector_Peer) Reset() {
	*x = Vector_Peer{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[775]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vector_Peer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_Peer) ProtoMessage() {}

func (x *Vector_Peer) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[775]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_Peer.ProtoReflect.Descriptor instead.
func (*Vector_Peer) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{775}
}

func (x *Vector_Peer) GetDatas() []*Peer {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_Bool struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Datas         []*Bool                `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vector_Bool) Reset() {
	*x = Vector_Bool{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[776]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vector_Bool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_Bool) ProtoMessage() {}

func (x *Vector_Bool) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[776]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_Bool.ProtoReflect.Descriptor instead.
func (*Vector_Bool) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{776}
}

func (x *Vector_Bool) GetDatas() []*Bool {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_DialogFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Datas         []*DialogFilter        `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vector_DialogFilter) Reset() {
	*x = Vector_DialogFilter{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[777]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vector_DialogFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_DialogFilter) ProtoMessage() {}

func (x *Vector_DialogFilter) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[777]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_DialogFilter.ProtoReflect.Descriptor instead.
func (*Vector_DialogFilter) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{777}
}

func (x *Vector_DialogFilter) GetDatas() []*DialogFilter {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_String struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Datas         []string               `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vector_String) Reset() {
	*x = Vector_String{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[778]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vector_String) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_String) ProtoMessage() {}

func (x *Vector_String) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[778]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_String.ProtoReflect.Descriptor instead.
func (*Vector_String) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{778}
}

func (x *Vector_String) GetDatas() []string {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_PredefinedUser struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Datas         []*PredefinedUser      `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vector_PredefinedUser) Reset() {
	*x = Vector_PredefinedUser{}
	mi := &file_schema_tl_sync_service_proto_msgTypes[779]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vector_PredefinedUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_PredefinedUser) ProtoMessage() {}

func (x *Vector_PredefinedUser) ProtoReflect() protoreflect.Message {
	mi := &file_schema_tl_sync_service_proto_msgTypes[779]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_PredefinedUser.ProtoReflect.Descriptor instead.
func (*Vector_PredefinedUser) Descriptor() ([]byte, []int) {
	return file_schema_tl_sync_service_proto_rawDescGZIP(), []int{779}
}

func (x *Vector_PredefinedUser) GetDatas() []*PredefinedUser {
	if x != nil {
		return x.Datas
	}
	return nil
}

var File_schema_tl_sync_service_proto protoreflect.FileDescriptor

var file_schema_tl_sync_service_proto_rawDesc = string([]byte{
	0x0a, 0x1c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x74, 0x6c, 0x2e, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x74, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x74, 0x6c, 0x2e, 0x63,
	0x72, 0x63, 0x33, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x74, 0x6c, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x7a, 0x0a, 0x11, 0x54, 0x4c, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x7d, 0x0a, 0x12,
	0x54, 0x4c, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x4d, 0x73,
	0x67, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07,
	0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x6d,
	0x73, 0x67, 0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0xa6, 0x03, 0x0a, 0x11,
	0x54, 0x4c, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x61,
	0x70, 0x69, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x70, 0x69,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x70, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a,
	0x10, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c,
	0x61, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x50, 0x61, 0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x2f, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x05, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4a, 0x53, 0x4f,
	0x4e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x22, 0x7a, 0x0a, 0x12, 0x54, 0x4c, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x6b,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x22, 0x69, 0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x6f, 0x75, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x99, 0x01, 0x0a, 0x1a,
	0x54, 0x4c, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x85, 0x01, 0x0a, 0x14, 0x54, 0x4c, 0x5f, 0x69,
	0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x57, 0x69, 0x74, 0x68, 0x54, 0x61, 0x6b, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61,
	0x6b, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x61, 0x6b, 0x65, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22,
	0x96, 0x01, 0x0a, 0x1f, 0x54, 0x4c, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x9e, 0x01, 0x0a, 0x20, 0x54, 0x4c, 0x5f,
	0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x57, 0x69, 0x74, 0x68, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x97, 0x01, 0x0a, 0x17, 0x54, 0x4c,
	0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x57, 0x69, 0x74, 0x68, 0x41, 0x70, 0x6e, 0x73, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x22, 0x7e, 0x0a, 0x16, 0x54, 0x4c, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65,
	0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x22, 0xd4, 0x01, 0x0a, 0x10, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x73, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x70, 0x69, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x70, 0x69, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x70, 0x69, 0x48, 0x61, 0x73, 0x68, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x89, 0x02, 0x0a, 0x0e, 0x54,
	0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x6e, 0x6f, 0x5f, 0x6a, 0x6f,
	0x69, 0x6e, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x6e, 0x6f, 0x4a, 0x6f, 0x69, 0x6e,
	0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xde, 0x02, 0x0a, 0x0e, 0x54, 0x4c, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x50,
	0x0a, 0x15, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x46, 0x4c, 0x41,
	0x47, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47,
	0x12, 0x49, 0x0a, 0x12, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x22, 0x4a, 0x0a, 0x0e, 0x54, 0x4c, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x6c, 0x6f, 0x67, 0x4f, 0x75, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x22, 0x57, 0x0a, 0x1b, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x6c, 0x0a, 0x1b,
	0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x13, 0x0a, 0x05, 0x64, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x63, 0x49, 0x64, 0x22, 0x7d, 0x0a, 0x1b, 0x54, 0x4c,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x22, 0xde, 0x01, 0x0a, 0x17, 0x54, 0x4c,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x41, 0x75,
	0x74, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x27, 0x0a, 0x10, 0x70, 0x65, 0x72, 0x6d, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x6d, 0x41,
	0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x2b, 0x0a,
	0x11, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x1e, 0x54,
	0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x74,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x15, 0x0a,
	0x06, 0x61, 0x70, 0x69, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61,
	0x70, 0x69, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x69, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x69, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x24, 0x0a, 0x0e, 0x62, 0x6f, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x6f, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x8d, 0x01, 0x0a, 0x15, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x52, 0x50, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x5b, 0x0a, 0x1f, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x22, 0xb2, 0x01, 0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x38,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x0c,
	0x6e, 0x65, 0x77, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xcf, 0x01, 0x0a, 0x12, 0x54, 0x4c, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x38,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x99, 0x01, 0x0a, 0x12, 0x54, 0x4c,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a,
	0x0f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x22, 0x7e, 0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x64, 0x72, 0x6f, 0x70, 0x54, 0x65, 0x6d, 0x70, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79,
	0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x65,
	0x78, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x4b, 0x65, 0x79, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x15, 0x0a, 0x06,
	0x61, 0x70, 0x69, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x70,
	0x69, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x69, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x69, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x49, 0x64, 0x73, 0x22, 0x6a, 0x0a,
	0x18, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x6a, 0x0a, 0x18, 0x54, 0x4c, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x6d, 0x0a, 0x1d, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x23, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x65, 0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x70, 0x69, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x70, 0x69, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x70, 0x69, 0x48, 0x61, 0x73, 0x68, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x65, 0x62, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x77, 0x65, 0x62, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xff,
	0x02, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x46, 0x69, 0x72, 0x65, 0x62, 0x61, 0x73, 0x65, 0x53, 0x6d, 0x73, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x46, 0x0a, 0x10, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x5f, 0x6e, 0x65, 0x74,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x73, 0x61, 0x66, 0x65,
	0x74, 0x79, 0x4e, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x4e, 0x0a, 0x14, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x44, 0x0a, 0x0f, 0x69, 0x6f,
	0x73, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0d, 0x69, 0x6f, 0x73, 0x50, 0x75, 0x73, 0x68, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x22, 0x9e, 0x01, 0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x22, 0xb2, 0x01, 0x0a, 0x19, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x6e, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x6e, 0x63, 0x22, 0x8c, 0x02, 0x0a, 0x19, 0x54, 0x4c, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x19,
	0x0a, 0x08, 0x6e, 0x6f, 0x5f, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x6e, 0x6f, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2e,
	0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x75, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x55, 0x69, 0x64, 0x73, 0x22, 0xab, 0x01, 0x0a, 0x1b, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x75, 0x69,
	0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x55,
	0x69, 0x64, 0x73, 0x22, 0xc7, 0x01, 0x0a, 0x1f, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x2c, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12,
	0x3c, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x86, 0x01,
	0x0a, 0x1c, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x38,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x22, 0x5a, 0x0a, 0x1e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x22, 0x80, 0x02, 0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x0a, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x32, 0x0a, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x61, 0x62, 0x6f, 0x75, 0x74, 0x22, 0x7c, 0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x07, 0x6f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x22, 0x68, 0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x67, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x70, 0x65, 0x72, 0x73, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0xc2, 0x01,
	0x0a, 0x15, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x50, 0x65, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50,
	0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x70, 0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x71, 0x0a, 0x19, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x7d, 0x0a, 0x15, 0x54, 0x4c, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4b, 0x65,
	0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0xae, 0x01, 0x0a, 0x15, 0x54, 0x4c, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4b, 0x65,
	0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x52, 0x50, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x22, 0x54, 0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x67, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x54, 0x4c, 0x12, 0x38,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x7f, 0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x54, 0x4c, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x29,
	0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x79,
	0x73, 0x54, 0x54, 0x4c, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x22, 0xb0, 0x01, 0x0a, 0x1e, 0x54, 0x4c,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xbc, 0x01, 0x0a,
	0x16, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x71, 0x0a, 0x1d, 0x54,
	0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x58,
	0x0a, 0x1c, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x6d, 0x0a, 0x1d, 0x54, 0x4c, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x52, 0x0a, 0x16, 0x54, 0x4c, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x96, 0x01, 0x0a, 0x1e,
	0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x38,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x52, 0x50, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x22, 0xe4, 0x01, 0x0a, 0x21, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x53, 0x52, 0x50, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x49, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0b,
	0x6e, 0x65, 0x77, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x1f,
	0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x31, 0x0a,
	0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x22, 0x9a, 0x01, 0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xa9, 0x01,
	0x0a, 0x19, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74,
	0x54, 0x6d, 0x70, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x53, 0x52, 0x50, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x5b, 0x0a, 0x1f, 0x54, 0x4c, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x57, 0x65, 0x62, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x70, 0x0a, 0x20, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x57, 0x65, 0x62, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x5d, 0x0a, 0x21, 0x54, 0x4c, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x57, 0x65, 0x62, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x59, 0x0a, 0x1d, 0x54, 0x4c, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x22, 0x85, 0x01, 0x0a, 0x19, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x05, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x1a, 0x54,
	0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x64, 0x22, 0x88,
	0x01, 0x0a, 0x1c, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x05, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x1f, 0x54, 0x4c,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x22, 0xaa, 0x02, 0x0a, 0x1e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x15, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x0c,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x61, 0x73, 0x68, 0x52, 0x0b, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x22, 0xb0, 0x01, 0x0a, 0x1e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x73, 0x65, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x31, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x16, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x38,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x1e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x35, 0x0a, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x52, 0x07, 0x70,
	0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0xd0, 0x01, 0x0a,
	0x1d, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x33, 0x32, 0x44, 0x41, 0x34, 0x43, 0x46, 0x12, 0x38,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x07, 0x70, 0x75, 0x72, 0x70,
	0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50,
	0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x52, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12,
	0x3e, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xd7, 0x03, 0x0a, 0x1d, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x69, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x73, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x67,
	0x61, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x67, 0x61, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x12, 0x52, 0x0a, 0x17, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x14, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x46, 0x4c, 0x41, 0x47,
	0x49, 0x4e, 0x54, 0x36, 0x34, 0x12, 0x52, 0x0a, 0x17, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x49, 0x4e, 0x54, 0x33, 0x32,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x14, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65,
	0x46, 0x4c, 0x41, 0x47, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x22, 0x75, 0x0a, 0x1f, 0x54, 0x4c, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x61,
	0x6b, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x22, 0x6f, 0x0a, 0x1f, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x5a, 0x0a, 0x1e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x5a, 0x0a,
	0x1e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x63, 0x0a, 0x27, 0x54, 0x4c, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x8a,
	0x01, 0x0a, 0x27, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x52, 0x06, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x22, 0xd6, 0x01, 0x0a, 0x1e,
	0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x53,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04,
	0x70, 0x65, 0x65, 0x72, 0x22, 0x8a, 0x01, 0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x70, 0x65, 0x72,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x09, 0x77, 0x61,
	0x6c, 0x6c, 0x70, 0x61, 0x70, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x57, 0x61, 0x6c,
	0x6c, 0x50, 0x61, 0x70, 0x65, 0x72, 0x52, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x70, 0x65,
	0x72, 0x22, 0xee, 0x01, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x70, 0x65, 0x72,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x6f,
	0x72, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x66, 0x6f,
	0x72, 0x43, 0x68, 0x61, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x70, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x22, 0xea, 0x01, 0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x70, 0x65, 0x72, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x09, 0x77, 0x61, 0x6c,
	0x6c, 0x70, 0x61, 0x70, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x57, 0x61, 0x6c, 0x6c,
	0x50, 0x61, 0x70, 0x65, 0x72, 0x52, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x70, 0x65, 0x72,
	0x12, 0x25, 0x0a, 0x06, 0x75, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52,
	0x06, 0x75, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x70, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22,
	0xc6, 0x01, 0x0a, 0x1b, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x57, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x70, 0x65, 0x72, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x09, 0x77, 0x61, 0x6c,
	0x6c, 0x70, 0x61, 0x70, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x57, 0x61, 0x6c, 0x6c,
	0x50, 0x61, 0x70, 0x65, 0x72, 0x52, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x70, 0x65, 0x72,
	0x12, 0x36, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x61, 0x6c,
	0x6c, 0x50, 0x61, 0x70, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x56, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c,
	0x50, 0x61, 0x70, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x22, 0x5e, 0x0a, 0x22, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67,
	0x65, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x22, 0xc0, 0x01, 0x0a, 0x23, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x73, 0x61, 0x76, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x6c, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x39, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x22, 0xde, 0x01, 0x0a, 0x16, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x38,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x28, 0x0a, 0x05, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x05, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x22, 0xe9, 0x01, 0x0a, 0x16, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x22, 0xe8, 0x02, 0x0a, 0x16, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x29, 0x0a,
	0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x68, 0x65, 0x6d,
	0x65, 0x52, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x32,
	0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x14,
	0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x54,
	0x68, 0x65, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x29,
	0x0a, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x68, 0x65,
	0x6d, 0x65, 0x52, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x75, 0x6e, 0x73,
	0x61, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x06, 0x75, 0x6e, 0x73, 0x61, 0x76, 0x65,
	0x22, 0xfb, 0x01, 0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x72, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x61, 0x72, 0x6b, 0x12, 0x29, 0x0a, 0x05, 0x74, 0x68,
	0x65, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x05,
	0x74, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x31, 0x0a, 0x0a, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x54, 0x68,
	0x65, 0x6d, 0x65, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x22, 0xb3,
	0x01, 0x0a, 0x13, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65,
	0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x74, 0x68, 0x65, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x05, 0x74, 0x68,
	0x65, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x7c, 0x0a, 0x14, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x22, 0x86, 0x01, 0x0a, 0x1d, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2b,
	0x0a, 0x11, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x65, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x59, 0x0a, 0x1d, 0x54,
	0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x92, 0x01, 0x0a, 0x1d, 0x54, 0x4c, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x57, 0x61,
	0x6c, 0x6c, 0x50, 0x61, 0x70, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x37, 0x0a, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x70, 0x65, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x70, 0x65, 0x72, 0x52,
	0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x70, 0x65, 0x72, 0x73, 0x22, 0x5f, 0x0a, 0x23, 0x54,
	0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x9b, 0x01, 0x0a,
	0x23, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3a,
	0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xfa, 0x01, 0x0a, 0x1d, 0x54,
	0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x2e,
	0x0a, 0x08, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x07, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x49, 0x64, 0x12, 0x2d,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x54, 0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x5b, 0x0a,
	0x1f, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x63, 0x6c,
	0x69, 0x6e, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x68, 0x0a, 0x18, 0x54, 0x4c,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74,
	0x54, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x22, 0x90, 0x01, 0x0a, 0x1e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x54, 0x4c, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x74, 0x6c, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x14, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x74, 0x6c, 0x44, 0x61, 0x79, 0x73, 0x22, 0xa8, 0x02, 0x0a, 0x26, 0x54, 0x4c, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x4d,
	0x0a, 0x1b, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x52, 0x19, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x43, 0x0a,
	0x16, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x14, 0x63, 0x61,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x22, 0x6c, 0x0a, 0x1c, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x67, 0x65, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x52, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e,
	0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x22, 0xa2, 0x01, 0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x73, 0x61, 0x76, 0x65, 0x52, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x65, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25,
	0x0a, 0x06, 0x75, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x06, 0x75,
	0x6e, 0x73, 0x61, 0x76, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x19, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x69, 0x6e, 0x67, 0x74,
	0x6f, 0x6e, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a,
	0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x91, 0x01, 0x0a, 0x1c, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x0c, 0x65, 0x6d,
	0x6f, 0x6a, 0x69, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x6f, 0x6a, 0x69,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x72, 0x0a, 0x22, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x45, 0x6d, 0x6f, 0x6a,
	0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x71, 0x0a, 0x21, 0x54, 0x4c, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x45,
	0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x5f, 0x0a, 0x23, 0x54, 0x4c,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65,
	0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x6d, 0x0a, 0x1b, 0x54,
	0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x98, 0x01, 0x0a, 0x19, 0x54,
	0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x77, 0x0a, 0x27, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x73,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x75,
	0x0a, 0x25, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x68, 0x6f, 0x74,
	0x6f, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x5a, 0x0a, 0x1e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x61, 0x76, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x22, 0x86, 0x02, 0x0a, 0x1f, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x73, 0x61, 0x76, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x61, 0x76, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x63, 0x68, 0x61, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x62,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x70,
	0x65, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70,
	0x65, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x75, 0x74, 0x6f, 0x53, 0x61, 0x76, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x5f, 0x0a, 0x23, 0x54, 0x4c,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x75, 0x74, 0x6f, 0x53, 0x61, 0x76, 0x65, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x72, 0x0a, 0x20, 0x54,
	0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22,
	0xa7, 0x02, 0x0a, 0x16, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x46,
	0x4c, 0x41, 0x47, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x46, 0x4c, 0x41, 0x47, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x12, 0x4b, 0x0a, 0x13, 0x62,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x5f, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x22, 0x75, 0x0a, 0x25, 0x54, 0x4c, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x6d, 0x6f, 0x6a,
	0x69, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x22, 0x79, 0x0a, 0x29, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x7b, 0x0a, 0x2b, 0x54,
	0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0xaa, 0x01, 0x0a, 0x22, 0x54, 0x4c, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x4a, 0x0a, 0x13, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x48, 0x6f, 0x75,
	0x72, 0x73, 0x52, 0x11, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x6b,
	0x48, 0x6f, 0x75, 0x72, 0x73, 0x22, 0xca, 0x01, 0x0a, 0x21, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x09, 0x67, 0x65, 0x6f, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x47, 0x65, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x08, 0x67, 0x65, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x28, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x47, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x47, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x24, 0x54,
	0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x77, 0x61, 0x79, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3b, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x77, 0x61, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xd5, 0x03, 0x0a, 0x1d, 0x54,
	0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x6f, 0x74, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x12, 0x32, 0x0a, 0x06, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x42, 0x6f, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x06, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x03, 0x62, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x03, 0x62, 0x6f, 0x74, 0x12, 0x78, 0x0a, 0x25, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x42, 0x55,
	0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x42, 0x4f, 0x54, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45,
	0x4e, 0x54, 0x53, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x42, 0x6f, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x24,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x42,
	0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x42, 0x4f, 0x54, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49,
	0x45, 0x4e, 0x54, 0x53, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x6f, 0x0a, 0x22, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x49, 0x4e, 0x50, 0x55, 0x54, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x52, 0x45, 0x43,
	0x49, 0x50, 0x49, 0x45, 0x4e, 0x54, 0x53, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x21, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x4e, 0x50, 0x55, 0x54,
	0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4e,
	0x54, 0x53, 0x22, 0x57, 0x0a, 0x1b, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x6f, 0x74,
	0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x84, 0x01, 0x0a, 0x23,
	0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x42, 0x6f,
	0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x1e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x49, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x31, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x52, 0x05, 0x69, 0x6e, 0x74,
	0x72, 0x6f, 0x22, 0xae, 0x01, 0x0a, 0x23, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x42, 0x6f, 0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x06,
	0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x06, 0x70, 0x61, 0x75,
	0x73, 0x65, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x22, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x6f, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x22, 0x84, 0x01, 0x0a,
	0x19, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68,
	0x64, 0x61, 0x79, 0x22, 0x91, 0x01, 0x0a, 0x21, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x69, 0x6e,
	0x6b, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0xa3, 0x01, 0x0a, 0x1f, 0x54, 0x4c, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x6e,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43,
	0x68, 0x61, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x71, 0x0a,
	0x21, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x69,
	0x6e, 0x6b, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6c, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67,
	0x22, 0x5b, 0x0a, 0x1f, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67,
	0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x69,
	0x6e, 0x6b, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x72, 0x0a,
	0x22, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x68, 0x61, 0x74, 0x4c,
	0x69, 0x6e, 0x6b, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75,
	0x67, 0x22, 0x8d, 0x01, 0x0a, 0x20, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x22, 0x87, 0x01, 0x0a, 0x22, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x65, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x27, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x61, 0x0a, 0x25, 0x54,
	0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x52, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x9f,
	0x01, 0x0a, 0x25, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x74, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x22, 0x76, 0x0a, 0x26, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67,
	0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x45, 0x6d, 0x6f,
	0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0xb5, 0x01, 0x0a, 0x25, 0x54, 0x4c, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x4e, 0x6f, 0x50, 0x61, 0x69,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0e,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x8a, 0x01, 0x0a, 0x21, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x67, 0x65, 0x74, 0x50, 0x61, 0x69, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x2b, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x71, 0x0a,
	0x11, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x74, 0x0a, 0x14, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x5f, 0x67, 0x65, 0x74,
	0x46, 0x75, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x22, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb0, 0x01, 0x0a, 0x1d, 0x54, 0x4c, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x22, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x21, 0x54, 0x4c,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x02, 0x69, 0x64, 0x22, 0x69, 0x0a,
	0x19, 0x54, 0x4c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x44, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x53, 0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x67, 0x0a,
	0x17, 0x54, 0x4c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x89, 0x01, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x31, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x73, 0x22, 0x7a, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6e,
	0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x73, 0x22, 0x99,
	0x01, 0x0a, 0x11, 0x54, 0x4c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26,
	0x0a, 0x0f, 0x6d, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6d, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x22, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x02, 0x69, 0x64, 0x22, 0x9b, 0x01, 0x0a, 0x13, 0x54,
	0x4c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x75, 0x6e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0f,
	0x6d, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6d, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x46, 0x72, 0x6f, 0x6d, 0x12, 0x22, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x50, 0x65, 0x65, 0x72, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa8, 0x01, 0x0a, 0x16, 0x54, 0x4c, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a,
	0x0f, 0x6d, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6d, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0x72, 0x0a, 0x12, 0x54, 0x4c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x73, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01,
	0x71, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xab, 0x01, 0x0a, 0x1b, 0x54, 0x4c, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a,
	0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x72, 0x22, 0xb1, 0x03, 0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x50, 0x65, 0x65, 0x72,
	0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x63,
	0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x70, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x62, 0x6f, 0x74, 0x73, 0x50, 0x6d, 0x12, 0x1f, 0x0a, 0x0b,
	0x62, 0x6f, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x62, 0x6f, 0x74, 0x73, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63,
	0x68, 0x61, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x62, 0x6f, 0x74, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x62, 0x6f, 0x74, 0x73, 0x41, 0x70, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0xb8, 0x01, 0x0a, 0x1e, 0x54, 0x4c,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x54,
	0x6f, 0x70, 0x50, 0x65, 0x65, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x70, 0x50, 0x65, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x04,
	0x70, 0x65, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04,
	0x70, 0x65, 0x65, 0x72, 0x22, 0x52, 0x0a, 0x16, 0x54, 0x4c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x12, 0x38,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x50, 0x0a, 0x14, 0x54, 0x4c, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x7f, 0x0a, 0x1a, 0x54, 0x4c,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x54, 0x6f, 0x70, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x27, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x87, 0x02, 0x0a, 0x16,
	0x54, 0x4c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x3d, 0x0a, 0x1b, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x61, 0x64, 0x64, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x22, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0x79, 0x0a, 0x19, 0x54, 0x4c, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x02, 0x69, 0x64,
	0x22, 0xe7, 0x01, 0x0a, 0x16, 0x54, 0x4c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x5f, 0x67, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x67, 0x65, 0x6f, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x47, 0x65, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x08, 0x67, 0x65, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x65,
	0x6c, 0x66, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73,
	0x65, 0x6c, 0x66, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x22, 0xde, 0x01, 0x0a, 0x1c, 0x54,
	0x4c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x70,
	0x61, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x70, 0x61, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x6a, 0x0a, 0x18, 0x54,
	0x4c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0x5a, 0x0a, 0x1e, 0x54, 0x4c, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x22, 0x70, 0x0a, 0x1e, 0x54, 0x4c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x73, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x68, 0x0a, 0x1c, 0x54, 0x4c, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22,
	0xb4, 0x01, 0x0a, 0x16, 0x54, 0x4c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f,
	0x73, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6d,
	0x79, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x22, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x54, 0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61,
	0x79, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x67, 0x0a, 0x1d,
	0x54, 0x4c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53,
	0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x65, 0x64, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x01, 0x71, 0x22, 0xc6, 0x01, 0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x4a, 0x0a, 0x15, 0x69,
	0x64, 0x5f, 0x56, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x14, 0x69, 0x64, 0x56, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x49, 0x4e, 0x50, 0x55, 0x54,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x64, 0x5f, 0x56, 0x45,
	0x43, 0x54, 0x4f, 0x52, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0d, 0x69, 0x64, 0x56, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x22, 0xd0,
	0x02, 0x0a, 0x16, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67,
	0x65, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70,
	0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x66, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x33, 0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x65, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x0a, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x22, 0xaf, 0x02, 0x0a, 0x16, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x67, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x64, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x61, 0x64, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x22, 0xd9, 0x04, 0x0a, 0x12, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x0c, 0x0a, 0x01,
	0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x2b, 0x0a, 0x07, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0d, 0x73, 0x61, 0x76, 0x65, 0x64,
	0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65,
	0x65, 0x72, 0x52, 0x0b, 0x73, 0x61, 0x76, 0x65, 0x64, 0x50, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x38, 0x0a, 0x0e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x61, 0x76, 0x65,
	0x64, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x6f, 0x70,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x64,
	0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x15, 0x0a,
	0x06, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d,
	0x61, 0x78, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22,
	0x92, 0x01, 0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x15, 0x0a,
	0x06, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d,
	0x61, 0x78, 0x49, 0x64, 0x22, 0xbb, 0x02, 0x0a, 0x19, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x6a, 0x75, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x6a, 0x75, 0x73, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x76, 0x6f, 0x6b, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x76,
	0x6f, 0x6b, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x6d,
	0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x78,
	0x49, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x61,
	0x78, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x44, 0x61,
	0x74, 0x65, 0x22, 0x7e, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x6f, 0x0a, 0x1c, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x15, 0x0a, 0x06,
	0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61,
	0x78, 0x49, 0x64, 0x22, 0xe8, 0x01, 0x0a, 0x15, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12,
	0x39, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x74, 0x6f, 0x70, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb6,
	0x08, 0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x5f, 0x77, 0x65, 0x62, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x6f, 0x57, 0x65, 0x62, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x6c, 0x65, 0x61, 0x72, 0x5f, 0x64, 0x72, 0x61, 0x66, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x6e, 0x6f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x6e, 0x6f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x18,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65,
	0x74, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74,
	0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74,
	0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x73, 0x6b, 0x69,
	0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x61,
	0x69, 0x64, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x73, 0x6b, 0x69, 0x70, 0x12, 0x26, 0x0a, 0x04, 0x70,
	0x65, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70,
	0x65, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x52, 0x07, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x54, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0c,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x4d,
	0x61, 0x72, 0x6b, 0x75, 0x70, 0x12, 0x32, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x61, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x12, 0x52, 0x0a, 0x14, 0x71, 0x75, 0x69, 0x63,
	0x6b, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x52, 0x12, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x12, 0x33, 0x0a, 0x06,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x12, 0x45, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x50,
	0x61, 0x69, 0x64, 0x53, 0x74, 0x61, 0x72, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a,
	0x74, 0x6f, 0x70, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x74,
	0x6f, 0x70, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0xc0, 0x08, 0x0a, 0x15, 0x54, 0x4c, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x69, 0x6c, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x69, 0x6c,
	0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x64, 0x72, 0x61,
	0x66, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x44,
	0x72, 0x61, 0x66, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x6f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e, 0x6f, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f,
	0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x61, 0x69, 0x64, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x73,
	0x6b, 0x69, 0x70, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x08, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x54, 0x6f, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x12, 0x29, 0x0a,
	0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x12,
	0x37, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x12, 0x32, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0d,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2b,
	0x0a, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50,
	0x65, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x12, 0x52, 0x0a, 0x14, 0x71,
	0x75, 0x69, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x63, 0x75, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x52, 0x12, 0x71, 0x75, 0x69,
	0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x12,
	0x33, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x12, 0x45, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x61,
	0x69, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x50, 0x61, 0x69, 0x64, 0x53, 0x74, 0x61, 0x72, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12,
	0x39, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x74, 0x6f, 0x70, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0xec, 0x06, 0x0a, 0x1b, 0x54,
	0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0d,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x6d, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x4d, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f,
	0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x64, 0x72, 0x6f, 0x70, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x6f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e, 0x6f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f,
	0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x61, 0x69, 0x64, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x73,
	0x6b, 0x69, 0x70, 0x12, 0x2f, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x65, 0x65, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d,
	0x50, 0x65, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49,
	0x64, 0x12, 0x2b, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x06, 0x74, 0x6f, 0x50, 0x65, 0x65, 0x72, 0x12, 0x39,
	0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x74, 0x6f, 0x70, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x61, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x12, 0x52, 0x0a, 0x14, 0x71, 0x75, 0x69, 0x63,
	0x6b, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x52, 0x12, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x12, 0x44, 0x0a, 0x0f,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x45, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x61, 0x69, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x50, 0x61, 0x69, 0x64, 0x53, 0x74, 0x61, 0x72, 0x73, 0x22, 0x7a, 0x0a, 0x16, 0x54, 0x4c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x70, 0x61, 0x6d, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a,
	0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x04, 0x70, 0x65, 0x65, 0x72, 0x22, 0x7f, 0x0a, 0x1b, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26,
	0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x22, 0xc0, 0x01, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x43, 0x37,
	0x38, 0x41, 0x46, 0x39, 0x42, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65,
	0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x60, 0x0a, 0x14, 0x54, 0x4c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74,
	0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6c, 0x0a, 0x17, 0x54,
	0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x46, 0x75,
	0x6c, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x19, 0x54, 0x4c,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x43, 0x68,
	0x61, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x22, 0x9d, 0x01, 0x0a, 0x19, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x65, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x38,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49,
	0x64, 0x12, 0x2d, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f,
	0x22, 0xbe, 0x01, 0x0a, 0x1f, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x61, 0x64, 0x64, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x42, 0x43, 0x36,
	0x44, 0x31, 0x30, 0x37, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x77, 0x64, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x77, 0x64, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0xc3, 0x01, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xd6, 0x01, 0x0a, 0x1e, 0x54, 0x4c, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x39, 0x32, 0x43, 0x45, 0x44, 0x44, 0x44, 0x34, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x74, 0x74, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x74, 0x74, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x22, 0x92, 0x01, 0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x67, 0x65, 0x74, 0x44, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0xb4, 0x01, 0x0a, 0x1d, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x2b, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x0f, 0x0a, 0x03, 0x67,
	0x5f, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x67, 0x41, 0x22, 0xc3, 0x01, 0x0a,
	0x1c, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x0f, 0x0a, 0x03, 0x67, 0x5f, 0x62, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x67, 0x42, 0x12, 0x27, 0x0a, 0x0f, 0x6b, 0x65, 0x79,
	0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x6b, 0x65, 0x79, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x22, 0x99, 0x01, 0x0a, 0x1d, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x25,
	0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x22, 0xb2,
	0x01, 0x0a, 0x1e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70, 0x69, 0x6e,
	0x67, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x04, 0x70,
	0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x06,
	0x74, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x06, 0x74, 0x79, 0x70,
	0x69, 0x6e, 0x67, 0x22, 0xa8, 0x01, 0x0a, 0x20, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x52, 0x04, 0x70,
	0x65, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x44, 0x61, 0x74, 0x65, 0x22, 0xcf,
	0x01, 0x0a, 0x19, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x6e, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x12, 0x2f,
	0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x84, 0x02, 0x0a, 0x1d, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x69,
	0x6c, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x20, 0x54, 0x4c, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x6e, 0x0a, 0x19, 0x54, 0x4c, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x71, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6d, 0x61, 0x78, 0x51, 0x74, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x1f, 0x54, 0x4c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x53, 0x70, 0x61, 0x6d, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x22, 0x6b, 0x0a, 0x1f, 0x54, 0x4c, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6d,
	0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6d,
	0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x6a, 0x0a, 0x1a, 0x54, 0x4c,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0xaf, 0x01, 0x0a, 0x25, 0x54, 0x4c, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x57, 0x65, 0x62, 0x50, 0x61, 0x67,
	0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x35, 0x37, 0x30, 0x44, 0x36, 0x46, 0x36, 0x46,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0xe5, 0x03, 0x0a, 0x1c, 0x54, 0x4c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x72, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x52, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x65, 0x65, 0x64,
	0x65, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0b, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x54, 0x0a, 0x14, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x69,
	0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x52, 0x13, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67,
	0x22, 0x6b, 0x0a, 0x1b, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x6c, 0x0a,
	0x1c, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0xa3, 0x01, 0x0a, 0x19,
	0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x0a, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x52, 0x0a, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x22, 0xbe, 0x01, 0x0a, 0x1d, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x38, 0x0a,
	0x0a, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x0a, 0x73, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x12, 0x29, 0x0a, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x64, 0x22, 0x95, 0x01, 0x0a, 0x1f, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x38, 0x0a, 0x0a, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x0a,
	0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x22, 0xdc, 0x01, 0x0a, 0x14, 0x54,
	0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x42, 0x6f, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x0a,
	0x03, 0x62, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x03,
	0x62, 0x6f, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x22, 0xbd, 0x01, 0x0a, 0x1c, 0x54, 0x4c,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x56, 0x69, 0x65, 0x77, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x09,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x09,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xc5, 0x01, 0x0a, 0x19, 0x54, 0x4c,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x43, 0x68,
	0x61, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x07, 0x69, 0x73, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x22, 0x6c, 0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x22,
	0xf5, 0x03, 0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x4f, 0x6e, 0x6c, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x12,
	0x38, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x2f, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x33, 0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x50, 0x65, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x9e, 0x01, 0x0a, 0x1e, 0x54, 0x4c, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x6d, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6d,
	0x6f, 0x6a, 0x69, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6d, 0x6f, 0x6a,
	0x69, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xd0, 0x01, 0x0a, 0x1d, 0x54, 0x4c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x69, 0x7a, 0x65, 0x32, 0x5f, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x32, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69,
	0x7a, 0x65, 0x32, 0x5f, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x73, 0x69, 0x7a, 0x65, 0x32, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x22, 0x68, 0x0a, 0x18, 0x54,
	0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x61,
	0x76, 0x65, 0x64, 0x47, 0x69, 0x66, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x9e, 0x01, 0x0a, 0x13, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x47, 0x69, 0x66, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x25, 0x0a, 0x06, 0x75, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x06,
	0x75, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x22, 0x8c, 0x02, 0x0a, 0x1f, 0x54, 0x4c, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x42, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x03, 0x62, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x03, 0x62, 0x6f, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65,
	0x65, 0x72, 0x12, 0x33, 0x0a, 0x09, 0x67, 0x65, 0x6f, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x47, 0x65, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x67,
	0x65, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xbc, 0x03, 0x0a, 0x1f, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42,
	0x6f, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x37, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6e,
	0x65, 0x78, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x5f, 0x70, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x6f, 0x74,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x4d, 0x52, 0x08, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x50, 0x6d, 0x12, 0x40, 0x0a, 0x0e, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x77, 0x65, 0x62,
	0x76, 0x69, 0x65, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x6f, 0x74, 0x57, 0x65,
	0x62, 0x56, 0x69, 0x65, 0x77, 0x52, 0x0d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x57, 0x65, 0x62,
	0x76, 0x69, 0x65, 0x77, 0x22, 0xfa, 0x05, 0x0a, 0x1f, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42,
	0x6f, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c,
	0x65, 0x61, 0x72, 0x5f, 0x64, 0x72, 0x61, 0x66, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x68,
	0x69, 0x64, 0x65, 0x5f, 0x76, 0x69, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68,
	0x69, 0x64, 0x65, 0x56, 0x69, 0x61, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x30,
	0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x61, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x06, 0x73, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x12, 0x52, 0x0a, 0x14, 0x71, 0x75, 0x69, 0x63, 0x6b,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x52, 0x12, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x12, 0x45, 0x0a, 0x10, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x61, 0x69, 0x64, 0x53, 0x74, 0x61,
	0x72, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x6d,
	0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54,
	0x6f, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x5f, 0x6d, 0x73,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x22, 0x92, 0x01, 0x0a, 0x1e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x64, 0x69, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26,
	0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb3, 0x04, 0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x6e, 0x6f, 0x5f, 0x77, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x6e, 0x6f, 0x57, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x26,
	0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29,
	0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x37, 0x0a, 0x0c, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d,
	0x61, 0x72, 0x6b, 0x75, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x61, 0x72, 0x6b,
	0x75, 0x70, 0x12, 0x32, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x52, 0x0a, 0x17, 0x71, 0x75, 0x69, 0x63,
	0x6b, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x49, 0x64, 0x22, 0xa0, 0x03, 0x0a,
	0x20, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x65, 0x64, 0x69,
	0x74, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x6f, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6e,
	0x6f, 0x5f, 0x77, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x6e, 0x6f, 0x57, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x30, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x36, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x05, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x12, 0x37, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x61, 0x72, 0x6b,
	0x75, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x52, 0x0b,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x12, 0x32, 0x0a, 0x08, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22,
	0xff, 0x01, 0x0a, 0x20, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x67, 0x61,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x53, 0x52, 0x50, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x22, 0x94, 0x02, 0x0a, 0x20, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x1a, 0x54, 0x4c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72,
	0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x2e, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x50, 0x65, 0x65, 0x72, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72,
	0x73, 0x22, 0x9a, 0x04, 0x0a, 0x15, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x44, 0x72, 0x61, 0x66, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x5f, 0x77, 0x65, 0x62, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x6f, 0x57, 0x65, 0x62,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x65,
	0x72, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x30, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x5f, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f,
	0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x29, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x33, 0x0a, 0x06, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12,
	0x42, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x54,
	0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x44, 0x72, 0x61, 0x66, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x22, 0x6f, 0x0a, 0x1f, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x53,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x6c, 0x0a, 0x20, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x1d, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22,
	0xc4, 0x01, 0x0a, 0x1d, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x73, 0x61, 0x76, 0x65, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x25, 0x0a, 0x06, 0x75, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x06,
	0x75, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x22, 0x77, 0x0a, 0x1f, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x63, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x22,
	0xbc, 0x01, 0x0a, 0x1f, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6d, 0x61,
	0x73, 0x6b, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x6b,
	0x0a, 0x1b, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65,
	0x74, 0x4d, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x8f, 0x01, 0x0a, 0x1f,
	0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x05, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x65,
	0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x22, 0x88, 0x02,
	0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x64, 0x69, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x26, 0x0a,
	0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x88, 0x02, 0x0a, 0x1e, 0x54, 0x4c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x64, 0x69,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x30,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2b, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x1d, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x69, 0x67, 0x68, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65,
	0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0xbe, 0x01, 0x0a, 0x23, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x61,
	0x6d, 0x65, 0x48, 0x69, 0x67, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb0, 0x01, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43,
	0x68, 0x61, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2b,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d,
	0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x61, 0x78,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x80, 0x01, 0x0a, 0x1e, 0x54, 0x4c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x57, 0x65, 0x62, 0x50,
	0x61, 0x67, 0x65, 0x38, 0x44, 0x39, 0x36, 0x39, 0x32, 0x41, 0x33, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x9d, 0x01, 0x0a, 0x1b,
	0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67,
	0x6c, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x50, 0x69, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x2c, 0x0a,
	0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x22, 0xbf, 0x01, 0x0a, 0x20,
	0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x50, 0x65, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x75, 0x0a,
	0x1c, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74,
	0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x22, 0xf0, 0x01, 0x0a, 0x21, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x53, 0x68, 0x69, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12,
	0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x42, 0x0a, 0x10, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xc9, 0x01, 0x0a, 0x24, 0x54, 0x4c, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x50, 0x72,
	0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12,
	0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0xfa, 0x01, 0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x52, 0x0a, 0x16, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x22, 0x80, 0x02, 0x0a, 0x26, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x6e, 0x64, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x30, 0x0a,
	0x08, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0f,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x22, 0x6c, 0x0a, 0x1c, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x46, 0x61, 0x76, 0x65, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x22, 0xa2, 0x01, 0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x66, 0x61, 0x76, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x25, 0x0a, 0x06, 0x75, 0x6e, 0x66, 0x61, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x06,
	0x75, 0x6e, 0x66, 0x61, 0x76, 0x65, 0x22, 0xbc, 0x02, 0x0a, 0x1d, 0x54, 0x4c, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x6f,
	0x70, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x74, 0x6f, 0x70,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x64, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6d, 0x69, 0x6e, 0x49, 0x64, 0x22, 0xb7, 0x01, 0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04,
	0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04,
	0x70, 0x65, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22,
	0xac, 0x01, 0x0a, 0x1e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04,
	0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04,
	0x70, 0x65, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0xb2,
	0x07, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x6e, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x6c, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x64, 0x72, 0x61, 0x66, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x6f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e, 0x6f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x38, 0x0a, 0x18, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x16, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x73, 0x65, 0x74, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x30, 0x0a,
	0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x6f,
	0x64, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x50, 0x61, 0x69, 0x64, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x73, 0x6b, 0x69, 0x70, 0x12,
	0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65,
	0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x5f, 0x74, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f,
	0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x12, 0x3a, 0x0a, 0x0b, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x61, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65,
	0x6e, 0x64, 0x41, 0x73, 0x12, 0x52, 0x0a, 0x14, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x5f, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x63, 0x75, 0x74, 0x52, 0x12, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x45, 0x0a,
	0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x61, 0x69, 0x64, 0x53,
	0x74, 0x61, 0x72, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x54, 0x6f, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x5f,
	0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x22, 0xbd, 0x01, 0x0a, 0x1f, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x2f, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x52, 0x04, 0x70, 0x65,
	0x65, 0x72, 0x12, 0x2f, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66,
	0x69, 0x6c, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x1d, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x29, 0x0a, 0x10, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x56, 0x0a, 0x1a,
	0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53,
	0x70, 0x6c, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x22, 0x9e, 0x01, 0x0a, 0x1c, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x55,
	0x6e, 0x72, 0x65, 0x61, 0x64, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x04, 0x70, 0x65, 0x65, 0x72, 0x22, 0x5c, 0x0a, 0x20, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x55, 0x6e,
	0x72, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x22, 0x56, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x41, 0x6c, 0x6c, 0x44, 0x72, 0x61, 0x66, 0x74,
	0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xe0, 0x01, 0x0a, 0x1f,
	0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x6c,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x69, 0x6c, 0x65, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x70, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x75, 0x6e, 0x70, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6d, 0x5f, 0x6f, 0x6e,
	0x65, 0x73, 0x69, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x6d, 0x4f,
	0x6e, 0x65, 0x73, 0x69, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa9,
	0x01, 0x0a, 0x14, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x6e, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50,
	0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x1a, 0x54,
	0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x6f,
	0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x6d,
	0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x73, 0x67,
	0x49, 0x64, 0x22, 0x7a, 0x0a, 0x16, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x67, 0x65, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x22, 0x93,
	0x01, 0x0a, 0x19, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x65,
	0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x62, 0x6f, 0x75, 0x74, 0x22, 0xcb, 0x01, 0x0a, 0x27, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65,
	0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0d, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x52, 0x0c, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x22, 0x75, 0x0a, 0x1c, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x67, 0x65, 0x74, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09,
	0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x26, 0x54, 0x4c,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x45, 0x6d, 0x6f,
	0x6a, 0x69, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x80,
	0x01, 0x0a, 0x25, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67,
	0x65, 0x74, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65,
	0x73, 0x22, 0x70, 0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x67, 0x65, 0x74, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x55, 0x52, 0x4c, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0xa7, 0x02, 0x0a, 0x1d, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65,
	0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x0d, 0x73, 0x61, 0x76, 0x65, 0x64,
	0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65,
	0x65, 0x72, 0x52, 0x0b, 0x73, 0x61, 0x76, 0x65, 0x64, 0x50, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x39, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x74, 0x6f, 0x70, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x9c, 0x02,
	0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x72, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x32,
	0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6d, 0x73, 0x67,
	0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x08, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xc0, 0x02, 0x0a,
	0x19, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x55, 0x72, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65,
	0x72, 0x12, 0x32, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22,
	0x83, 0x01, 0x0a, 0x1f, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x68, 0x69, 0x64, 0x65, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x42, 0x61, 0x72, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a,
	0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x04, 0x70, 0x65, 0x65, 0x72, 0x22, 0x97, 0x01, 0x0a, 0x1f, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22,
	0x94, 0x01, 0x0a, 0x20, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26,
	0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x95, 0x01, 0x0a, 0x21, 0x54, 0x4c, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x97,
	0x01, 0x0a, 0x23, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65,
	0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xf0, 0x01, 0x0a, 0x18, 0x54, 0x4c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x6c,
	0x56, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65,
	0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x34, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xeb, 0x01, 0x0a, 0x1d,
	0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67,
	0x6c, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x75, 0x6e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x3a, 0x0a,
	0x0b, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x0b, 0x73, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x73, 0x22, 0x60, 0x0a, 0x24, 0x54, 0x4c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x45, 0x46, 0x44, 0x34, 0x38, 0x43, 0x38,
	0x39, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x61, 0x0a, 0x25, 0x54,
	0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x99,
	0x01, 0x0a, 0x1e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x76, 0x0a, 0x24, 0x54, 0x4c,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x22, 0xa0, 0x01, 0x0a, 0x22, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x4f, 0x6c, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0xc6, 0x02, 0x0a, 0x16, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65,
	0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x5f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x64, 0x64,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61,
	0x78, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x9b,
	0x01, 0x0a, 0x20, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67,
	0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a,
	0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x22, 0xb5, 0x01, 0x0a,
	0x1a, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x15, 0x0a,
	0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d,
	0x73, 0x67, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x4d,
	0x61, 0x78, 0x49, 0x64, 0x22, 0xbb, 0x01, 0x0a, 0x1c, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x70, 0x69, 0x6e, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65,
	0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x5f, 0x6d,
	0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x22, 0x6b, 0x0a, 0x16, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x22,
	0x76, 0x0a, 0x22, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x22, 0x7b, 0x0a, 0x1e, 0x54, 0x4c, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x22, 0xca, 0x01, 0x0a, 0x1d, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65,
	0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xe8, 0x01, 0x0a, 0x1f, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65,
	0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x29, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x22, 0x9f, 0x01, 0x0a,
	0x1e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x22, 0xe2,
	0x02, 0x0a, 0x22, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67,
	0x65, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65,
	0x72, 0x12, 0x2d, 0x0a, 0x08, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64,
	0x12, 0x3c, 0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3d,
	0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0x99, 0x01, 0x0a, 0x21, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43,
	0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x69, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x22,
	0x9a, 0x03, 0x0a, 0x22, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x65, 0x64, 0x69, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x3c, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x75, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x34, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x65,
	0x65, 0x64, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0xbf, 0x01, 0x0a,
	0x2c, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12,
	0x2d, 0x0a, 0x08, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x9c,
	0x01, 0x0a, 0x24, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61,
	0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50,
	0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x84, 0x01,
	0x0a, 0x20, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65,
	0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04,
	0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04,
	0x70, 0x65, 0x65, 0x72, 0x22, 0xa1, 0x03, 0x0a, 0x22, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x14, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x30,
	0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b,
	0x12, 0x2a, 0x0a, 0x01, 0x71, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x01, 0x71, 0x12, 0x1f, 0x0a, 0x0b,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a,
	0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x19, 0x54, 0x4c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x54, 0x54, 0x4c, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65,
	0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x22, 0x86, 0x01, 0x0a, 0x22, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x50, 0x65, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50,
	0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x22, 0x98, 0x01, 0x0a, 0x18, 0x54, 0x4c,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65,
	0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6d, 0x6f, 0x74,
	0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6d, 0x6f, 0x74,
	0x69, 0x63, 0x6f, 0x6e, 0x22, 0xa9, 0x01, 0x0a, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x61, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x33,
	0x31, 0x43, 0x31, 0x43, 0x34, 0x34, 0x46, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50,
	0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64,
	0x22, 0xaf, 0x02, 0x0a, 0x24, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x67, 0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x0d, 0x73,
	0x61, 0x76, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x0b, 0x73, 0x61, 0x76, 0x65, 0x64, 0x50, 0x65, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x22, 0xa5, 0x02, 0x0a, 0x25, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x36,
	0x0a, 0x0d, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x0b, 0x73, 0x61, 0x76, 0x65, 0x64,
	0x50, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xcc, 0x01, 0x0a, 0x1f, 0x54,
	0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xd5, 0x01, 0x0a, 0x23, 0x54, 0x4c,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x41, 0x6c,
	0x6c, 0x43, 0x68, 0x61, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12,
	0x30, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x6e,
	0x6b, 0x22, 0xa9, 0x01, 0x0a, 0x1c, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x4e, 0x6f, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04,
	0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04,
	0x70, 0x65, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xae, 0x01,
	0x0a, 0x1d, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x61,
	0x76, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65,
	0x72, 0x12, 0x2b, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x22, 0xec,
	0x02, 0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x03, 0x62, 0x69, 0x67, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x5f, 0x74,
	0x6f, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x61, 0x64, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x70,
	0x65, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70,
	0x65, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x1b, 0x72, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x56, 0x45, 0x43, 0x54, 0x4f,
	0x52, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x1a, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x4c, 0x41, 0x47,
	0x56, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x4d,
	0x0a, 0x13, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x53,
	0x54, 0x52, 0x49, 0x4e, 0x47, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x72, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x22, 0x94, 0x01,
	0x0a, 0x20, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04,
	0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04,
	0x70, 0x65, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x22, 0xfa, 0x02, 0x0a, 0x23, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x46,
	0x0a, 0x15, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x52,
	0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x14, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x4c, 0x41, 0x47, 0x52, 0x45,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x34, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x4d, 0x0a, 0x13, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x46,
	0x4c, 0x41, 0x47, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x72,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x54, 0x52, 0x49, 0x4e,
	0x47, 0x22, 0xaf, 0x03, 0x0a, 0x25, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x62, 0x0a,
	0x21, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x53, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x1f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x43, 0x48, 0x41, 0x54, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x53, 0x12, 0x44, 0x0a, 0x0f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x0c, 0x70, 0x61, 0x69, 0x64, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x0b, 0x70, 0x61,
	0x69, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x20, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x56, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x1e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x53, 0x54, 0x52,
	0x49, 0x4e, 0x47, 0x22, 0x71, 0x0a, 0x21, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0xc3, 0x01, 0x0a, 0x1e, 0x54, 0x4c, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x11, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x10, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x45, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x22, 0xc0, 0x03, 0x0a,
	0x19, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x62, 0x0a, 0x1f,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x56, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x54,
	0x45, 0x58, 0x54, 0x57, 0x49, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x49, 0x45, 0x53, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x65, 0x78, 0x74, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x1e, 0x74, 0x65, 0x78, 0x74, 0x46, 0x4c, 0x41, 0x47, 0x56, 0x45, 0x43, 0x54, 0x4f, 0x52,
	0x54, 0x45, 0x58, 0x54, 0x57, 0x49, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x49, 0x45, 0x53,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x6f, 0x4c, 0x61, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x06, 0x6d, 0x73, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x45, 0x0a,
	0x0f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x74, 0x65, 0x78, 0x74, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x54,
	0x52, 0x49, 0x4e, 0x47, 0x12, 0x39, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6c, 0x61, 0x6e,
	0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x22,
	0xbd, 0x02, 0x0a, 0x1e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04,
	0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04,
	0x70, 0x65, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x64, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x61, 0x64, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x22,
	0xb8, 0x01, 0x0a, 0x19, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12,
	0x39, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x74, 0x6f, 0x70, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0xac, 0x01, 0x0a, 0x1b, 0x54,
	0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x53, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x01, 0x71, 0x12, 0x2f, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x6d, 0x0a, 0x1d, 0x54, 0x4c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x4d, 0x65, 0x6e, 0x75, 0x42, 0x6f, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x7e, 0x0a, 0x1c, 0x54, 0x4c, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x4d, 0x65, 0x6e, 0x75, 0x42, 0x6f, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x24, 0x0a, 0x03, 0x62, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x03, 0x62, 0x6f, 0x74, 0x22, 0xd1, 0x01, 0x0a, 0x21, 0x54, 0x4c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x42,
	0x6f, 0x74, 0x49, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x38,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x77, 0x72, 0x69, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x24, 0x0a,
	0x03, 0x62, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x03,
	0x62, 0x6f, 0x74, 0x12, 0x27, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xb9, 0x05, 0x0a,
	0x1a, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x57, 0x65, 0x62, 0x56, 0x69, 0x65, 0x77, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x62, 0x6f,
	0x74, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x72,
	0x6f, 0x6d, 0x42, 0x6f, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x6c,
	0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x69, 0x6c, 0x65, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x66,
	0x75, 0x6c, 0x6c, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x66, 0x75, 0x6c, 0x6c, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x26, 0x0a, 0x04, 0x70,
	0x65, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70,
	0x65, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x03, 0x62, 0x6f, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x03, 0x62, 0x6f, 0x74, 0x12, 0x2e, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x34, 0x0a, 0x0c, 0x74, 0x68, 0x65, 0x6d,
	0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4a, 0x53, 0x4f,
	0x4e, 0x52, 0x0b, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x30, 0x0a, 0x08, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x54, 0x6f, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x12, 0x2b, 0x0a, 0x07,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65,
	0x72, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x39, 0x0a,
	0x0a, 0x74, 0x6f, 0x70, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08,
	0x74, 0x6f, 0x70, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0xb5, 0x03, 0x0a, 0x1a, 0x54, 0x4c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x6c, 0x6f, 0x6e, 0x67,
	0x57, 0x65, 0x62, 0x56, 0x69, 0x65, 0x77, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65,
	0x72, 0x12, 0x24, 0x0a, 0x03, 0x62, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x03, 0x62, 0x6f, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x52, 0x07, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x54, 0x6f, 0x12, 0x2b, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x41,
	0x73, 0x12, 0x42, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x73,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x5f, 0x6d, 0x73, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x4d, 0x73, 0x67, 0x49, 0x64,
	0x22, 0xdb, 0x03, 0x0a, 0x28, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x57, 0x65,
	0x62, 0x56, 0x69, 0x65, 0x77, 0x34, 0x31, 0x33, 0x41, 0x33, 0x45, 0x37, 0x33, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x77, 0x65, 0x62, 0x76, 0x69, 0x65, 0x77, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x57, 0x65, 0x62, 0x76, 0x69, 0x65, 0x77, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x73, 0x69, 0x64, 0x65, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x69, 0x64, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x75, 0x6c, 0x6c, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x75, 0x6c,
	0x6c, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x24, 0x0a, 0x03, 0x62, 0x6f, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x03, 0x62, 0x6f, 0x74, 0x12, 0x2e, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x3d, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x34, 0x0a, 0x0c,
	0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x4a, 0x53, 0x4f, 0x4e, 0x52, 0x0b, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0xb9,
	0x01, 0x0a, 0x24, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x6e, 0x64, 0x57, 0x65, 0x62, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x6f, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x6f, 0x74, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xcf, 0x01, 0x0a, 0x1b, 0x54,
	0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x57,
	0x65, 0x62, 0x56, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x03, 0x62, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x03, 0x62, 0x6f, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x96, 0x01, 0x0a,
	0x1b, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x15,
	0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6d, 0x73, 0x67, 0x49, 0x64, 0x22, 0xe9, 0x01, 0x0a, 0x20, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x64, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06,
	0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x73,
	0x67, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x04, 0x67, 0x6f, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x67, 0x6f, 0x6f,
	0x64, 0x22, 0x80, 0x01, 0x0a, 0x23, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x6d, 0x6f, 0x6a, 0x69,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x6c, 0x0a, 0x1c, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x22, 0x74, 0x0a, 0x24, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x67, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x45, 0x6d, 0x6f,
	0x6a, 0x69, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0xc7, 0x01, 0x0a, 0x1a, 0x54, 0x4c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50,
	0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0d, 0x72, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x50, 0x65, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65,
	0x65, 0x72, 0x22, 0x81, 0x01, 0x0a, 0x1b, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x84, 0x01, 0x0a, 0x1e, 0x54, 0x4c, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x5c, 0x0a,
	0x20, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x65,
	0x61, 0x72, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x90, 0x01, 0x0a, 0x1c,
	0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x74,
	0x0a, 0x20, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54,
	0x54, 0x4c, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x22, 0x5c, 0x0a, 0x20, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x54, 0x4c, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x22, 0xb0, 0x02, 0x0a, 0x20, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x42, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x50, 0x65, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50,
	0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3b, 0x0a,
	0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x39, 0x0a, 0x0e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x50, 0x65, 0x65, 0x72, 0x22, 0x6a, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x22, 0x70, 0x0a, 0x20, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x67, 0x65, 0x74, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x22, 0x76, 0x0a, 0x26, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x89, 0x01, 0x0a, 0x1d,
	0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6d, 0x6f, 0x74, 0x69,
	0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6d, 0x6f, 0x74, 0x69,
	0x63, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0xa2, 0x01, 0x0a, 0x22, 0x54, 0x4c, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x50, 0x65,
	0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x22, 0x8d, 0x01, 0x0a,
	0x15, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74,
	0x42, 0x6f, 0x74, 0x41, 0x70, 0x70, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x26, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x6f, 0x74,
	0x41, 0x70, 0x70, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0xa1, 0x03, 0x0a,
	0x25, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x57, 0x65, 0x62, 0x56, 0x69, 0x65, 0x77, 0x35, 0x33,
	0x36, 0x31, 0x38, 0x42, 0x43, 0x45, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x23, 0x0a, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x77, 0x72, 0x69, 0x74, 0x65, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x66, 0x75, 0x6c, 0x6c, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x75, 0x6c, 0x6c, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x12,
	0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65,
	0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x42, 0x6f, 0x74, 0x41, 0x70, 0x70, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12,
	0x3d, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x34,
	0x0a, 0x0c, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x4a, 0x53, 0x4f, 0x4e, 0x52, 0x0b, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x22, 0xcf, 0x02, 0x0a, 0x1c, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x70, 0x65,
	0x72, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x66,
	0x6f, 0x72, 0x5f, 0x62, 0x6f, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x66,
	0x6f, 0x72, 0x42, 0x6f, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x12, 0x26,
	0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x70, 0x61,
	0x70, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x70,
	0x65, 0x72, 0x52, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x70, 0x65, 0x72, 0x12, 0x36, 0x0a,
	0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x50, 0x61,
	0x70, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xab, 0x01, 0x0a, 0x22, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x12, 0x0c,
	0x0a, 0x01, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x22, 0x9b, 0x02, 0x0a, 0x1b, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x67, 0x65, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x33, 0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x50, 0x65, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0xb4,
	0x02, 0x0a, 0x1b, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67,
	0x65, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x38,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x64, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x61, 0x64, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x89, 0x02, 0x0a, 0x1e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x61, 0x76, 0x65,
	0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61,
	0x78, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x49,
	0x64, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x6d, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x61, 0x78,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x44, 0x61, 0x74,
	0x65, 0x22, 0x5d, 0x0a, 0x21, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x67, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x53, 0x61, 0x76, 0x65, 0x64, 0x44,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x22, 0xa2, 0x01, 0x0a, 0x20, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x61, 0x76, 0x65, 0x64, 0x44, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x50, 0x69, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x04, 0x70, 0x65, 0x65, 0x72, 0x22, 0xa7, 0x01, 0x0a, 0x25, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x69, 0x6e,
	0x6e, 0x65, 0x64, 0x53, 0x61, 0x76, 0x65, 0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12,
	0x2e, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x50, 0x65, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22,
	0x98, 0x01, 0x0a, 0x20, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x67, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26,
	0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0xc1, 0x01, 0x0a, 0x22, 0x54,
	0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x61, 0x76, 0x65, 0x64, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61,
	0x67, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x08, 0x72,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x72,
	0x0a, 0x22, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65,
	0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x61, 0x67, 0x52, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x22, 0x98, 0x01, 0x0a, 0x1d, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x61, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26,
	0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x6b, 0x0a,
	0x1b, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74,
	0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x71, 0x0a, 0x1f, 0x54, 0x4c,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x7b, 0x0a,
	0x23, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x63, 0x75, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x22, 0x9b, 0x01, 0x0a, 0x22, 0x54,
	0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x51,
	0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75,
	0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x24, 0x54, 0x4c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51,
	0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75,
	0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x49, 0x64, 0x22, 0xa2, 0x01, 0x0a,
	0x21, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74,
	0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x22, 0xd4, 0x01, 0x0a, 0x22, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08,
	0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x24, 0x54, 0x4c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51,
	0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x87, 0x01, 0x0a,
	0x22, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x67,
	0x67, 0x6c, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54,
	0x61, 0x67, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x27, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x19, 0x54, 0x4c, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x79, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0x71, 0x0a, 0x21, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x67, 0x65, 0x74, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x22, 0x6f, 0x0a, 0x1f, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0xc3, 0x01, 0x0a, 0x19, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x46, 0x61, 0x63, 0x74, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a,
	0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x96, 0x01, 0x0a, 0x1b,
	0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x46, 0x61, 0x63, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x15, 0x0a,
	0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d,
	0x73, 0x67, 0x49, 0x64, 0x22, 0x93, 0x01, 0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x46, 0x61, 0x63, 0x74, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70,
	0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70,
	0x65, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x22, 0xf3, 0x02, 0x0a, 0x1e, 0x54,
	0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x57, 0x65, 0x62, 0x56, 0x69, 0x65, 0x77, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x75, 0x6c, 0x6c, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x75, 0x6c, 0x6c, 0x73, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50,
	0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x03, 0x62, 0x6f, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x03, 0x62, 0x6f, 0x74, 0x12,
	0x3d, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x34,
	0x0a, 0x0c, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x4a, 0x53, 0x4f, 0x4e, 0x52, 0x0b, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x22, 0x9c, 0x03, 0x0a, 0x1c, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x69, 0x64, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70,
	0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70,
	0x65, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x65, 0x0a,
	0x1f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x50, 0x41, 0x49,
	0x44, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x50, 0x52, 0x49, 0x56, 0x41, 0x43, 0x59,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x61, 0x69, 0x64, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x52, 0x1e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x46, 0x4c, 0x41,
	0x47, 0x50, 0x41, 0x49, 0x44, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x50, 0x52, 0x49,
	0x56, 0x41, 0x43, 0x59, 0x12, 0x38, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f,
	0x46, 0x4c, 0x41, 0x47, 0x42, 0x4f, 0x4f, 0x4c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x0f, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x46, 0x4c, 0x41, 0x47, 0x42, 0x4f, 0x4f, 0x4c, 0x12, 0x2f,
	0x0a, 0x13, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x42, 0x4f,
	0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x46, 0x4c, 0x41, 0x47, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x22,
	0xb1, 0x02, 0x0a, 0x25, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x69, 0x64, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x6d,
	0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x73, 0x67,
	0x49, 0x64, 0x12, 0x5d, 0x0a, 0x1b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x50, 0x41,
	0x49, 0x44, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x50, 0x52, 0x49, 0x56, 0x41, 0x43,
	0x59, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x61, 0x69, 0x64, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x52, 0x1a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x41,
	0x49, 0x44, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x50, 0x52, 0x49, 0x56, 0x41, 0x43,
	0x59, 0x12, 0x30, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x42, 0x4f, 0x4f,
	0x4c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x42,
	0x4f, 0x4f, 0x4c, 0x22, 0x5e, 0x0a, 0x22, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x61, 0x69, 0x64, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x22, 0xa1, 0x01, 0x0a, 0x20, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65,
	0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x22, 0xd8, 0x01, 0x0a, 0x21, 0x54, 0x4c, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x53, 0x70, 0x6f,
	0x6e, 0x73, 0x6f, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x1e, 0x0a,
	0x0a, 0x66, 0x75, 0x6c, 0x6c, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x66, 0x75, 0x6c, 0x6c, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65,
	0x65, 0x72, 0x22, 0xbb, 0x01, 0x0a, 0x22, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72,
	0x22, 0x84, 0x01, 0x0a, 0x20, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x67, 0x65, 0x74, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65,
	0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x22, 0x82, 0x02, 0x0a, 0x25, 0x54, 0x4c, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x6f, 0x74, 0x49, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x3b, 0x0a, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x96, 0x01, 0x0a,
	0x24, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x24, 0x0a, 0x03, 0x62, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x03, 0x62, 0x6f, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xf7, 0x01, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x01, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22,
	0xaa, 0x01, 0x0a, 0x22, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x75, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x70, 0x75, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4f, 0x0a, 0x13,
	0x54, 0x4c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xc5, 0x02,
	0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74,
	0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x70, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x70, 0x74, 0x73, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x74, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x43, 0x0a, 0x0f, 0x70, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x70, 0x74, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x71, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x71, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x71,
	0x74, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x71, 0x74, 0x73,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x82, 0x02, 0x0a, 0x1f, 0x54, 0x4c, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44,
	0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x36, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x70, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xbf, 0x01, 0x0a, 0x1c, 0x54,
	0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x12, 0x24, 0x0a, 0x03, 0x62, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x03, 0x62, 0x6f, 0x74, 0x12, 0x23, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x02, 0x69, 0x64, 0x22, 0xf2, 0x02, 0x0a,
	0x1c, 0x54, 0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x12, 0x24, 0x0a, 0x03, 0x62, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x03, 0x62, 0x6f, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x42, 0x0a, 0x0e, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x73, 0x12,
	0x40, 0x0a, 0x12, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x5f, 0x6d,
	0x61, 0x72, 0x6b, 0x75, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x69, 0x7a, 0x65, 0x52,
	0x10, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x4d, 0x61, 0x72, 0x6b, 0x75,
	0x70, 0x22, 0x77, 0x0a, 0x16, 0x54, 0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc5, 0x01, 0x0a, 0x17, 0x54,
	0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x2b, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0x92, 0x03, 0x0a, 0x23, 0x54, 0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73,
	0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x61, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x61,
	0x76, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x12, 0x42, 0x0a, 0x0e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x73, 0x12, 0x40, 0x0a, 0x12, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x65,
	0x6d, 0x6f, 0x6a, 0x69, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x10, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x45, 0x6d, 0x6f, 0x6a,
	0x69, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x22, 0x9e, 0x01, 0x0a, 0x16, 0x54, 0x4c, 0x5f, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x22, 0xa0, 0x02, 0x0a, 0x11, 0x54, 0x4c, 0x5f,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x67, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x38,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x65, 0x63, 0x69,
	0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x64, 0x6e, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x64, 0x6e, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x4e, 0x54,
	0x36, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x5f, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x22, 0xcb, 0x01, 0x0a, 0x19,
	0x54, 0x4c, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x42, 0x69,
	0x67, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61,
	0x72, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x22, 0xb9, 0x01, 0x0a, 0x14, 0x54, 0x4c,
	0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x67, 0x65, 0x74, 0x57, 0x65, 0x62, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x57, 0x65,
	0x62, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xcb, 0x01, 0x0a, 0x14, 0x54, 0x4c, 0x5f, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x64, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x38,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x5f, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x49, 0x4e, 0x54, 0x33, 0x32,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x4e,
	0x54, 0x33, 0x32, 0x22, 0x99, 0x01, 0x0a, 0x19, 0x54, 0x4c, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x72, 0x65, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x64, 0x6e, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0xbb, 0x01, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x67, 0x65,
	0x74, 0x43, 0x64, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x38,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x5f, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x5f, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x22, 0xd1, 0x01,
	0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x67, 0x65, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x12, 0x21,
	0x0a, 0x0c, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x4e, 0x54, 0x33,
	0x32, 0x22, 0x4d, 0x0a, 0x11, 0x54, 0x4c, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x67, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x22, 0x50, 0x0a, 0x14, 0x54, 0x4c, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x67, 0x65, 0x74, 0x4e,
	0x65, 0x61, 0x72, 0x65, 0x73, 0x74, 0x44, 0x63, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x22, 0x68, 0x0a, 0x14, 0x54, 0x4c, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x67, 0x65,
	0x74, 0x41, 0x70, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x51, 0x0a, 0x15,
	0x54, 0x4c, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x22,
	0x4e, 0x0a, 0x12, 0x54, 0x4c, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x22,
	0xa5, 0x01, 0x0a, 0x1b, 0x54, 0x4c, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x42,
	0x6f, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x50, 0x0a, 0x14, 0x54, 0x4c, 0x5f, 0x68, 0x65,
	0x6c, 0x70, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x64, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x6d, 0x0a, 0x17, 0x54, 0x4c, 0x5f,
	0x68, 0x65, 0x6c, 0x70, 0x5f, 0x67, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x55, 0x72, 0x6c, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x22, 0x5b, 0x0a, 0x1f, 0x54, 0x4c, 0x5f, 0x68,
	0x65, 0x6c, 0x70, 0x5f, 0x67, 0x65, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x7b, 0x0a, 0x1c, 0x54, 0x4c, 0x5f, 0x68, 0x65, 0x6c, 0x70,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x21, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4a, 0x53, 0x4f, 0x4e, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x67, 0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x67, 0x65,
	0x74, 0x44, 0x65, 0x65, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x6c, 0x0a, 0x1c, 0x54,
	0x4c, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x36, 0x31, 0x45, 0x33, 0x46, 0x38, 0x35, 0x34, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x7e, 0x0a, 0x12, 0x54, 0x4c, 0x5f,
	0x68, 0x65, 0x6c, 0x70, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x41, 0x70, 0x70, 0x4c, 0x6f, 0x67, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x06, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x41, 0x70, 0x70, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x69, 0x0a, 0x19, 0x54, 0x4c, 0x5f,
	0x68, 0x65, 0x6c, 0x70, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x22, 0x52, 0x0a, 0x16, 0x54, 0x4c, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f,
	0x67, 0x65, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x7c, 0x0a, 0x13, 0x54, 0x4c, 0x5f, 0x68,
	0x65, 0x6c, 0x70, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xcb, 0x01, 0x0a, 0x14, 0x54, 0x4c, 0x5f, 0x68, 0x65,
	0x6c, 0x70, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x32, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x22, 0x50, 0x0a, 0x14, 0x54, 0x4c, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f,
	0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x79, 0x0a, 0x15, 0x54, 0x4c, 0x5f, 0x68, 0x65, 0x6c,
	0x70, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65,
	0x72, 0x22, 0x9d, 0x01, 0x0a, 0x19, 0x54, 0x4c, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x64, 0x69,
	0x73, 0x6d, 0x69, 0x73, 0x73, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x85, 0x01, 0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x67, 0x65,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x53, 0x0a, 0x17, 0x54, 0x4c, 0x5f,
	0x68, 0x65, 0x6c, 0x70, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x50,
	0x72, 0x6f, 0x6d, 0x6f, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x65,
	0x0a, 0x15, 0x54, 0x4c, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x65, 0x65,
	0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x6c, 0x0a, 0x1c, 0x54, 0x4c, 0x5f, 0x68, 0x65, 0x6c, 0x70,
	0x5f, 0x67, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x22, 0x68, 0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x67,
	0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x9b, 0x01,
	0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x72, 0x65,
	0x61, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x22, 0x97, 0x01, 0x0a, 0x1a,
	0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc9, 0x01, 0x0a, 0x16, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x61, 0x6d,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x34, 0x0a, 0x0b, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x50, 0x65, 0x65, 0x72, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x22, 0xf7, 0x01, 0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x4a, 0x0a, 0x15, 0x69, 0x64, 0x5f, 0x56,
	0x45, 0x43, 0x54, 0x4f, 0x52, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x14,
	0x69, 0x64, 0x56, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x64, 0x5f, 0x56, 0x45, 0x43, 0x54, 0x4f,
	0x52, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x64,
	0x56, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x22, 0x86, 0x02, 0x0a, 0x1b,
	0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x3a, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x22, 0xbd, 0x01, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x34,
	0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x22, 0x7a, 0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x87, 0x01, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x5f, 0x67, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x9b, 0x03, 0x0a, 0x19, 0x54,
	0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x67, 0x61, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x6d, 0x65, 0x67, 0x61, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f,
	0x72, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x62, 0x6f,
	0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x12,
	0x33, 0x0a, 0x09, 0x67, 0x65, 0x6f, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x47, 0x65, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x67, 0x65, 0x6f, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x0a,
	0x74, 0x74, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x74,
	0x74, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x80, 0x02, 0x0a, 0x15, 0x54, 0x4c, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2b, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x0b, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x22, 0x98, 0x01, 0x0a, 0x15,
	0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x15, 0x54, 0x4c, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2d, 0x0a, 0x05, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x74, 0x50, 0x68,
	0x6f, 0x74, 0x6f, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x22, 0xa2, 0x01, 0x0a, 0x19, 0x54,
	0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xa3, 0x01, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x85, 0x01, 0x0a,
	0x18, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x6c, 0x65, 0x61,
	0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x22, 0xba, 0x01, 0x0a, 0x23, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x39, 0x45, 0x33, 0x33, 0x44, 0x35, 0x34, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x22, 0x86, 0x01, 0x0a, 0x19, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0xcc, 0x01, 0x0a, 0x1d, 0x54,
	0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x8c, 0x02, 0x0a, 0x1c, 0x54, 0x4c,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2f,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x27, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xc5, 0x01, 0x0a, 0x24, 0x54, 0x4c, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x65, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x62,
	0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x62, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x66, 0x6f, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c,
	0x22, 0xf9, 0x01, 0x0a, 0x16, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x5f, 0x65, 0x64, 0x69, 0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x34, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0d,
	0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x0c,
	0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x22, 0xcd, 0x02, 0x0a,
	0x17, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x67, 0x65, 0x74,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01,
	0x71, 0x12, 0x49, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c,
	0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0c,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x06,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x06, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x12,
	0x15, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xbe, 0x01, 0x0a,
	0x17, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x73, 0x65, 0x74,
	0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x38, 0x0a, 0x0a, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x52, 0x0a, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x22, 0x9c, 0x01,
	0x0a, 0x1f, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x72, 0x65,
	0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc8, 0x01, 0x0a,
	0x21, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x39, 0x42, 0x41, 0x41, 0x39, 0x36,
	0x34, 0x37, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c,
	0x66, 0x6f, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x72, 0x79, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x72, 0x79, 0x6f, 0x6e, 0x65, 0x12,
	0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x22, 0xb8, 0x01, 0x0a, 0x22, 0x54, 0x4c, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x50, 0x72,
	0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x38,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x22, 0x6f, 0x0a, 0x1b, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x5f, 0x67, 0x65, 0x74, 0x4c, 0x65, 0x66, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x22, 0x5e, 0x0a, 0x22, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x46, 0x6f, 0x72, 0x44,
	0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x22, 0xbc, 0x01, 0x0a, 0x1e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x33, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x09, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x22, 0xed, 0x01, 0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x38,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2b, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x52, 0x50, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x22, 0xd4, 0x01, 0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x33, 0x0a, 0x09, 0x67, 0x65,
	0x6f, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x47, 0x65, 0x6f,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x67, 0x65, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x1a, 0x54, 0x4c,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x53, 0x6c, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x5b, 0x0a,
	0x1f, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x67, 0x65, 0x74,
	0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x8b, 0x01, 0x0a, 0x1e, 0x54,
	0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x74, 0x54, 0x6f, 0x47, 0x69, 0x67, 0x61, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0xa7, 0x01, 0x0a, 0x15, 0x54, 0x4c, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x64,
	0x41, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x12,
	0x66, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x50, 0x61, 0x69,
	0x64, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65,
	0x65, 0x72, 0x22, 0xc7, 0x01, 0x0a, 0x24, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x34, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x22, 0xb2, 0x01, 0x0a,
	0x1c, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x6f, 0x67,
	0x67, 0x6c, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x22, 0xb3, 0x01, 0x0a, 0x1d, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x27,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x9f, 0x01, 0x0a, 0x1c, 0x54, 0x4c, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xca, 0x01, 0x0a, 0x1a, 0x54, 0x4c,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x25, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x22, 0x54, 0x4c, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0xad, 0x01, 0x0a, 0x17, 0x54, 0x4c, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x46,
	0x6f, 0x72, 0x75, 0x6d, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x27, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xe6, 0x02, 0x0a, 0x1c, 0x54, 0x4c, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46,
	0x6f, 0x72, 0x75, 0x6d, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x69, 0x63,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x69, 0x63, 0x6f,
	0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x0d, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x65,
	0x6d, 0x6f, 0x6a, 0x69, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x69, 0x63, 0x6f, 0x6e,
	0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x41,
	0x73, 0x22, 0xaa, 0x02, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x5f, 0x67, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x01, 0x71,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x01, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xa3,
	0x01, 0x0a, 0x1e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x67,
	0x65, 0x74, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x42, 0x79, 0x49,
	0x44, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x73, 0x22, 0xe5, 0x02, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3f, 0x0a,
	0x0d, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0b, 0x69, 0x63, 0x6f, 0x6e, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x06, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0xd1, 0x01, 0x0a,
	0x22, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x06, 0x70, 0x69, 0x6e,
	0x6e, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64,
	0x22, 0xa9, 0x01, 0x0a, 0x1e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1c,
	0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0xbd, 0x01, 0x0a,
	0x24, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x72, 0x65, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xb0, 0x01, 0x0a,
	0x1a, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x6f, 0x67,
	0x67, 0x6c, 0x65, 0x41, 0x6e, 0x74, 0x69, 0x53, 0x70, 0x61, 0x6d, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22,
	0xab, 0x01, 0x0a, 0x27, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x6e, 0x74, 0x69, 0x53, 0x70, 0x61, 0x6d, 0x46, 0x61,
	0x6c, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x22, 0xba, 0x01,
	0x0a, 0x24, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x6f,
	0x67, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x27, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xd9, 0x02, 0x0a, 0x17, 0x54,
	0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x44, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x46, 0x4c, 0x41, 0x47,
	0x49, 0x4e, 0x54, 0x33, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x46,
	0x4c, 0x41, 0x47, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x12, 0x4b, 0x0a, 0x13, 0x62, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x11, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x6d,
	0x6f, 0x6a, 0x69, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x49,
	0x4e, 0x54, 0x33, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x22, 0xbb, 0x01, 0x0a, 0x25, 0x54, 0x4c, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x56, 0x69, 0x65,
	0x77, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x41, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x25, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0xc3, 0x01, 0x0a, 0x1d, 0x54, 0x4c,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x37, 0x0a, 0x0c, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0b, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0xaf, 0x01, 0x0a, 0x2a, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f,
	0x73, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x54, 0x6f, 0x55, 0x6e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f, 0x6f,
	0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x62, 0x6f, 0x6f, 0x73, 0x74,
	0x73, 0x22, 0xc3, 0x01, 0x0a, 0x1c, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x5f, 0x73, 0x65, 0x74, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x38, 0x0a,
	0x0a, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x0a, 0x73, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x22, 0xc1, 0x01, 0x0a, 0x25, 0x54, 0x4c, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2d, 0x0a, 0x0a,
	0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52,
	0x0a, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x22, 0xf6, 0x01, 0x0a, 0x17,
	0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x68, 0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x0b,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x50, 0x65, 0x65,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0xc9, 0x01, 0x0a, 0x23, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x70, 0x61, 0x69, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x73, 0x65, 0x6e, 0x64, 0x50,
	0x61, 0x69, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x53, 0x74, 0x61, 0x72, 0x73,
	0x22, 0xa5, 0x01, 0x0a, 0x19, 0x54, 0x4c, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e,
	0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x29, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4a, 0x53, 0x4f, 0x4e,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x1e, 0x54, 0x4c, 0x5f,
	0x62, 0x6f, 0x74, 0x73, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x57, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x4a, 0x53, 0x4f, 0x4e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4a, 0x53, 0x4f,
	0x4e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd0, 0x01, 0x0a, 0x16, 0x54, 0x4c, 0x5f, 0x62,
	0x6f, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x18, 0x54,
	0x4c, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x9f,
	0x01, 0x0a, 0x16, 0x54, 0x4c, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x42, 0x6f,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0xb1, 0x01, 0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x74,
	0x42, 0x6f, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x6f, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x06, 0x62, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x22, 0x81, 0x01, 0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x62, 0x6f, 0x74, 0x73,
	0x5f, 0x67, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x42, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa2, 0x01, 0x0a, 0x29, 0x54, 0x4c, 0x5f,
	0x62, 0x6f, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x3b, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x68, 0x61, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x52, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x22, 0x9e, 0x01,
	0x0a, 0x25, 0x54, 0x4c, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x42, 0x6f, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x3b, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x52, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x22, 0xb7,
	0x02, 0x0a, 0x12, 0x54, 0x4c, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x42, 0x6f,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x24, 0x0a, 0x03, 0x62, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x03, 0x62, 0x6f, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x99, 0x01, 0x0a, 0x1a, 0x54, 0x4c, 0x5f,
	0x62, 0x6f, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x44,
	0x43, 0x44, 0x39, 0x31, 0x34, 0x46, 0x44, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x24, 0x0a, 0x03, 0x62, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x03, 0x62, 0x6f, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x62, 0x6f, 0x74, 0x73,
	0x5f, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x03, 0x62,
	0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x03, 0x62, 0x6f,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xbb, 0x01, 0x0a, 0x16, 0x54, 0x4c, 0x5f, 0x62,
	0x6f, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x03,
	0x62, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x03, 0x62,
	0x6f, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x78, 0x0a, 0x16, 0x54, 0x4c, 0x5f, 0x62, 0x6f, 0x74, 0x73,
	0x5f, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x03, 0x62, 0x6f, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x03, 0x62, 0x6f, 0x74, 0x22,
	0x7a, 0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x03, 0x62, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x03, 0x62, 0x6f, 0x74, 0x22, 0xd3, 0x01, 0x0a, 0x21,
	0x54, 0x4c, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x57, 0x65,
	0x62, 0x56, 0x69, 0x65, 0x77, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x03, 0x62,
	0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x03, 0x62, 0x6f,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x29, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x4a, 0x53, 0x4f, 0x4e, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x22, 0x83, 0x01, 0x0a, 0x19, 0x54, 0x4c, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x67, 0x65,
	0x74, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x41, 0x70, 0x70, 0x42, 0x6f, 0x74, 0x73, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xc1, 0x01, 0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x62,
	0x6f, 0x74, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x0a,
	0x03, 0x62, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x03,
	0x62, 0x6f, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x29, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x22, 0xf4, 0x01, 0x0a, 0x18,
	0x54, 0x4c, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x24, 0x0a, 0x03, 0x62, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x03, 0x62, 0x6f, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x12, 0x30, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x22, 0xc4, 0x01, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x03, 0x62,
	0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x03, 0x62, 0x6f,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x29,
	0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x22, 0xc6, 0x01, 0x0a, 0x1c, 0x54, 0x4c,
	0x5f, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x03, 0x62, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x03, 0x62, 0x6f, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x22, 0x95, 0x01, 0x0a, 0x16, 0x54, 0x4c, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x67,
	0x65, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x03, 0x62, 0x6f, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x03, 0x62, 0x6f, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x7a, 0x0a, 0x18, 0x54, 0x4c,
	0x5f, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x24, 0x0a, 0x03, 0x62, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x03, 0x62, 0x6f, 0x74, 0x22, 0xbf, 0x01, 0x0a, 0x1d, 0x54, 0x4c, 0x5f, 0x62, 0x6f,
	0x74, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x6f,
	0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x37, 0x0a, 0x0c, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x65, 0x6d, 0x6f,
	0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb2, 0x01, 0x0a, 0x27, 0x54, 0x4c, 0x5f,
	0x62, 0x6f, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x45,
	0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x24,
	0x0a, 0x03, 0x62, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x03, 0x62, 0x6f, 0x74, 0x12, 0x27, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xb0, 0x01,
	0x0a, 0x1f, 0x54, 0x4c, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x03, 0x62,
	0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x03, 0x62, 0x6f,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x22, 0x52, 0x0a, 0x16, 0x54, 0x4c, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x42, 0x6f, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x22, 0xf5, 0x01, 0x0a, 0x1c, 0x54, 0x4c, 0x5f, 0x62, 0x6f, 0x74, 0x73,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x52, 0x65, 0x66, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x24, 0x0a, 0x03, 0x62, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x03, 0x62, 0x6f, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x6c, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x22, 0x8e, 0x02, 0x0a,
	0x1d, 0x54, 0x4c, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x24, 0x0a, 0x03, 0x62, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x03, 0x62, 0x6f, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72,
	0x12, 0x4b, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7f, 0x0a,
	0x1d, 0x54, 0x4c, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x03, 0x62, 0x6f, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x03, 0x62, 0x6f, 0x74, 0x22, 0xfc,
	0x01, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67,
	0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52,
	0x07, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x74, 0x68, 0x65, 0x6d,
	0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4a, 0x53, 0x4f,
	0x4e, 0x52, 0x0b, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x26,
	0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x98, 0x01,
	0x0a, 0x1d, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65,
	0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65,
	0x72, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x94, 0x02, 0x0a, 0x21, 0x54, 0x4c, 0x5f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x76, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x61, 0x76, 0x65, 0x12, 0x2f, 0x0a, 0x07,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x31, 0x0a,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65,
	0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x22,
	0xf6, 0x03, 0x0a, 0x1b, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x73, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x49, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x12, 0x4a, 0x0a,
	0x12, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x3a, 0x0a,
	0x0a, 0x74, 0x69, 0x70, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09,
	0x74, 0x69, 0x70, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65,
	0x72, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x54, 0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x8c,
	0x01, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63,
	0x6c, 0x65, 0x61, 0x72, 0x53, 0x61, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x6f, 0x0a,
	0x1b, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74,
	0x42, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xbc,
	0x01, 0x0a, 0x19, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x12, 0x2b, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xf9, 0x01,
	0x0a, 0x25, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x70,
	0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x52,
	0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xf4, 0x01, 0x0a, 0x27, 0x54, 0x4c,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x50, 0x6c, 0x61, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x2b, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4a,
	0x53, 0x4f, 0x4e, 0x52, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x3b, 0x0a, 0x07,
	0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65,
	0x52, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x94, 0x01, 0x0a, 0x25, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x67, 0x65, 0x74, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x47, 0x69, 0x66, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x65,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x09, 0x62, 0x6f,
	0x6f, 0x73, 0x74, 0x50, 0x65, 0x65, 0x72, 0x22, 0x69, 0x0a, 0x19, 0x54, 0x4c, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x47, 0x69, 0x66, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c,
	0x75, 0x67, 0x22, 0x69, 0x0a, 0x19, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x47, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x22, 0x96, 0x01,
	0x0a, 0x1b, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65,
	0x74, 0x47, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12,
	0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x22, 0xe3, 0x01, 0x0a, 0x21, 0x54, 0x4c, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x69, 0x64, 0x47, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x67, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x67, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79, 0x49, 0x64, 0x12,
	0x3b, 0x0a, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x72, 0x70,
	0x6f, 0x73, 0x65, 0x52, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x22, 0x5c, 0x0a, 0x20,
	0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x72, 0x73, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x7e, 0x0a, 0x1a, 0x54, 0x4c,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x22, 0xcd, 0x02, 0x0a, 0x20, 0x54,
	0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x6e, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x45, 0x0a,
	0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x9f, 0x01, 0x0a, 0x19, 0x54,
	0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x22, 0xa3, 0x01, 0x0a,
	0x1d, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x38,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x49, 0x64, 0x22, 0x98, 0x01, 0x0a, 0x20, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x73, 0x52, 0x65, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x64, 0x61, 0x72, 0x6b, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x22, 0xde, 0x01,
	0x0a, 0x28, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x73, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x53, 0x52, 0x50, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x8c,
	0x01, 0x0a, 0x28, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x73, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x41, 0x64,
	0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x22, 0xb8, 0x01,
	0x0a, 0x24, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0x79, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65,
	0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x72, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x69, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x1f, 0x54, 0x4c, 0x5f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x72,
	0x73, 0x47, 0x69, 0x66, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0xc6, 0x01, 0x0a, 0x21, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x73, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x04,
	0x70, 0x65, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04,
	0x70, 0x65, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xdb, 0x01, 0x0a,
	0x23, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26,
	0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x29, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x52, 0x08, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x22, 0xb1, 0x01, 0x0a, 0x24, 0x54,
	0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x66, 0x75, 0x6c, 0x66, 0x69,
	0x6c, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a,
	0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x5f,
	0x0a, 0x23, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x73, 0x47, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x22,
	0x68, 0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x47, 0x69, 0x66, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0xe9, 0x01, 0x0a, 0x18, 0x54, 0x4c,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x47, 0x69, 0x66, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x75, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72,
	0x67, 0x69, 0x66, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x72, 0x47, 0x69, 0x66, 0x74, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x67, 0x69, 0x66,
	0x74, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xd4, 0x01, 0x0a, 0x1b, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61,
	0x72, 0x47, 0x69, 0x66, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x37, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x67, 0x69, 0x66, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x47, 0x69, 0x66, 0x74, 0x52, 0x08,
	0x73, 0x74, 0x61, 0x72, 0x67, 0x69, 0x66, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12,
	0x2b, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xe4, 0x02, 0x0a,
	0x26, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x62, 0x6f, 0x74,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x64, 0x53, 0x54, 0x52, 0x49,
	0x4e, 0x47, 0x12, 0x3f, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x6c,
	0x75, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53,
	0x6c, 0x75, 0x67, 0x12, 0x4e, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x5f, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x12, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x64, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x54, 0x52,
	0x49, 0x4e, 0x47, 0x22, 0x9a, 0x02, 0x0a, 0x23, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x72, 0x52, 0x65, 0x66, 0x42, 0x6f, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x3c, 0x0a,
	0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0xac, 0x01, 0x0a, 0x22, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x72, 0x52, 0x65, 0x66, 0x42, 0x6f, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50,
	0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x03, 0x62, 0x6f, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x03, 0x62, 0x6f, 0x74, 0x22,
	0x83, 0x02, 0x0a, 0x23, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72,
	0x52, 0x65, 0x66, 0x42, 0x6f, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x5f, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x79, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65,
	0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xa7, 0x01, 0x0a, 0x1d, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61,
	0x72, 0x52, 0x65, 0x66, 0x42, 0x6f, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50,
	0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x03, 0x62, 0x6f, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x03, 0x62, 0x6f, 0x74, 0x22,
	0xb5, 0x01, 0x0a, 0x23, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x65, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x72, 0x52, 0x65, 0x66, 0x42, 0x6f, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x70,
	0x65, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70,
	0x65, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x7a, 0x0a, 0x25, 0x54, 0x4c, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x47, 0x69,
	0x66, 0x74, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x69,
	0x66, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x69, 0x66,
	0x74, 0x49, 0x64, 0x22, 0xdb, 0x01, 0x0a, 0x1b, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x72, 0x47,
	0x69, 0x66, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a,
	0x15, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x6b, 0x65,
	0x65, 0x70, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x67, 0x69, 0x66, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x47, 0x69, 0x66, 0x74,
	0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x67, 0x69, 0x66, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49,
	0x64, 0x22, 0xa0, 0x02, 0x0a, 0x1c, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x47, 0x69,
	0x66, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x08,
	0x73, 0x74, 0x61, 0x72, 0x67, 0x69, 0x66, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x61,
	0x76, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x47, 0x69, 0x66, 0x74, 0x52, 0x08, 0x73, 0x74, 0x61,
	0x72, 0x67, 0x69, 0x66, 0x74, 0x12, 0x3a, 0x0a, 0x0f, 0x74, 0x6f, 0x5f, 0x69, 0x64, 0x5f, 0x49,
	0x4e, 0x50, 0x55, 0x54, 0x50, 0x45, 0x45, 0x52, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65,
	0x65, 0x72, 0x52, 0x0d, 0x74, 0x6f, 0x49, 0x64, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x50, 0x45, 0x45,
	0x52, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0f, 0x74, 0x6f, 0x5f, 0x69,
	0x64, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x55, 0x53, 0x45, 0x52, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0d, 0x74, 0x6f, 0x49, 0x64, 0x49, 0x4e, 0x50, 0x55, 0x54,
	0x55, 0x53, 0x45, 0x52, 0x22, 0x6d, 0x0a, 0x1d, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x47, 0x69, 0x66, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x6c, 0x75, 0x67, 0x22, 0x9e, 0x03, 0x0a, 0x1d, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72,
	0x47, 0x69, 0x66, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x27, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x75, 0x6e, 0x73, 0x61, 0x76,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x55, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x61, 0x76, 0x65, 0x64, 0x12, 0x2b, 0x0a,
	0x11, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x75, 0x6e, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x55, 0x6e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x75,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x6f,
	0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x26,
	0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0x91, 0x01, 0x0a, 0x1c, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x72, 0x47, 0x69, 0x66, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x37, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x67, 0x69, 0x66, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x47, 0x69, 0x66, 0x74, 0x52, 0x08,
	0x73, 0x74, 0x61, 0x72, 0x67, 0x69, 0x66, 0x74, 0x22, 0xd5, 0x01, 0x0a, 0x24, 0x54, 0x4c, 0x5f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x72,
	0x47, 0x69, 0x66, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x55, 0x72,
	0x6c, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x08, 0x73,
	0x74, 0x61, 0x72, 0x67, 0x69, 0x66, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x61, 0x76,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x47, 0x69, 0x66, 0x74, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72,
	0x67, 0x69, 0x66, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x53, 0x52, 0x50, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x22, 0xa9, 0x01, 0x0a, 0x2b, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x74, 0x53, 0x74, 0x61, 0x72, 0x47,
	0x69, 0x66, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x22, 0xc3, 0x01, 0x0a,
	0x26, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x67,
	0x67, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x47, 0x69, 0x66, 0x74, 0x73, 0x50, 0x69, 0x6e, 0x6e,
	0x65, 0x64, 0x54, 0x6f, 0x54, 0x6f, 0x70, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50,
	0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x74, 0x61,
	0x72, 0x67, 0x69, 0x66, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x72, 0x47, 0x69, 0x66, 0x74, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x67, 0x69,
	0x66, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x1c, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3b, 0x0a,
	0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73,
	0x65, 0x52, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x22, 0xdd, 0x03, 0x0a, 0x1c, 0x54,
	0x4c, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6d, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x6d, 0x6f, 0x6a, 0x69, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6d, 0x6f,
	0x6a, 0x69, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x12, 0x38, 0x0a, 0x08, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x08, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x08,
	0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x6f,
	0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x20, 0x54,
	0x4c, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x74, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x07, 0x73, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x07, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x22, 0xab, 0x01, 0x0a, 0x21,
	0x54, 0x4c, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x07, 0x73,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc9, 0x01, 0x0a, 0x1b, 0x54, 0x4c,
	0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x54, 0x6f, 0x53, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x0a, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x52, 0x0a, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x12, 0x36, 0x0a,
	0x07, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x73, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x22, 0x8b, 0x02, 0x0a, 0x1e, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x38, 0x0a, 0x0a, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x52, 0x0a, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x05,
	0x74, 0x68, 0x75, 0x6d, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x05, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x12, 0x47, 0x0a, 0x11, 0x74, 0x68,
	0x75, 0x6d, 0x62, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6e, 0x0a, 0x1c, 0x54, 0x4c,
	0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0xab, 0x02, 0x0a, 0x19, 0x54,
	0x4c, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x30, 0x0a, 0x07, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x12, 0x34, 0x0a, 0x0b, 0x6d, 0x61, 0x73, 0x6b,
	0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6f, 0x72,
	0x64, 0x73, 0x52, 0x0a, 0x6d, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x38,
	0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x1c, 0x54, 0x4c, 0x5f,
	0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x53,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x0a, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x52, 0x0a, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x1c, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x38,
	0x0a, 0x0a, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x0a, 0x73, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x22, 0xc7, 0x01, 0x0a, 0x1a, 0x54, 0x4c, 0x5f,
	0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x30, 0x0a, 0x07, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x22, 0x52, 0x0a, 0x16, 0x54, 0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x67,
	0x65, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xc4, 0x02, 0x0a, 0x14, 0x54, 0x4c, 0x5f, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x12,
	0x2b, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x67,
	0x5f, 0x61, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x67,
	0x41, 0x48, 0x61, 0x73, 0x68, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0xc5, 0x01,
	0x0a, 0x13, 0x54, 0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x2b, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x0f, 0x0a, 0x03,
	0x67, 0x5f, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x67, 0x42, 0x12, 0x36, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0xef, 0x01, 0x0a, 0x14, 0x54, 0x4c, 0x5f, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x38,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52,
	0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x0f, 0x0a, 0x03, 0x67, 0x5f, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x02, 0x67, 0x41, 0x12, 0x27, 0x0a, 0x0f, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69,
	0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x6b, 0x65, 0x79, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12,
	0x36, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x7e, 0x0a, 0x15, 0x54, 0x4c, 0x5f, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x70, 0x65,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x61, 0x6c,
	0x6c, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x22, 0x8d, 0x02, 0x0a, 0x14, 0x54, 0x4c, 0x5f, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x12, 0x2b, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xda, 0x01, 0x0a, 0x16, 0x54, 0x4c, 0x5f, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x0f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x04, 0x70, 0x65,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0xa8, 0x01, 0x0a, 0x16, 0x54, 0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x65, 0x62, 0x75, 0x67, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x70, 0x65, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x61, 0x6c, 0x6c,
	0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x4a, 0x53, 0x4f, 0x4e, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22,
	0x97, 0x01, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x6e,
	0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52,
	0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb0, 0x02, 0x0a, 0x18, 0x54, 0x4c,
	0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x74, 0x6d, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x74, 0x6d, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50,
	0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x22, 0x97, 0x03, 0x0a,
	0x16, 0x54, 0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x5f, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x04,
	0x63, 0x61, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x61, 0x6c, 0x6c, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x2b, 0x0a, 0x07, 0x6a, 0x6f, 0x69,
	0x6e, 0x5f, 0x61, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x06,
	0x6a, 0x6f, 0x69, 0x6e, 0x41, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x44, 0x0a, 0x0f, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6e,
	0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6b, 0x65, 0x79,
	0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4a, 0x53, 0x4f, 0x4e, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x98, 0x01, 0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x04,
	0x63, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x61, 0x6c, 0x6c, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x22, 0xad, 0x01, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x63, 0x61,
	0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c,
	0x6c, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x28, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x22, 0x82, 0x01, 0x0a, 0x19, 0x54, 0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x64,
	0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x63, 0x61, 0x6c,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c,
	0x52, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x22, 0xe3, 0x01, 0x0a, 0x20, 0x54, 0x4c, 0x5f, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x61, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x2b, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x2c,
	0x0a, 0x0a, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x52, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x22, 0x94, 0x01, 0x0a,
	0x15, 0x54, 0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x2b, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0xf4, 0x01, 0x0a, 0x1d, 0x54, 0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x5f, 0x67, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x2b, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x24, 0x0a, 0x03,
	0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x03, 0x69,
	0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x9a, 0x01, 0x0a, 0x17, 0x54,
	0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x2b, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x9d, 0x02, 0x0a, 0x1e, 0x54, 0x4c, 0x5f, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x12, 0x2b, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x32, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x34, 0x0a, 0x0e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x50,
	0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x22, 0xee, 0x03, 0x0a, 0x21, 0x54, 0x4c, 0x5f, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61,
	0x6c, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x04,
	0x63, 0x61, 0x6c, 0x6c, 0x12, 0x34, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x0b, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x6d, 0x75,
	0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x05, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x12,
	0x33, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0a, 0x72, 0x61, 0x69, 0x73, 0x65, 0x5f, 0x68, 0x61,
	0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x09, 0x72, 0x61, 0x69, 0x73, 0x65, 0x48, 0x61,
	0x6e, 0x64, 0x12, 0x32, 0x0a, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73, 0x74, 0x6f, 0x70,
	0x70, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x53,
	0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f,
	0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x0b, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x12, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x1b, 0x54, 0x4c, 0x5f,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x61, 0x6c, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x7f, 0x0a, 0x1b, 0x54, 0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x67, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x4a, 0x6f,
	0x69, 0x6e, 0x41, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26,
	0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x22, 0xaf, 0x01, 0x0a, 0x1e, 0x54, 0x4c, 0x5f, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x5f,
	0x75, 0x6e, 0x6d, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x61,
	0x6e, 0x53, 0x65, 0x6c, 0x66, 0x55, 0x6e, 0x6d, 0x75, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x63,
	0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61,
	0x6c, 0x6c, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x22, 0xc1, 0x01, 0x0a, 0x29, 0x54, 0x4c, 0x5f,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x2b, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x2d, 0x0a,
	0x0a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x52, 0x0a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x22, 0x89, 0x01, 0x0a,
	0x20, 0x54, 0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x63,
	0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61,
	0x6c, 0x6c, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x22, 0xb4, 0x01, 0x0a, 0x23, 0x54, 0x4c, 0x5f,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x4a, 0x6f, 0x69, 0x6e, 0x41, 0x73,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65,
	0x65, 0x72, 0x12, 0x2b, 0x0a, 0x07, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x61, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x06, 0x6a, 0x6f, 0x69, 0x6e, 0x41, 0x73, 0x22,
	0xb6, 0x01, 0x0a, 0x22, 0x54, 0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6a, 0x6f, 0x69,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x2b, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x29, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4a, 0x53, 0x4f, 0x4e,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x23, 0x54, 0x4c, 0x5f,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x63, 0x61,
	0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c,
	0x6c, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x22, 0x8c, 0x01, 0x0a, 0x23, 0x54, 0x4c, 0x5f, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c,
	0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x63, 0x61, 0x6c,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c,
	0x52, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x22, 0xad, 0x01, 0x0a, 0x22, 0x54, 0x4c, 0x5f, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x74, 0x6d, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12,
	0x25, 0x0a, 0x06, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x06,
	0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x14, 0x54, 0x4c, 0x5f, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x70, 0x65, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x61, 0x6c, 0x6c,
	0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xaf,
	0x01, 0x0a, 0x1d, 0x54, 0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x70, 0x65,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x61, 0x6c,
	0x6c, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x6b, 0x65, 0x79, 0x5f, 0x66,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x6b, 0x65, 0x79, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x22, 0x8d, 0x01, 0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b,
	0x5f, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x50,
	0x61, 0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0xa0, 0x01, 0x0a, 0x16, 0x54, 0x4c, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b,
	0x5f, 0x67, 0x65, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x50, 0x61,
	0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b,
	0x65, 0x79, 0x73, 0x22, 0xb2, 0x01, 0x0a, 0x19, 0x54, 0x4c, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x70,
	0x61, 0x63, 0x6b, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x61, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x72, 0x6f,
	0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x71, 0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x6c,
	0x61, 0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x22, 0x8d, 0x01, 0x0a, 0x17,
	0x54, 0x4c, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x67, 0x65, 0x74, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x12, 0x1b,
	0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x1a,
	0x54, 0x4c, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x50,
	0x65, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x0c, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x70,
	0x65, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x50, 0x65, 0x65, 0x72, 0x52, 0x0b, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72,
	0x73, 0x22, 0x9b, 0x01, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x67,
	0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x61, 0x72, 0x6b, 0x12, 0x2f,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22,
	0x94, 0x01, 0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6c, 0x6f, 0x61,
	0x64, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x29, 0x0a, 0x01, 0x78,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x01, 0x78, 0x22, 0x9b, 0x01, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x67, 0x61, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64,
	0x61, 0x72, 0x6b, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x22, 0xdb, 0x01, 0x0a, 0x29, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x35, 0x46, 0x31, 0x35, 0x30, 0x31,
	0x34, 0x34, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x15, 0x0a,
	0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d,
	0x73, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0xb0, 0x01, 0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x72,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x61, 0x72, 0x6b, 0x12, 0x2f, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x15,
	0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x9e, 0x01, 0x0a, 0x16, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x61, 0x72, 0x6b, 0x12, 0x26,
	0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc1, 0x01, 0x0a, 0x1f, 0x54, 0x4c, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xca, 0x01, 0x0a, 0x21, 0x54,
	0x4c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x61, 0x72, 0x6b, 0x12, 0x26,
	0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0xfa, 0x01, 0x0a, 0x29, 0x54, 0x4c, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65,
	0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x52, 0x50, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x22, 0xeb, 0x01, 0x0a, 0x28, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x5f, 0x67, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70,
	0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70,
	0x65, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x22, 0xd1, 0x01, 0x0a, 0x21, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x6c, 0x69,
	0x73, 0x74, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x61, 0x74, 0x6c, 0x69,
	0x73, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x32, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x63, 0x68,
	0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x05,
	0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x21, 0x54, 0x4c, 0x5f, 0x63, 0x68,
	0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x74, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74,
	0x52, 0x08, 0x63, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c,
	0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x22, 0x81,
	0x02, 0x0a, 0x1f, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x5f,
	0x65, 0x64, 0x69, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x08,
	0x63, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68,
	0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x63, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x73, 0x6c, 0x75, 0x67, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x05, 0x70, 0x65, 0x65,
	0x72, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x1f, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x6c, 0x69,
	0x73, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x32, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x43, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x63, 0x68, 0x61, 0x74,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0x70, 0x0a, 0x20, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x6c,
	0x69, 0x73, 0x74, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x74, 0x6c, 0x69,
	0x73, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x22, 0x99, 0x01, 0x0a, 0x1f, 0x54, 0x4c, 0x5f, 0x63, 0x68,
	0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x74,
	0x6c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x28, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x05, 0x70, 0x65, 0x65,
	0x72, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x1f, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x6c, 0x69,
	0x73, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x32, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x43, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x63, 0x68, 0x61, 0x74,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0xba, 0x01, 0x0a, 0x20, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74,
	0x6c, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x6c, 0x69,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x63,
	0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72,
	0x73, 0x22, 0x90, 0x01, 0x0a, 0x20, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73,
	0x74, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x43, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x32, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x43, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x63, 0x68, 0x61, 0x74,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0x98, 0x01, 0x0a, 0x28, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74,
	0x6c, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x08, 0x63,
	0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61,
	0x74, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x63, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0xb4, 0x01, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x73,
	0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x38,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x74,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x74, 0x6c, 0x69,
	0x73, 0x74, 0x52, 0x08, 0x63, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x05,
	0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x22, 0x7b, 0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70,
	0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70,
	0x65, 0x65, 0x72, 0x22, 0xa8, 0x05, 0x0a, 0x14, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x6e, 0x6f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x6e, 0x6f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x66, 0x77, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x77, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50,
	0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x05, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x05, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x12, 0x33, 0x0a, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61, 0x72,
	0x65, 0x61, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x41, 0x72, 0x65, 0x61, 0x52, 0x0a, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x41, 0x72, 0x65, 0x61, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x61, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x32, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x49, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x32, 0x0a, 0x0b, 0x66, 0x77, 0x64, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x09, 0x66, 0x77, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x66,
	0x77, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0c, 0x66, 0x77, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x94,
	0x03, 0x0a, 0x14, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x65, 0x64,
	0x69, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50,
	0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x05, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x12, 0x33, 0x0a, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61, 0x72,
	0x65, 0x61, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x41, 0x72, 0x65, 0x61, 0x52, 0x0a, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x41, 0x72, 0x65, 0x61, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x61, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x32, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04,
	0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04,
	0x70, 0x65, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x22, 0xb2, 0x01, 0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x25, 0x0a, 0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x52, 0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x22, 0xb4, 0x01, 0x0a, 0x18, 0x54, 0x4c,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x6e, 0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x32, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x22, 0xdf, 0x01, 0x0a, 0x1b, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65,
	0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0xb3, 0x01, 0x0a, 0x1c, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a,
	0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xba, 0x01, 0x0a, 0x19, 0x54, 0x4c, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x42, 0x79, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65,
	0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x21, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x53, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0xbe, 0x01, 0x0a,
	0x16, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64,
	0x53, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50,
	0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x78,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x49, 0x64,
	0x12, 0x2b, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xbf, 0x01,
	0x0a, 0x1e, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x56, 0x69, 0x65, 0x77, 0x73,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x2b, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x9d, 0x03, 0x0a, 0x1c, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x67,
	0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x56, 0x69, 0x65, 0x77, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6a, 0x75,
	0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x6a, 0x75, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x12,
	0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65,
	0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x01, 0x71, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x01, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22,
	0x8e, 0x01, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x67,
	0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x56, 0x69, 0x65, 0x77, 0x73, 0x12, 0x38,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x22, 0xbb, 0x01, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x2b, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xbf,
	0x01, 0x0a, 0x19, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x31, 0x39, 0x44, 0x38, 0x45, 0x42, 0x34, 0x35, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x86, 0x01, 0x0a, 0x1e, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x74, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x70, 0x61, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x22, 0x96, 0x02, 0x0a, 0x17, 0x54, 0x4c,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x22, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x7d, 0x0a, 0x19, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x5f, 0x67, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65,
	0x72, 0x22, 0x5c, 0x0a, 0x20, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x22,
	0x78, 0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x67, 0x65,
	0x74, 0x50, 0x65, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x49, 0x44, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x02, 0x69, 0x64, 0x22, 0x55, 0x0a, 0x19, 0x54, 0x4c, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x73,
	0x54, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x22, 0xad, 0x01, 0x0a, 0x22, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f,
	0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50,
	0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x06, 0x68, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x22, 0xb6, 0x02, 0x0a, 0x20, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x25, 0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d,
	0x0a, 0x08, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x90, 0x01, 0x0a, 0x1c, 0x54, 0x4c,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x50,
	0x69, 0x6e, 0x6e, 0x65, 0x64, 0x54, 0x6f, 0x54, 0x6f, 0x70, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x88, 0x02, 0x0a,
	0x16, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x36, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x68, 0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x12, 0x26, 0x0a, 0x04, 0x61, 0x72, 0x65,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x41, 0x72, 0x65, 0x61, 0x52, 0x04, 0x61, 0x72, 0x65,
	0x61, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50,
	0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xc0, 0x01, 0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x70,
	0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x5f, 0x67, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x67, 0x69, 0x66, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x67,
	0x69, 0x66, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x52, 0x0a, 0x16, 0x54, 0x4c,
	0x5f, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x79, 0x42, 0x6f,
	0x6f, 0x73, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x8f,
	0x01, 0x0a, 0x15, 0x54, 0x4c, 0x5f, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x5f, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72,
	0x22, 0x7e, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x5f, 0x67,
	0x65, 0x74, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72,
	0x22, 0xa9, 0x01, 0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x5f,
	0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12,
	0x2b, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x1b,
	0x54, 0x4c, 0x5f, 0x73, 0x6d, 0x73, 0x6a, 0x6f, 0x62, 0x73, 0x5f, 0x69, 0x73, 0x45, 0x6c, 0x69,
	0x67, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x4b, 0x0a, 0x0f, 0x54, 0x4c, 0x5f, 0x73, 0x6d, 0x73, 0x6a,
	0x6f, 0x62, 0x73, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x22, 0x4c, 0x0a, 0x10, 0x54, 0x4c, 0x5f, 0x73, 0x6d, 0x73, 0x6a, 0x6f, 0x62, 0x73,
	0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x22, 0x86, 0x01, 0x0a, 0x19, 0x54, 0x4c, 0x5f, 0x73, 0x6d, 0x73, 0x6a, 0x6f, 0x62, 0x73, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x38,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x50, 0x0a, 0x14, 0x54, 0x4c, 0x5f,
	0x73, 0x6d, 0x73, 0x6a, 0x6f, 0x62, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x67, 0x0a, 0x14, 0x54,
	0x4c, 0x5f, 0x73, 0x6d, 0x73, 0x6a, 0x6f, 0x62, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x6d, 0x73,
	0x4a, 0x6f, 0x62, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x15, 0x0a,
	0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a,
	0x6f, 0x62, 0x49, 0x64, 0x22, 0x9b, 0x01, 0x0a, 0x14, 0x54, 0x4c, 0x5f, 0x73, 0x6d, 0x73, 0x6a,
	0x6f, 0x62, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4a, 0x6f, 0x62, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x32,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x97, 0x01, 0x0a, 0x1e, 0x54, 0x4c, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x62, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x3b, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x52,
	0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x22, 0x97, 0x01, 0x0a,
	0x1e, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x61, 0x6e,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x07, 0x70, 0x75, 0x72,
	0x70, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x52, 0x07, 0x70,
	0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x26, 0x54, 0x4c, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x49, 0x73, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x02, 0x69, 0x64, 0x22,
	0xb3, 0x01, 0x0a, 0x1c, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x47, 0x69, 0x66, 0x74, 0x73,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x6e, 0x0a, 0x1b, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72,
	0x47, 0x69, 0x66, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x15,
	0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05,
	0x6d, 0x73, 0x67, 0x49, 0x64, 0x22, 0xaf, 0x01, 0x0a, 0x25, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x57, 0x65, 0x62, 0x50, 0x61, 0x67, 0x65,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x38, 0x42, 0x36, 0x38, 0x42, 0x30, 0x43, 0x43, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0xaa, 0x01, 0x0a, 0x20, 0x54, 0x4c, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x53, 0x70, 0x6f, 0x6e,
	0x73, 0x6f, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x20, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x22, 0xe1, 0x01, 0x0a, 0x21, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f,
	0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x75,
	0x6c, 0x6c, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x66, 0x75, 0x6c, 0x6c, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x22, 0xc4, 0x01, 0x0a, 0x22, 0x54, 0x4c, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xd7, 0x01, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x38, 0x39, 0x35, 0x33, 0x41, 0x42, 0x34, 0x45, 0x12, 0x38,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2d, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xd6, 0x01, 0x0a, 0x19, 0x54, 0x4c,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x31,
	0x39, 0x32, 0x33, 0x46, 0x41, 0x38, 0x43, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50,
	0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0xa1, 0x03, 0x0a, 0x28, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x57, 0x65, 0x62, 0x56, 0x69, 0x65, 0x77, 0x31, 0x41, 0x34, 0x36, 0x35, 0x30, 0x30, 0x41, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x77, 0x65, 0x62, 0x76, 0x69, 0x65, 0x77,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x57, 0x65, 0x62, 0x76, 0x69, 0x65, 0x77, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x69, 0x64, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x12,
	0x24, 0x0a, 0x03, 0x62, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x03, 0x62, 0x6f, 0x74, 0x12, 0x2e, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x34, 0x0a, 0x0c, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4a, 0x53, 0x4f, 0x4e, 0x52, 0x0b, 0x74,
	0x68, 0x65, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0xe7, 0x02, 0x0a, 0x25, 0x54, 0x4c, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x70,
	0x70, 0x57, 0x65, 0x62, 0x56, 0x69, 0x65, 0x77, 0x38, 0x43, 0x35, 0x41, 0x33, 0x42, 0x33, 0x43,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x77, 0x72, 0x69, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12,
	0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65,
	0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x42, 0x6f, 0x74, 0x41, 0x70, 0x70, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12,
	0x3d, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x34,
	0x0a, 0x0c, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x4a, 0x53, 0x4f, 0x4e, 0x52, 0x0b, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x22, 0xbe, 0x01, 0x0a, 0x1f, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x61, 0x64, 0x64, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x32, 0x34, 0x37,
	0x35, 0x33, 0x45, 0x33, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x77, 0x64, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x77, 0x64, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0xd4, 0x01, 0x0a, 0x1c, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x33, 0x34, 0x41, 0x38,
	0x31, 0x38, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x05,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x0a,
	0x74, 0x74, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x74,
	0x74, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0xba, 0x01, 0x0a, 0x23, 0x54, 0x4c, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54,
	0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x31, 0x39, 0x39, 0x46, 0x33, 0x41, 0x36, 0x43,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x05, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x60, 0x0a, 0x24, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x46, 0x31, 0x39, 0x45, 0x44, 0x39, 0x36, 0x44, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x7d, 0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x68, 0x65,
	0x6c, 0x70, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c,
	0x6f, 0x67, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x10,
	0x70, 0x72, 0x65, 0x76, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x41, 0x70, 0x70, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xb6, 0x02, 0x0a, 0x29, 0x54, 0x4c, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x35, 0x36, 0x33, 0x30,
	0x32, 0x38, 0x31, 0x42, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22,
	0x7e, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x67, 0x65,
	0x74, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x22,
	0xac, 0x01, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x67,
	0x65, 0x74, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x7c,
	0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x63, 0x61, 0x6e,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x22, 0x79, 0x0a, 0x15,
	0x54, 0x4c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x42, 0x6f, 0x6f, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65,
	0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x22, 0x80, 0x01, 0x0a, 0x1e, 0x54, 0x4c, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x57, 0x65, 0x62, 0x50, 0x61,
	0x67, 0x65, 0x33, 0x32, 0x43, 0x41, 0x38, 0x46, 0x39, 0x31, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x79, 0x0a, 0x19, 0x54, 0x4c,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x4d, 0x61, 0x78, 0x49, 0x44, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x22, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa6, 0x01, 0x0a, 0x1f, 0x54, 0x4c, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0x82,
	0x01, 0x0a, 0x19, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x67, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x5c, 0x0a, 0x20, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x22, 0xdb, 0x01, 0x0a, 0x19, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x39, 0x35, 0x42, 0x45, 0x30, 0x36, 0x41, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x9e, 0x02, 0x0a, 0x28, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x57, 0x65, 0x62,
	0x56, 0x69, 0x65, 0x77, 0x32, 0x39, 0x39, 0x42, 0x45, 0x43, 0x38, 0x45, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x77, 0x65, 0x62, 0x76, 0x69, 0x65, 0x77, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x57,
	0x65, 0x62, 0x76, 0x69, 0x65, 0x77, 0x12, 0x24, 0x0a, 0x03, 0x62, 0x6f, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x03, 0x62, 0x6f, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x34,
	0x0a, 0x0c, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x4a, 0x53, 0x4f, 0x4e, 0x52, 0x0b, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x22, 0x72, 0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70,
	0x74, 0x49, 0x64, 0x73, 0x22, 0x73, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x37, 0x35, 0x45, 0x43, 0x31, 0x32,
	0x45, 0x36, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09,
	0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x70, 0x0a, 0x17, 0x54, 0x4c, 0x5f,
	0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa9, 0x01, 0x0a, 0x2e,
	0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x32, 0x43, 0x36, 0x46, 0x39, 0x37, 0x42, 0x37, 0x12, 0x38,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72,
	0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x1c, 0x54, 0x4c, 0x5f, 0x68, 0x65,
	0x6c, 0x70, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x39,
	0x38, 0x39, 0x31, 0x34, 0x31, 0x31, 0x30, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x22, 0x99, 0x01, 0x0a, 0x1d, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x39, 0x43, 0x42, 0x31,
	0x32, 0x36, 0x45, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x0a,
	0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x84, 0x01,
	0x0a, 0x1e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x45, 0x43, 0x42, 0x41, 0x33, 0x39, 0x44, 0x42,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0xd2, 0x01, 0x0a, 0x28, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x57, 0x65, 0x62, 0x56, 0x69, 0x65, 0x77, 0x36, 0x41, 0x42, 0x42, 0x32, 0x46, 0x37,
	0x33, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x03, 0x62,
	0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x03, 0x62, 0x6f,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x34, 0x0a, 0x0c, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4a, 0x53, 0x4f, 0x4e, 0x52, 0x0b, 0x74, 0x68,
	0x65, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xfa, 0x01, 0x0a, 0x23, 0x54, 0x4c,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x75,
	0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x69, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0d,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x22, 0x7a, 0x0a, 0x24, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x38,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x22, 0xa5, 0x01, 0x0a, 0x21, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x41, 0x46, 0x33, 0x36, 0x39, 0x44, 0x34, 0x32, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x0c, 0x54, 0x4c,
	0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x22, 0xd6, 0x02, 0x0a, 0x22, 0x54, 0x4c, 0x5f, 0x70, 0x72, 0x65, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0x94, 0x01,
	0x0a, 0x26, 0x54, 0x4c, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa3, 0x02, 0x0a, 0x25, 0x54, 0x4c, 0x5f, 0x70, 0x72, 0x65, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x38,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x3b,
	0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6c, 0x61,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x22, 0x94, 0x01, 0x0a, 0x26, 0x54,
	0x4c, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x22, 0x88, 0x01, 0x0a, 0x22, 0x54, 0x4c, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x71, 0x0a, 0x1f,
	0x54, 0x4c, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x67, 0x65,
	0x74, 0x50, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x22,
	0x5c, 0x0a, 0x20, 0x54, 0x4c, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x5f, 0x67, 0x65, 0x74, 0x50, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x70, 0x0a,
	0x0e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x81, 0x01, 0x0a, 0x19, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x22, 0xf0, 0x01, 0x0a, 0x11, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x42, 0x61, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x65,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x70,
	0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x83, 0x01, 0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x62, 0x69,
	0x7a, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x42, 0x69, 0x7a, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x61, 0x77, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x08,
	0x62, 0x69, 0x7a, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x69, 0x7a, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x61, 0x77, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x44, 0x61, 0x74, 0x61, 0x22, 0x40, 0x0a, 0x12,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x3c,
	0x0a, 0x10, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x57, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x70,
	0x65, 0x72, 0x12, 0x28, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x61, 0x6c, 0x6c,
	0x50, 0x61, 0x70, 0x65, 0x72, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x32, 0x0a, 0x0b,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x05, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x22, 0x52, 0x0a, 0x1b, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12,
	0x33, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x05, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x22, 0x22, 0x0a, 0x0a, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x49,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x44, 0x0a, 0x14, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2c, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x42,
	0x0a, 0x13, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x53, 0x61, 0x76, 0x65, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x2b, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x61, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x05, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x22, 0x54, 0x0a, 0x1c, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x23, 0x0a, 0x0b, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x4c, 0x0a,
	0x18, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x76,
	0x65, 0x72, 0x65, 0x64, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x42, 0x0a, 0x13, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22,
	0x3e, 0x0a, 0x11, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x50, 0x65, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x50, 0x65, 0x65, 0x72, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22,
	0x44, 0x0a, 0x14, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x05,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x56, 0x0a, 0x1d, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x54, 0x0a,
	0x1c, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a,
	0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x05, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x22, 0x50, 0x0a, 0x1a, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x52, 0x65,
	0x61, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x32, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x3a, 0x0a, 0x0f, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x22, 0x3c, 0x0a, 0x10, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x46, 0x61, 0x63, 0x74,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x28, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x61, 0x63, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22,
	0x3a, 0x0a, 0x0f, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x27, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x3e, 0x0a, 0x11, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x42, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x29, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x48, 0x0a, 0x16, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x42, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x2e, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x6f, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x05,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x54, 0x0a, 0x1c, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x47, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x47, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x4a, 0x0a, 0x17, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x73, 0x54, 0x6f, 0x70, 0x75, 0x70,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x73, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x48, 0x0a, 0x16, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x73, 0x47, 0x69, 0x66, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2e, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x73,
	0x47, 0x69, 0x66, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x22, 0x50, 0x0a, 0x1a, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x53, 0x74, 0x61, 0x72,
	0x73, 0x47, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x32, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x73, 0x47, 0x69,
	0x76, 0x65, 0x61, 0x77, 0x61, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x22, 0x46, 0x0a, 0x15, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x4c, 0x61,
	0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x0a, 0x05,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x4a, 0x0a, 0x17, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x4c, 0x61, 0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4c, 0x61, 0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x32, 0x0a, 0x0b, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x50, 0x65, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x65, 0x65, 0x72, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x32, 0x0a, 0x0b, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22,
	0x42, 0x0a, 0x13, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x05, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x22, 0x25, 0x0a, 0x0d, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x46, 0x0a, 0x15, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x50, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x65,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x32, 0xc6, 0x03, 0x0a, 0x0f, 0x52, 0x50, 0x43, 0x41, 0x63, 0x63, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x47, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1f, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x1a, 0x0d,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12,
	0x6a, 0x0a, 0x22, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x45,
	0x6d, 0x6f, 0x6a, 0x69, 0x73, 0x12, 0x2e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x45,
	0x6d, 0x6f, 0x6a, 0x69, 0x73, 0x1a, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x12, 0x68,
	0x65, 0x6c, 0x70, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x73, 0x12, 0x1e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x68,
	0x65, 0x6c, 0x70, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x73, 0x1a, 0x18, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x68, 0x65, 0x6c, 0x70,
	0x5f, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x22, 0x00, 0x12, 0x5e, 0x0a,
	0x19, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x25, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x67, 0x65, 0x74,
	0x50, 0x65, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x73, 0x1a, 0x18, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x68, 0x65, 0x6c, 0x70,
	0x5f, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x22, 0x00, 0x12, 0x4c, 0x0a,
	0x14, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x32, 0xae, 0x05, 0x0a, 0x0a,
	0x52, 0x50, 0x43, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x15, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x21, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x15, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x54, 0x4c,
	0x12, 0x21, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x54, 0x4c, 0x1a, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x79, 0x73, 0x54, 0x54, 0x4c, 0x22, 0x00, 0x12, 0x4b,
	0x0a, 0x15, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x54, 0x4c, 0x12, 0x21, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x54, 0x4c, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x1b, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x73, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x1a, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x53, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a,
	0x13, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x1a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0d, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x62, 0x0a,
	0x1c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x1a, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x53, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x00, 0x12, 0x49, 0x0a, 0x14, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x32, 0xd3, 0x05, 0x0a,
	0x14, 0x52, 0x50, 0x43, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x5d, 0x0a, 0x19, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x52, 0x65, 0x66, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x12, 0x25, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x62, 0x6f, 0x74, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x52,
	0x65, 0x66, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x1a, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x52, 0x65, 0x66, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x20, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x72, 0x52, 0x65, 0x66, 0x42, 0x6f, 0x74, 0x73, 0x12, 0x2c, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x52,
	0x65, 0x66, 0x42, 0x6f, 0x74, 0x73, 0x1a, 0x26, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x52, 0x65, 0x66, 0x42, 0x6f, 0x74, 0x73, 0x22, 0x00,
	0x12, 0x78, 0x0a, 0x1f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x52, 0x65, 0x66,
	0x42, 0x6f, 0x74, 0x12, 0x2b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x52, 0x65, 0x66, 0x42, 0x6f, 0x74,
	0x1a, 0x26, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x72, 0x52, 0x65, 0x66, 0x42, 0x6f, 0x74, 0x73, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x20, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x52, 0x65, 0x66, 0x42, 0x6f, 0x74, 0x73, 0x12, 0x2c,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x72, 0x52, 0x65, 0x66, 0x42, 0x6f, 0x74, 0x73, 0x1a, 0x26, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x52, 0x65, 0x66,
	0x42, 0x6f, 0x74, 0x73, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x1a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x72, 0x52, 0x65,
	0x66, 0x42, 0x6f, 0x74, 0x12, 0x26, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x53, 0x74, 0x61, 0x72, 0x52, 0x65, 0x66, 0x42, 0x6f, 0x74, 0x1a, 0x26, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x52, 0x65, 0x66,
	0x42, 0x6f, 0x74, 0x73, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x20, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x72, 0x52, 0x65, 0x66, 0x42, 0x6f, 0x74, 0x12, 0x2c, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x65, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x72, 0x52, 0x65, 0x66, 0x42, 0x6f, 0x74, 0x1a, 0x26, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x52, 0x65, 0x66, 0x42, 0x6f, 0x74, 0x73,
	0x22, 0x00, 0x32, 0xcc, 0x01, 0x0a, 0x0b, 0x52, 0x50, 0x43, 0x41, 0x6e, 0x74, 0x69, 0x53, 0x70,
	0x61, 0x6d, 0x12, 0x52, 0x0a, 0x17, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x74,
	0x6f, 0x67, 0x67, 0x6c, 0x65, 0x41, 0x6e, 0x74, 0x69, 0x53, 0x70, 0x61, 0x6d, 0x12, 0x23, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x41, 0x6e, 0x74, 0x69, 0x53, 0x70,
	0x61, 0x6d, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x24, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x6e, 0x74, 0x69, 0x53, 0x70, 0x61,
	0x6d, 0x46, 0x61, 0x6c, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x30,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x6e, 0x74, 0x69, 0x53,
	0x70, 0x61, 0x6d, 0x46, 0x61, 0x6c, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22,
	0x00, 0x32, 0x9d, 0x13, 0x0a, 0x10, 0x52, 0x50, 0x43, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73,
	0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x6f,
	0x64, 0x65, 0x1a, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x53, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0b,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x12, 0x17, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x55, 0x70, 0x1a, 0x1b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x49, 0x6e, 0x12, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x1a, 0x1b, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0b, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x6c, 0x6f, 0x67, 0x4f, 0x75, 0x74, 0x12, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6c, 0x6f, 0x67, 0x4f,
	0x75, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x51, 0x0a,
	0x18, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00,
	0x12, 0x67, 0x0a, 0x18, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x18, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1b, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x14, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x41, 0x75, 0x74, 0x68, 0x4b,
	0x65, 0x79, 0x12, 0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x41, 0x75, 0x74,
	0x68, 0x4b, 0x65, 0x79, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x1b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x74,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1b, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x12,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x1e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x1a, 0x1b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x00, 0x12, 0x6a, 0x0a, 0x1c, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x12, 0x28, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x1a, 0x1e, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x22, 0x00, 0x12, 0x57, 0x0a,
	0x14, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x1b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x1a, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x53, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x00,
	0x12, 0x3f, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65,
	0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22,
	0x00, 0x12, 0x4b, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x54, 0x65,
	0x6d, 0x70, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x21, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x64, 0x72, 0x6f,
	0x70, 0x54, 0x65, 0x6d, 0x70, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x73, 0x1a, 0x0d, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x55,
	0x0a, 0x1a, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x26, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x57, 0x65, 0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x57, 0x65, 0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x17, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x69, 0x72, 0x65, 0x62, 0x61, 0x73, 0x65, 0x53, 0x6d,
	0x73, 0x12, 0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x69, 0x72, 0x65, 0x62,
	0x61, 0x73, 0x65, 0x53, 0x6d, 0x73, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x14, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x1a, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x53, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x16, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x1b, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73,
	0x65, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f,
	0x64, 0x65, 0x1a, 0x1e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x53, 0x65, 0x6e, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x1a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x33, 0x32, 0x44, 0x41, 0x34,
	0x43, 0x46, 0x12, 0x26, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x33, 0x32, 0x44, 0x41, 0x34, 0x43, 0x46, 0x1a, 0x1e, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x15,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x21, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x24, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0x57, 0x0a, 0x1b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x54, 0x4c, 0x12,
	0x27, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x54, 0x4c, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x23, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x2f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x22, 0x00, 0x12, 0x5b, 0x0a, 0x1d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x1a, 0x0d,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12,
	0x57, 0x0a, 0x1b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x45, 0x43, 0x42, 0x41, 0x33, 0x39, 0x44, 0x42, 0x12, 0x27,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x45,
	0x43, 0x42, 0x41, 0x33, 0x39, 0x44, 0x42, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x42, 0x61, 0x6e, 0x12, 0x1a, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x6f, 0x67,
	0x67, 0x6c, 0x65, 0x42, 0x61, 0x6e, 0x1a, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x22,
	0x00, 0x32, 0xed, 0x01, 0x0a, 0x0f, 0x52, 0x50, 0x43, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x77, 0x0a, 0x1f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x67, 0x65, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65,
	0x74, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x25, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x00, 0x12, 0x61,
	0x0a, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x41, 0x75,
	0x74, 0x6f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x2c, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x41, 0x75, 0x74, 0x6f,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22,
	0x00, 0x32, 0xb8, 0x02, 0x0a, 0x0b, 0x52, 0x50, 0x43, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x61, 0x76,
	0x65, 0x12, 0x6b, 0x0a, 0x1b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74,
	0x41, 0x75, 0x74, 0x6f, 0x53, 0x61, 0x76, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x27, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x61, 0x76,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x21, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x41, 0x75, 0x74, 0x6f,
	0x53, 0x61, 0x76, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x00, 0x12, 0x59,
	0x0a, 0x1c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x41, 0x75,
	0x74, 0x6f, 0x53, 0x61, 0x76, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x28,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x61, 0x76, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x20, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x53,
	0x61, 0x76, 0x65, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x61, 0x76,
	0x65, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x0d, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x32, 0xab, 0x07, 0x0a,
	0x09, 0x52, 0x50, 0x43, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x72, 0x0a, 0x27, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x73,
	0x54, 0x6f, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x42,
	0x6f, 0x6f, 0x73, 0x74, 0x73, 0x54, 0x6f, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x59,
	0x0a, 0x15, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x5f, 0x67, 0x65, 0x74, 0x42, 0x6f, 0x6f,
	0x73, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x5f, 0x67, 0x65, 0x74,
	0x42, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x5f, 0x42, 0x6f, 0x6f,
	0x73, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x13, 0x70, 0x72, 0x65,
	0x6d, 0x69, 0x75, 0x6d, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x79, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x73,
	0x12, 0x1f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x72,
	0x65, 0x6d, 0x69, 0x75, 0x6d, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x79, 0x42, 0x6f, 0x6f, 0x73, 0x74,
	0x73, 0x1a, 0x19, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x65, 0x6d,
	0x69, 0x75, 0x6d, 0x5f, 0x4d, 0x79, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x22, 0x00, 0x12, 0x51,
	0x0a, 0x12, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x42,
	0x6f, 0x6f, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x5f, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x42,
	0x6f, 0x6f, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70,
	0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x5f, 0x4d, 0x79, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x22,
	0x00, 0x12, 0x5f, 0x0a, 0x17, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x5f, 0x67, 0x65, 0x74,
	0x42, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75,
	0x6d, 0x5f, 0x67, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x1a, 0x1d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x65, 0x6d,
	0x69, 0x75, 0x6d, 0x5f, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x00, 0x12, 0x59, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x5f, 0x67, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d,
	0x5f, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x1a, 0x1b,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d,
	0x5f, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x5f, 0x0a,
	0x17, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x73,
	0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x67, 0x65,
	0x74, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x1d, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f,
	0x42, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x5f,
	0x0a, 0x17, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x42, 0x6f, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x67,
	0x65, 0x74, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x5f, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12,
	0x62, 0x0a, 0x15, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x12, 0x21, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x63, 0x61,
	0x6e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x43, 0x61,
	0x6e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x12, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x32, 0xe8, 0x01, 0x0a, 0x10, 0x52,
	0x50, 0x43, 0x42, 0x6f, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x6d, 0x0a, 0x26, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x32, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x42,
	0x6f, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x1a, 0x0d, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x65,
	0x0a, 0x22, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x12, 0x2e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x32, 0xae, 0x02, 0x0a, 0x0a, 0x52, 0x50, 0x43, 0x42, 0x6f, 0x74,
	0x4d, 0x65, 0x6e, 0x75, 0x12, 0x5f, 0x0a, 0x1a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x67, 0x65, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x4d, 0x65, 0x6e, 0x75, 0x42, 0x6f,
	0x74, 0x73, 0x12, 0x26, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x4d, 0x65, 0x6e, 0x75, 0x42, 0x6f, 0x74, 0x73, 0x1a, 0x17, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x4d, 0x65, 0x6e, 0x75, 0x42,
	0x6f, 0x74, 0x73, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x19, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x4d, 0x65, 0x6e, 0x75, 0x42,
	0x6f, 0x74, 0x12, 0x25, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x4d, 0x65, 0x6e, 0x75, 0x42, 0x6f, 0x74, 0x1a, 0x1a, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x4d, 0x65, 0x6e, 0x75, 0x42, 0x6f,
	0x74, 0x73, 0x42, 0x6f, 0x74, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x1e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x2a, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x4d, 0x65, 0x6e, 0x75, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x32, 0xb5, 0x01, 0x0a, 0x10, 0x52, 0x50, 0x43, 0x42, 0x6f,
	0x74, 0x4d, 0x65, 0x6e, 0x75, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x15, 0x62,
	0x6f, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x42, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x4d, 0x65, 0x6e,
	0x75, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x15, 0x62, 0x6f, 0x74, 0x73,
	0x5f, 0x67, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x42, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x12, 0x21, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x62,
	0x6f, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x42, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x6f, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x22, 0x00, 0x32, 0xee,
	0x05, 0x0a, 0x07, 0x52, 0x50, 0x43, 0x42, 0x6f, 0x74, 0x73, 0x12, 0x47, 0x0a, 0x13, 0x62, 0x6f,
	0x74, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x73, 0x12, 0x1f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x62,
	0x6f, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x73, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x15, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x42, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x21, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x1a,
	0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00,
	0x12, 0x54, 0x0a, 0x13, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x1f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x42, 0x6f, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x1a, 0x1a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x42, 0x6f, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0f, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x73,
	0x65, 0x74, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x42,
	0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x17, 0x62, 0x6f, 0x74, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x43, 0x44, 0x39, 0x31, 0x34,
	0x46, 0x44, 0x12, 0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x62, 0x6f, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x44,
	0x43, 0x44, 0x39, 0x31, 0x34, 0x46, 0x44, 0x1a, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00,
	0x12, 0x4e, 0x0a, 0x13, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x65, 0x64, 0x42, 0x6f, 0x74, 0x73, 0x12, 0x1f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x65, 0x64, 0x42, 0x6f, 0x74, 0x73, 0x1a, 0x14, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00,
	0x12, 0x55, 0x0a, 0x1a, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x62, 0x6f, 0x74, 0x73,
	0x5f, 0x73, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x1a, 0x62, 0x6f, 0x74, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x14, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x5f, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x17, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x67, 0x65,
	0x74, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x37, 0x35, 0x45, 0x43, 0x31, 0x32, 0x45, 0x36,
	0x12, 0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x62, 0x6f,
	0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x37, 0x35, 0x45,
	0x43, 0x31, 0x32, 0x45, 0x36, 0x1a, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x32,
	0xb5, 0x04, 0x0a, 0x14, 0x52, 0x50, 0x43, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43,
	0x68, 0x61, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x69, 0x0a, 0x1e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x2a, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x68,
	0x61, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x1a, 0x19, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x69, 0x6e,
	0x6b, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x1c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x65,
	0x64, 0x69, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x68, 0x61, 0x74, 0x4c,
	0x69, 0x6e, 0x6b, 0x12, 0x28, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x1a, 0x19, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x43, 0x68, 0x61, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x1e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x2a, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x43, 0x68, 0x61, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x1c, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x43, 0x68, 0x61, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x28, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67,
	0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x69,
	0x6e, 0x6b, 0x73, 0x1a, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x68,
	0x61, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x1f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x2b, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x1a, 0x2a, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x68, 0x61, 0x74,
	0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x22, 0x00, 0x32, 0x82, 0x04, 0x0a, 0x18, 0x52, 0x50, 0x43, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x42, 0x6f, 0x74, 0x73, 0x12, 0x58, 0x0a, 0x1a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42,
	0x6f, 0x74, 0x12, 0x26, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x6f, 0x74, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x62,
	0x0a, 0x18, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x6f, 0x74, 0x73, 0x12, 0x24, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x6f, 0x74, 0x73,
	0x1a, 0x1e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x6f, 0x74, 0x73,
	0x22, 0x00, 0x12, 0x64, 0x0a, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65,
	0x74, 0x42, 0x6f, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x42,
	0x6f, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x20, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x42, 0x6f, 0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x12, 0x2c, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x42, 0x6f, 0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x1f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x65,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x6f, 0x74, 0x12, 0x2b,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x65, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x6f, 0x74, 0x1a, 0x0d, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x32, 0xe7, 0x01, 0x0a,
	0x13, 0x52, 0x50, 0x43, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x47, 0x72, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x6b, 0x0a, 0x25, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x47, 0x72,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x47, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22,
	0x00, 0x12, 0x63, 0x0a, 0x21, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x77, 0x61, 0x79, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x77, 0x61, 0x79, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x32, 0x6b, 0x0a, 0x10, 0x52, 0x50, 0x43, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x57, 0x0a, 0x1b, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x27, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x74,
	0x72, 0x6f, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x22, 0x00, 0x32, 0x74, 0x0a, 0x13, 0x52, 0x50, 0x43, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x1e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x32, 0x7a, 0x0a, 0x17, 0x52, 0x50, 0x43,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x48,
	0x6f, 0x75, 0x72, 0x73, 0x12, 0x5f, 0x0a, 0x1f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x57, 0x6f,
	0x72, 0x6b, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x2b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x48,
	0x6f, 0x75, 0x72, 0x73, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x32, 0xb7, 0x06, 0x0a, 0x15, 0x52, 0x50, 0x43, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x62, 0x0a, 0x18, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x51,
	0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x67, 0x65, 0x74, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65,
	0x73, 0x1a, 0x1e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x1c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x1a, 0x0d, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x61,
	0x0a, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63,
	0x75, 0x74, 0x12, 0x2c, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x51, 0x75,
	0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74,
	0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22,
	0x00, 0x12, 0x5f, 0x0a, 0x1f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x65, 0x64,
	0x69, 0x74, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x63, 0x75, 0x74, 0x12, 0x2b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x51,
	0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75,
	0x74, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x22, 0x00, 0x12, 0x63, 0x0a, 0x21, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x12, 0x2d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x1e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2a, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x1a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x1f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x6e, 0x64, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e,
	0x64, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x21, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x10, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x32,
	0xa6, 0x03, 0x0a, 0x13, 0x52, 0x50, 0x43, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64,
	0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x74, 0x0a, 0x1e, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x5f, 0x67, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2a, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x1a, 0x24, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x00, 0x12, 0x8c, 0x01,
	0x0a, 0x26, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x32, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x1a, 0x2c, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x22, 0x00, 0x12, 0x89, 0x01, 0x0a,
	0x25, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x2b, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x00, 0x32, 0x8c, 0x01, 0x0a, 0x19, 0x52, 0x50, 0x43,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6f, 0x0a, 0x22, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x17, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x43, 0x68, 0x61, 0x74, 0x73, 0x22, 0x00, 0x32, 0xba, 0x18, 0x0a, 0x0b, 0x52, 0x50, 0x43, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x49, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x22, 0x00, 0x12, 0x64, 0x0a, 0x17, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x23, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x1a, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x1a, 0x1a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x69, 0x0a, 0x18, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x67, 0x65, 0x74,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x73, 0x1a, 0x25, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x17, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x67, 0x65, 0x74,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x20, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x1a, 0x17, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x43, 0x68, 0x61, 0x74, 0x73, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x17, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x46, 0x75, 0x6c,
	0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x1a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x43, 0x68, 0x61, 0x74,
	0x46, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x16, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x1e,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x1a, 0x10,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x48, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x65,
	0x64, 0x69, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x65,
	0x64, 0x69, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x12,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x12, 0x1e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x20,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x21, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x43, 0x39, 0x45, 0x33, 0x33, 0x44, 0x35, 0x34, 0x12, 0x2c, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x39,
	0x45, 0x33, 0x33, 0x44, 0x35, 0x34, 0x1a, 0x1e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x16, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x1a, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x26, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b,
	0x1a, 0x1c, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0x00,
	0x12, 0x56, 0x0a, 0x19, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x6f, 0x67,
	0x67, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x25, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x21, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x2d, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x1a, 0x17, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x43, 0x68, 0x61, 0x74, 0x73, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x1f,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x1a,
	0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x20, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x1a, 0x21, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x5f, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x22, 0x00, 0x12, 0x49, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x73,
	0x65, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x20, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x5f, 0x73, 0x65, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x1a, 0x0d, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x59, 0x0a,
	0x1c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x1e, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x39, 0x42, 0x41, 0x41, 0x39, 0x36, 0x34, 0x37, 0x12, 0x2a, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x39, 0x42,
	0x41, 0x41, 0x39, 0x36, 0x34, 0x37, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x1f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x50, 0x72, 0x65,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x2b, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x69,
	0x0a, 0x1f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x46, 0x6f, 0x72, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x17,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x43, 0x68, 0x61, 0x74, 0x73, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x1b, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x27, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x73,
	0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x22, 0x00, 0x12, 0x4c, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x65,
	0x64, 0x69, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x5f, 0x65, 0x64, 0x69, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x10, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x4b, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x65, 0x64, 0x69,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f,
	0x65, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0d, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x52, 0x0a,
	0x17, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x53, 0x6c, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x74,
	0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x6c, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x1a, 0x10, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x6b, 0x0a, 0x1c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x67, 0x65,
	0x74, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x12, 0x28, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x1a, 0x1f, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x49,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x68, 0x61, 0x74, 0x73, 0x22, 0x00, 0x12, 0x77,
	0x0a, 0x21, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x2d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x1a, 0x21, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x21, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x2d, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x73, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x1a, 0x10, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x64, 0x0a, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x31, 0x39, 0x39, 0x46, 0x33,
	0x41, 0x36, 0x43, 0x12, 0x2c, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x54, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x31, 0x39, 0x39, 0x46, 0x33, 0x41, 0x36,
	0x43, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x1e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x41,
	0x46, 0x33, 0x36, 0x39, 0x44, 0x34, 0x32, 0x12, 0x2a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x46, 0x33, 0x36, 0x39,
	0x44, 0x34, 0x32, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x22, 0x00, 0x32, 0xcb, 0x0b, 0x0a, 0x0e, 0x52, 0x50, 0x43, 0x43, 0x68, 0x61, 0x74,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x19, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x1a, 0x1b, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68,
	0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x18, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x74,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x24, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x1a, 0x13, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x19, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x12, 0x25, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x61,
	0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x1f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x2b,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x1a, 0x25, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x1e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x67, 0x65, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x1a, 0x24, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68,
	0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x1f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x2b, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x1a, 0x24, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x22, 0x00, 0x12, 0x73, 0x0a, 0x29, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12,
	0x35, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x21, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x2d, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x1d,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x29, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x1a, 0x27, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x43, 0x68, 0x61, 0x74,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x1f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x73, 0x1a, 0x25, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x73, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x1c,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x43, 0x68, 0x61, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x20, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x41, 0x6c, 0x6c, 0x43, 0x68,
	0x61, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x2c,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x41, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x74,
	0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x1a, 0x10, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x56, 0x0a, 0x19, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x6f, 0x67,
	0x67, 0x6c, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x25, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x6f,
	0x53, 0x65, 0x6e, 0x64, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x1a, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x6f, 0x67,
	0x67, 0x6c, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x22, 0x00, 0x32, 0xa3, 0x0f, 0x0a, 0x08, 0x52, 0x50, 0x43, 0x43, 0x68, 0x61, 0x74, 0x73, 0x12,
	0x4d, 0x0a, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x74, 0x73, 0x12, 0x1d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x74, 0x73, 0x1a, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x43, 0x68, 0x61, 0x74, 0x73, 0x22, 0x00, 0x12, 0x56,
	0x0a, 0x14, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x46, 0x75,
	0x6c, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x12, 0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74,
	0x46, 0x75, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x1a, 0x1a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x43, 0x68, 0x61, 0x74,
	0x46, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x16, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x16, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x12, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61,
	0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x1c, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x42, 0x43, 0x36, 0x44, 0x31, 0x30, 0x37, 0x12, 0x28, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x61, 0x64, 0x64, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x42, 0x43, 0x36,
	0x44, 0x31, 0x30, 0x37, 0x1a, 0x1e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x17, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x1b, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x39, 0x32, 0x43, 0x45, 0x44, 0x44, 0x44, 0x34, 0x12, 0x27, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x39, 0x32, 0x43, 0x45, 0x44, 0x44,
	0x44, 0x34, 0x1a, 0x1e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x16, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x65, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x22,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x14, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x20, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x1a, 0x10, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x59, 0x0a, 0x17, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x74,
	0x73, 0x1a, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x43, 0x68, 0x61, 0x74, 0x73, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x16,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61,
	0x74, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x65, 0x64, 0x69,
	0x74, 0x43, 0x68, 0x61, 0x74, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x24, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x12, 0x30, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x43, 0x68,
	0x61, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x13, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x12, 0x1f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a, 0x2b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x33, 0x31, 0x43, 0x31, 0x43, 0x34,
	0x34, 0x46, 0x12, 0x37, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x73, 0x33, 0x31, 0x43, 0x31, 0x43, 0x34, 0x34, 0x46, 0x1a, 0x23, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x52, 0x65, 0x61,
	0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x22, 0x00, 0x12, 0x5a, 0x0a, 0x1b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x54, 0x6f, 0x47, 0x69, 0x67, 0x61, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x27, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x54,
	0x6f, 0x47, 0x69, 0x67, 0x61, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x53,
	0x0a, 0x19, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x45, 0x6d,
	0x6f, 0x6a, 0x69, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x25, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x5f, 0x73, 0x65, 0x74, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x73, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x1c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x61, 0x64, 0x64, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x32, 0x34, 0x37, 0x35,
	0x33, 0x45, 0x33, 0x12, 0x28, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x43, 0x68, 0x61,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x32, 0x34, 0x37, 0x35, 0x33, 0x45, 0x33, 0x1a, 0x10, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x56, 0x0a, 0x19, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x33, 0x34, 0x41, 0x38, 0x31, 0x38, 0x12, 0x25,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x33,
	0x34, 0x41, 0x38, 0x31, 0x38, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x14, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x74,
	0x73, 0x12, 0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x68,
	0x61, 0x74, 0x73, 0x1a, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x43, 0x68, 0x61, 0x74, 0x73, 0x22, 0x00, 0x12, 0x7e,
	0x0a, 0x2b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x73, 0x32, 0x43, 0x36, 0x46, 0x39, 0x37, 0x42, 0x37, 0x12, 0x37, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x61, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x32, 0x43,
	0x36, 0x46, 0x39, 0x37, 0x42, 0x37, 0x1a, 0x14, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x4c, 0x6f, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x58,
	0x0a, 0x1a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x39, 0x43, 0x42, 0x31, 0x32, 0x36, 0x45, 0x12, 0x26, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x39, 0x43, 0x42,
	0x31, 0x32, 0x36, 0x45, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x32, 0x8d, 0x07, 0x0a, 0x10, 0x52, 0x50, 0x43,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a,
	0x0e, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x1a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x68, 0x65, 0x6c,
	0x70, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x0f, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x00, 0x12, 0x48,
	0x0a, 0x11, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x67, 0x65, 0x74, 0x4e, 0x65, 0x61, 0x72, 0x65, 0x73,
	0x74, 0x44, 0x63, 0x12, 0x1d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x67, 0x65, 0x74, 0x4e, 0x65, 0x61, 0x72, 0x65, 0x73, 0x74,
	0x44, 0x63, 0x1a, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x61,
	0x72, 0x65, 0x73, 0x74, 0x44, 0x63, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x11, 0x68, 0x65, 0x6c, 0x70,
	0x5f, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f,
	0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x17, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x41, 0x70, 0x70, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x12, 0x68, 0x65, 0x6c, 0x70, 0x5f,
	0x67, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f,
	0x67, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x65, 0x78, 0x74, 0x1a, 0x18, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x54, 0x65, 0x78, 0x74, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0f, 0x68, 0x65, 0x6c,
	0x70, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x67,
	0x65, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x22, 0x00, 0x12, 0x5d, 0x0a, 0x19, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x70,
	0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x36, 0x31, 0x45, 0x33, 0x46, 0x38, 0x35, 0x34, 0x12,
	0x25, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x68, 0x65, 0x6c,
	0x70, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x36, 0x31,
	0x45, 0x33, 0x46, 0x38, 0x35, 0x34, 0x1a, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0x00, 0x12, 0x53, 0x0a, 0x13, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x19, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x16, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x64,
	0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x68, 0x65,
	0x6c, 0x70, 0x5f, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x15, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x67, 0x65,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x68, 0x65, 0x6c, 0x70,
	0x5f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x68, 0x65, 0x6c, 0x70,
	0x5f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00,
	0x12, 0x4c, 0x0a, 0x14, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x12, 0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x70,
	0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x58,
	0x0a, 0x19, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x39, 0x38, 0x39, 0x31, 0x34, 0x31, 0x31, 0x30, 0x12, 0x25, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x67, 0x65,
	0x74, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x39, 0x38, 0x39, 0x31, 0x34, 0x31,
	0x31, 0x30, 0x1a, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4a, 0x53, 0x4f,
	0x4e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x32, 0xbf, 0x0e, 0x0a, 0x0b, 0x52, 0x50, 0x43,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x69, 0x0a, 0x24, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x69,
	0x67, 0x6e, 0x55, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x30, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x24, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x55,
	0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0d, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x53,
	0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x44, 0x73, 0x12, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x67,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x44, 0x73, 0x1a, 0x13, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x49, 0x6e,
	0x74, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x20, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x1a, 0x1d, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x56,
	0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x1a, 0x1a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x73, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x12, 0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x1a, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x17,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x1a, 0x10, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x4f, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x73,
	0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22,
	0x00, 0x12, 0x3d, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x1a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x1a,
	0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00,
	0x12, 0x41, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x75, 0x6e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1c, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x75, 0x6e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1f, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x5f, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x1a, 0x19, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1b, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x1a, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x46, 0x6f, 0x75, 0x6e,
	0x64, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x20, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x5f, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x50, 0x65, 0x65, 0x72, 0x73, 0x1a, 0x1a, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x5f, 0x54, 0x6f, 0x70, 0x50, 0x65, 0x65, 0x72, 0x73, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x1b, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x70,
	0x50, 0x65, 0x65, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x50, 0x65, 0x65, 0x72, 0x52, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x12, 0x1f, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x1a, 0x0d, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x52, 0x0a,
	0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x61, 0x76,
	0x65, 0x64, 0x12, 0x1d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x61, 0x76, 0x65,
	0x64, 0x1a, 0x1c, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x53, 0x61, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x22,
	0x00, 0x12, 0x4f, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x74, 0x6f,
	0x67, 0x67, 0x6c, 0x65, 0x54, 0x6f, 0x70, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x23, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x54, 0x6f, 0x70, 0x50, 0x65, 0x65, 0x72,
	0x73, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x22, 0x00, 0x12, 0x4a, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x61,
	0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x1f, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f,
	0x61, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x50,
	0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x1a, 0x10, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x4a, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x67, 0x65,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x19,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x25, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f,
	0x65, 0x64, 0x69, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73,
	0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22,
	0x00, 0x12, 0x47, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x73, 0x65,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x73,
	0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x32, 0x96, 0x05, 0x0a, 0x0f, 0x52,
	0x50, 0x43, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x73, 0x12, 0x6e,
	0x0a, 0x24, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x73, 0x12, 0x30, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x73, 0x1a, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x6a,
	0x0a, 0x22, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x45, 0x6d,
	0x6f, 0x6a, 0x69, 0x73, 0x12, 0x2e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x45, 0x6d,
	0x6f, 0x6a, 0x69, 0x73, 0x1a, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x6d, 0x6f, 0x6a, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x20, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2c,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x6d,
	0x6f, 0x6a, 0x69, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x18, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x19, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x25, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x45,
	0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x1a, 0x1d, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x41, 0x6c, 0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x22, 0x00, 0x12, 0x78, 0x0a,
	0x21, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x64, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x73, 0x12, 0x2d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x64, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x73, 0x1a, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x73, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x1a, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x12, 0x26, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x1a, 0x12, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x00, 0x32, 0x86, 0x02, 0x0a, 0x0c, 0x52, 0x50, 0x43, 0x44, 0x65, 0x65, 0x70, 0x4c,
	0x69, 0x6e, 0x6b, 0x73, 0x12, 0x46, 0x0a, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x6f, 0x74, 0x12, 0x1d, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x6f, 0x74, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x14,
	0x68, 0x65, 0x6c, 0x70, 0x5f, 0x67, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x55, 0x72, 0x6c, 0x73, 0x12, 0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x67, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x55, 0x72, 0x6c, 0x73, 0x1a, 0x1a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x55, 0x72,
	0x6c, 0x73, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x14, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x67, 0x65, 0x74,
	0x44, 0x65, 0x65, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x67,
	0x65, 0x74, 0x44, 0x65, 0x65, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x1a,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x44, 0x65,
	0x65, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x32, 0xaa, 0x09, 0x0a,
	0x0a, 0x52, 0x50, 0x43, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x53, 0x0a, 0x13, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x73, 0x12, 0x1f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x73, 0x1a, 0x19, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x22, 0x00,
	0x12, 0x45, 0x0a, 0x12, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x18, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x24, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x65, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x1e, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x50, 0x65, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x17, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x44,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74,
	0x50, 0x65, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x1a, 0x1d, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x50,
	0x65, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x18,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x44,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x50, 0x69, 0x6e, 0x12, 0x24, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x74,
	0x6f, 0x67, 0x67, 0x6c, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x50, 0x69, 0x6e, 0x1a, 0x0d,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12,
	0x5b, 0x0a, 0x1d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73,
	0x12, 0x29, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x69,
	0x6e, 0x6e, 0x65, 0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x1a, 0x0d, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x19,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x6e,
	0x65, 0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x25, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73,
	0x1a, 0x1d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x50, 0x65, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x22,
	0x00, 0x12, 0x6a, 0x0a, 0x23, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x6e, 0x64, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x6e, 0x64, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x53, 0x0a,
	0x19, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x44, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x12, 0x25, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x55, 0x6e, 0x72, 0x65, 0x61,
	0x64, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x22, 0x00, 0x12, 0x68, 0x0a, 0x1d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67,
	0x65, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x61,
	0x72, 0x6b, 0x73, 0x12, 0x29, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x73, 0x1a, 0x1a,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x50, 0x65, 0x65, 0x72, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x13,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x1a, 0x14, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x1c,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x50, 0x65, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x61, 0x72, 0x12, 0x28, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x42, 0x61, 0x72, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x16, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x54,
	0x4c, 0x12, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x54, 0x54, 0x4c, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x32, 0xf3, 0x01, 0x0a, 0x09, 0x52, 0x50,
	0x43, 0x44, 0x72, 0x61, 0x66, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x12, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x44, 0x72, 0x61, 0x66, 0x74, 0x12, 0x1e, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x44, 0x72, 0x61, 0x66, 0x74, 0x1a, 0x0d, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x4e,
	0x0a, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x44, 0x72, 0x61, 0x66, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x44, 0x72, 0x61, 0x66, 0x74, 0x73, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4f,
	0x0a, 0x17, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72,
	0x41, 0x6c, 0x6c, 0x44, 0x72, 0x61, 0x66, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x63, 0x6c, 0x65, 0x61, 0x72, 0x41, 0x6c, 0x6c, 0x44, 0x72, 0x61, 0x66, 0x74, 0x73, 0x1a, 0x0d,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x32,
	0xb4, 0x03, 0x0a, 0x08, 0x52, 0x50, 0x43, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x12, 0x66, 0x0a, 0x19,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x45, 0x6d, 0x6f, 0x6a,
	0x69, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x25, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x1a, 0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x6f, 0x6a, 0x69,
	0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x23, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x67, 0x65, 0x74, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x73, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2f, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x67, 0x65, 0x74, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x20, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x4b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x73, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x00,
	0x12, 0x75, 0x0a, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74,
	0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74,
	0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x1d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x14, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x55, 0x52, 0x4c, 0x12,
	0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x55, 0x52,
	0x4c, 0x1a, 0x11, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x6f, 0x6a,
	0x69, 0x55, 0x52, 0x4c, 0x22, 0x00, 0x32, 0xca, 0x03, 0x0a, 0x12, 0x52, 0x50, 0x43, 0x45, 0x6d,
	0x6f, 0x6a, 0x69, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x5f, 0x0a,
	0x17, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x45, 0x6d, 0x6f,
	0x6a, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67,
	0x65, 0x74, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x1a, 0x1d, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x00, 0x12, 0x6b,
	0x0a, 0x1d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x45, 0x6d,
	0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0x29, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x1a, 0x1d, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x45, 0x6d,
	0x6f, 0x6a, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x23, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x45, 0x6d, 0x6f, 0x6a, 0x69,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x12, 0x2f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x45, 0x6d, 0x6f, 0x6a,
	0x69, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x1a, 0x1d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x1e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x67, 0x65, 0x74, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x2a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74,
	0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x1a, 0x1d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x22, 0x00, 0x32, 0xb8, 0x08, 0x0a, 0x0e, 0x52, 0x50, 0x43, 0x45, 0x6d, 0x6f, 0x6a, 0x69,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x53, 0x0a, 0x19, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x25, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45,
	0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x1f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x2b,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x45, 0x6d,
	0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x1a, 0x1e, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x45, 0x6d,
	0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x22, 0x00, 0x12, 0x6e, 0x0a,
	0x1e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65,
	0x6e, 0x74, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12,
	0x2a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x45, 0x6d,
	0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x1a, 0x1e, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x45, 0x6d,
	0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x22, 0x00, 0x12, 0x61, 0x0a,
	0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65,
	0x73, 0x12, 0x2c, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x63, 0x65,
	0x6e, 0x74, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x1a,
	0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00,
	0x12, 0x7e, 0x0a, 0x26, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x45, 0x6d, 0x6f,
	0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x32, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x1a, 0x1e,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x76, 0x0a, 0x28, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x73, 0x12, 0x34, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6d, 0x6f, 0x6a,
	0x69, 0x73, 0x1a, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x6f,
	0x6a, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x23, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x62,
	0x6c, 0x65, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12,
	0x2f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x62, 0x6c, 0x65, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73,
	0x1a, 0x1e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x58, 0x0a, 0x1a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x26, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x6f,
	0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x1a,
	0x62, 0x6f, 0x74, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x45,
	0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x24, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67,
	0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x74, 0x6f,
	0x67, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x0d, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x32, 0x90,
	0x02, 0x0a, 0x0d, 0x52, 0x50, 0x43, 0x46, 0x61, 0x63, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x12, 0x50, 0x0a, 0x16, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x65, 0x64, 0x69,
	0x74, 0x46, 0x61, 0x63, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x22, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x65, 0x64, 0x69, 0x74, 0x46, 0x61, 0x63, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x1a, 0x10,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x54, 0x0a, 0x18, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x61, 0x63, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x24,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x61, 0x63, 0x74, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x15, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x46, 0x61, 0x63, 0x74, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x12, 0x21, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x46, 0x61, 0x63, 0x74, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x1a, 0x19, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x46, 0x61, 0x63, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x22,
	0x00, 0x32, 0xee, 0x07, 0x0a, 0x08, 0x52, 0x50, 0x43, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x59,
	0x0a, 0x1a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x26, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79,
	0x48, 0x61, 0x73, 0x68, 0x1a, 0x11, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x14, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x12, 0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x1a, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x1c,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x28, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x1a, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x00,
	0x12, 0x47, 0x0a, 0x13, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x12, 0x1f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x61, 0x76, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0e, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x67, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x67, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x1a, 0x14, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x00, 0x12,
	0x4d, 0x0a, 0x16, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x42, 0x69,
	0x67, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x12, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x61,
	0x76, 0x65, 0x42, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x1a, 0x0d, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x4d,
	0x0a, 0x11, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x67, 0x65, 0x74, 0x57, 0x65, 0x62, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x1d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x67, 0x65, 0x74, 0x57, 0x65, 0x62, 0x46, 0x69,
	0x6c, 0x65, 0x1a, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x57, 0x65, 0x62, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a,
	0x11, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x64, 0x6e, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x1d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x64, 0x6e, 0x46, 0x69, 0x6c,
	0x65, 0x1a, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x43, 0x64, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x16,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43,
	0x64, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x43, 0x64, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x1a, 0x18, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x46, 0x69, 0x6c, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x17, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x67, 0x65, 0x74, 0x43, 0x64, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65,
	0x73, 0x12, 0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x64, 0x6e, 0x46, 0x69, 0x6c, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x1a, 0x18, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x22, 0x00, 0x12, 0x54, 0x0a, 0x14, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x67, 0x65, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x20, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x67,
	0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x1a, 0x18, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x46, 0x69,
	0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x11, 0x68, 0x65, 0x6c, 0x70,
	0x5f, 0x67, 0x65, 0x74, 0x43, 0x64, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f,
	0x67, 0x65, 0x74, 0x43, 0x64, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x12, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x64, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0x00, 0x32, 0x70, 0x0a, 0x0d, 0x52, 0x50, 0x43, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54,
	0x61, 0x67, 0x73, 0x12, 0x5f, 0x0a, 0x1f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x12, 0x2b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x67,
	0x67, 0x6c, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54,
	0x61, 0x67, 0x73, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x22, 0x00, 0x32, 0xd1, 0x0e, 0x0a, 0x0a, 0x52, 0x50, 0x43, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x75, 0x0a, 0x21, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x45, 0x46, 0x44, 0x34, 0x38, 0x43, 0x38, 0x39, 0x12, 0x2d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67,
	0x65, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x45,
	0x46, 0x44, 0x34, 0x38, 0x43, 0x38, 0x39, 0x1a, 0x1f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x44, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x22, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x2e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x1a, 0x25, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x1b, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x22, 0x00, 0x12, 0x63, 0x0a, 0x21, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x17, 0x66, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x50, 0x65, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x50, 0x65, 0x65, 0x72,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x1e, 0x63,
	0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x2a, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x6c,
	0x69, 0x73, 0x74, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x61, 0x74, 0x6c,
	0x69, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x1a, 0x29, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x1e, 0x63, 0x68, 0x61, 0x74, 0x6c, 0x69,
	0x73, 0x74, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x1c, 0x63, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73,
	0x74, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x65, 0x64, 0x69,
	0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x1a,
	0x1f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x22, 0x00, 0x12, 0x6e, 0x0a, 0x1c, 0x63, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x73, 0x12, 0x28, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x63, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x1a, 0x22, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x73,
	0x5f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x6f, 0x0a, 0x1d, 0x63, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x12, 0x29, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x5f, 0x63, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x43, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x1a, 0x21,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73,
	0x74, 0x73, 0x5f, 0x43, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x1c, 0x63, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x73,
	0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x5f, 0x63, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x43,
	0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x1a, 0x10, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x6e, 0x0a, 0x1c, 0x63, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x67,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x28, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63,
	0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74,
	0x6c, 0x69, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x22, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x5f,
	0x43, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x5e, 0x0a, 0x1d, 0x63, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x6a,
	0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x29, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x63, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x43, 0x68,
	0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x10, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x5b, 0x0a, 0x1d, 0x63, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x68,
	0x69, 0x64, 0x65, 0x43, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x29, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x63, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x0d, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x72,
	0x0a, 0x25, 0x63, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x4c,
	0x65, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x67,
	0x65, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x53,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x14, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x50, 0x65, 0x65, 0x72,
	0x22, 0x00, 0x12, 0x52, 0x0a, 0x17, 0x63, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x5f,
	0x6c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x6c,
	0x69, 0x73, 0x74, 0x73, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61, 0x74, 0x6c, 0x69,
	0x73, 0x74, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x21, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x46, 0x31, 0x39, 0x45, 0x44, 0x39, 0x36, 0x44, 0x12, 0x2d, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x46, 0x31, 0x39, 0x45, 0x44, 0x39, 0x36, 0x44, 0x1a, 0x1c, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x44, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x14, 0x66, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x12, 0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x32, 0xf2, 0x06, 0x0a, 0x09, 0x52, 0x50, 0x43,
	0x46, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x12, 0x4c, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x12, 0x20,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x75, 0x6d,
	0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x19, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x12, 0x25, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f,
	0x72, 0x75, 0x6d, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x17,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x75,
	0x6d, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x67, 0x65,
	0x74, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x1a, 0x1d, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x46, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x22, 0x00, 0x12, 0x67, 0x0a,
	0x1b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x46, 0x6f, 0x72,
	0x75, 0x6d, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x42, 0x79, 0x49, 0x44, 0x12, 0x27, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x73, 0x42, 0x79, 0x49, 0x44, 0x1a, 0x1d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x73, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x17, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x12, 0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x75,
	0x6d, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x1f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x69, 0x6e,
	0x6e, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x2b, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64,
	0x46, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x6b,
	0x0a, 0x1b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x27, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x21, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x21, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50,
	0x69, 0x6e, 0x6e, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73,
	0x12, 0x2d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x69,
	0x6e, 0x6e, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x1a,
	0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x22, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f,
	0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x56, 0x69, 0x65, 0x77, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x41,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2e, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f,
	0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x56, 0x69, 0x65, 0x77, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x41,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x32, 0xcc, 0x04,
	0x0a, 0x0b, 0x52, 0x50, 0x43, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x51, 0x0a,
	0x18, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x1a,
	0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00,
	0x12, 0x4d, 0x0a, 0x16, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x67, 0x67,
	0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x0d,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12,
	0x53, 0x0a, 0x19, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x72, 0x65, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x5f, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x17, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x1f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x5f, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x64,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x15, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x72,
	0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x21, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x62, 0x6f, 0x74,
	0x73, 0x5f, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x13, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67,
	0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x67,
	0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x32, 0x86, 0x01, 0x0a,
	0x17, 0x52, 0x50, 0x43, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x6b, 0x0a, 0x1b, 0x66, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65,
	0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x1a, 0x21, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x66, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x00, 0x32, 0x8b, 0x03, 0x0a, 0x08, 0x52, 0x50, 0x43, 0x47, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x4e, 0x0a, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x10,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x57, 0x0a, 0x1b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x74, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x27, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x1a, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x48,
	0x69, 0x67, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x69, 0x67, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x1a, 0x1c, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x48, 0x69, 0x67, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x70, 0x0a, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65,
	0x74, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x69, 0x67, 0x68, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x2c, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x49,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x69, 0x67, 0x68, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x1a, 0x1c, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x48, 0x69, 0x67, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x22, 0x00, 0x32, 0xa7, 0x01, 0x0a, 0x07, 0x52, 0x50, 0x43, 0x47, 0x69, 0x66, 0x73, 0x12,
	0x59, 0x0a, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53,
	0x61, 0x76, 0x65, 0x64, 0x47, 0x69, 0x66, 0x73, 0x12, 0x21, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67,
	0x65, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x47, 0x69, 0x66, 0x73, 0x1a, 0x1b, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x53,
	0x61, 0x76, 0x65, 0x64, 0x47, 0x69, 0x66, 0x73, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x10, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x47, 0x69, 0x66, 0x12, 0x1c,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x47, 0x69, 0x66, 0x1a, 0x0d, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x32, 0xc3, 0x01,
	0x0a, 0x0c, 0x52, 0x50, 0x43, 0x47, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x61,
	0x0a, 0x16, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x47, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x47, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x1a, 0x21, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x47, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x00, 0x12, 0x50, 0x0a, 0x16, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x47, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x47, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x1a,
	0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x22, 0x00, 0x32, 0x99, 0x0b, 0x0a, 0x08, 0x52, 0x50, 0x43, 0x47, 0x69, 0x66, 0x74, 0x73,
	0x12, 0x59, 0x0a, 0x15, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x72, 0x47, 0x69, 0x66, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x47, 0x69, 0x66, 0x74, 0x73, 0x1a, 0x1b, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x53, 0x74, 0x61, 0x72, 0x47, 0x69, 0x66, 0x74, 0x73, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x15, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x47, 0x69, 0x66, 0x74, 0x12, 0x21, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x47, 0x69, 0x66, 0x74, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x18, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x72,
	0x47, 0x69, 0x66, 0x74, 0x12, 0x24, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x74, 0x53, 0x74, 0x61, 0x72, 0x47, 0x69, 0x66, 0x74, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x80, 0x01, 0x0a, 0x22,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x72,
	0x47, 0x69, 0x66, 0x74, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x12, 0x2e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x72,
	0x47, 0x69, 0x66, 0x74, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x1a, 0x28, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x47, 0x69, 0x66, 0x74, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x22, 0x00, 0x12, 0x54,
	0x0a, 0x18, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x72, 0x47, 0x69, 0x66, 0x74, 0x12, 0x24, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x72, 0x47, 0x69, 0x66, 0x74,
	0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x19, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x47, 0x69, 0x66,
	0x74, 0x12, 0x25, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x72, 0x47, 0x69, 0x66, 0x74, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x1a,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x53, 0x74, 0x61, 0x72, 0x47, 0x69, 0x66, 0x74, 0x12, 0x26, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x67, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x53, 0x74, 0x61, 0x72, 0x47, 0x69,
	0x66, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x47, 0x69, 0x66, 0x74, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x1a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x47,
	0x69, 0x66, 0x74, 0x73, 0x12, 0x26, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x61,
	0x76, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x47, 0x69, 0x66, 0x74, 0x73, 0x1a, 0x20, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x47, 0x69, 0x66, 0x74, 0x73, 0x22, 0x00,
	0x12, 0x66, 0x0a, 0x19, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74,
	0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x47, 0x69, 0x66, 0x74, 0x12, 0x25, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72,
	0x47, 0x69, 0x66, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x72, 0x47, 0x69, 0x66, 0x74, 0x73, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x21, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x47, 0x69, 0x66, 0x74,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x2d, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x47, 0x69, 0x66, 0x74, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x1a, 0x27, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x53, 0x74, 0x61, 0x72, 0x47, 0x69, 0x66, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x6c, 0x55, 0x72, 0x6c, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x28, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x47, 0x69, 0x66, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x34, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x53, 0x74, 0x61, 0x72, 0x47, 0x69, 0x66, 0x74, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x23, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x47, 0x69, 0x66, 0x74, 0x73, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x54, 0x6f, 0x54, 0x6f,
	0x70, 0x12, 0x2f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x47, 0x69, 0x66, 0x74, 0x73, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x54, 0x6f, 0x54,
	0x6f, 0x70, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x19, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x47, 0x69, 0x66, 0x74, 0x73,
	0x12, 0x25, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x72, 0x47, 0x69, 0x66, 0x74, 0x73, 0x1a, 0x1f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x72, 0x47, 0x69, 0x66, 0x74, 0x73, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x18, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x72, 0x47, 0x69, 0x66, 0x74, 0x12, 0x24, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x47, 0x69, 0x66, 0x74, 0x1a, 0x1f, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x47, 0x69, 0x66, 0x74, 0x73, 0x22, 0x00, 0x32,
	0xcc, 0x03, 0x0a, 0x0c, 0x52, 0x50, 0x43, 0x47, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79, 0x73,
	0x12, 0x7d, 0x0a, 0x22, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74,
	0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x47, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74,
	0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x47, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x25, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x47,
	0x69, 0x66, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12,
	0x62, 0x0a, 0x18, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x47,
	0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x67, 0x65, 0x74, 0x47, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x1a, 0x1e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x47, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x1e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x50, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x47, 0x69, 0x76,
	0x65, 0x61, 0x77, 0x61, 0x79, 0x12, 0x2a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x50, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x47, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61,
	0x79, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x20, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x73, 0x47, 0x69, 0x76, 0x65, 0x61, 0x77,
	0x61, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x73, 0x47, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x73, 0x47, 0x69,
	0x76, 0x65, 0x61, 0x77, 0x61, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x32, 0xe6,
	0x0f, 0x0a, 0x0d, 0x52, 0x50, 0x43, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x73,
	0x12, 0x4e, 0x0a, 0x15, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x21, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x1a, 0x10, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x4a, 0x0a, 0x13, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x1f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x14,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x17, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54,
	0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x50,
	0x0a, 0x16, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x1a, 0x10, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x5e, 0x0a, 0x1d, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x29, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x10, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x50, 0x0a, 0x12, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x1e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x1a, 0x18, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c,
	0x22, 0x00, 0x12, 0x68, 0x0a, 0x1a, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x12, 0x26, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x1a, 0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x14,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x1a, 0x13, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x49, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x5a, 0x0a,
	0x1b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x27, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f,
	0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x1e, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x65,
	0x64, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x18, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61,
	0x6c, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x24, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x1a, 0x10, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x5e, 0x0a, 0x18, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x4a, 0x6f, 0x69, 0x6e, 0x41, 0x73, 0x12, 0x24, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x5f, 0x67, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x4a, 0x6f, 0x69,
	0x6e, 0x41, 0x73, 0x1a, 0x1a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x41, 0x73, 0x50, 0x65, 0x65, 0x72, 0x73, 0x22,
	0x00, 0x12, 0x70, 0x0a, 0x1b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x12, 0x27, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x1a, 0x26, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x26, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x6f, 0x67,
	0x67, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x1d, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x29, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c,
	0x6c, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x20, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x73,
	0x61, 0x76, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x61, 0x6c, 0x6c, 0x4a, 0x6f, 0x69, 0x6e, 0x41, 0x73, 0x12, 0x2c, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x61, 0x76,
	0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c,
	0x6c, 0x4a, 0x6f, 0x69, 0x6e, 0x41, 0x73, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x1f, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6a,
	0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x20,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2c, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61,
	0x6c, 0x6c, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x10,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x7a, 0x0a, 0x20, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x2c, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x1a, 0x26, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0x00, 0x12, 0x77,
	0x0a, 0x1f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x74, 0x6d, 0x70, 0x55, 0x72,
	0x6c, 0x12, 0x2b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c,
	0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x74, 0x6d, 0x70, 0x55, 0x72, 0x6c, 0x1a, 0x25,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x74,
	0x6d, 0x70, 0x55, 0x72, 0x6c, 0x22, 0x00, 0x32, 0xa6, 0x04, 0x0a, 0x10, 0x52, 0x50, 0x43, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x73, 0x12, 0x6f, 0x0a, 0x1b,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x27, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x22, 0x00, 0x12, 0x67, 0x0a,
	0x1a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x26, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x1c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x28, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x1a, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x1b, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x27, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x22, 0x00, 0x12, 0x7c, 0x0a, 0x1f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x50, 0x65, 0x65, 0x72, 0x12, 0x2b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x65,
	0x65, 0x72, 0x1a, 0x2a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x65, 0x65, 0x72, 0x22, 0x00,
	0x32, 0xbe, 0x05, 0x0a, 0x0c, 0x52, 0x50, 0x43, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x6f,
	0x74, 0x12, 0x68, 0x0a, 0x1c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65,
	0x74, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x28, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x42, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x1c, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x42,
	0x6f, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x1c, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x42, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x28, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x6f, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x1c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x6f, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e,
	0x64, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x1d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x65, 0x64, 0x69, 0x74, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x6f, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74,
	0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x6f, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22,
	0x00, 0x12, 0x71, 0x0a, 0x1d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65,
	0x74, 0x42, 0x6f, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x12, 0x29, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x43,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x1a, 0x23, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x42, 0x6f, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x1d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x29, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x42,
	0x6f, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22,
	0x00, 0x12, 0x5e, 0x0a, 0x1d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x6e, 0x64, 0x42, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x50, 0x65,
	0x65, 0x72, 0x12, 0x29, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x42, 0x6f, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x50, 0x65, 0x65, 0x72, 0x1a, 0x10, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22,
	0x00, 0x32, 0x8f, 0x02, 0x0a, 0x0e, 0x52, 0x50, 0x43, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x42, 0x6f, 0x74, 0x12, 0x51, 0x0a, 0x18, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x73, 0x65, 0x74,
	0x42, 0x6f, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x24, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x68, 0x65,
	0x6c, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x16, 0x62, 0x6f, 0x74, 0x73, 0x5f,
	0x73, 0x65, 0x6e, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x62,
	0x6f, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x1b, 0x62, 0x6f,
	0x74, 0x73, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x4a, 0x53, 0x4f, 0x4e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x27, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x61, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x4a, 0x53, 0x4f, 0x4e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x22, 0x00, 0x32, 0xd4, 0x03, 0x0a, 0x0b, 0x52, 0x50, 0x43, 0x4c, 0x61, 0x6e, 0x67, 0x70,
	0x61, 0x63, 0x6b, 0x12, 0x57, 0x0a, 0x14, 0x6c, 0x61, 0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x5f,
	0x67, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x12, 0x20, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x70, 0x61, 0x63,
	0x6b, 0x5f, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x1a, 0x1b, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b,
	0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x13,
	0x6c, 0x61, 0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x1f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x73, 0x1a, 0x1e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x4c, 0x61, 0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x16, 0x6c, 0x61, 0x6e, 0x67, 0x70, 0x61,
	0x63, 0x6b, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6c, 0x61,
	0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x1a, 0x1b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c,
	0x61, 0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x15, 0x6c, 0x61, 0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x5f,
	0x67, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x70, 0x61,
	0x63, 0x6b, 0x5f, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x1a,
	0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x4c, 0x61, 0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x14, 0x6c, 0x61, 0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x5f,
	0x67, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x20, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x70, 0x61, 0x63,
	0x6b, 0x5f, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x1a, 0x19, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x00, 0x32, 0xdc, 0x05, 0x0a, 0x12, 0x52,
	0x50, 0x43, 0x4d, 0x61, 0x69, 0x6e, 0x4d, 0x69, 0x6e, 0x69, 0x42, 0x6f, 0x74, 0x41, 0x70, 0x70,
	0x73, 0x12, 0x60, 0x0a, 0x1b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x57, 0x65, 0x62, 0x56, 0x69, 0x65, 0x77,
	0x12, 0x27, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61,
	0x69, 0x6e, 0x57, 0x65, 0x62, 0x56, 0x69, 0x65, 0x77, 0x1a, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x16, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x50,
	0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x41, 0x70, 0x70, 0x42, 0x6f, 0x74, 0x73, 0x12, 0x22, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x41, 0x70, 0x70, 0x42, 0x6f, 0x74,
	0x73, 0x1a, 0x1c, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x6f, 0x74, 0x73,
	0x5f, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x41, 0x70, 0x70, 0x42, 0x6f, 0x74, 0x73, 0x22,
	0x00, 0x12, 0x54, 0x0a, 0x14, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x1a, 0x18, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x15, 0x62, 0x6f, 0x74, 0x73, 0x5f,
	0x65, 0x64, 0x69, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x12, 0x21, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x62, 0x6f,
	0x74, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x1a, 0x18, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f,
	0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x22, 0x00, 0x12,
	0x4f, 0x0a, 0x17, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x23, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x1a,
	0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00,
	0x12, 0x53, 0x0a, 0x19, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x12, 0x25, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x5f,
	0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x73, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x13, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x67, 0x65,
	0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x67,
	0x65, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x19, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x15, 0x62, 0x6f,
	0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x73, 0x12, 0x21, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x5f, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x1a, 0x1f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x42, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x22, 0x00, 0x32, 0x83, 0x01, 0x0a, 0x11, 0x52, 0x50,
	0x43, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x12,
	0x6e, 0x0a, 0x1c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x12,
	0x28, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x1a, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x22, 0x00, 0x32,
	0x85, 0x03, 0x0a, 0x11, 0x52, 0x50, 0x43, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x56, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x65, 0x73, 0x12, 0x25, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x72,
	0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x54, 0x0a,
	0x13, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x65, 0x73, 0x1a, 0x1a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x1d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x69,
	0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a,
	0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x17, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x44, 0x69, 0x73, 0x63,
	0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x32, 0xb0, 0x17, 0x0a, 0x0b, 0x52, 0x50, 0x43, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x14, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x1a, 0x1a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x54, 0x0a, 0x13, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x1a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x1a, 0x1a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x14, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x22, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x16, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x22, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x1a, 0x21, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x17, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x19,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x1a, 0x25, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x14, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x12, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x1e, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x1a, 0x10, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x54, 0x0a, 0x18, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x24, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x1c, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65,
	0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x1a, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x19, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x56,
	0x69, 0x65, 0x77, 0x73, 0x12, 0x25, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x56, 0x69, 0x65, 0x77, 0x73, 0x1a, 0x1e, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x69, 0x65, 0x77, 0x73, 0x22, 0x00, 0x12, 0x58, 0x0a,
	0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x12, 0x21, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x1a, 0x1a, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x1b, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x64,
	0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x27, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x64, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a,
	0x21, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x64, 0x69, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x14, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x65, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x10,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x62, 0x0a, 0x1a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67,
	0x65, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x26, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x1a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x21, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x21, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x1b, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x1a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x00, 0x12, 0x52, 0x0a,
	0x17, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x6e, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x1a, 0x10, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x5c, 0x0a, 0x1c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x28, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x69,
	0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x10, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x6e, 0x0a, 0x1a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x26, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x26, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x22, 0x00, 0x12,
	0x67, 0x0a, 0x19, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x70, 0x69,
	0x6e, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x75, 0x6e, 0x70, 0x69, 0x6e, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x1a, 0x21, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x21, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x12, 0x2d, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x1a, 0x27, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x43, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x22, 0x00, 0x12, 0x80, 0x01, 0x0a, 0x22, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x28,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x19, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x4e, 0x6f, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x25, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x74, 0x6f,
	0x67, 0x67, 0x6c, 0x65, 0x4e, 0x6f, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x1a, 0x10,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x55, 0x0a, 0x1a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73,
	0x61, 0x76, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x73,
	0x12, 0x26, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x18, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x24, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x53, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x1a, 0x1a, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x1a, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x78, 0x52,
	0x65, 0x61, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65,
	0x74, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x61, 0x64, 0x44, 0x61, 0x74, 0x65, 0x1a,
	0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x78,
	0x52, 0x65, 0x61, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x1f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x2b, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x12, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x41,
	0x73, 0x12, 0x1e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x41,
	0x73, 0x1a, 0x1d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x50, 0x65, 0x65, 0x72, 0x73,
	0x22, 0x00, 0x12, 0x56, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x20, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x1a, 0x1a, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x00, 0x32, 0xfa, 0x0b, 0x0a, 0x0e, 0x52,
	0x50, 0x43, 0x4d, 0x69, 0x6e, 0x69, 0x42, 0x6f, 0x74, 0x41, 0x70, 0x70, 0x73, 0x12, 0x58, 0x0a,
	0x17, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x57, 0x65, 0x62, 0x56, 0x69, 0x65, 0x77, 0x12, 0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x65, 0x62, 0x56, 0x69, 0x65, 0x77, 0x1a, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x56, 0x69, 0x65, 0x77, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x17, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x6c, 0x6f, 0x6e, 0x67, 0x57, 0x65, 0x62, 0x56, 0x69,
	0x65, 0x77, 0x12, 0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x6c, 0x6f, 0x6e, 0x67,
	0x57, 0x65, 0x62, 0x56, 0x69, 0x65, 0x77, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x25, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x57, 0x65, 0x62, 0x56, 0x69, 0x65, 0x77, 0x34, 0x31, 0x33, 0x41, 0x33, 0x45, 0x37,
	0x33, 0x12, 0x31, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x57, 0x65, 0x62, 0x56, 0x69, 0x65, 0x77, 0x34, 0x31, 0x33, 0x41,
	0x33, 0x45, 0x37, 0x33, 0x1a, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57,
	0x65, 0x62, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x71,
	0x0a, 0x21, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x57,
	0x65, 0x62, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x2d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x57, 0x65,
	0x62, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x1a, 0x1b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62,
	0x56, 0x69, 0x65, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x22,
	0x00, 0x12, 0x54, 0x0a, 0x18, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x6e, 0x64, 0x57, 0x65, 0x62, 0x56, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x57, 0x65, 0x62, 0x56, 0x69, 0x65, 0x77, 0x44,
	0x61, 0x74, 0x61, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x41, 0x70, 0x70, 0x12, 0x1e, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x41, 0x70, 0x70, 0x1a, 0x18, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x42, 0x6f, 0x74, 0x41, 0x70, 0x70, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x22, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70,
	0x57, 0x65, 0x62, 0x56, 0x69, 0x65, 0x77, 0x35, 0x33, 0x36, 0x31, 0x38, 0x42, 0x43, 0x45, 0x12,
	0x2e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70,
	0x57, 0x65, 0x62, 0x56, 0x69, 0x65, 0x77, 0x35, 0x33, 0x36, 0x31, 0x38, 0x42, 0x43, 0x45, 0x1a,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x56, 0x69, 0x65,
	0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x13, 0x62, 0x6f, 0x74,
	0x73, 0x5f, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x62, 0x6f,
	0x74, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x22, 0x00, 0x12, 0x4e, 0x0a, 0x15, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x10,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x61, 0x0a, 0x1e, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x6b,
	0x65, 0x57, 0x65, 0x62, 0x56, 0x69, 0x65, 0x77, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x2a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x57, 0x65, 0x62,
	0x56, 0x69, 0x65, 0x77, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x1a, 0x11, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4a,
	0x53, 0x4f, 0x4e, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x1c, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x28, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a,
	0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00,
	0x12, 0x7a, 0x0a, 0x25, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x57, 0x65, 0x62, 0x56, 0x69, 0x65,
	0x77, 0x31, 0x41, 0x34, 0x36, 0x35, 0x30, 0x30, 0x41, 0x12, 0x31, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x57, 0x65, 0x62,
	0x56, 0x69, 0x65, 0x77, 0x31, 0x41, 0x34, 0x36, 0x35, 0x30, 0x30, 0x41, 0x1a, 0x1c, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x57, 0x65, 0x62,
	0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x22,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x41, 0x70, 0x70, 0x57, 0x65, 0x62, 0x56, 0x69, 0x65, 0x77, 0x38, 0x43, 0x35, 0x41, 0x33, 0x42,
	0x33, 0x43, 0x12, 0x2e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x41, 0x70, 0x70, 0x57, 0x65, 0x62, 0x56, 0x69, 0x65, 0x77, 0x38, 0x43, 0x35, 0x41, 0x33, 0x42,
	0x33, 0x43, 0x1a, 0x19, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x70, 0x70,
	0x57, 0x65, 0x62, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x7a, 0x0a, 0x25, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x57, 0x65, 0x62, 0x56, 0x69, 0x65, 0x77,
	0x32, 0x39, 0x39, 0x42, 0x45, 0x43, 0x38, 0x45, 0x12, 0x31, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x57, 0x65, 0x62, 0x56,
	0x69, 0x65, 0x77, 0x32, 0x39, 0x39, 0x42, 0x45, 0x43, 0x38, 0x45, 0x1a, 0x1c, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x57, 0x65, 0x62, 0x56,
	0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x25, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x57, 0x65, 0x62, 0x56, 0x69, 0x65, 0x77, 0x36, 0x41, 0x42, 0x42,
	0x32, 0x46, 0x37, 0x33, 0x12, 0x31, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x57, 0x65, 0x62, 0x56, 0x69, 0x65, 0x77, 0x36,
	0x41, 0x42, 0x42, 0x32, 0x46, 0x37, 0x33, 0x1a, 0x1c, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x57, 0x65, 0x62, 0x56, 0x69, 0x65, 0x77, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x32, 0x88, 0x01, 0x0a, 0x10, 0x52, 0x50, 0x43, 0x4d,
	0x69, 0x73, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x0f,
	0x68, 0x65, 0x6c, 0x70, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x41, 0x70, 0x70, 0x4c, 0x6f, 0x67, 0x12,
	0x1b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x68, 0x65, 0x6c,
	0x70, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x41, 0x70, 0x70, 0x4c, 0x6f, 0x67, 0x1a, 0x0d, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x33, 0x0a,
	0x09, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x12, 0x15, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x74, 0x65, 0x73,
	0x74, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x22, 0x00, 0x32, 0xfd, 0x04, 0x0a, 0x0f, 0x52, 0x50, 0x43, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x16, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x18, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x75, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x24, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x1c, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x28, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x19, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67,
	0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x25, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x1b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x1b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x27, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x0d,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12,
	0x55, 0x0a, 0x1a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x26, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x1b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x67, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x45, 0x78, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x10,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x22, 0x00, 0x32, 0xca, 0x01, 0x0a, 0x07, 0x52, 0x50, 0x43, 0x4e, 0x73, 0x66, 0x77, 0x12, 0x55,
	0x0a, 0x1a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x26, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x1a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x26, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x20, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x00, 0x32,
	0x66, 0x0a, 0x0c, 0x52, 0x50, 0x43, 0x50, 0x61, 0x69, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12,
	0x56, 0x0a, 0x19, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x25, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x32, 0xd3, 0x02, 0x0a, 0x0e, 0x52, 0x50, 0x43, 0x50,
	0x61, 0x69, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x65, 0x0a, 0x22, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x4e, 0x6f, 0x50, 0x61, 0x69, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x4e, 0x6f, 0x50, 0x61, 0x69, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22,
	0x00, 0x12, 0x74, 0x0a, 0x1e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74,
	0x50, 0x61, 0x69, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x12, 0x2a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x61, 0x69, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x1a,
	0x24, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x50, 0x61, 0x69, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x32, 0x8c, 0x08,
	0x0a, 0x0b, 0x52, 0x50, 0x43, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x65, 0x0a,
	0x19, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x67, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x1f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x1a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x26, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x1b, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x16, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x17, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x14, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x53,
	0x0a, 0x19, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x1c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67,
	0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x6f, 0x72, 0x6d, 0x12, 0x28, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x1a, 0x22, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72,
	0x6d, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x1b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0d, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x1b,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x1a, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x53, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x00, 0x12, 0x47,
	0x0a, 0x13, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x1a, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x5f, 0x73, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x26, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0x0d, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x5c,
	0x0a, 0x16, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x61,
	0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x1c, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x50, 0x61, 0x73, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x00, 0x32, 0x9a, 0x0a, 0x0a,
	0x0b, 0x52, 0x50, 0x43, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x5c, 0x0a, 0x16,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x54, 0x6d, 0x70, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x54,
	0x6d, 0x70, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x1c, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x54, 0x6d, 0x70,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x1e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x53, 0x68, 0x69,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x2a, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x21, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x2d,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x0d, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x5f,
	0x0a, 0x17, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x1a, 0x1d,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x22, 0x00, 0x12,
	0x68, 0x0a, 0x1a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x26, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x1e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x28, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x18, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x73, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x12,
	0x24, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x46, 0x6f, 0x72, 0x6d, 0x1a, 0x1f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x15, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x21, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x1b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x53, 0x61, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x17, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x63, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x61, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x61, 0x76, 0x65, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x18, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x67, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x24, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x61,
	0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x1e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x61,
	0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x16, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x12, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0x21, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x20, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x2c, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63,
	0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x10, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x66, 0x0a, 0x21, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x2d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x32, 0x81, 0x02, 0x0a, 0x08, 0x52, 0x50,
	0x43, 0x50, 0x6f, 0x6c, 0x6c, 0x73, 0x12, 0x46, 0x0a, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x52,
	0x0a, 0x17, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x6f,
	0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x10,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x59, 0x0a, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67,
	0x65, 0x74, 0x50, 0x6f, 0x6c, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x1a, 0x1b,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x32, 0x8f, 0x06,
	0x0a, 0x0d, 0x52, 0x50, 0x43, 0x50, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12,
	0x69, 0x0a, 0x1f, 0x70, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x2b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x70, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x1a,
	0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x23, 0x70, 0x72,
	0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70,
	0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x1a, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x65,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x6f, 0x0a,
	0x22, 0x70, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x2e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x5f, 0x70, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x1a, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72,
	0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x71,
	0x0a, 0x23, 0x70, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x2f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x1a, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x22,
	0x00, 0x12, 0x69, 0x0a, 0x1f, 0x70, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x64,
	0x65, 0x1a, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x65, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x1c,
	0x70, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x72,
	0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x28, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x22,
	0x00, 0x12, 0x6c, 0x0a, 0x1d, 0x70, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f,
	0x67, 0x65, 0x74, 0x50, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x12, 0x29, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x70, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x72,
	0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x1a, 0x1e, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x50,
	0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x32,
	0xea, 0x03, 0x0a, 0x0a, 0x52, 0x50, 0x43, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x12, 0x56,
	0x0a, 0x14, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75,
	0x6d, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x12, 0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x72, 0x65, 0x6d,
	0x69, 0x75, 0x6d, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x1a, 0x1a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x50,
	0x72, 0x6f, 0x6d, 0x6f, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x22, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x10, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x6c, 0x0a, 0x24, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x53,
	0x0a, 0x19, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x25, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x63, 0x61, 0x6e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x1b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x63, 0x61, 0x6e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x72, 0x65, 0x6d, 0x69,
	0x75, 0x6d, 0x12, 0x27, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x1a, 0x0d, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x32, 0x9f, 0x02, 0x0a,
	0x19, 0x52, 0x50, 0x43, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x22, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x2a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x42, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64,
	0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12,
	0x7d, 0x0a, 0x21, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x1a, 0x27, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x49,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x32, 0xd7,
	0x06, 0x0a, 0x12, 0x52, 0x50, 0x43, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x55, 0x0a, 0x12, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x67, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x12, 0x1e, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x67, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x1a, 0x1d, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x12,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x12, 0x1e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x1a, 0x1d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67,
	0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2c, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x1e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2c, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x1e, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x1e, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x2a, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x5f, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x22,
	0x00, 0x12, 0x5b, 0x0a, 0x1d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54,
	0x54, 0x4c, 0x12, 0x29, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x54, 0x4c, 0x1a, 0x0d, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x68,
	0x0a, 0x1d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x54, 0x4c, 0x12,
	0x29, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x54, 0x4c, 0x1a, 0x1a, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x54, 0x54, 0x4c, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x23, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x5f, 0x67, 0x65, 0x74, 0x49, 0x73, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12,
	0x2f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x49, 0x73, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x1a, 0x14, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x32, 0xd3, 0x01, 0x0a, 0x0f, 0x52, 0x50, 0x43,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x67, 0x0a, 0x1b,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x1d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x0d, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x32, 0xa4,
	0x01, 0x0a, 0x0c, 0x52, 0x50, 0x43, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x4d, 0x0a, 0x11, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6d, 0x6f,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x44,
	0x61, 0x74, 0x61, 0x1a, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x68, 0x65,
	0x6c, 0x70, 0x5f, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x45,
	0x0a, 0x12, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x6f,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x6f,
	0x44, 0x61, 0x74, 0x61, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x32, 0x91, 0x02, 0x0a, 0x09, 0x52, 0x50, 0x43, 0x51, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x56, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a,
	0x18, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x15, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x18, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x32, 0x8d, 0x02, 0x0a, 0x17, 0x52, 0x50,
	0x43, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x78, 0x0a, 0x22, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x67, 0x65, 0x74, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2e, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x67, 0x65, 0x74, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x20, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x00, 0x12,
	0x78, 0x0a, 0x22, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x52, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x52, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x00, 0x32, 0xd5, 0x0b, 0x0a, 0x0c, 0x52, 0x50,
	0x43, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x15, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x1d, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x20, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x10, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x74, 0x0a, 0x1e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x2a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x24,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x1b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0d,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12,
	0x64, 0x0a, 0x1b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x55,
	0x6e, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x1a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x16, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0x21, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x17, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x18, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x54,
	0x6f, 0x70, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x1b, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x52,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x1b, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x1b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x00, 0x12, 0x5b, 0x0a, 0x1d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6c,
	0x65, 0x61, 0x72, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x29, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x0d, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x56,
	0x0a, 0x19, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x50,
	0x61, 0x69, 0x64, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x69, 0x64, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x69, 0x64, 0x52, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x12, 0x2e, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x69, 0x64, 0x52, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x1a, 0x0d, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x62, 0x0a,
	0x1f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x61, 0x69,
	0x64, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x12, 0x2b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x61, 0x69, 0x64, 0x52, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x1a, 0x10, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22,
	0x00, 0x32, 0xc1, 0x04, 0x0a, 0x0a, 0x52, 0x50, 0x43, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x12, 0x45, 0x0a, 0x12, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x50, 0x65, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x50, 0x65, 0x65, 0x72, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x1a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x26, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x47,
	0x0a, 0x13, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x70, 0x61, 0x6d, 0x12, 0x1f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x70, 0x61, 0x6d, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x17, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x43, 0x37, 0x38, 0x41, 0x46,
	0x39, 0x42, 0x12, 0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46,
	0x43, 0x37, 0x38, 0x41, 0x46, 0x39, 0x42, 0x1a, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0x59, 0x0a, 0x1c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x53, 0x70, 0x61, 0x6d,
	0x12, 0x28, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x53, 0x70, 0x61, 0x6d, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x13, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x70,
	0x61, 0x6d, 0x12, 0x1f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x70, 0x61, 0x6d, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x17, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x38, 0x39, 0x35, 0x33, 0x41, 0x42, 0x34, 0x45, 0x12,
	0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x38, 0x39, 0x35, 0x33,
	0x41, 0x42, 0x34, 0x45, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x32, 0xa3, 0x02, 0x0a, 0x0b, 0x52, 0x50, 0x43, 0x52, 0x69, 0x6e,
	0x67, 0x74, 0x6f, 0x6e, 0x65, 0x12, 0x65, 0x0a, 0x19, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x67, 0x65, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x52, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e,
	0x65, 0x73, 0x12, 0x25, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64,
	0x52, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x65, 0x73, 0x1a, 0x1f, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x53, 0x61, 0x76, 0x65,
	0x64, 0x52, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x65, 0x73, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x14,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x52, 0x69, 0x6e, 0x67,
	0x74, 0x6f, 0x6e, 0x65, 0x12, 0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x52, 0x69,
	0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x65, 0x1a, 0x1e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x53, 0x61, 0x76, 0x65, 0x64, 0x52, 0x69,
	0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x16, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x69, 0x6e, 0x67, 0x74, 0x6f,
	0x6e, 0x65, 0x12, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x69,
	0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x65, 0x1a, 0x11, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x32, 0xfd, 0x04, 0x0a, 0x16,
	0x52, 0x50, 0x43, 0x53, 0x61, 0x76, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x62, 0x0a, 0x18, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x73, 0x12, 0x24, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x61, 0x76, 0x65,
	0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x1a, 0x1e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x53, 0x61, 0x76, 0x65,
	0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x18, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x24, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74,
	0x53, 0x61, 0x76, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x1a, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x1b, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x61, 0x76,
	0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x27, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x61, 0x76, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x1a, 0x21, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x1e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x53, 0x61, 0x76,
	0x65, 0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x2a, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x53, 0x61, 0x76, 0x65, 0x64, 0x44, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x73, 0x1a, 0x1e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x53, 0x61, 0x76, 0x65, 0x64, 0x44, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x73, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x1d, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x61, 0x76, 0x65, 0x64, 0x44,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x50, 0x69, 0x6e, 0x12, 0x29, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x74,
	0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x61, 0x76, 0x65, 0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x50, 0x69, 0x6e, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x53, 0x61,
	0x76, 0x65, 0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x2e, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x53, 0x61,
	0x76, 0x65, 0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x32, 0xd8, 0x02, 0x0a, 0x13,
	0x52, 0x50, 0x43, 0x53, 0x61, 0x76, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x61, 0x67, 0x73, 0x12, 0x71, 0x0a, 0x1d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x67, 0x73, 0x12, 0x29, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x61,
	0x76, 0x65, 0x64, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x73, 0x1a,
	0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x53, 0x61, 0x76, 0x65, 0x64, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x67, 0x73, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x1f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x61, 0x76, 0x65, 0x64, 0x52, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x12, 0x2b, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x61, 0x76, 0x65, 0x64, 0x52, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x1f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x61,
	0x67, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x67, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x61, 0x67, 0x52, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x1b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x00, 0x32, 0xb0, 0x03, 0x0a, 0x14, 0x52, 0x50, 0x43, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x66, 0x0a, 0x1c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x28, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x1a, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x1d, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67,
	0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x1a, 0x1a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x60, 0x0a, 0x1e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x6e, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x2a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a,
	0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2c, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x32, 0xeb, 0x03, 0x0a, 0x0b, 0x52, 0x50,
	0x43, 0x53, 0x65, 0x61, 0x6d, 0x6c, 0x65, 0x73, 0x73, 0x12, 0x6e, 0x0a, 0x1c, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x57, 0x65, 0x62, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67,
	0x65, 0x74, 0x57, 0x65, 0x62, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x57, 0x65, 0x62, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x1d, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x57, 0x65, 0x62, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x57, 0x65, 0x62, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x1e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x57, 0x65, 0x62, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x57, 0x65, 0x62, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x17, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x72, 0x6c, 0x41, 0x75, 0x74, 0x68,
	0x12, 0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x72,
	0x6c, 0x41, 0x75, 0x74, 0x68, 0x1a, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x55, 0x72, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x56, 0x0a, 0x16, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x55, 0x72, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x12, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x55, 0x72, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x1a, 0x16, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x32, 0xd7, 0x07, 0x0a, 0x0e, 0x52, 0x50, 0x43, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x73, 0x12, 0x56, 0x0a, 0x14, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x68, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x68, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x1a, 0x1a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x44, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0x00, 0x12, 0x5e, 0x0a, 0x1a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x26, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74,
	0x22, 0x00, 0x12, 0x5c, 0x0a, 0x19, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x25, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x22, 0x00,
	0x12, 0x55, 0x0a, 0x1a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x1b, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x74,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x1a,
	0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00,
	0x12, 0x5b, 0x0a, 0x1d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x29, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x0d, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x66, 0x0a,
	0x16, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x6e, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x1a, 0x26, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x53,
	0x65, 0x6e, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x1a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x26, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x1a, 0x26, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x53,
	0x65, 0x6e, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x1d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x29, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e,
	0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x1a, 0x26, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x53, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x16, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x1a, 0x14, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x4c, 0x6f, 0x6e, 0x67, 0x22,
	0x00, 0x32, 0x96, 0x04, 0x0a, 0x0a, 0x52, 0x50, 0x43, 0x53, 0x6d, 0x73, 0x6a, 0x6f, 0x62, 0x73,
	0x12, 0x66, 0x0a, 0x18, 0x73, 0x6d, 0x73, 0x6a, 0x6f, 0x62, 0x73, 0x5f, 0x69, 0x73, 0x45, 0x6c,
	0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x24, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x6d, 0x73, 0x6a, 0x6f, 0x62,
	0x73, 0x5f, 0x69, 0x73, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x4a, 0x6f,
	0x69, 0x6e, 0x1a, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x6d, 0x73,
	0x6a, 0x6f, 0x62, 0x73, 0x5f, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x54, 0x6f, 0x4a, 0x6f, 0x69, 0x6e, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0c, 0x73, 0x6d, 0x73, 0x6a,
	0x6f, 0x62, 0x73, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x12, 0x18, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x6d, 0x73, 0x6a, 0x6f, 0x62, 0x73, 0x5f, 0x6a, 0x6f,
	0x69, 0x6e, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0d, 0x73, 0x6d, 0x73, 0x6a, 0x6f, 0x62, 0x73, 0x5f, 0x6c,
	0x65, 0x61, 0x76, 0x65, 0x12, 0x19, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x5f, 0x73, 0x6d, 0x73, 0x6a, 0x6f, 0x62, 0x73, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x1a,
	0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00,
	0x12, 0x4d, 0x0a, 0x16, 0x73, 0x6d, 0x73, 0x6a, 0x6f, 0x62, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x22, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x6d, 0x73, 0x6a, 0x6f, 0x62, 0x73, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x0d,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12,
	0x4d, 0x0a, 0x11, 0x73, 0x6d, 0x73, 0x6a, 0x6f, 0x62, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x5f, 0x73, 0x6d, 0x73, 0x6a, 0x6f, 0x62, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x1a, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x6d,
	0x73, 0x6a, 0x6f, 0x62, 0x73, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x45,
	0x0a, 0x11, 0x73, 0x6d, 0x73, 0x6a, 0x6f, 0x62, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x6d, 0x73,
	0x4a, 0x6f, 0x62, 0x12, 0x1d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x5f, 0x73, 0x6d, 0x73, 0x6a, 0x6f, 0x62, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x6d, 0x73, 0x4a,
	0x6f, 0x62, 0x1a, 0x0f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6d, 0x73,
	0x4a, 0x6f, 0x62, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x11, 0x73, 0x6d, 0x73, 0x6a, 0x6f, 0x62, 0x73,
	0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4a, 0x6f, 0x62, 0x12, 0x1d, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x6d, 0x73, 0x6a, 0x6f, 0x62, 0x73, 0x5f,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4a, 0x6f, 0x62, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x32, 0xaf, 0x09, 0x0a, 0x14, 0x52,
	0x50, 0x43, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x1f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74,
	0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x67, 0x67,
	0x6c, 0x65, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x5f, 0x67, 0x65, 0x74, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x65, 0x64, 0x50, 0x65, 0x65,
	0x72, 0x73, 0x12, 0x26, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x70, 0x6f, 0x6e,
	0x73, 0x6f, 0x72, 0x65, 0x64, 0x50, 0x65, 0x65, 0x72, 0x73, 0x1a, 0x20, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x53, 0x70,
	0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x65, 0x64, 0x50, 0x65, 0x65, 0x72, 0x73, 0x22, 0x00, 0x12, 0x5b,
	0x0a, 0x1d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x53,
	0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x29, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f,
	0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x1e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x53, 0x70, 0x6f,
	0x6e, 0x73, 0x6f, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x80, 0x01, 0x0a, 0x1f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x70,
	0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x6f, 0x6e, 0x73,
	0x6f, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x2e, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x53,
	0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x71, 0x0a,
	0x1d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x70, 0x6f,
	0x6e, 0x73, 0x6f, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x29,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x53, 0x70, 0x6f,
	0x6e, 0x73, 0x6f, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x68, 0x0a, 0x22, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x72, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x72, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x1d, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x53, 0x70, 0x6f, 0x6e, 0x73,
	0x6f, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x65, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x1d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x65, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x67,
	0x65, 0x74, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x1a, 0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x65, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x1e, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x53, 0x70, 0x6f, 0x6e,
	0x73, 0x6f, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x80, 0x01, 0x0a, 0x1f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x6f,
	0x6e, 0x73, 0x6f, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f,
	0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x2e, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x53, 0x70,
	0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x32, 0xb6, 0x03, 0x0a,
	0x14, 0x52, 0x50, 0x43, 0x53, 0x74, 0x61, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6d, 0x0a, 0x1e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0x1d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x20, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72, 0x73, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x21, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x73,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x73, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0d, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x23,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x62, 0x6f, 0x74, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x62, 0x6f, 0x74, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x32, 0xf0, 0x08, 0x0a, 0x08, 0x52, 0x50, 0x43, 0x53, 0x74, 0x61,
	0x72, 0x73, 0x12, 0x6e, 0x0a, 0x1d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x73, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x29, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x72, 0x73, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x20,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x53, 0x74, 0x61, 0x72, 0x73, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x00, 0x12, 0x5f, 0x0a, 0x17, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x1a, 0x1d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x1d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x1d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00,
	0x12, 0x5f, 0x0a, 0x16, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x22, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x73, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x1a, 0x1f,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x12, 0x58, 0x0a, 0x1a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12,
	0x26, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72,
	0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x1d, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x73,
	0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x29, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x73, 0x52, 0x65, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x1a, 0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x73,
	0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x00, 0x12, 0x89,
	0x01, 0x0a, 0x25, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x72, 0x73, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x31, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x73, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x1a, 0x2b, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x53,
	0x74, 0x61, 0x72, 0x73, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x22, 0x00, 0x12, 0x89, 0x01, 0x0a, 0x25, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x73,
	0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x41, 0x64, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x55, 0x72, 0x6c, 0x12, 0x31, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x73, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x41, 0x64, 0x73, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x1a, 0x2b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x73,
	0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x41, 0x64, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x55, 0x72, 0x6c, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x21, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x49, 0x44, 0x12, 0x2d, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x49, 0x44, 0x1a, 0x1d, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x53, 0x74,
	0x61, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x1c, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x73,
	0x47, 0x69, 0x66, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x73, 0x47, 0x69, 0x66, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x1f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x73, 0x47, 0x69, 0x66, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x32, 0xb8, 0x06, 0x0a, 0x0d, 0x52, 0x50, 0x43,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x5f, 0x0a, 0x17, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x1a, 0x1d, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x14, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x12, 0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x73, 0x79, 0x6e, 0x63,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x1a, 0x13, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x47, 0x72, 0x61, 0x70, 0x68, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x17,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x67, 0x61, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x65,
	0x67, 0x61, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x1a, 0x1d, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x4d, 0x65, 0x67,
	0x61, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x00, 0x12, 0x7d, 0x0a,
	0x26, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x35,
	0x46, 0x31, 0x35, 0x30, 0x31, 0x34, 0x34, 0x12, 0x32, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x35, 0x46, 0x31, 0x35, 0x30, 0x31, 0x34, 0x34, 0x1a, 0x1d, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x15,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x1a, 0x1b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x5f, 0x67, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1f,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x1a,
	0x19, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f,
	0x53, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x1c,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x28, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x1a, 0x1d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x26, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x5f, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x35, 0x36, 0x33, 0x30, 0x32, 0x38, 0x31,
	0x42, 0x12, 0x32, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x35, 0x36, 0x33,
	0x30, 0x32, 0x38, 0x31, 0x42, 0x1a, 0x1a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x22, 0x00, 0x32, 0xd4, 0x19, 0x0a, 0x0b, 0x52, 0x50, 0x43, 0x53, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x73, 0x12, 0x56, 0x0a, 0x14, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x20, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x1a, 0x1a, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x17, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x1a, 0x1d, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x41,
	0x6c, 0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x16,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74,
	0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x1a, 0x1c, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x53, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x1a, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x26, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x1a, 0x29, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x59, 0x0a,
	0x1c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x28, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x1b, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x12, 0x27, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73,
	0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22,
	0x00, 0x12, 0x6e, 0x0a, 0x1c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65,
	0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x73, 0x12, 0x28, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x1a, 0x22, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x22,
	0x00, 0x12, 0x5b, 0x0a, 0x1d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65,
	0x61, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x73, 0x12, 0x29, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x1a, 0x0d, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x68,
	0x0a, 0x1a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x52, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x26, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x73, 0x1a, 0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x1a, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x61, 0x76,
	0x65, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x1a, 0x0d,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12,
	0x59, 0x0a, 0x1c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x65, 0x61,
	0x72, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12,
	0x28, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x63, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x1c, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x28, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x67, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x73, 0x1a, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64,
	0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x18, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x24, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74,
	0x4d, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x1a, 0x1d, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x41, 0x6c, 0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x22, 0x00, 0x12, 0x6d, 0x0a,
	0x1c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x28, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x53,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x1a, 0x21, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x19,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x46, 0x61, 0x76, 0x65,
	0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x25, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x46, 0x61, 0x76, 0x65, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73,
	0x1a, 0x1f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x46, 0x61, 0x76, 0x65, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x73, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x14, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x66, 0x61, 0x76, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x66, 0x61, 0x76, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x1a, 0x0d, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x6a,
	0x0a, 0x1a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x12, 0x26, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x73, 0x1a, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x1a, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x12, 0x26, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x74,
	0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73,
	0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22,
	0x00, 0x12, 0x74, 0x0a, 0x1f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65,
	0x74, 0x4f, 0x6c, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x4f, 0x6c,
	0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x73, 0x1a, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x73, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x1f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x53,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x12, 0x2b, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x1a, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x46, 0x6f, 0x75, 0x6e, 0x64,
	0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x22, 0x00, 0x12, 0x5c, 0x0a,
	0x16, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x79, 0x53,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65,
	0x74, 0x4d, 0x79, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x1a, 0x1c, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x4d,
	0x79, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x17, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x1a, 0x1f, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x46,
	0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x22, 0x00, 0x12, 0x62,
	0x0a, 0x19, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x25, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x1a, 0x1c, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x22, 0x00, 0x12, 0x6a, 0x0a, 0x1d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d,
	0x53, 0x65, 0x74, 0x12, 0x29, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x74, 0x1a, 0x1c,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x22, 0x00, 0x12, 0x6c,
	0x0a, 0x1e, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1c, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x18,
	0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x54, 0x6f, 0x53, 0x65, 0x74, 0x12, 0x24, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x61,
	0x64, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x54, 0x6f, 0x53, 0x65, 0x74, 0x1a, 0x1c,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x22, 0x00, 0x12, 0x66,
	0x0a, 0x1b, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x53, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x12, 0x27, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x1a, 0x1c, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x17, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x73,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x19, 0x73, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x73, 0x5f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x24, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x53,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x16, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x22, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x1a, 0x1c, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x22,
	0x00, 0x12, 0x62, 0x0a, 0x19, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x25,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x1a, 0x1c, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x19, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x12, 0x25, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x17, 0x73, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x53, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x1a, 0x1c, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x53, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x22, 0x00, 0x32, 0xa2, 0x16, 0x0a, 0x0a, 0x52,
	0x50, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x14, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x74,
	0x6f, 0x72, 0x79, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x11,
	0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x1d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x79,
	0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x15, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x21, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x1a, 0x13, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x49, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x14, 0x73, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x12,
	0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65,
	0x64, 0x1a, 0x13, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x49, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x15, 0x73, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x21, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x1a, 0x1b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x18, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x67,
	0x65, 0x74, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x24, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x53, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x18, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x5e, 0x0a, 0x19, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x25,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x1a, 0x18, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x58, 0x0a, 0x16, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x79, 0x49, 0x44, 0x12, 0x22, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x5f, 0x67, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x79, 0x49, 0x44, 0x1a,
	0x18, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x1e, 0x73,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x41, 0x6c, 0x6c,
	0x53, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x2a, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x13, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x1f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x1a, 0x13, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x49, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x1b, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x79, 0x56, 0x69, 0x65, 0x77, 0x73, 0x12, 0x27, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x56, 0x69, 0x65, 0x77,
	0x73, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x22, 0x00, 0x12, 0x65, 0x0a, 0x19, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x67, 0x65,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x56, 0x69, 0x65, 0x77, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x25, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x56, 0x69, 0x65,
	0x77, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x56, 0x69,
	0x65, 0x77, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x17, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x56,
	0x69, 0x65, 0x77, 0x73, 0x12, 0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x56, 0x69, 0x65, 0x77, 0x73, 0x1a, 0x1b, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x53, 0x74, 0x6f, 0x72,
	0x79, 0x56, 0x69, 0x65, 0x77, 0x73, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x17, 0x73, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x4c,
	0x69, 0x6e, 0x6b, 0x12, 0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x1a, 0x1a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x79,
	0x4c, 0x69, 0x6e, 0x6b, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x16, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x31, 0x39, 0x44, 0x38, 0x45, 0x42, 0x34, 0x35,
	0x12, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x31, 0x39, 0x44, 0x38,
	0x45, 0x42, 0x34, 0x35, 0x1a, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5a, 0x0a,
	0x1b, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x74, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x4d, 0x6f, 0x64, 0x65, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x14, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x16, 0x73, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x1c, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x1d, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x5f, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x50, 0x65, 0x65, 0x72, 0x53,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x15, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x5f, 0x67, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x49, 0x44, 0x73, 0x12, 0x21,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x49, 0x44,
	0x73, 0x1a, 0x13, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x49, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x16, 0x73, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x73, 0x54, 0x6f, 0x53, 0x65,
	0x6e, 0x64, 0x12, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x73,
	0x54, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x1a, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x43, 0x68, 0x61, 0x74, 0x73, 0x22,
	0x00, 0x12, 0x5f, 0x0a, 0x1f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x67,
	0x67, 0x6c, 0x65, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x48, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x12, 0x2b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x48, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x22, 0x00, 0x12, 0x71, 0x0a, 0x1d, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x67, 0x65,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x29, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x5f, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x19, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x54, 0x6f, 0x54,
	0x6f, 0x70, 0x12, 0x25, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x50, 0x69,
	0x6e, 0x6e, 0x65, 0x64, 0x54, 0x6f, 0x54, 0x6f, 0x70, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x13, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6f, 0x73, 0x74,
	0x73, 0x12, 0x1f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6f, 0x73,
	0x74, 0x73, 0x1a, 0x1d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x5f, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x16, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x31, 0x39, 0x32, 0x33, 0x46, 0x41, 0x38, 0x43, 0x12, 0x22, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x31, 0x39, 0x32, 0x33, 0x46, 0x41, 0x38,
	0x43, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x22, 0x00, 0x12, 0x53, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x72, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x4d, 0x61, 0x78, 0x49, 0x44, 0x73, 0x12, 0x22, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x4d, 0x61, 0x78, 0x49, 0x44, 0x73,
	0x1a, 0x13, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x49, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x1c, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x28, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x74, 0x6f,
	0x67, 0x67, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x48, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x22, 0x00, 0x12, 0x5c, 0x0a, 0x16, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x67, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x1a, 0x1c, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x5e, 0x0a, 0x1d, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x29, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x61,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x10, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x4d, 0x0a, 0x16, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x39, 0x35, 0x42, 0x45, 0x30, 0x36, 0x41, 0x12, 0x22, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x39, 0x35, 0x42, 0x45, 0x30, 0x36, 0x41, 0x1a, 0x0d,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x32,
	0x86, 0x03, 0x0a, 0x0a, 0x52, 0x50, 0x43, 0x54, 0x61, 0x6b, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x60,
	0x0a, 0x1a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x54, 0x61,
	0x6b, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x18, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x54, 0x61, 0x6b, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x00,
	0x12, 0x59, 0x0a, 0x1c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x54, 0x61, 0x6b, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x28, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x61, 0x6b, 0x65,
	0x6f, 0x75, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x17, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74,
	0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x1a, 0x1c, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x18, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x4c, 0x65, 0x66, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x24, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x67, 0x65,
	0x74, 0x4c, 0x65, 0x66, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x1a, 0x17, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x43, 0x68, 0x61, 0x74, 0x73, 0x22, 0x00, 0x32, 0xb6, 0x05, 0x0a, 0x09, 0x52, 0x50, 0x43,
	0x54, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x1f, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x1a, 0x11,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x1f, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x1a, 0x0e, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a,
	0x13, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x68, 0x65, 0x6d, 0x65, 0x12, 0x1f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x68, 0x65, 0x6d, 0x65, 0x1a, 0x0e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x68, 0x65, 0x6d, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x1d, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x14,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x54,
	0x68, 0x65, 0x6d, 0x65, 0x12, 0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x1c, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x67, 0x65, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x1a, 0x0e, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x11, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x73,
	0x12, 0x1d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x1a,
	0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x15, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x54, 0x68, 0x65,
	0x6d, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74,
	0x54, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x1a, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x4e, 0x0a, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x21, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x1a, 0x10, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22,
	0x00, 0x32, 0x69, 0x0a, 0x0c, 0x52, 0x50, 0x43, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65,
	0x73, 0x12, 0x59, 0x0a, 0x15, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x67, 0x65, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x67, 0x65, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x54, 0x69, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x32, 0xcd, 0x01, 0x0a,
	0x06, 0x52, 0x50, 0x43, 0x54, 0x6f, 0x73, 0x12, 0x6e, 0x0a, 0x1c, 0x68, 0x65, 0x6c, 0x70, 0x5f,
	0x67, 0x65, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x67, 0x65, 0x74, 0x54, 0x65, 0x72,
	0x6d, 0x73, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x1a, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x68, 0x65, 0x6c, 0x70,
	0x5f, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x19, 0x68, 0x65, 0x6c, 0x70, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x25, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x54, 0x65, 0x72,
	0x6d, 0x73, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x32, 0xd7, 0x01, 0x0a,
	0x10, 0x52, 0x50, 0x43, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x66, 0x0a, 0x18, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x24, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x1a, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x64, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x1d, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x64, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x29, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x32, 0xd3, 0x01, 0x0a, 0x0e, 0x52, 0x50, 0x43, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x16, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x65, 0x54, 0x65, 0x78, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x1f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x50, 0x65,
	0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x50, 0x65, 0x65, 0x72, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x0d, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x32, 0xa2, 0x01, 0x0a,
	0x06, 0x52, 0x50, 0x43, 0x54, 0x73, 0x66, 0x12, 0x4a, 0x0a, 0x10, 0x68, 0x65, 0x6c, 0x70, 0x5f,
	0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x67, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x11, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x65, 0x64, 0x69, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x00, 0x32, 0x93, 0x05, 0x0a, 0x08, 0x52, 0x50, 0x43, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x12, 0x53,
	0x0a, 0x13, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x19, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x1b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67,
	0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x27, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x21, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x00,
	0x12, 0x5d, 0x0a, 0x1e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x2a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x0d,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12,
	0x59, 0x0a, 0x1c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x28, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x1b, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x27, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x1b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x27, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x1a, 0x0d, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x1c,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x28, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x32, 0xa3, 0x02, 0x0a, 0x0a, 0x52, 0x50, 0x43, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x22, 0x00, 0x12, 0x59, 0x0a, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x67, 0x65,
	0x74, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x5f, 0x67, 0x65, 0x74, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x1b,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x5f, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a,
	0x1c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x66,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x00, 0x32, 0xce, 0x07,
	0x0a, 0x0e, 0x52, 0x50, 0x43, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x4b, 0x0a, 0x15, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x21, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x1a, 0x0d, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x49, 0x0a,
	0x14, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x16, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64,
	0x61, 0x79, 0x12, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x69,
	0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x1d, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x29, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x5f, 0x67, 0x65, 0x74, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x73, 0x12, 0x21, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x73,
	0x1a, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x73, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x42, 0x69, 0x72, 0x74, 0x68,
	0x64, 0x61, 0x79, 0x73, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x19, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68,
	0x6f, 0x74, 0x6f, 0x12, 0x25, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x5f, 0x50, 0x68, 0x6f, 0x74,
	0x6f, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x19, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x5f, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x12, 0x25, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x73, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x5f, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x22, 0x00,
	0x12, 0x4e, 0x0a, 0x13, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x12, 0x1f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x1a, 0x14, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x4c, 0x6f, 0x6e, 0x67, 0x22, 0x00,
	0x12, 0x52, 0x0a, 0x14, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x12, 0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x5f, 0x67, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x1a, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x5f, 0x50, 0x68, 0x6f, 0x74,
	0x6f, 0x73, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x20, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x5f, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x2c, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x5f, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x5f, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x22, 0x00, 0x12,
	0x4d, 0x0a, 0x16, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x1a, 0x0d, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x32, 0xae,
	0x03, 0x0a, 0x0c, 0x52, 0x50, 0x43, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x4b, 0x0a, 0x15, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x16,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x18, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x1e, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x5f, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x50, 0x65, 0x65, 0x72, 0x22, 0x00, 0x12,
	0x4d, 0x0a, 0x16, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x0d, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x4f,
	0x0a, 0x17, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x0d,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x32,
	0xb6, 0x02, 0x0a, 0x08, 0x52, 0x50, 0x43, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x44, 0x0a, 0x0e,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1a,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x1a, 0x14, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x55, 0x73, 0x65, 0x72,
	0x22, 0x00, 0x12, 0x4d, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x46,
	0x75, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x46, 0x75,
	0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x46, 0x75, 0x6c, 0x6c, 0x22,
	0x00, 0x12, 0x5c, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x21, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x1a, 0x1e, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x5f, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x50, 0x65, 0x65, 0x72, 0x22, 0x00, 0x12,
	0x37, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x12, 0x17,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x32, 0xe0, 0x07, 0x0a, 0x0c, 0x52, 0x50, 0x43,
	0x56, 0x6f, 0x69, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x79, 0x0a, 0x1f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2b, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x27, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x41, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x13, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x67, 0x65,
	0x74, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x67,
	0x65, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x11, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4a, 0x53, 0x4f, 0x4e, 0x22,
	0x00, 0x12, 0x4e, 0x0a, 0x11, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x1d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x6c, 0x6c, 0x1a, 0x18, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x22,
	0x00, 0x12, 0x4c, 0x0a, 0x10, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x1c, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43,
	0x61, 0x6c, 0x6c, 0x1a, 0x18, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x22, 0x00, 0x12,
	0x4e, 0x0a, 0x11, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x1d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x43,
	0x61, 0x6c, 0x6c, 0x1a, 0x18, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x22, 0x00, 0x12,
	0x45, 0x0a, 0x12, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x1e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x43, 0x61, 0x6c, 0x6c, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x11, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f,
	0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x1d, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x64,
	0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4a,
	0x0a, 0x13, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x6c,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x13, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x12, 0x1f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x17, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x6e,
	0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x11, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x61,
	0x76, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x12, 0x1d, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x61, 0x76,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x1a, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x26, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x1a,
	0x18, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x22, 0x00, 0x32, 0xbc, 0x05, 0x0a, 0x0d,
	0x52, 0x50, 0x43, 0x57, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x70, 0x65, 0x72, 0x73, 0x12, 0x59, 0x0a,
	0x15, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c,
	0x50, 0x61, 0x70, 0x65, 0x72, 0x73, 0x12, 0x21, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x57,
	0x61, 0x6c, 0x6c, 0x50, 0x61, 0x70, 0x65, 0x72, 0x73, 0x1a, 0x1b, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x57, 0x61, 0x6c, 0x6c,
	0x50, 0x61, 0x70, 0x65, 0x72, 0x73, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x14, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x70, 0x65, 0x72,
	0x12, 0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x70,
	0x65, 0x72, 0x1a, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x61, 0x6c,
	0x6c, 0x50, 0x61, 0x70, 0x65, 0x72, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x17, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x50, 0x61,
	0x70, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x57,
	0x61, 0x6c, 0x6c, 0x50, 0x61, 0x70, 0x65, 0x72, 0x1a, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x70, 0x65, 0x72, 0x22, 0x00, 0x12, 0x4b,
	0x0a, 0x15, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x57, 0x61,
	0x6c, 0x6c, 0x50, 0x61, 0x70, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x61, 0x76,
	0x65, 0x57, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x70, 0x65, 0x72, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x18, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x57, 0x61,
	0x6c, 0x6c, 0x50, 0x61, 0x70, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x57, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x70, 0x65, 0x72, 0x1a, 0x0d, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x4f,
	0x0a, 0x17, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x57,
	0x61, 0x6c, 0x6c, 0x50, 0x61, 0x70, 0x65, 0x72, 0x73, 0x12, 0x23, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x70, 0x65, 0x72, 0x73, 0x1a, 0x0d,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12,
	0x61, 0x0a, 0x1a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x57, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x70, 0x65, 0x72, 0x73, 0x12, 0x26, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x57, 0x61, 0x6c, 0x6c, 0x50,
	0x61, 0x70, 0x65, 0x72, 0x73, 0x1a, 0x19, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x57, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x70, 0x65, 0x72,
	0x22, 0x00, 0x12, 0x56, 0x0a, 0x19, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x70, 0x65, 0x72, 0x12,
	0x25, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x57, 0x61, 0x6c,
	0x6c, 0x50, 0x61, 0x70, 0x65, 0x72, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x32, 0xb6, 0x03, 0x0a, 0x0a, 0x52,
	0x50, 0x43, 0x57, 0x65, 0x62, 0x50, 0x61, 0x67, 0x65, 0x12, 0x78, 0x0a, 0x22, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x57, 0x65, 0x62, 0x50, 0x61, 0x67, 0x65,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x35, 0x37, 0x30, 0x44, 0x36, 0x46, 0x36, 0x46, 0x12,
	0x2e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x57, 0x65, 0x62, 0x50, 0x61, 0x67, 0x65,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x35, 0x37, 0x30, 0x44, 0x36, 0x46, 0x36, 0x46, 0x1a,
	0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x57, 0x65, 0x62, 0x50, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x1b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x57, 0x65, 0x62, 0x50, 0x61, 0x67, 0x65, 0x38, 0x44, 0x39, 0x36, 0x39, 0x32,
	0x41, 0x33, 0x12, 0x27, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x57, 0x65, 0x62, 0x50,
	0x61, 0x67, 0x65, 0x38, 0x44, 0x39, 0x36, 0x39, 0x32, 0x41, 0x33, 0x1a, 0x19, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x57,
	0x65, 0x62, 0x50, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x22, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x57, 0x65, 0x62, 0x50, 0x61, 0x67, 0x65, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x38, 0x42, 0x36, 0x38, 0x42, 0x30, 0x43, 0x43, 0x12, 0x2e,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x57, 0x65, 0x62, 0x50, 0x61, 0x67, 0x65, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x38, 0x42, 0x36, 0x38, 0x42, 0x30, 0x43, 0x43, 0x1a, 0x15,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x1b, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x57, 0x65, 0x62, 0x50, 0x61, 0x67, 0x65, 0x33, 0x32,
	0x43, 0x41, 0x38, 0x46, 0x39, 0x31, 0x12, 0x27, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74,
	0x57, 0x65, 0x62, 0x50, 0x61, 0x67, 0x65, 0x33, 0x32, 0x43, 0x41, 0x38, 0x46, 0x39, 0x31, 0x1a,
	0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x50, 0x61, 0x67,
	0x65, 0x22, 0x00, 0x32, 0x59, 0x0a, 0x06, 0x52, 0x50, 0x43, 0x42, 0x69, 0x7a, 0x12, 0x4f, 0x0a,
	0x14, 0x62, 0x69, 0x7a, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x42, 0x69, 0x7a, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x61, 0x77, 0x12, 0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4c, 0x5f, 0x62, 0x69, 0x7a, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x42, 0x69, 0x7a,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x61, 0x77, 0x1a, 0x13, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x69, 0x7a, 0x44, 0x61, 0x74, 0x61, 0x52, 0x61, 0x77, 0x22, 0x00, 0x42, 0x23,
	0x5a, 0x21, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x61,
	0x6d, 0x67, 0x72, 0x61, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_schema_tl_sync_service_proto_rawDescOnce sync.Once
	file_schema_tl_sync_service_proto_rawDescData []byte
)

func file_schema_tl_sync_service_proto_rawDescGZIP() []byte {
	file_schema_tl_sync_service_proto_rawDescOnce.Do(func() {
		file_schema_tl_sync_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_schema_tl_sync_service_proto_rawDesc), len(file_schema_tl_sync_service_proto_rawDesc)))
	})
	return file_schema_tl_sync_service_proto_rawDescData
}

var file_schema_tl_sync_service_proto_msgTypes = make([]protoimpl.MessageInfo, 780)
var file_schema_tl_sync_service_proto_goTypes = []any{
	(*TLInvokeAfterMsg)(nil),                             // 0: mtproto.TL_invokeAfterMsg
	(*TLInvokeAfterMsgs)(nil),                            // 1: mtproto.TL_invokeAfterMsgs
	(*TLInitConnection)(nil),                             // 2: mtproto.TL_initConnection
	(*TLInvokeWithLayer)(nil),                            // 3: mtproto.TL_invokeWithLayer
	(*TLInvokeWithoutUpdates)(nil),                       // 4: mtproto.TL_invokeWithoutUpdates
	(*TLInvokeWithMessagesRange)(nil),                    // 5: mtproto.TL_invokeWithMessagesRange
	(*TLInvokeWithTakeout)(nil),                          // 6: mtproto.TL_invokeWithTakeout
	(*TLInvokeWithBusinessConnection)(nil),               // 7: mtproto.TL_invokeWithBusinessConnection
	(*TLInvokeWithGooglePlayIntegrity)(nil),              // 8: mtproto.TL_invokeWithGooglePlayIntegrity
	(*TLInvokeWithApnsSecret)(nil),                       // 9: mtproto.TL_invokeWithApnsSecret
	(*TLInvokeWithReCaptcha)(nil),                        // 10: mtproto.TL_invokeWithReCaptcha
	(*TLAuthSendCode)(nil),                               // 11: mtproto.TL_auth_sendCode
	(*TLAuthSignUp)(nil),                                 // 12: mtproto.TL_auth_signUp
	(*TLAuthSignIn)(nil),                                 // 13: mtproto.TL_auth_signIn
	(*TLAuthLogOut)(nil),                                 // 14: mtproto.TL_auth_logOut
	(*TLAuthResetAuthorizations)(nil),                    // 15: mtproto.TL_auth_resetAuthorizations
	(*TLAuthExportAuthorization)(nil),                    // 16: mtproto.TL_auth_exportAuthorization
	(*TLAuthImportAuthorization)(nil),                    // 17: mtproto.TL_auth_importAuthorization
	(*TLAuthBindTempAuthKey)(nil),                        // 18: mtproto.TL_auth_bindTempAuthKey
	(*TLAuthImportBotAuthorization)(nil),                 // 19: mtproto.TL_auth_importBotAuthorization
	(*TLAuthCheckPassword)(nil),                          // 20: mtproto.TL_auth_checkPassword
	(*TLAuthRequestPasswordRecovery)(nil),                // 21: mtproto.TL_auth_requestPasswordRecovery
	(*TLAuthRecoverPassword)(nil),                        // 22: mtproto.TL_auth_recoverPassword
	(*TLAuthResendCode)(nil),                             // 23: mtproto.TL_auth_resendCode
	(*TLAuthCancelCode)(nil),                             // 24: mtproto.TL_auth_cancelCode
	(*TLAuthDropTempAuthKeys)(nil),                       // 25: mtproto.TL_auth_dropTempAuthKeys
	(*TLAuthExportLoginToken)(nil),                       // 26: mtproto.TL_auth_exportLoginToken
	(*TLAuthImportLoginToken)(nil),                       // 27: mtproto.TL_auth_importLoginToken
	(*TLAuthAcceptLoginToken)(nil),                       // 28: mtproto.TL_auth_acceptLoginToken
	(*TLAuthCheckRecoveryPassword)(nil),                  // 29: mtproto.TL_auth_checkRecoveryPassword
	(*TLAuthImportWebTokenAuthorization)(nil),            // 30: mtproto.TL_auth_importWebTokenAuthorization
	(*TLAuthRequestFirebaseSms)(nil),                     // 31: mtproto.TL_auth_requestFirebaseSms
	(*TLAuthResetLoginEmail)(nil),                        // 32: mtproto.TL_auth_resetLoginEmail
	(*TLAuthReportMissingCode)(nil),                      // 33: mtproto.TL_auth_reportMissingCode
	(*TLAccountRegisterDevice)(nil),                      // 34: mtproto.TL_account_registerDevice
	(*TLAccountUnregisterDevice)(nil),                    // 35: mtproto.TL_account_unregisterDevice
	(*TLAccountUpdateNotifySettings)(nil),                // 36: mtproto.TL_account_updateNotifySettings
	(*TLAccountGetNotifySettings)(nil),                   // 37: mtproto.TL_account_getNotifySettings
	(*TLAccountResetNotifySettings)(nil),                 // 38: mtproto.TL_account_resetNotifySettings
	(*TLAccountUpdateProfile)(nil),                       // 39: mtproto.TL_account_updateProfile
	(*TLAccountUpdateStatus)(nil),                        // 40: mtproto.TL_account_updateStatus
	(*TLAccountGetWallPapers)(nil),                       // 41: mtproto.TL_account_getWallPapers
	(*TLAccountReportPeer)(nil),                          // 42: mtproto.TL_account_reportPeer
	(*TLAccountCheckUsername)(nil),                       // 43: mtproto.TL_account_checkUsername
	(*TLAccountUpdateUsername)(nil),                      // 44: mtproto.TL_account_updateUsername
	(*TLAccountGetPrivacy)(nil),                          // 45: mtproto.TL_account_getPrivacy
	(*TLAccountSetPrivacy)(nil),                          // 46: mtproto.TL_account_setPrivacy
	(*TLAccountDeleteAccount)(nil),                       // 47: mtproto.TL_account_deleteAccount
	(*TLAccountGetAccountTTL)(nil),                       // 48: mtproto.TL_account_getAccountTTL
	(*TLAccountSetAccountTTL)(nil),                       // 49: mtproto.TL_account_setAccountTTL
	(*TLAccountSendChangePhoneCode)(nil),                 // 50: mtproto.TL_account_sendChangePhoneCode
	(*TLAccountChangePhone)(nil),                         // 51: mtproto.TL_account_changePhone
	(*TLAccountUpdateDeviceLocked)(nil),                  // 52: mtproto.TL_account_updateDeviceLocked
	(*TLAccountGetAuthorizations)(nil),                   // 53: mtproto.TL_account_getAuthorizations
	(*TLAccountResetAuthorization)(nil),                  // 54: mtproto.TL_account_resetAuthorization
	(*TLAccountGetPassword)(nil),                         // 55: mtproto.TL_account_getPassword
	(*TLAccountGetPasswordSettings)(nil),                 // 56: mtproto.TL_account_getPasswordSettings
	(*TLAccountUpdatePasswordSettings)(nil),              // 57: mtproto.TL_account_updatePasswordSettings
	(*TLAccountSendConfirmPhoneCode)(nil),                // 58: mtproto.TL_account_sendConfirmPhoneCode
	(*TLAccountConfirmPhone)(nil),                        // 59: mtproto.TL_account_confirmPhone
	(*TLAccountGetTmpPassword)(nil),                      // 60: mtproto.TL_account_getTmpPassword
	(*TLAccountGetWebAuthorizations)(nil),                // 61: mtproto.TL_account_getWebAuthorizations
	(*TLAccountResetWebAuthorization)(nil),               // 62: mtproto.TL_account_resetWebAuthorization
	(*TLAccountResetWebAuthorizations)(nil),              // 63: mtproto.TL_account_resetWebAuthorizations
	(*TLAccountGetAllSecureValues)(nil),                  // 64: mtproto.TL_account_getAllSecureValues
	(*TLAccountGetSecureValue)(nil),                      // 65: mtproto.TL_account_getSecureValue
	(*TLAccountSaveSecureValue)(nil),                     // 66: mtproto.TL_account_saveSecureValue
	(*TLAccountDeleteSecureValue)(nil),                   // 67: mtproto.TL_account_deleteSecureValue
	(*TLAccountGetAuthorizationForm)(nil),                // 68: mtproto.TL_account_getAuthorizationForm
	(*TLAccountAcceptAuthorization)(nil),                 // 69: mtproto.TL_account_acceptAuthorization
	(*TLAccountSendVerifyPhoneCode)(nil),                 // 70: mtproto.TL_account_sendVerifyPhoneCode
	(*TLAccountVerifyPhone)(nil),                         // 71: mtproto.TL_account_verifyPhone
	(*TLAccountSendVerifyEmailCode)(nil),                 // 72: mtproto.TL_account_sendVerifyEmailCode
	(*TLAccountVerifyEmail32DA4CF)(nil),                  // 73: mtproto.TL_account_verifyEmail32DA4CF
	(*TLAccountInitTakeoutSession)(nil),                  // 74: mtproto.TL_account_initTakeoutSession
	(*TLAccountFinishTakeoutSession)(nil),                // 75: mtproto.TL_account_finishTakeoutSession
	(*TLAccountConfirmPasswordEmail)(nil),                // 76: mtproto.TL_account_confirmPasswordEmail
	(*TLAccountResendPasswordEmail)(nil),                 // 77: mtproto.TL_account_resendPasswordEmail
	(*TLAccountCancelPasswordEmail)(nil),                 // 78: mtproto.TL_account_cancelPasswordEmail
	(*TLAccountGetContactSignUpNotification)(nil),        // 79: mtproto.TL_account_getContactSignUpNotification
	(*TLAccountSetContactSignUpNotification)(nil),        // 80: mtproto.TL_account_setContactSignUpNotification
	(*TLAccountGetNotifyExceptions)(nil),                 // 81: mtproto.TL_account_getNotifyExceptions
	(*TLAccountGetWallPaper)(nil),                        // 82: mtproto.TL_account_getWallPaper
	(*TLAccountUploadWallPaper)(nil),                     // 83: mtproto.TL_account_uploadWallPaper
	(*TLAccountSaveWallPaper)(nil),                       // 84: mtproto.TL_account_saveWallPaper
	(*TLAccountInstallWallPaper)(nil),                    // 85: mtproto.TL_account_installWallPaper
	(*TLAccountResetWallPapers)(nil),                     // 86: mtproto.TL_account_resetWallPapers
	(*TLAccountGetAutoDownloadSettings)(nil),             // 87: mtproto.TL_account_getAutoDownloadSettings
	(*TLAccountSaveAutoDownloadSettings)(nil),            // 88: mtproto.TL_account_saveAutoDownloadSettings
	(*TLAccountUploadTheme)(nil),                         // 89: mtproto.TL_account_uploadTheme
	(*TLAccountCreateTheme)(nil),                         // 90: mtproto.TL_account_createTheme
	(*TLAccountUpdateTheme)(nil),                         // 91: mtproto.TL_account_updateTheme
	(*TLAccountSaveTheme)(nil),                           // 92: mtproto.TL_account_saveTheme
	(*TLAccountInstallTheme)(nil),                        // 93: mtproto.TL_account_installTheme
	(*TLAccountGetTheme)(nil),                            // 94: mtproto.TL_account_getTheme
	(*TLAccountGetThemes)(nil),                           // 95: mtproto.TL_account_getThemes
	(*TLAccountSetContentSettings)(nil),                  // 96: mtproto.TL_account_setContentSettings
	(*TLAccountGetContentSettings)(nil),                  // 97: mtproto.TL_account_getContentSettings
	(*TLAccountGetMultiWallPapers)(nil),                  // 98: mtproto.TL_account_getMultiWallPapers
	(*TLAccountGetGlobalPrivacySettings)(nil),            // 99: mtproto.TL_account_getGlobalPrivacySettings
	(*TLAccountSetGlobalPrivacySettings)(nil),            // 100: mtproto.TL_account_setGlobalPrivacySettings
	(*TLAccountReportProfilePhoto)(nil),                  // 101: mtproto.TL_account_reportProfilePhoto
	(*TLAccountResetPassword)(nil),                       // 102: mtproto.TL_account_resetPassword
	(*TLAccountDeclinePasswordReset)(nil),                // 103: mtproto.TL_account_declinePasswordReset
	(*TLAccountGetChatThemes)(nil),                       // 104: mtproto.TL_account_getChatThemes
	(*TLAccountSetAuthorizationTTL)(nil),                 // 105: mtproto.TL_account_setAuthorizationTTL
	(*TLAccountChangeAuthorizationSettings)(nil),         // 106: mtproto.TL_account_changeAuthorizationSettings
	(*TLAccountGetSavedRingtones)(nil),                   // 107: mtproto.TL_account_getSavedRingtones
	(*TLAccountSaveRingtone)(nil),                        // 108: mtproto.TL_account_saveRingtone
	(*TLAccountUploadRingtone)(nil),                      // 109: mtproto.TL_account_uploadRingtone
	(*TLAccountUpdateEmojiStatus)(nil),                   // 110: mtproto.TL_account_updateEmojiStatus
	(*TLAccountGetDefaultEmojiStatuses)(nil),             // 111: mtproto.TL_account_getDefaultEmojiStatuses
	(*TLAccountGetRecentEmojiStatuses)(nil),              // 112: mtproto.TL_account_getRecentEmojiStatuses
	(*TLAccountClearRecentEmojiStatuses)(nil),            // 113: mtproto.TL_account_clearRecentEmojiStatuses
	(*TLAccountReorderUsernames)(nil),                    // 114: mtproto.TL_account_reorderUsernames
	(*TLAccountToggleUsername)(nil),                      // 115: mtproto.TL_account_toggleUsername
	(*TLAccountGetDefaultProfilePhotoEmojis)(nil),        // 116: mtproto.TL_account_getDefaultProfilePhotoEmojis
	(*TLAccountGetDefaultGroupPhotoEmojis)(nil),          // 117: mtproto.TL_account_getDefaultGroupPhotoEmojis
	(*TLAccountGetAutoSaveSettings)(nil),                 // 118: mtproto.TL_account_getAutoSaveSettings
	(*TLAccountSaveAutoSaveSettings)(nil),                // 119: mtproto.TL_account_saveAutoSaveSettings
	(*TLAccountDeleteAutoSaveExceptions)(nil),            // 120: mtproto.TL_account_deleteAutoSaveExceptions
	(*TLAccountInvalidateSignInCodes)(nil),               // 121: mtproto.TL_account_invalidateSignInCodes
	(*TLAccountUpdateColor)(nil),                         // 122: mtproto.TL_account_updateColor
	(*TLAccountGetDefaultBackgroundEmojis)(nil),          // 123: mtproto.TL_account_getDefaultBackgroundEmojis
	(*TLAccountGetChannelDefaultEmojiStatuses)(nil),      // 124: mtproto.TL_account_getChannelDefaultEmojiStatuses
	(*TLAccountGetChannelRestrictedStatusEmojis)(nil),    // 125: mtproto.TL_account_getChannelRestrictedStatusEmojis
	(*TLAccountUpdateBusinessWorkHours)(nil),             // 126: mtproto.TL_account_updateBusinessWorkHours
	(*TLAccountUpdateBusinessLocation)(nil),              // 127: mtproto.TL_account_updateBusinessLocation
	(*TLAccountUpdateBusinessGreetingMessage)(nil),       // 128: mtproto.TL_account_updateBusinessGreetingMessage
	(*TLAccountUpdateBusinessAwayMessage)(nil),           // 129: mtproto.TL_account_updateBusinessAwayMessage
	(*TLAccountUpdateConnectedBot)(nil),                  // 130: mtproto.TL_account_updateConnectedBot
	(*TLAccountGetConnectedBots)(nil),                    // 131: mtproto.TL_account_getConnectedBots
	(*TLAccountGetBotBusinessConnection)(nil),            // 132: mtproto.TL_account_getBotBusinessConnection
	(*TLAccountUpdateBusinessIntro)(nil),                 // 133: mtproto.TL_account_updateBusinessIntro
	(*TLAccountToggleConnectedBotPaused)(nil),            // 134: mtproto.TL_account_toggleConnectedBotPaused
	(*TLAccountDisablePeerConnectedBot)(nil),             // 135: mtproto.TL_account_disablePeerConnectedBot
	(*TLAccountUpdateBirthday)(nil),                      // 136: mtproto.TL_account_updateBirthday
	(*TLAccountCreateBusinessChatLink)(nil),              // 137: mtproto.TL_account_createBusinessChatLink
	(*TLAccountEditBusinessChatLink)(nil),                // 138: mtproto.TL_account_editBusinessChatLink
	(*TLAccountDeleteBusinessChatLink)(nil),              // 139: mtproto.TL_account_deleteBusinessChatLink
	(*TLAccountGetBusinessChatLinks)(nil),                // 140: mtproto.TL_account_getBusinessChatLinks
	(*TLAccountResolveBusinessChatLink)(nil),             // 141: mtproto.TL_account_resolveBusinessChatLink
	(*TLAccountUpdatePersonalChannel)(nil),               // 142: mtproto.TL_account_updatePersonalChannel
	(*TLAccountToggleSponsoredMessages)(nil),             // 143: mtproto.TL_account_toggleSponsoredMessages
	(*TLAccountGetReactionsNotifySettings)(nil),          // 144: mtproto.TL_account_getReactionsNotifySettings
	(*TLAccountSetReactionsNotifySettings)(nil),          // 145: mtproto.TL_account_setReactionsNotifySettings
	(*TLAccountGetCollectibleEmojiStatuses)(nil),         // 146: mtproto.TL_account_getCollectibleEmojiStatuses
	(*TLAccountAddNoPaidMessagesException)(nil),          // 147: mtproto.TL_account_addNoPaidMessagesException
	(*TLAccountGetPaidMessagesRevenue)(nil),              // 148: mtproto.TL_account_getPaidMessagesRevenue
	(*TLUsersGetUsers)(nil),                              // 149: mtproto.TL_users_getUsers
	(*TLUsersGetFullUser)(nil),                           // 150: mtproto.TL_users_getFullUser
	(*TLUsersSetSecureValueErrors)(nil),                  // 151: mtproto.TL_users_setSecureValueErrors
	(*TLUsersGetRequirementsToContact)(nil),              // 152: mtproto.TL_users_getRequirementsToContact
	(*TLContactsGetContactIDs)(nil),                      // 153: mtproto.TL_contacts_getContactIDs
	(*TLContactsGetStatuses)(nil),                        // 154: mtproto.TL_contacts_getStatuses
	(*TLContactsGetContacts)(nil),                        // 155: mtproto.TL_contacts_getContacts
	(*TLContactsImportContacts)(nil),                     // 156: mtproto.TL_contacts_importContacts
	(*TLContactsDeleteContacts)(nil),                     // 157: mtproto.TL_contacts_deleteContacts
	(*TLContactsDeleteByPhones)(nil),                     // 158: mtproto.TL_contacts_deleteByPhones
	(*TLContactsBlock)(nil),                              // 159: mtproto.TL_contacts_block
	(*TLContactsUnblock)(nil),                            // 160: mtproto.TL_contacts_unblock
	(*TLContactsGetBlocked)(nil),                         // 161: mtproto.TL_contacts_getBlocked
	(*TLContactsSearch)(nil),                             // 162: mtproto.TL_contacts_search
	(*TLContactsResolveUsername)(nil),                    // 163: mtproto.TL_contacts_resolveUsername
	(*TLContactsGetTopPeers)(nil),                        // 164: mtproto.TL_contacts_getTopPeers
	(*TLContactsResetTopPeerRating)(nil),                 // 165: mtproto.TL_contacts_resetTopPeerRating
	(*TLContactsResetSaved)(nil),                         // 166: mtproto.TL_contacts_resetSaved
	(*TLContactsGetSaved)(nil),                           // 167: mtproto.TL_contacts_getSaved
	(*TLContactsToggleTopPeers)(nil),                     // 168: mtproto.TL_contacts_toggleTopPeers
	(*TLContactsAddContact)(nil),                         // 169: mtproto.TL_contacts_addContact
	(*TLContactsAcceptContact)(nil),                      // 170: mtproto.TL_contacts_acceptContact
	(*TLContactsGetLocated)(nil),                         // 171: mtproto.TL_contacts_getLocated
	(*TLContactsBlockFromReplies)(nil),                   // 172: mtproto.TL_contacts_blockFromReplies
	(*TLContactsResolvePhone)(nil),                       // 173: mtproto.TL_contacts_resolvePhone
	(*TLContactsExportContactToken)(nil),                 // 174: mtproto.TL_contacts_exportContactToken
	(*TLContactsImportContactToken)(nil),                 // 175: mtproto.TL_contacts_importContactToken
	(*TLContactsEditCloseFriends)(nil),                   // 176: mtproto.TL_contacts_editCloseFriends
	(*TLContactsSetBlocked)(nil),                         // 177: mtproto.TL_contacts_setBlocked
	(*TLContactsGetBirthdays)(nil),                       // 178: mtproto.TL_contacts_getBirthdays
	(*TLContactsGetSponsoredPeers)(nil),                  // 179: mtproto.TL_contacts_getSponsoredPeers
	(*TLMessagesGetMessages)(nil),                        // 180: mtproto.TL_messages_getMessages
	(*TLMessagesGetDialogs)(nil),                         // 181: mtproto.TL_messages_getDialogs
	(*TLMessagesGetHistory)(nil),                         // 182: mtproto.TL_messages_getHistory
	(*TLMessagesSearch)(nil),                             // 183: mtproto.TL_messages_search
	(*TLMessagesReadHistory)(nil),                        // 184: mtproto.TL_messages_readHistory
	(*TLMessagesDeleteHistory)(nil),                      // 185: mtproto.TL_messages_deleteHistory
	(*TLMessagesDeleteMessages)(nil),                     // 186: mtproto.TL_messages_deleteMessages
	(*TLMessagesReceivedMessages)(nil),                   // 187: mtproto.TL_messages_receivedMessages
	(*TLMessagesSetTyping)(nil),                          // 188: mtproto.TL_messages_setTyping
	(*TLMessagesSendMessage)(nil),                        // 189: mtproto.TL_messages_sendMessage
	(*TLMessagesSendMedia)(nil),                          // 190: mtproto.TL_messages_sendMedia
	(*TLMessagesForwardMessages)(nil),                    // 191: mtproto.TL_messages_forwardMessages
	(*TLMessagesReportSpam)(nil),                         // 192: mtproto.TL_messages_reportSpam
	(*TLMessagesGetPeerSettings)(nil),                    // 193: mtproto.TL_messages_getPeerSettings
	(*TLMessagesReportFC78AF9B)(nil),                     // 194: mtproto.TL_messages_reportFC78AF9B
	(*TLMessagesGetChats)(nil),                           // 195: mtproto.TL_messages_getChats
	(*TLMessagesGetFullChat)(nil),                        // 196: mtproto.TL_messages_getFullChat
	(*TLMessagesEditChatTitle)(nil),                      // 197: mtproto.TL_messages_editChatTitle
	(*TLMessagesEditChatPhoto)(nil),                      // 198: mtproto.TL_messages_editChatPhoto
	(*TLMessagesAddChatUserCBC6D107)(nil),                // 199: mtproto.TL_messages_addChatUserCBC6D107
	(*TLMessagesDeleteChatUser)(nil),                     // 200: mtproto.TL_messages_deleteChatUser
	(*TLMessagesCreateChat92CEDDD4)(nil),                 // 201: mtproto.TL_messages_createChat92CEDDD4
	(*TLMessagesGetDhConfig)(nil),                        // 202: mtproto.TL_messages_getDhConfig
	(*TLMessagesRequestEncryption)(nil),                  // 203: mtproto.TL_messages_requestEncryption
	(*TLMessagesAcceptEncryption)(nil),                   // 204: mtproto.TL_messages_acceptEncryption
	(*TLMessagesDiscardEncryption)(nil),                  // 205: mtproto.TL_messages_discardEncryption
	(*TLMessagesSetEncryptedTyping)(nil),                 // 206: mtproto.TL_messages_setEncryptedTyping
	(*TLMessagesReadEncryptedHistory)(nil),               // 207: mtproto.TL_messages_readEncryptedHistory
	(*TLMessagesSendEncrypted)(nil),                      // 208: mtproto.TL_messages_sendEncrypted
	(*TLMessagesSendEncryptedFile)(nil),                  // 209: mtproto.TL_messages_sendEncryptedFile
	(*TLMessagesSendEncryptedService)(nil),               // 210: mtproto.TL_messages_sendEncryptedService
	(*TLMessagesReceivedQueue)(nil),                      // 211: mtproto.TL_messages_receivedQueue
	(*TLMessagesReportEncryptedSpam)(nil),                // 212: mtproto.TL_messages_reportEncryptedSpam
	(*TLMessagesReadMessageContents)(nil),                // 213: mtproto.TL_messages_readMessageContents
	(*TLMessagesGetStickers)(nil),                        // 214: mtproto.TL_messages_getStickers
	(*TLMessagesGetAllStickers)(nil),                     // 215: mtproto.TL_messages_getAllStickers
	(*TLMessagesGetWebPagePreview570D6F6F)(nil),          // 216: mtproto.TL_messages_getWebPagePreview570D6F6F
	(*TLMessagesExportChatInvite)(nil),                   // 217: mtproto.TL_messages_exportChatInvite
	(*TLMessagesCheckChatInvite)(nil),                    // 218: mtproto.TL_messages_checkChatInvite
	(*TLMessagesImportChatInvite)(nil),                   // 219: mtproto.TL_messages_importChatInvite
	(*TLMessagesGetStickerSet)(nil),                      // 220: mtproto.TL_messages_getStickerSet
	(*TLMessagesInstallStickerSet)(nil),                  // 221: mtproto.TL_messages_installStickerSet
	(*TLMessagesUninstallStickerSet)(nil),                // 222: mtproto.TL_messages_uninstallStickerSet
	(*TLMessagesStartBot)(nil),                           // 223: mtproto.TL_messages_startBot
	(*TLMessagesGetMessagesViews)(nil),                   // 224: mtproto.TL_messages_getMessagesViews
	(*TLMessagesEditChatAdmin)(nil),                      // 225: mtproto.TL_messages_editChatAdmin
	(*TLMessagesMigrateChat)(nil),                        // 226: mtproto.TL_messages_migrateChat
	(*TLMessagesSearchGlobal)(nil),                       // 227: mtproto.TL_messages_searchGlobal
	(*TLMessagesReorderStickerSets)(nil),                 // 228: mtproto.TL_messages_reorderStickerSets
	(*TLMessagesGetDocumentByHash)(nil),                  // 229: mtproto.TL_messages_getDocumentByHash
	(*TLMessagesGetSavedGifs)(nil),                       // 230: mtproto.TL_messages_getSavedGifs
	(*TLMessagesSaveGif)(nil),                            // 231: mtproto.TL_messages_saveGif
	(*TLMessagesGetInlineBotResults)(nil),                // 232: mtproto.TL_messages_getInlineBotResults
	(*TLMessagesSetInlineBotResults)(nil),                // 233: mtproto.TL_messages_setInlineBotResults
	(*TLMessagesSendInlineBotResult)(nil),                // 234: mtproto.TL_messages_sendInlineBotResult
	(*TLMessagesGetMessageEditData)(nil),                 // 235: mtproto.TL_messages_getMessageEditData
	(*TLMessagesEditMessage)(nil),                        // 236: mtproto.TL_messages_editMessage
	(*TLMessagesEditInlineBotMessage)(nil),               // 237: mtproto.TL_messages_editInlineBotMessage
	(*TLMessagesGetBotCallbackAnswer)(nil),               // 238: mtproto.TL_messages_getBotCallbackAnswer
	(*TLMessagesSetBotCallbackAnswer)(nil),               // 239: mtproto.TL_messages_setBotCallbackAnswer
	(*TLMessagesGetPeerDialogs)(nil),                     // 240: mtproto.TL_messages_getPeerDialogs
	(*TLMessagesSaveDraft)(nil),                          // 241: mtproto.TL_messages_saveDraft
	(*TLMessagesGetAllDrafts)(nil),                       // 242: mtproto.TL_messages_getAllDrafts
	(*TLMessagesGetFeaturedStickers)(nil),                // 243: mtproto.TL_messages_getFeaturedStickers
	(*TLMessagesReadFeaturedStickers)(nil),               // 244: mtproto.TL_messages_readFeaturedStickers
	(*TLMessagesGetRecentStickers)(nil),                  // 245: mtproto.TL_messages_getRecentStickers
	(*TLMessagesSaveRecentSticker)(nil),                  // 246: mtproto.TL_messages_saveRecentSticker
	(*TLMessagesClearRecentStickers)(nil),                // 247: mtproto.TL_messages_clearRecentStickers
	(*TLMessagesGetArchivedStickers)(nil),                // 248: mtproto.TL_messages_getArchivedStickers
	(*TLMessagesGetMaskStickers)(nil),                    // 249: mtproto.TL_messages_getMaskStickers
	(*TLMessagesGetAttachedStickers)(nil),                // 250: mtproto.TL_messages_getAttachedStickers
	(*TLMessagesSetGameScore)(nil),                       // 251: mtproto.TL_messages_setGameScore
	(*TLMessagesSetInlineGameScore)(nil),                 // 252: mtproto.TL_messages_setInlineGameScore
	(*TLMessagesGetGameHighScores)(nil),                  // 253: mtproto.TL_messages_getGameHighScores
	(*TLMessagesGetInlineGameHighScores)(nil),            // 254: mtproto.TL_messages_getInlineGameHighScores
	(*TLMessagesGetCommonChats)(nil),                     // 255: mtproto.TL_messages_getCommonChats
	(*TLMessagesGetWebPage8D9692A3)(nil),                 // 256: mtproto.TL_messages_getWebPage8D9692A3
	(*TLMessagesToggleDialogPin)(nil),                    // 257: mtproto.TL_messages_toggleDialogPin
	(*TLMessagesReorderPinnedDialogs)(nil),               // 258: mtproto.TL_messages_reorderPinnedDialogs
	(*TLMessagesGetPinnedDialogs)(nil),                   // 259: mtproto.TL_messages_getPinnedDialogs
	(*TLMessagesSetBotShippingResults)(nil),              // 260: mtproto.TL_messages_setBotShippingResults
	(*TLMessagesSetBotPrecheckoutResults)(nil),           // 261: mtproto.TL_messages_setBotPrecheckoutResults
	(*TLMessagesUploadMedia)(nil),                        // 262: mtproto.TL_messages_uploadMedia
	(*TLMessagesSendScreenshotNotification)(nil),         // 263: mtproto.TL_messages_sendScreenshotNotification
	(*TLMessagesGetFavedStickers)(nil),                   // 264: mtproto.TL_messages_getFavedStickers
	(*TLMessagesFaveSticker)(nil),                        // 265: mtproto.TL_messages_faveSticker
	(*TLMessagesGetUnreadMentions)(nil),                  // 266: mtproto.TL_messages_getUnreadMentions
	(*TLMessagesReadMentions)(nil),                       // 267: mtproto.TL_messages_readMentions
	(*TLMessagesGetRecentLocations)(nil),                 // 268: mtproto.TL_messages_getRecentLocations
	(*TLMessagesSendMultiMedia)(nil),                     // 269: mtproto.TL_messages_sendMultiMedia
	(*TLMessagesUploadEncryptedFile)(nil),                // 270: mtproto.TL_messages_uploadEncryptedFile
	(*TLMessagesSearchStickerSets)(nil),                  // 271: mtproto.TL_messages_searchStickerSets
	(*TLMessagesGetSplitRanges)(nil),                     // 272: mtproto.TL_messages_getSplitRanges
	(*TLMessagesMarkDialogUnread)(nil),                   // 273: mtproto.TL_messages_markDialogUnread
	(*TLMessagesGetDialogUnreadMarks)(nil),               // 274: mtproto.TL_messages_getDialogUnreadMarks
	(*TLMessagesClearAllDrafts)(nil),                     // 275: mtproto.TL_messages_clearAllDrafts
	(*TLMessagesUpdatePinnedMessage)(nil),                // 276: mtproto.TL_messages_updatePinnedMessage
	(*TLMessagesSendVote)(nil),                           // 277: mtproto.TL_messages_sendVote
	(*TLMessagesGetPollResults)(nil),                     // 278: mtproto.TL_messages_getPollResults
	(*TLMessagesGetOnlines)(nil),                         // 279: mtproto.TL_messages_getOnlines
	(*TLMessagesEditChatAbout)(nil),                      // 280: mtproto.TL_messages_editChatAbout
	(*TLMessagesEditChatDefaultBannedRights)(nil),        // 281: mtproto.TL_messages_editChatDefaultBannedRights
	(*TLMessagesGetEmojiKeywords)(nil),                   // 282: mtproto.TL_messages_getEmojiKeywords
	(*TLMessagesGetEmojiKeywordsDifference)(nil),         // 283: mtproto.TL_messages_getEmojiKeywordsDifference
	(*TLMessagesGetEmojiKeywordsLanguages)(nil),          // 284: mtproto.TL_messages_getEmojiKeywordsLanguages
	(*TLMessagesGetEmojiURL)(nil),                        // 285: mtproto.TL_messages_getEmojiURL
	(*TLMessagesGetSearchCounters)(nil),                  // 286: mtproto.TL_messages_getSearchCounters
	(*TLMessagesRequestUrlAuth)(nil),                     // 287: mtproto.TL_messages_requestUrlAuth
	(*TLMessagesAcceptUrlAuth)(nil),                      // 288: mtproto.TL_messages_acceptUrlAuth
	(*TLMessagesHidePeerSettingsBar)(nil),                // 289: mtproto.TL_messages_hidePeerSettingsBar
	(*TLMessagesGetScheduledHistory)(nil),                // 290: mtproto.TL_messages_getScheduledHistory
	(*TLMessagesGetScheduledMessages)(nil),               // 291: mtproto.TL_messages_getScheduledMessages
	(*TLMessagesSendScheduledMessages)(nil),              // 292: mtproto.TL_messages_sendScheduledMessages
	(*TLMessagesDeleteScheduledMessages)(nil),            // 293: mtproto.TL_messages_deleteScheduledMessages
	(*TLMessagesGetPollVotes)(nil),                       // 294: mtproto.TL_messages_getPollVotes
	(*TLMessagesToggleStickerSets)(nil),                  // 295: mtproto.TL_messages_toggleStickerSets
	(*TLMessagesGetDialogFiltersEFD48C89)(nil),           // 296: mtproto.TL_messages_getDialogFiltersEFD48C89
	(*TLMessagesGetSuggestedDialogFilters)(nil),          // 297: mtproto.TL_messages_getSuggestedDialogFilters
	(*TLMessagesUpdateDialogFilter)(nil),                 // 298: mtproto.TL_messages_updateDialogFilter
	(*TLMessagesUpdateDialogFiltersOrder)(nil),           // 299: mtproto.TL_messages_updateDialogFiltersOrder
	(*TLMessagesGetOldFeaturedStickers)(nil),             // 300: mtproto.TL_messages_getOldFeaturedStickers
	(*TLMessagesGetReplies)(nil),                         // 301: mtproto.TL_messages_getReplies
	(*TLMessagesGetDiscussionMessage)(nil),               // 302: mtproto.TL_messages_getDiscussionMessage
	(*TLMessagesReadDiscussion)(nil),                     // 303: mtproto.TL_messages_readDiscussion
	(*TLMessagesUnpinAllMessages)(nil),                   // 304: mtproto.TL_messages_unpinAllMessages
	(*TLMessagesDeleteChat)(nil),                         // 305: mtproto.TL_messages_deleteChat
	(*TLMessagesDeletePhoneCallHistory)(nil),             // 306: mtproto.TL_messages_deletePhoneCallHistory
	(*TLMessagesCheckHistoryImport)(nil),                 // 307: mtproto.TL_messages_checkHistoryImport
	(*TLMessagesInitHistoryImport)(nil),                  // 308: mtproto.TL_messages_initHistoryImport
	(*TLMessagesUploadImportedMedia)(nil),                // 309: mtproto.TL_messages_uploadImportedMedia
	(*TLMessagesStartHistoryImport)(nil),                 // 310: mtproto.TL_messages_startHistoryImport
	(*TLMessagesGetExportedChatInvites)(nil),             // 311: mtproto.TL_messages_getExportedChatInvites
	(*TLMessagesGetExportedChatInvite)(nil),              // 312: mtproto.TL_messages_getExportedChatInvite
	(*TLMessagesEditExportedChatInvite)(nil),             // 313: mtproto.TL_messages_editExportedChatInvite
	(*TLMessagesDeleteRevokedExportedChatInvites)(nil),   // 314: mtproto.TL_messages_deleteRevokedExportedChatInvites
	(*TLMessagesDeleteExportedChatInvite)(nil),           // 315: mtproto.TL_messages_deleteExportedChatInvite
	(*TLMessagesGetAdminsWithInvites)(nil),               // 316: mtproto.TL_messages_getAdminsWithInvites
	(*TLMessagesGetChatInviteImporters)(nil),             // 317: mtproto.TL_messages_getChatInviteImporters
	(*TLMessagesSetHistoryTTL)(nil),                      // 318: mtproto.TL_messages_setHistoryTTL
	(*TLMessagesCheckHistoryImportPeer)(nil),             // 319: mtproto.TL_messages_checkHistoryImportPeer
	(*TLMessagesSetChatTheme)(nil),                       // 320: mtproto.TL_messages_setChatTheme
	(*TLMessagesGetMessageReadParticipants31C1C44F)(nil), // 321: mtproto.TL_messages_getMessageReadParticipants31C1C44F
	(*TLMessagesGetSearchResultsCalendar)(nil),           // 322: mtproto.TL_messages_getSearchResultsCalendar
	(*TLMessagesGetSearchResultsPositions)(nil),          // 323: mtproto.TL_messages_getSearchResultsPositions
	(*TLMessagesHideChatJoinRequest)(nil),                // 324: mtproto.TL_messages_hideChatJoinRequest
	(*TLMessagesHideAllChatJoinRequests)(nil),            // 325: mtproto.TL_messages_hideAllChatJoinRequests
	(*TLMessagesToggleNoForwards)(nil),                   // 326: mtproto.TL_messages_toggleNoForwards
	(*TLMessagesSaveDefaultSendAs)(nil),                  // 327: mtproto.TL_messages_saveDefaultSendAs
	(*TLMessagesSendReaction)(nil),                       // 328: mtproto.TL_messages_sendReaction
	(*TLMessagesGetMessagesReactions)(nil),               // 329: mtproto.TL_messages_getMessagesReactions
	(*TLMessagesGetMessageReactionsList)(nil),            // 330: mtproto.TL_messages_getMessageReactionsList
	(*TLMessagesSetChatAvailableReactions)(nil),          // 331: mtproto.TL_messages_setChatAvailableReactions
	(*TLMessagesGetAvailableReactions)(nil),              // 332: mtproto.TL_messages_getAvailableReactions
	(*TLMessagesSetDefaultReaction)(nil),                 // 333: mtproto.TL_messages_setDefaultReaction
	(*TLMessagesTranslateText)(nil),                      // 334: mtproto.TL_messages_translateText
	(*TLMessagesGetUnreadReactions)(nil),                 // 335: mtproto.TL_messages_getUnreadReactions
	(*TLMessagesReadReactions)(nil),                      // 336: mtproto.TL_messages_readReactions
	(*TLMessagesSearchSentMedia)(nil),                    // 337: mtproto.TL_messages_searchSentMedia
	(*TLMessagesGetAttachMenuBots)(nil),                  // 338: mtproto.TL_messages_getAttachMenuBots
	(*TLMessagesGetAttachMenuBot)(nil),                   // 339: mtproto.TL_messages_getAttachMenuBot
	(*TLMessagesToggleBotInAttachMenu)(nil),              // 340: mtproto.TL_messages_toggleBotInAttachMenu
	(*TLMessagesRequestWebView)(nil),                     // 341: mtproto.TL_messages_requestWebView
	(*TLMessagesProlongWebView)(nil),                     // 342: mtproto.TL_messages_prolongWebView
	(*TLMessagesRequestSimpleWebView413A3E73)(nil),       // 343: mtproto.TL_messages_requestSimpleWebView413A3E73
	(*TLMessagesSendWebViewResultMessage)(nil),           // 344: mtproto.TL_messages_sendWebViewResultMessage
	(*TLMessagesSendWebViewData)(nil),                    // 345: mtproto.TL_messages_sendWebViewData
	(*TLMessagesTranscribeAudio)(nil),                    // 346: mtproto.TL_messages_transcribeAudio
	(*TLMessagesRateTranscribedAudio)(nil),               // 347: mtproto.TL_messages_rateTranscribedAudio
	(*TLMessagesGetCustomEmojiDocuments)(nil),            // 348: mtproto.TL_messages_getCustomEmojiDocuments
	(*TLMessagesGetEmojiStickers)(nil),                   // 349: mtproto.TL_messages_getEmojiStickers
	(*TLMessagesGetFeaturedEmojiStickers)(nil),           // 350: mtproto.TL_messages_getFeaturedEmojiStickers
	(*TLMessagesReportReaction)(nil),                     // 351: mtproto.TL_messages_reportReaction
	(*TLMessagesGetTopReactions)(nil),                    // 352: mtproto.TL_messages_getTopReactions
	(*TLMessagesGetRecentReactions)(nil),                 // 353: mtproto.TL_messages_getRecentReactions
	(*TLMessagesClearRecentReactions)(nil),               // 354: mtproto.TL_messages_clearRecentReactions
	(*TLMessagesGetExtendedMedia)(nil),                   // 355: mtproto.TL_messages_getExtendedMedia
	(*TLMessagesSetDefaultHistoryTTL)(nil),               // 356: mtproto.TL_messages_setDefaultHistoryTTL
	(*TLMessagesGetDefaultHistoryTTL)(nil),               // 357: mtproto.TL_messages_getDefaultHistoryTTL
	(*TLMessagesSendBotRequestedPeer)(nil),               // 358: mtproto.TL_messages_sendBotRequestedPeer
	(*TLMessagesGetEmojiGroups)(nil),                     // 359: mtproto.TL_messages_getEmojiGroups
	(*TLMessagesGetEmojiStatusGroups)(nil),               // 360: mtproto.TL_messages_getEmojiStatusGroups
	(*TLMessagesGetEmojiProfilePhotoGroups)(nil),         // 361: mtproto.TL_messages_getEmojiProfilePhotoGroups
	(*TLMessagesSearchCustomEmoji)(nil),                  // 362: mtproto.TL_messages_searchCustomEmoji
	(*TLMessagesTogglePeerTranslations)(nil),             // 363: mtproto.TL_messages_togglePeerTranslations
	(*TLMessagesGetBotApp)(nil),                          // 364: mtproto.TL_messages_getBotApp
	(*TLMessagesRequestAppWebView53618BCE)(nil),          // 365: mtproto.TL_messages_requestAppWebView53618BCE
	(*TLMessagesSetChatWallPaper)(nil),                   // 366: mtproto.TL_messages_setChatWallPaper
	(*TLMessagesSearchEmojiStickerSets)(nil),             // 367: mtproto.TL_messages_searchEmojiStickerSets
	(*TLMessagesGetSavedDialogs)(nil),                    // 368: mtproto.TL_messages_getSavedDialogs
	(*TLMessagesGetSavedHistory)(nil),                    // 369: mtproto.TL_messages_getSavedHistory
	(*TLMessagesDeleteSavedHistory)(nil),                 // 370: mtproto.TL_messages_deleteSavedHistory
	(*TLMessagesGetPinnedSavedDialogs)(nil),              // 371: mtproto.TL_messages_getPinnedSavedDialogs
	(*TLMessagesToggleSavedDialogPin)(nil),               // 372: mtproto.TL_messages_toggleSavedDialogPin
	(*TLMessagesReorderPinnedSavedDialogs)(nil),          // 373: mtproto.TL_messages_reorderPinnedSavedDialogs
	(*TLMessagesGetSavedReactionTags)(nil),               // 374: mtproto.TL_messages_getSavedReactionTags
	(*TLMessagesUpdateSavedReactionTag)(nil),             // 375: mtproto.TL_messages_updateSavedReactionTag
	(*TLMessagesGetDefaultTagReactions)(nil),             // 376: mtproto.TL_messages_getDefaultTagReactions
	(*TLMessagesGetOutboxReadDate)(nil),                  // 377: mtproto.TL_messages_getOutboxReadDate
	(*TLMessagesGetQuickReplies)(nil),                    // 378: mtproto.TL_messages_getQuickReplies
	(*TLMessagesReorderQuickReplies)(nil),                // 379: mtproto.TL_messages_reorderQuickReplies
	(*TLMessagesCheckQuickReplyShortcut)(nil),            // 380: mtproto.TL_messages_checkQuickReplyShortcut
	(*TLMessagesEditQuickReplyShortcut)(nil),             // 381: mtproto.TL_messages_editQuickReplyShortcut
	(*TLMessagesDeleteQuickReplyShortcut)(nil),           // 382: mtproto.TL_messages_deleteQuickReplyShortcut
	(*TLMessagesGetQuickReplyMessages)(nil),              // 383: mtproto.TL_messages_getQuickReplyMessages
	(*TLMessagesSendQuickReplyMessages)(nil),             // 384: mtproto.TL_messages_sendQuickReplyMessages
	(*TLMessagesDeleteQuickReplyMessages)(nil),           // 385: mtproto.TL_messages_deleteQuickReplyMessages
	(*TLMessagesToggleDialogFilterTags)(nil),             // 386: mtproto.TL_messages_toggleDialogFilterTags
	(*TLMessagesGetMyStickers)(nil),                      // 387: mtproto.TL_messages_getMyStickers
	(*TLMessagesGetEmojiStickerGroups)(nil),              // 388: mtproto.TL_messages_getEmojiStickerGroups
	(*TLMessagesGetAvailableEffects)(nil),                // 389: mtproto.TL_messages_getAvailableEffects
	(*TLMessagesEditFactCheck)(nil),                      // 390: mtproto.TL_messages_editFactCheck
	(*TLMessagesDeleteFactCheck)(nil),                    // 391: mtproto.TL_messages_deleteFactCheck
	(*TLMessagesGetFactCheck)(nil),                       // 392: mtproto.TL_messages_getFactCheck
	(*TLMessagesRequestMainWebView)(nil),                 // 393: mtproto.TL_messages_requestMainWebView
	(*TLMessagesSendPaidReaction)(nil),                   // 394: mtproto.TL_messages_sendPaidReaction
	(*TLMessagesTogglePaidReactionPrivacy)(nil),          // 395: mtproto.TL_messages_togglePaidReactionPrivacy
	(*TLMessagesGetPaidReactionPrivacy)(nil),             // 396: mtproto.TL_messages_getPaidReactionPrivacy
	(*TLMessagesViewSponsoredMessage)(nil),               // 397: mtproto.TL_messages_viewSponsoredMessage
	(*TLMessagesClickSponsoredMessage)(nil),              // 398: mtproto.TL_messages_clickSponsoredMessage
	(*TLMessagesReportSponsoredMessage)(nil),             // 399: mtproto.TL_messages_reportSponsoredMessage
	(*TLMessagesGetSponsoredMessages)(nil),               // 400: mtproto.TL_messages_getSponsoredMessages
	(*TLMessagesSavePreparedInlineMessage)(nil),          // 401: mtproto.TL_messages_savePreparedInlineMessage
	(*TLMessagesGetPreparedInlineMessage)(nil),           // 402: mtproto.TL_messages_getPreparedInlineMessage
	(*TLMessagesSearchStickers)(nil),                     // 403: mtproto.TL_messages_searchStickers
	(*TLMessagesReportMessagesDelivery)(nil),             // 404: mtproto.TL_messages_reportMessagesDelivery
	(*TLUpdatesGetState)(nil),                            // 405: mtproto.TL_updates_getState
	(*TLUpdatesGetDifference)(nil),                       // 406: mtproto.TL_updates_getDifference
	(*TLUpdatesGetChannelDifference)(nil),                // 407: mtproto.TL_updates_getChannelDifference
	(*TLPhotosUpdateProfilePhoto)(nil),                   // 408: mtproto.TL_photos_updateProfilePhoto
	(*TLPhotosUploadProfilePhoto)(nil),                   // 409: mtproto.TL_photos_uploadProfilePhoto
	(*TLPhotosDeletePhotos)(nil),                         // 410: mtproto.TL_photos_deletePhotos
	(*TLPhotosGetUserPhotos)(nil),                        // 411: mtproto.TL_photos_getUserPhotos
	(*TLPhotosUploadContactProfilePhoto)(nil),            // 412: mtproto.TL_photos_uploadContactProfilePhoto
	(*TLUploadSaveFilePart)(nil),                         // 413: mtproto.TL_upload_saveFilePart
	(*TLUploadGetFile)(nil),                              // 414: mtproto.TL_upload_getFile
	(*TLUploadSaveBigFilePart)(nil),                      // 415: mtproto.TL_upload_saveBigFilePart
	(*TLUploadGetWebFile)(nil),                           // 416: mtproto.TL_upload_getWebFile
	(*TLUploadGetCdnFile)(nil),                           // 417: mtproto.TL_upload_getCdnFile
	(*TLUploadReuploadCdnFile)(nil),                      // 418: mtproto.TL_upload_reuploadCdnFile
	(*TLUploadGetCdnFileHashes)(nil),                     // 419: mtproto.TL_upload_getCdnFileHashes
	(*TLUploadGetFileHashes)(nil),                        // 420: mtproto.TL_upload_getFileHashes
	(*TLHelpGetConfig)(nil),                              // 421: mtproto.TL_help_getConfig
	(*TLHelpGetNearestDc)(nil),                           // 422: mtproto.TL_help_getNearestDc
	(*TLHelpGetAppUpdate)(nil),                           // 423: mtproto.TL_help_getAppUpdate
	(*TLHelpGetInviteText)(nil),                          // 424: mtproto.TL_help_getInviteText
	(*TLHelpGetSupport)(nil),                             // 425: mtproto.TL_help_getSupport
	(*TLHelpSetBotUpdatesStatus)(nil),                    // 426: mtproto.TL_help_setBotUpdatesStatus
	(*TLHelpGetCdnConfig)(nil),                           // 427: mtproto.TL_help_getCdnConfig
	(*TLHelpGetRecentMeUrls)(nil),                        // 428: mtproto.TL_help_getRecentMeUrls
	(*TLHelpGetTermsOfServiceUpdate)(nil),                // 429: mtproto.TL_help_getTermsOfServiceUpdate
	(*TLHelpAcceptTermsOfService)(nil),                   // 430: mtproto.TL_help_acceptTermsOfService
	(*TLHelpGetDeepLinkInfo)(nil),                        // 431: mtproto.TL_help_getDeepLinkInfo
	(*TLHelpGetAppConfig61E3F854)(nil),                   // 432: mtproto.TL_help_getAppConfig61E3F854
	(*TLHelpSaveAppLog)(nil),                             // 433: mtproto.TL_help_saveAppLog
	(*TLHelpGetPassportConfig)(nil),                      // 434: mtproto.TL_help_getPassportConfig
	(*TLHelpGetSupportName)(nil),                         // 435: mtproto.TL_help_getSupportName
	(*TLHelpGetUserInfo)(nil),                            // 436: mtproto.TL_help_getUserInfo
	(*TLHelpEditUserInfo)(nil),                           // 437: mtproto.TL_help_editUserInfo
	(*TLHelpGetPromoData)(nil),                           // 438: mtproto.TL_help_getPromoData
	(*TLHelpHidePromoData)(nil),                          // 439: mtproto.TL_help_hidePromoData
	(*TLHelpDismissSuggestion)(nil),                      // 440: mtproto.TL_help_dismissSuggestion
	(*TLHelpGetCountriesList)(nil),                       // 441: mtproto.TL_help_getCountriesList
	(*TLHelpGetPremiumPromo)(nil),                        // 442: mtproto.TL_help_getPremiumPromo
	(*TLHelpGetPeerColors)(nil),                          // 443: mtproto.TL_help_getPeerColors
	(*TLHelpGetPeerProfileColors)(nil),                   // 444: mtproto.TL_help_getPeerProfileColors
	(*TLHelpGetTimezonesList)(nil),                       // 445: mtproto.TL_help_getTimezonesList
	(*TLChannelsReadHistory)(nil),                        // 446: mtproto.TL_channels_readHistory
	(*TLChannelsDeleteMessages)(nil),                     // 447: mtproto.TL_channels_deleteMessages
	(*TLChannelsReportSpam)(nil),                         // 448: mtproto.TL_channels_reportSpam
	(*TLChannelsGetMessages)(nil),                        // 449: mtproto.TL_channels_getMessages
	(*TLChannelsGetParticipants)(nil),                    // 450: mtproto.TL_channels_getParticipants
	(*TLChannelsGetParticipant)(nil),                     // 451: mtproto.TL_channels_getParticipant
	(*TLChannelsGetChannels)(nil),                        // 452: mtproto.TL_channels_getChannels
	(*TLChannelsGetFullChannel)(nil),                     // 453: mtproto.TL_channels_getFullChannel
	(*TLChannelsCreateChannel)(nil),                      // 454: mtproto.TL_channels_createChannel
	(*TLChannelsEditAdmin)(nil),                          // 455: mtproto.TL_channels_editAdmin
	(*TLChannelsEditTitle)(nil),                          // 456: mtproto.TL_channels_editTitle
	(*TLChannelsEditPhoto)(nil),                          // 457: mtproto.TL_channels_editPhoto
	(*TLChannelsCheckUsername)(nil),                      // 458: mtproto.TL_channels_checkUsername
	(*TLChannelsUpdateUsername)(nil),                     // 459: mtproto.TL_channels_updateUsername
	(*TLChannelsJoinChannel)(nil),                        // 460: mtproto.TL_channels_joinChannel
	(*TLChannelsLeaveChannel)(nil),                       // 461: mtproto.TL_channels_leaveChannel
	(*TLChannelsInviteToChannelC9E33D54)(nil),            // 462: mtproto.TL_channels_inviteToChannelC9E33D54
	(*TLChannelsDeleteChannel)(nil),                      // 463: mtproto.TL_channels_deleteChannel
	(*TLChannelsExportMessageLink)(nil),                  // 464: mtproto.TL_channels_exportMessageLink
	(*TLChannelsToggleSignatures)(nil),                   // 465: mtproto.TL_channels_toggleSignatures
	(*TLChannelsGetAdminedPublicChannels)(nil),           // 466: mtproto.TL_channels_getAdminedPublicChannels
	(*TLChannelsEditBanned)(nil),                         // 467: mtproto.TL_channels_editBanned
	(*TLChannelsGetAdminLog)(nil),                        // 468: mtproto.TL_channels_getAdminLog
	(*TLChannelsSetStickers)(nil),                        // 469: mtproto.TL_channels_setStickers
	(*TLChannelsReadMessageContents)(nil),                // 470: mtproto.TL_channels_readMessageContents
	(*TLChannelsDeleteHistory9BAA9647)(nil),              // 471: mtproto.TL_channels_deleteHistory9BAA9647
	(*TLChannelsTogglePreHistoryHidden)(nil),             // 472: mtproto.TL_channels_togglePreHistoryHidden
	(*TLChannelsGetLeftChannels)(nil),                    // 473: mtproto.TL_channels_getLeftChannels
	(*TLChannelsGetGroupsForDiscussion)(nil),             // 474: mtproto.TL_channels_getGroupsForDiscussion
	(*TLChannelsSetDiscussionGroup)(nil),                 // 475: mtproto.TL_channels_setDiscussionGroup
	(*TLChannelsEditCreator)(nil),                        // 476: mtproto.TL_channels_editCreator
	(*TLChannelsEditLocation)(nil),                       // 477: mtproto.TL_channels_editLocation
	(*TLChannelsToggleSlowMode)(nil),                     // 478: mtproto.TL_channels_toggleSlowMode
	(*TLChannelsGetInactiveChannels)(nil),                // 479: mtproto.TL_channels_getInactiveChannels
	(*TLChannelsConvertToGigagroup)(nil),                 // 480: mtproto.TL_channels_convertToGigagroup
	(*TLChannelsGetSendAs)(nil),                          // 481: mtproto.TL_channels_getSendAs
	(*TLChannelsDeleteParticipantHistory)(nil),           // 482: mtproto.TL_channels_deleteParticipantHistory
	(*TLChannelsToggleJoinToSend)(nil),                   // 483: mtproto.TL_channels_toggleJoinToSend
	(*TLChannelsToggleJoinRequest)(nil),                  // 484: mtproto.TL_channels_toggleJoinRequest
	(*TLChannelsReorderUsernames)(nil),                   // 485: mtproto.TL_channels_reorderUsernames
	(*TLChannelsToggleUsername)(nil),                     // 486: mtproto.TL_channels_toggleUsername
	(*TLChannelsDeactivateAllUsernames)(nil),             // 487: mtproto.TL_channels_deactivateAllUsernames
	(*TLChannelsToggleForum)(nil),                        // 488: mtproto.TL_channels_toggleForum
	(*TLChannelsCreateForumTopic)(nil),                   // 489: mtproto.TL_channels_createForumTopic
	(*TLChannelsGetForumTopics)(nil),                     // 490: mtproto.TL_channels_getForumTopics
	(*TLChannelsGetForumTopicsByID)(nil),                 // 491: mtproto.TL_channels_getForumTopicsByID
	(*TLChannelsEditForumTopic)(nil),                     // 492: mtproto.TL_channels_editForumTopic
	(*TLChannelsUpdatePinnedForumTopic)(nil),             // 493: mtproto.TL_channels_updatePinnedForumTopic
	(*TLChannelsDeleteTopicHistory)(nil),                 // 494: mtproto.TL_channels_deleteTopicHistory
	(*TLChannelsReorderPinnedForumTopics)(nil),           // 495: mtproto.TL_channels_reorderPinnedForumTopics
	(*TLChannelsToggleAntiSpam)(nil),                     // 496: mtproto.TL_channels_toggleAntiSpam
	(*TLChannelsReportAntiSpamFalsePositive)(nil),        // 497: mtproto.TL_channels_reportAntiSpamFalsePositive
	(*TLChannelsToggleParticipantsHidden)(nil),           // 498: mtproto.TL_channels_toggleParticipantsHidden
	(*TLChannelsUpdateColor)(nil),                        // 499: mtproto.TL_channels_updateColor
	(*TLChannelsToggleViewForumAsMessages)(nil),          // 500: mtproto.TL_channels_toggleViewForumAsMessages
	(*TLChannelsGetChannelRecommendations)(nil),          // 501: mtproto.TL_channels_getChannelRecommendations
	(*TLChannelsUpdateEmojiStatus)(nil),                  // 502: mtproto.TL_channels_updateEmojiStatus
	(*TLChannelsSetBoostsToUnblockRestrictions)(nil),     // 503: mtproto.TL_channels_setBoostsToUnblockRestrictions
	(*TLChannelsSetEmojiStickers)(nil),                   // 504: mtproto.TL_channels_setEmojiStickers
	(*TLChannelsRestrictSponsoredMessages)(nil),          // 505: mtproto.TL_channels_restrictSponsoredMessages
	(*TLChannelsSearchPosts)(nil),                        // 506: mtproto.TL_channels_searchPosts
	(*TLChannelsUpdatePaidMessagesPrice)(nil),            // 507: mtproto.TL_channels_updatePaidMessagesPrice
	(*TLBotsSendCustomRequest)(nil),                      // 508: mtproto.TL_bots_sendCustomRequest
	(*TLBotsAnswerWebhookJSONQuery)(nil),                 // 509: mtproto.TL_bots_answerWebhookJSONQuery
	(*TLBotsSetBotCommands)(nil),                         // 510: mtproto.TL_bots_setBotCommands
	(*TLBotsResetBotCommands)(nil),                       // 511: mtproto.TL_bots_resetBotCommands
	(*TLBotsGetBotCommands)(nil),                         // 512: mtproto.TL_bots_getBotCommands
	(*TLBotsSetBotMenuButton)(nil),                       // 513: mtproto.TL_bots_setBotMenuButton
	(*TLBotsGetBotMenuButton)(nil),                       // 514: mtproto.TL_bots_getBotMenuButton
	(*TLBotsSetBotBroadcastDefaultAdminRights)(nil),      // 515: mtproto.TL_bots_setBotBroadcastDefaultAdminRights
	(*TLBotsSetBotGroupDefaultAdminRights)(nil),          // 516: mtproto.TL_bots_setBotGroupDefaultAdminRights
	(*TLBotsSetBotInfo)(nil),                             // 517: mtproto.TL_bots_setBotInfo
	(*TLBotsGetBotInfoDCD914FD)(nil),                     // 518: mtproto.TL_bots_getBotInfoDCD914FD
	(*TLBotsReorderUsernames)(nil),                       // 519: mtproto.TL_bots_reorderUsernames
	(*TLBotsToggleUsername)(nil),                         // 520: mtproto.TL_bots_toggleUsername
	(*TLBotsCanSendMessage)(nil),                         // 521: mtproto.TL_bots_canSendMessage
	(*TLBotsAllowSendMessage)(nil),                       // 522: mtproto.TL_bots_allowSendMessage
	(*TLBotsInvokeWebViewCustomMethod)(nil),              // 523: mtproto.TL_bots_invokeWebViewCustomMethod
	(*TLBotsGetPopularAppBots)(nil),                      // 524: mtproto.TL_bots_getPopularAppBots
	(*TLBotsAddPreviewMedia)(nil),                        // 525: mtproto.TL_bots_addPreviewMedia
	(*TLBotsEditPreviewMedia)(nil),                       // 526: mtproto.TL_bots_editPreviewMedia
	(*TLBotsDeletePreviewMedia)(nil),                     // 527: mtproto.TL_bots_deletePreviewMedia
	(*TLBotsReorderPreviewMedias)(nil),                   // 528: mtproto.TL_bots_reorderPreviewMedias
	(*TLBotsGetPreviewInfo)(nil),                         // 529: mtproto.TL_bots_getPreviewInfo
	(*TLBotsGetPreviewMedias)(nil),                       // 530: mtproto.TL_bots_getPreviewMedias
	(*TLBotsUpdateUserEmojiStatus)(nil),                  // 531: mtproto.TL_bots_updateUserEmojiStatus
	(*TLBotsToggleUserEmojiStatusPermission)(nil),        // 532: mtproto.TL_bots_toggleUserEmojiStatusPermission
	(*TLBotsCheckDownloadFileParams)(nil),                // 533: mtproto.TL_bots_checkDownloadFileParams
	(*TLBotsGetAdminedBots)(nil),                         // 534: mtproto.TL_bots_getAdminedBots
	(*TLBotsUpdateStarRefProgram)(nil),                   // 535: mtproto.TL_bots_updateStarRefProgram
	(*TLBotsSetCustomVerification)(nil),                  // 536: mtproto.TL_bots_setCustomVerification
	(*TLBotsGetBotRecommendations)(nil),                  // 537: mtproto.TL_bots_getBotRecommendations
	(*TLPaymentsGetPaymentForm)(nil),                     // 538: mtproto.TL_payments_getPaymentForm
	(*TLPaymentsGetPaymentReceipt)(nil),                  // 539: mtproto.TL_payments_getPaymentReceipt
	(*TLPaymentsValidateRequestedInfo)(nil),              // 540: mtproto.TL_payments_validateRequestedInfo
	(*TLPaymentsSendPaymentForm)(nil),                    // 541: mtproto.TL_payments_sendPaymentForm
	(*TLPaymentsGetSavedInfo)(nil),                       // 542: mtproto.TL_payments_getSavedInfo
	(*TLPaymentsClearSavedInfo)(nil),                     // 543: mtproto.TL_payments_clearSavedInfo
	(*TLPaymentsGetBankCardData)(nil),                    // 544: mtproto.TL_payments_getBankCardData
	(*TLPaymentsExportInvoice)(nil),                      // 545: mtproto.TL_payments_exportInvoice
	(*TLPaymentsAssignAppStoreTransaction)(nil),          // 546: mtproto.TL_payments_assignAppStoreTransaction
	(*TLPaymentsAssignPlayMarketTransaction)(nil),        // 547: mtproto.TL_payments_assignPlayMarketTransaction
	(*TLPaymentsGetPremiumGiftCodeOptions)(nil),          // 548: mtproto.TL_payments_getPremiumGiftCodeOptions
	(*TLPaymentsCheckGiftCode)(nil),                      // 549: mtproto.TL_payments_checkGiftCode
	(*TLPaymentsApplyGiftCode)(nil),                      // 550: mtproto.TL_payments_applyGiftCode
	(*TLPaymentsGetGiveawayInfo)(nil),                    // 551: mtproto.TL_payments_getGiveawayInfo
	(*TLPaymentsLaunchPrepaidGiveaway)(nil),              // 552: mtproto.TL_payments_launchPrepaidGiveaway
	(*TLPaymentsGetStarsTopupOptions)(nil),               // 553: mtproto.TL_payments_getStarsTopupOptions
	(*TLPaymentsGetStarsStatus)(nil),                     // 554: mtproto.TL_payments_getStarsStatus
	(*TLPaymentsGetStarsTransactions)(nil),               // 555: mtproto.TL_payments_getStarsTransactions
	(*TLPaymentsSendStarsForm)(nil),                      // 556: mtproto.TL_payments_sendStarsForm
	(*TLPaymentsRefundStarsCharge)(nil),                  // 557: mtproto.TL_payments_refundStarsCharge
	(*TLPaymentsGetStarsRevenueStats)(nil),               // 558: mtproto.TL_payments_getStarsRevenueStats
	(*TLPaymentsGetStarsRevenueWithdrawalUrl)(nil),       // 559: mtproto.TL_payments_getStarsRevenueWithdrawalUrl
	(*TLPaymentsGetStarsRevenueAdsAccountUrl)(nil),       // 560: mtproto.TL_payments_getStarsRevenueAdsAccountUrl
	(*TLPaymentsGetStarsTransactionsByID)(nil),           // 561: mtproto.TL_payments_getStarsTransactionsByID
	(*TLPaymentsGetStarsGiftOptions)(nil),                // 562: mtproto.TL_payments_getStarsGiftOptions
	(*TLPaymentsGetStarsSubscriptions)(nil),              // 563: mtproto.TL_payments_getStarsSubscriptions
	(*TLPaymentsChangeStarsSubscription)(nil),            // 564: mtproto.TL_payments_changeStarsSubscription
	(*TLPaymentsFulfillStarsSubscription)(nil),           // 565: mtproto.TL_payments_fulfillStarsSubscription
	(*TLPaymentsGetStarsGiveawayOptions)(nil),            // 566: mtproto.TL_payments_getStarsGiveawayOptions
	(*TLPaymentsGetStarGifts)(nil),                       // 567: mtproto.TL_payments_getStarGifts
	(*TLPaymentsSaveStarGift)(nil),                       // 568: mtproto.TL_payments_saveStarGift
	(*TLPaymentsConvertStarGift)(nil),                    // 569: mtproto.TL_payments_convertStarGift
	(*TLPaymentsBotCancelStarsSubscription)(nil),         // 570: mtproto.TL_payments_botCancelStarsSubscription
	(*TLPaymentsGetConnectedStarRefBots)(nil),            // 571: mtproto.TL_payments_getConnectedStarRefBots
	(*TLPaymentsGetConnectedStarRefBot)(nil),             // 572: mtproto.TL_payments_getConnectedStarRefBot
	(*TLPaymentsGetSuggestedStarRefBots)(nil),            // 573: mtproto.TL_payments_getSuggestedStarRefBots
	(*TLPaymentsConnectStarRefBot)(nil),                  // 574: mtproto.TL_payments_connectStarRefBot
	(*TLPaymentsEditConnectedStarRefBot)(nil),            // 575: mtproto.TL_payments_editConnectedStarRefBot
	(*TLPaymentsGetStarGiftUpgradePreview)(nil),          // 576: mtproto.TL_payments_getStarGiftUpgradePreview
	(*TLPaymentsUpgradeStarGift)(nil),                    // 577: mtproto.TL_payments_upgradeStarGift
	(*TLPaymentsTransferStarGift)(nil),                   // 578: mtproto.TL_payments_transferStarGift
	(*TLPaymentsGetUniqueStarGift)(nil),                  // 579: mtproto.TL_payments_getUniqueStarGift
	(*TLPaymentsGetSavedStarGifts)(nil),                  // 580: mtproto.TL_payments_getSavedStarGifts
	(*TLPaymentsGetSavedStarGift)(nil),                   // 581: mtproto.TL_payments_getSavedStarGift
	(*TLPaymentsGetStarGiftWithdrawalUrl)(nil),           // 582: mtproto.TL_payments_getStarGiftWithdrawalUrl
	(*TLPaymentsToggleChatStarGiftNotifications)(nil),    // 583: mtproto.TL_payments_toggleChatStarGiftNotifications
	(*TLPaymentsToggleStarGiftsPinnedToTop)(nil),         // 584: mtproto.TL_payments_toggleStarGiftsPinnedToTop
	(*TLPaymentsCanPurchaseStore)(nil),                   // 585: mtproto.TL_payments_canPurchaseStore
	(*TLStickersCreateStickerSet)(nil),                   // 586: mtproto.TL_stickers_createStickerSet
	(*TLStickersRemoveStickerFromSet)(nil),               // 587: mtproto.TL_stickers_removeStickerFromSet
	(*TLStickersChangeStickerPosition)(nil),              // 588: mtproto.TL_stickers_changeStickerPosition
	(*TLStickersAddStickerToSet)(nil),                    // 589: mtproto.TL_stickers_addStickerToSet
	(*TLStickersSetStickerSetThumb)(nil),                 // 590: mtproto.TL_stickers_setStickerSetThumb
	(*TLStickersCheckShortName)(nil),                     // 591: mtproto.TL_stickers_checkShortName
	(*TLStickersSuggestShortName)(nil),                   // 592: mtproto.TL_stickers_suggestShortName
	(*TLStickersChangeSticker)(nil),                      // 593: mtproto.TL_stickers_changeSticker
	(*TLStickersRenameStickerSet)(nil),                   // 594: mtproto.TL_stickers_renameStickerSet
	(*TLStickersDeleteStickerSet)(nil),                   // 595: mtproto.TL_stickers_deleteStickerSet
	(*TLStickersReplaceSticker)(nil),                     // 596: mtproto.TL_stickers_replaceSticker
	(*TLPhoneGetCallConfig)(nil),                         // 597: mtproto.TL_phone_getCallConfig
	(*TLPhoneRequestCall)(nil),                           // 598: mtproto.TL_phone_requestCall
	(*TLPhoneAcceptCall)(nil),                            // 599: mtproto.TL_phone_acceptCall
	(*TLPhoneConfirmCall)(nil),                           // 600: mtproto.TL_phone_confirmCall
	(*TLPhoneReceivedCall)(nil),                          // 601: mtproto.TL_phone_receivedCall
	(*TLPhoneDiscardCall)(nil),                           // 602: mtproto.TL_phone_discardCall
	(*TLPhoneSetCallRating)(nil),                         // 603: mtproto.TL_phone_setCallRating
	(*TLPhoneSaveCallDebug)(nil),                         // 604: mtproto.TL_phone_saveCallDebug
	(*TLPhoneSendSignalingData)(nil),                     // 605: mtproto.TL_phone_sendSignalingData
	(*TLPhoneCreateGroupCall)(nil),                       // 606: mtproto.TL_phone_createGroupCall
	(*TLPhoneJoinGroupCall)(nil),                         // 607: mtproto.TL_phone_joinGroupCall
	(*TLPhoneLeaveGroupCall)(nil),                        // 608: mtproto.TL_phone_leaveGroupCall
	(*TLPhoneInviteToGroupCall)(nil),                     // 609: mtproto.TL_phone_inviteToGroupCall
	(*TLPhoneDiscardGroupCall)(nil),                      // 610: mtproto.TL_phone_discardGroupCall
	(*TLPhoneToggleGroupCallSettings)(nil),               // 611: mtproto.TL_phone_toggleGroupCallSettings
	(*TLPhoneGetGroupCall)(nil),                          // 612: mtproto.TL_phone_getGroupCall
	(*TLPhoneGetGroupParticipants)(nil),                  // 613: mtproto.TL_phone_getGroupParticipants
	(*TLPhoneCheckGroupCall)(nil),                        // 614: mtproto.TL_phone_checkGroupCall
	(*TLPhoneToggleGroupCallRecord)(nil),                 // 615: mtproto.TL_phone_toggleGroupCallRecord
	(*TLPhoneEditGroupCallParticipant)(nil),              // 616: mtproto.TL_phone_editGroupCallParticipant
	(*TLPhoneEditGroupCallTitle)(nil),                    // 617: mtproto.TL_phone_editGroupCallTitle
	(*TLPhoneGetGroupCallJoinAs)(nil),                    // 618: mtproto.TL_phone_getGroupCallJoinAs
	(*TLPhoneExportGroupCallInvite)(nil),                 // 619: mtproto.TL_phone_exportGroupCallInvite
	(*TLPhoneToggleGroupCallStartSubscription)(nil),      // 620: mtproto.TL_phone_toggleGroupCallStartSubscription
	(*TLPhoneStartScheduledGroupCall)(nil),               // 621: mtproto.TL_phone_startScheduledGroupCall
	(*TLPhoneSaveDefaultGroupCallJoinAs)(nil),            // 622: mtproto.TL_phone_saveDefaultGroupCallJoinAs
	(*TLPhoneJoinGroupCallPresentation)(nil),             // 623: mtproto.TL_phone_joinGroupCallPresentation
	(*TLPhoneLeaveGroupCallPresentation)(nil),            // 624: mtproto.TL_phone_leaveGroupCallPresentation
	(*TLPhoneGetGroupCallStreamChannels)(nil),            // 625: mtproto.TL_phone_getGroupCallStreamChannels
	(*TLPhoneGetGroupCallStreamRtmpUrl)(nil),             // 626: mtproto.TL_phone_getGroupCallStreamRtmpUrl
	(*TLPhoneSaveCallLog)(nil),                           // 627: mtproto.TL_phone_saveCallLog
	(*TLPhoneCreateConferenceCall)(nil),                  // 628: mtproto.TL_phone_createConferenceCall
	(*TLLangpackGetLangPack)(nil),                        // 629: mtproto.TL_langpack_getLangPack
	(*TLLangpackGetStrings)(nil),                         // 630: mtproto.TL_langpack_getStrings
	(*TLLangpackGetDifference)(nil),                      // 631: mtproto.TL_langpack_getDifference
	(*TLLangpackGetLanguages)(nil),                       // 632: mtproto.TL_langpack_getLanguages
	(*TLLangpackGetLanguage)(nil),                        // 633: mtproto.TL_langpack_getLanguage
	(*TLFoldersEditPeerFolders)(nil),                     // 634: mtproto.TL_folders_editPeerFolders
	(*TLStatsGetBroadcastStats)(nil),                     // 635: mtproto.TL_stats_getBroadcastStats
	(*TLStatsLoadAsyncGraph)(nil),                        // 636: mtproto.TL_stats_loadAsyncGraph
	(*TLStatsGetMegagroupStats)(nil),                     // 637: mtproto.TL_stats_getMegagroupStats
	(*TLStatsGetMessagePublicForwards5F150144)(nil),      // 638: mtproto.TL_stats_getMessagePublicForwards5F150144
	(*TLStatsGetMessageStats)(nil),                       // 639: mtproto.TL_stats_getMessageStats
	(*TLStatsGetStoryStats)(nil),                         // 640: mtproto.TL_stats_getStoryStats
	(*TLStatsGetStoryPublicForwards)(nil),                // 641: mtproto.TL_stats_getStoryPublicForwards
	(*TLStatsGetBroadcastRevenueStats)(nil),              // 642: mtproto.TL_stats_getBroadcastRevenueStats
	(*TLStatsGetBroadcastRevenueWithdrawalUrl)(nil),      // 643: mtproto.TL_stats_getBroadcastRevenueWithdrawalUrl
	(*TLStatsGetBroadcastRevenueTransactions)(nil),       // 644: mtproto.TL_stats_getBroadcastRevenueTransactions
	(*TLChatlistsExportChatlistInvite)(nil),              // 645: mtproto.TL_chatlists_exportChatlistInvite
	(*TLChatlistsDeleteExportedInvite)(nil),              // 646: mtproto.TL_chatlists_deleteExportedInvite
	(*TLChatlistsEditExportedInvite)(nil),                // 647: mtproto.TL_chatlists_editExportedInvite
	(*TLChatlistsGetExportedInvites)(nil),                // 648: mtproto.TL_chatlists_getExportedInvites
	(*TLChatlistsCheckChatlistInvite)(nil),               // 649: mtproto.TL_chatlists_checkChatlistInvite
	(*TLChatlistsJoinChatlistInvite)(nil),                // 650: mtproto.TL_chatlists_joinChatlistInvite
	(*TLChatlistsGetChatlistUpdates)(nil),                // 651: mtproto.TL_chatlists_getChatlistUpdates
	(*TLChatlistsJoinChatlistUpdates)(nil),               // 652: mtproto.TL_chatlists_joinChatlistUpdates
	(*TLChatlistsHideChatlistUpdates)(nil),               // 653: mtproto.TL_chatlists_hideChatlistUpdates
	(*TLChatlistsGetLeaveChatlistSuggestions)(nil),       // 654: mtproto.TL_chatlists_getLeaveChatlistSuggestions
	(*TLChatlistsLeaveChatlist)(nil),                     // 655: mtproto.TL_chatlists_leaveChatlist
	(*TLStoriesCanSendStory)(nil),                        // 656: mtproto.TL_stories_canSendStory
	(*TLStoriesSendStory)(nil),                           // 657: mtproto.TL_stories_sendStory
	(*TLStoriesEditStory)(nil),                           // 658: mtproto.TL_stories_editStory
	(*TLStoriesDeleteStories)(nil),                       // 659: mtproto.TL_stories_deleteStories
	(*TLStoriesTogglePinned)(nil),                        // 660: mtproto.TL_stories_togglePinned
	(*TLStoriesGetAllStories)(nil),                       // 661: mtproto.TL_stories_getAllStories
	(*TLStoriesGetPinnedStories)(nil),                    // 662: mtproto.TL_stories_getPinnedStories
	(*TLStoriesGetStoriesArchive)(nil),                   // 663: mtproto.TL_stories_getStoriesArchive
	(*TLStoriesGetStoriesByID)(nil),                      // 664: mtproto.TL_stories_getStoriesByID
	(*TLStoriesToggleAllStoriesHidden)(nil),              // 665: mtproto.TL_stories_toggleAllStoriesHidden
	(*TLStoriesReadStories)(nil),                         // 666: mtproto.TL_stories_readStories
	(*TLStoriesIncrementStoryViews)(nil),                 // 667: mtproto.TL_stories_incrementStoryViews
	(*TLStoriesGetStoryViewsList)(nil),                   // 668: mtproto.TL_stories_getStoryViewsList
	(*TLStoriesGetStoriesViews)(nil),                     // 669: mtproto.TL_stories_getStoriesViews
	(*TLStoriesExportStoryLink)(nil),                     // 670: mtproto.TL_stories_exportStoryLink
	(*TLStoriesReport19D8EB45)(nil),                      // 671: mtproto.TL_stories_report19D8EB45
	(*TLStoriesActivateStealthMode)(nil),                 // 672: mtproto.TL_stories_activateStealthMode
	(*TLStoriesSendReaction)(nil),                        // 673: mtproto.TL_stories_sendReaction
	(*TLStoriesGetPeerStories)(nil),                      // 674: mtproto.TL_stories_getPeerStories
	(*TLStoriesGetAllReadPeerStories)(nil),               // 675: mtproto.TL_stories_getAllReadPeerStories
	(*TLStoriesGetPeerMaxIDs)(nil),                       // 676: mtproto.TL_stories_getPeerMaxIDs
	(*TLStoriesGetChatsToSend)(nil),                      // 677: mtproto.TL_stories_getChatsToSend
	(*TLStoriesTogglePeerStoriesHidden)(nil),             // 678: mtproto.TL_stories_togglePeerStoriesHidden
	(*TLStoriesGetStoryReactionsList)(nil),               // 679: mtproto.TL_stories_getStoryReactionsList
	(*TLStoriesTogglePinnedToTop)(nil),                   // 680: mtproto.TL_stories_togglePinnedToTop
	(*TLStoriesSearchPosts)(nil),                         // 681: mtproto.TL_stories_searchPosts
	(*TLPremiumGetBoostsList)(nil),                       // 682: mtproto.TL_premium_getBoostsList
	(*TLPremiumGetMyBoosts)(nil),                         // 683: mtproto.TL_premium_getMyBoosts
	(*TLPremiumApplyBoost)(nil),                          // 684: mtproto.TL_premium_applyBoost
	(*TLPremiumGetBoostsStatus)(nil),                     // 685: mtproto.TL_premium_getBoostsStatus
	(*TLPremiumGetUserBoosts)(nil),                       // 686: mtproto.TL_premium_getUserBoosts
	(*TLSmsjobsIsEligibleToJoin)(nil),                    // 687: mtproto.TL_smsjobs_isEligibleToJoin
	(*TLSmsjobsJoin)(nil),                                // 688: mtproto.TL_smsjobs_join
	(*TLSmsjobsLeave)(nil),                               // 689: mtproto.TL_smsjobs_leave
	(*TLSmsjobsUpdateSettings)(nil),                      // 690: mtproto.TL_smsjobs_updateSettings
	(*TLSmsjobsGetStatus)(nil),                           // 691: mtproto.TL_smsjobs_getStatus
	(*TLSmsjobsGetSmsJob)(nil),                           // 692: mtproto.TL_smsjobs_getSmsJob
	(*TLSmsjobsFinishJob)(nil),                           // 693: mtproto.TL_smsjobs_finishJob
	(*TLFragmentGetCollectibleInfo)(nil),                 // 694: mtproto.TL_fragment_getCollectibleInfo
	(*TLPaymentsCanPurchasePremium)(nil),                 // 695: mtproto.TL_payments_canPurchasePremium
	(*TLUsersGetIsPremiumRequiredToContact)(nil),         // 696: mtproto.TL_users_getIsPremiumRequiredToContact
	(*TLPaymentsGetUserStarGifts)(nil),                   // 697: mtproto.TL_payments_getUserStarGifts
	(*TLPaymentsGetUserStarGift)(nil),                    // 698: mtproto.TL_payments_getUserStarGift
	(*TLMessagesGetWebPagePreview8B68B0CC)(nil),          // 699: mtproto.TL_messages_getWebPagePreview8B68B0CC
	(*TLChannelsViewSponsoredMessage)(nil),               // 700: mtproto.TL_channels_viewSponsoredMessage
	(*TLChannelsGetSponsoredMessages)(nil),               // 701: mtproto.TL_channels_getSponsoredMessages
	(*TLChannelsClickSponsoredMessage)(nil),              // 702: mtproto.TL_channels_clickSponsoredMessage
	(*TLChannelsReportSponsoredMessage)(nil),             // 703: mtproto.TL_channels_reportSponsoredMessage
	(*TLMessagesReport8953AB4E)(nil),                     // 704: mtproto.TL_messages_report8953AB4E
	(*TLStoriesReport1923FA8C)(nil),                      // 705: mtproto.TL_stories_report1923FA8C
	(*TLMessagesRequestSimpleWebView1A46500A)(nil),       // 706: mtproto.TL_messages_requestSimpleWebView1A46500A
	(*TLMessagesRequestAppWebView8C5A3B3C)(nil),          // 707: mtproto.TL_messages_requestAppWebView8C5A3B3C
	(*TLMessagesAddChatUserF24753E3)(nil),                // 708: mtproto.TL_messages_addChatUserF24753E3
	(*TLMessagesCreateChat34A818)(nil),                   // 709: mtproto.TL_messages_createChat34A818
	(*TLChannelsInviteToChannel199F3A6C)(nil),            // 710: mtproto.TL_channels_inviteToChannel199F3A6C
	(*TLMessagesGetDialogFiltersF19ED96D)(nil),           // 711: mtproto.TL_messages_getDialogFiltersF19ED96D
	(*TLHelpGetAppChangelog)(nil),                        // 712: mtproto.TL_help_getAppChangelog
	(*TLStatsGetMessagePublicForwards5630281B)(nil),      // 713: mtproto.TL_stats_getMessagePublicForwards5630281B
	(*TLStoriesGetBoostsStatus)(nil),                     // 714: mtproto.TL_stories_getBoostsStatus
	(*TLStoriesGetBoostersList)(nil),                     // 715: mtproto.TL_stories_getBoostersList
	(*TLStoriesCanApplyBoost)(nil),                       // 716: mtproto.TL_stories_canApplyBoost
	(*TLStoriesApplyBoost)(nil),                          // 717: mtproto.TL_stories_applyBoost
	(*TLMessagesGetWebPage32CA8F91)(nil),                 // 718: mtproto.TL_messages_getWebPage32CA8F91
	(*TLUsersGetStoriesMaxIDs)(nil),                      // 719: mtproto.TL_users_getStoriesMaxIDs
	(*TLContactsToggleStoriesHidden)(nil),                // 720: mtproto.TL_contacts_toggleStoriesHidden
	(*TLStoriesGetUserStories)(nil),                      // 721: mtproto.TL_stories_getUserStories
	(*TLStoriesGetAllReadUserStories)(nil),               // 722: mtproto.TL_stories_getAllReadUserStories
	(*TLStoriesReportC95BE06A)(nil),                      // 723: mtproto.TL_stories_reportC95BE06A
	(*TLMessagesRequestSimpleWebView299BEC8E)(nil),       // 724: mtproto.TL_messages_requestSimpleWebView299BEC8E
	(*TLMessagesGetAllChats)(nil),                        // 725: mtproto.TL_messages_getAllChats
	(*TLBotsGetBotInfo75EC12E6)(nil),                     // 726: mtproto.TL_bots_getBotInfo75EC12E6
	(*TLFoldersDeleteFolder)(nil),                        // 727: mtproto.TL_folders_deleteFolder
	(*TLMessagesGetMessageReadParticipants2C6F97B7)(nil), // 728: mtproto.TL_messages_getMessageReadParticipants2C6F97B7
	(*TLHelpGetAppConfig98914110)(nil),                   // 729: mtproto.TL_help_getAppConfig98914110
	(*TLMessagesCreateChat9CB126E)(nil),                  // 730: mtproto.TL_messages_createChat9CB126E
	(*TLAccountVerifyEmailECBA39DB)(nil),                 // 731: mtproto.TL_account_verifyEmailECBA39DB
	(*TLMessagesRequestSimpleWebView6ABB2F73)(nil),       // 732: mtproto.TL_messages_requestSimpleWebView6ABB2F73
	(*TLPaymentsRequestRecurringPayment)(nil),            // 733: mtproto.TL_payments_requestRecurringPayment
	(*TLPaymentsRestorePlayMarketReceipt)(nil),           // 734: mtproto.TL_payments_restorePlayMarketReceipt
	(*TLChannelsDeleteHistoryAF369D42)(nil),              // 735: mtproto.TL_channels_deleteHistoryAF369D42
	(*TLHelpTest)(nil),                                   // 736: mtproto.TL_help_test
	(*TLPredefinedCreatePredefinedUser)(nil),             // 737: mtproto.TL_predefined_createPredefinedUser
	(*TLPredefinedUpdatePredefinedUsername)(nil),         // 738: mtproto.TL_predefined_updatePredefinedUsername
	(*TLPredefinedUpdatePredefinedProfile)(nil),          // 739: mtproto.TL_predefined_updatePredefinedProfile
	(*TLPredefinedUpdatePredefinedVerified)(nil),         // 740: mtproto.TL_predefined_updatePredefinedVerified
	(*TLPredefinedUpdatePredefinedCode)(nil),             // 741: mtproto.TL_predefined_updatePredefinedCode
	(*TLPredefinedGetPredefinedUser)(nil),                // 742: mtproto.TL_predefined_getPredefinedUser
	(*TLPredefinedGetPredefinedUsers)(nil),               // 743: mtproto.TL_predefined_getPredefinedUsers
	(*TLUsersGetMe)(nil),                                 // 744: mtproto.TL_users_getMe
	(*TLAccountUpdateVerified)(nil),                      // 745: mtproto.TL_account_updateVerified
	(*TLAuthToggleBan)(nil),                              // 746: mtproto.TL_auth_toggleBan
	(*TLBizInvokeBizDataRaw)(nil),                        // 747: mtproto.TL_biz_invokeBizDataRaw
	(*Vector_SecureValue)(nil),                           // 748: mtproto.Vector_SecureValue
	(*Vector_WallPaper)(nil),                             // 749: mtproto.Vector_WallPaper
	(*Vector_User)(nil),                                  // 750: mtproto.Vector_User
	(*Vector_RequirementToContact)(nil),                  // 751: mtproto.Vector_RequirementToContact
	(*Vector_Int)(nil),                                   // 752: mtproto.Vector_Int
	(*Vector_ContactStatus)(nil),                         // 753: mtproto.Vector_ContactStatus
	(*Vector_SavedContact)(nil),                          // 754: mtproto.Vector_SavedContact
	(*Vector_ReceivedNotifyMessage)(nil),                 // 755: mtproto.Vector_ReceivedNotifyMessage
	(*Vector_Long)(nil),                                  // 756: mtproto.Vector_Long
	(*Vector_StickerSetCovered)(nil),                     // 757: mtproto.Vector_StickerSetCovered
	(*Vector_MessageRange)(nil),                          // 758: mtproto.Vector_MessageRange
	(*Vector_DialogPeer)(nil),                            // 759: mtproto.Vector_DialogPeer
	(*Vector_EmojiLanguage)(nil),                         // 760: mtproto.Vector_EmojiLanguage
	(*Vector_Messages_SearchCounter)(nil),                // 761: mtproto.Vector_Messages_SearchCounter
	(*Vector_DialogFilterSuggested)(nil),                 // 762: mtproto.Vector_DialogFilterSuggested
	(*Vector_ReadParticipantDate)(nil),                   // 763: mtproto.Vector_ReadParticipantDate
	(*Vector_Document)(nil),                              // 764: mtproto.Vector_Document
	(*Vector_FactCheck)(nil),                             // 765: mtproto.Vector_FactCheck
	(*Vector_FileHash)(nil),                              // 766: mtproto.Vector_FileHash
	(*Vector_BotCommand)(nil),                            // 767: mtproto.Vector_BotCommand
	(*Vector_BotPreviewMedia)(nil),                       // 768: mtproto.Vector_BotPreviewMedia
	(*Vector_PremiumGiftCodeOption)(nil),                 // 769: mtproto.Vector_PremiumGiftCodeOption
	(*Vector_StarsTopupOption)(nil),                      // 770: mtproto.Vector_StarsTopupOption
	(*Vector_StarsGiftOption)(nil),                       // 771: mtproto.Vector_StarsGiftOption
	(*Vector_StarsGiveawayOption)(nil),                   // 772: mtproto.Vector_StarsGiveawayOption
	(*Vector_LangPackString)(nil),                        // 773: mtproto.Vector_LangPackString
	(*Vector_LangPackLanguage)(nil),                      // 774: mtproto.Vector_LangPackLanguage
	(*Vector_Peer)(nil),                                  // 775: mtproto.Vector_Peer
	(*Vector_Bool)(nil),                                  // 776: mtproto.Vector_Bool
	(*Vector_DialogFilter)(nil),                          // 777: mtproto.Vector_DialogFilter
	(*Vector_String)(nil),                                // 778: mtproto.Vector_String
	(*Vector_PredefinedUser)(nil),                        // 779: mtproto.Vector_PredefinedUser
	(TLConstructor)(0),                                   // 780: mtproto.TLConstructor
	(*InputClientProxy)(nil),                             // 781: mtproto.InputClientProxy
	(*JSONValue)(nil),                                    // 782: mtproto.JSONValue
	(*MessageRange)(nil),                                 // 783: mtproto.MessageRange
	(*CodeSettings)(nil),                                 // 784: mtproto.CodeSettings
	(*wrapperspb.StringValue)(nil),                       // 785: google.protobuf.StringValue
	(*EmailVerification)(nil),                            // 786: mtproto.EmailVerification
	(*InputCheckPasswordSRP)(nil),                        // 787: mtproto.InputCheckPasswordSRP
	(*Account_PasswordInputSettings)(nil),                // 788: mtproto.account_PasswordInputSettings
	(*Bool)(nil),                                         // 789: mtproto.Bool
	(*InputNotifyPeer)(nil),                              // 790: mtproto.InputNotifyPeer
	(*InputPeerNotifySettings)(nil),                      // 791: mtproto.InputPeerNotifySettings
	(*InputPeer)(nil),                                    // 792: mtproto.InputPeer
	(*ReportReason)(nil),                                 // 793: mtproto.ReportReason
	(*InputPrivacyKey)(nil),                              // 794: mtproto.InputPrivacyKey
	(*InputPrivacyRule)(nil),                             // 795: mtproto.InputPrivacyRule
	(*AccountDaysTTL)(nil),                               // 796: mtproto.AccountDaysTTL
	(*SecureValueType)(nil),                              // 797: mtproto.SecureValueType
	(*InputSecureValue)(nil),                             // 798: mtproto.InputSecureValue
	(*SecureValueHash)(nil),                              // 799: mtproto.SecureValueHash
	(*SecureCredentialsEncrypted)(nil),                   // 800: mtproto.SecureCredentialsEncrypted
	(*EmailVerifyPurpose)(nil),                           // 801: mtproto.EmailVerifyPurpose
	(*wrapperspb.Int64Value)(nil),                        // 802: google.protobuf.Int64Value
	(*wrapperspb.Int32Value)(nil),                        // 803: google.protobuf.Int32Value
	(*InputWallPaper)(nil),                               // 804: mtproto.InputWallPaper
	(*InputFile)(nil),                                    // 805: mtproto.InputFile
	(*WallPaperSettings)(nil),                            // 806: mtproto.WallPaperSettings
	(*AutoDownloadSettings)(nil),                         // 807: mtproto.AutoDownloadSettings
	(*InputDocument)(nil),                                // 808: mtproto.InputDocument
	(*InputThemeSettings)(nil),                           // 809: mtproto.InputThemeSettings
	(*InputTheme)(nil),                                   // 810: mtproto.InputTheme
	(*BaseTheme)(nil),                                    // 811: mtproto.BaseTheme
	(*GlobalPrivacySettings)(nil),                        // 812: mtproto.GlobalPrivacySettings
	(*InputPhoto)(nil),                                   // 813: mtproto.InputPhoto
	(*EmojiStatus)(nil),                                  // 814: mtproto.EmojiStatus
	(*AutoSaveSettings)(nil),                             // 815: mtproto.AutoSaveSettings
	(*BusinessWorkHours)(nil),                            // 816: mtproto.BusinessWorkHours
	(*InputGeoPoint)(nil),                                // 817: mtproto.InputGeoPoint
	(*InputBusinessGreetingMessage)(nil),                 // 818: mtproto.InputBusinessGreetingMessage
	(*InputBusinessAwayMessage)(nil),                     // 819: mtproto.InputBusinessAwayMessage
	(*BusinessBotRights)(nil),                            // 820: mtproto.BusinessBotRights
	(*InputUser)(nil),                                    // 821: mtproto.InputUser
	(*InputBusinessBotRecipients)(nil),                   // 822: mtproto.InputBusinessBotRecipients
	(*InputBusinessRecipients)(nil),                      // 823: mtproto.InputBusinessRecipients
	(*InputBusinessIntro)(nil),                           // 824: mtproto.InputBusinessIntro
	(*Birthday)(nil),                                     // 825: mtproto.Birthday
	(*InputBusinessChatLink)(nil),                        // 826: mtproto.InputBusinessChatLink
	(*InputChannel)(nil),                                 // 827: mtproto.InputChannel
	(*ReactionsNotifySettings)(nil),                      // 828: mtproto.ReactionsNotifySettings
	(*SecureValueError)(nil),                             // 829: mtproto.SecureValueError
	(*InputContact)(nil),                                 // 830: mtproto.InputContact
	(*TopPeerCategory)(nil),                              // 831: mtproto.TopPeerCategory
	(*InputMessage)(nil),                                 // 832: mtproto.InputMessage
	(*Reaction)(nil),                                     // 833: mtproto.Reaction
	(*MessagesFilter)(nil),                               // 834: mtproto.MessagesFilter
	(*SendMessageAction)(nil),                            // 835: mtproto.SendMessageAction
	(*InputReplyTo)(nil),                                 // 836: mtproto.InputReplyTo
	(*ReplyMarkup)(nil),                                  // 837: mtproto.ReplyMarkup
	(*MessageEntity)(nil),                                // 838: mtproto.MessageEntity
	(*InputQuickReplyShortcut)(nil),                      // 839: mtproto.InputQuickReplyShortcut
	(*InputMedia)(nil),                                   // 840: mtproto.InputMedia
	(*InputChatPhoto)(nil),                               // 841: mtproto.InputChatPhoto
	(*InputEncryptedChat)(nil),                           // 842: mtproto.InputEncryptedChat
	(*InputEncryptedFile)(nil),                           // 843: mtproto.InputEncryptedFile
	(*StarsSubscriptionPricing)(nil),                     // 844: mtproto.StarsSubscriptionPricing
	(*InputStickerSet)(nil),                              // 845: mtproto.InputStickerSet
	(*InputBotInlineResult)(nil),                         // 846: mtproto.InputBotInlineResult
	(*InlineBotSwitchPM)(nil),                            // 847: mtproto.InlineBotSwitchPM
	(*InlineBotWebView)(nil),                             // 848: mtproto.InlineBotWebView
	(*InputBotInlineMessageID)(nil),                      // 849: mtproto.InputBotInlineMessageID
	(*InputDialogPeer)(nil),                              // 850: mtproto.InputDialogPeer
	(*InputStickeredMedia)(nil),                          // 851: mtproto.InputStickeredMedia
	(*ShippingOption)(nil),                               // 852: mtproto.ShippingOption
	(*InputSingleMedia)(nil),                             // 853: mtproto.InputSingleMedia
	(*ChatBannedRights)(nil),                             // 854: mtproto.ChatBannedRights
	(*DialogFilter)(nil),                                 // 855: mtproto.DialogFilter
	(*ChatReactions)(nil),                                // 856: mtproto.ChatReactions
	(*TextWithEntities)(nil),                             // 857: mtproto.TextWithEntities
	(*DataJSON)(nil),                                     // 858: mtproto.DataJSON
	(*InputBotApp)(nil),                                  // 859: mtproto.InputBotApp
	(*PaidReactionPrivacy)(nil),                          // 860: mtproto.PaidReactionPrivacy
	(*InlineQueryPeerType)(nil),                          // 861: mtproto.InlineQueryPeerType
	(*ChannelMessagesFilter)(nil),                        // 862: mtproto.ChannelMessagesFilter
	(*wrapperspb.DoubleValue)(nil),                       // 863: google.protobuf.DoubleValue
	(*VideoSize)(nil),                                    // 864: mtproto.VideoSize
	(*InputFileLocation)(nil),                            // 865: mtproto.InputFileLocation
	(*InputWebFileLocation)(nil),                         // 866: mtproto.InputWebFileLocation
	(*InputAppEvent)(nil),                                // 867: mtproto.InputAppEvent
	(*ChannelParticipantsFilter)(nil),                    // 868: mtproto.ChannelParticipantsFilter
	(*ChatAdminRights)(nil),                              // 869: mtproto.ChatAdminRights
	(*ChannelAdminLogEventsFilter)(nil),                  // 870: mtproto.ChannelAdminLogEventsFilter
	(*BotCommandScope)(nil),                              // 871: mtproto.BotCommandScope
	(*BotCommand)(nil),                                   // 872: mtproto.BotCommand
	(*BotMenuButton)(nil),                                // 873: mtproto.BotMenuButton
	(*InputInvoice)(nil),                                 // 874: mtproto.InputInvoice
	(*PaymentRequestedInfo)(nil),                         // 875: mtproto.PaymentRequestedInfo
	(*InputPaymentCredentials)(nil),                      // 876: mtproto.InputPaymentCredentials
	(*InputStorePaymentPurpose)(nil),                     // 877: mtproto.InputStorePaymentPurpose
	(*InputStarsTransaction)(nil),                        // 878: mtproto.InputStarsTransaction
	(*InputSavedStarGift)(nil),                           // 879: mtproto.InputSavedStarGift
	(*InputStickerSetItem)(nil),                          // 880: mtproto.InputStickerSetItem
	(*MaskCoords)(nil),                                   // 881: mtproto.MaskCoords
	(*InputGroupCall)(nil),                               // 882: mtproto.InputGroupCall
	(*PhoneCallProtocol)(nil),                            // 883: mtproto.PhoneCallProtocol
	(*InputPhoneCall)(nil),                               // 884: mtproto.InputPhoneCall
	(*PhoneCallDiscardReason)(nil),                       // 885: mtproto.PhoneCallDiscardReason
	(*InputFolderPeer)(nil),                              // 886: mtproto.InputFolderPeer
	(*InputChatlist)(nil),                                // 887: mtproto.InputChatlist
	(*MediaArea)(nil),                                    // 888: mtproto.MediaArea
	(*InputCollectible)(nil),                             // 889: mtproto.InputCollectible
	(*BizDataRaw)(nil),                                   // 890: mtproto.BizDataRaw
	(*SecureValue)(nil),                                  // 891: mtproto.SecureValue
	(*WallPaper)(nil),                                    // 892: mtproto.WallPaper
	(*User)(nil),                                         // 893: mtproto.User
	(*RequirementToContact)(nil),                         // 894: mtproto.RequirementToContact
	(*ContactStatus)(nil),                                // 895: mtproto.ContactStatus
	(*SavedContact)(nil),                                 // 896: mtproto.SavedContact
	(*ReceivedNotifyMessage)(nil),                        // 897: mtproto.ReceivedNotifyMessage
	(*StickerSetCovered)(nil),                            // 898: mtproto.StickerSetCovered
	(*DialogPeer)(nil),                                   // 899: mtproto.DialogPeer
	(*EmojiLanguage)(nil),                                // 900: mtproto.EmojiLanguage
	(*Messages_SearchCounter)(nil),                       // 901: mtproto.messages_SearchCounter
	(*DialogFilterSuggested)(nil),                        // 902: mtproto.DialogFilterSuggested
	(*ReadParticipantDate)(nil),                          // 903: mtproto.ReadParticipantDate
	(*Document)(nil),                                     // 904: mtproto.Document
	(*FactCheck)(nil),                                    // 905: mtproto.FactCheck
	(*FileHash)(nil),                                     // 906: mtproto.FileHash
	(*BotPreviewMedia)(nil),                              // 907: mtproto.BotPreviewMedia
	(*PremiumGiftCodeOption)(nil),                        // 908: mtproto.PremiumGiftCodeOption
	(*StarsTopupOption)(nil),                             // 909: mtproto.StarsTopupOption
	(*StarsGiftOption)(nil),                              // 910: mtproto.StarsGiftOption
	(*StarsGiveawayOption)(nil),                          // 911: mtproto.StarsGiveawayOption
	(*LangPackString)(nil),                               // 912: mtproto.LangPackString
	(*LangPackLanguage)(nil),                             // 913: mtproto.LangPackLanguage
	(*Peer)(nil),                                         // 914: mtproto.Peer
	(*PredefinedUser)(nil),                               // 915: mtproto.PredefinedUser
	(*EmojiList)(nil),                                    // 916: mtproto.EmojiList
	(*Help_PeerColors)(nil),                              // 917: mtproto.help_PeerColors
	(*Updates)(nil),                                      // 918: mtproto.Updates
	(*Auth_SentCode)(nil),                                // 919: mtproto.auth_SentCode
	(*StarRefProgram)(nil),                               // 920: mtproto.StarRefProgram
	(*Payments_ConnectedStarRefBots)(nil),                // 921: mtproto.payments_ConnectedStarRefBots
	(*Payments_SuggestedStarRefBots)(nil),                // 922: mtproto.payments_SuggestedStarRefBots
	(*Auth_Authorization)(nil),                           // 923: mtproto.auth_Authorization
	(*Auth_LoggedOut)(nil),                               // 924: mtproto.auth_LoggedOut
	(*Auth_ExportedAuthorization)(nil),                   // 925: mtproto.auth_ExportedAuthorization
	(*Auth_PasswordRecovery)(nil),                        // 926: mtproto.auth_PasswordRecovery
	(*Account_SentEmailCode)(nil),                        // 927: mtproto.account_SentEmailCode
	(*Account_EmailVerified)(nil),                        // 928: mtproto.account_EmailVerified
	(*Account_ResetPasswordResult)(nil),                  // 929: mtproto.account_ResetPasswordResult
	(*Account_AutoDownloadSettings)(nil),                 // 930: mtproto.account_AutoDownloadSettings
	(*Account_AutoSaveSettings)(nil),                     // 931: mtproto.account_AutoSaveSettings
	(*Premium_BoostsList)(nil),                           // 932: mtproto.premium_BoostsList
	(*Premium_MyBoosts)(nil),                             // 933: mtproto.premium_MyBoosts
	(*Premium_BoostsStatus)(nil),                         // 934: mtproto.premium_BoostsStatus
	(*Stories_BoostsStatus)(nil),                         // 935: mtproto.stories_BoostsStatus
	(*Stories_BoostersList)(nil),                         // 936: mtproto.stories_BoostersList
	(*Stories_CanApplyBoostResult)(nil),                  // 937: mtproto.stories_CanApplyBoostResult
	(*AttachMenuBots)(nil),                               // 938: mtproto.AttachMenuBots
	(*AttachMenuBotsBot)(nil),                            // 939: mtproto.AttachMenuBotsBot
	(*Bots_BotInfo)(nil),                                 // 940: mtproto.bots_BotInfo
	(*Users_Users)(nil),                                  // 941: mtproto.users_Users
	(*BusinessChatLink)(nil),                             // 942: mtproto.BusinessChatLink
	(*Account_BusinessChatLinks)(nil),                    // 943: mtproto.account_BusinessChatLinks
	(*Account_ResolvedBusinessChatLinks)(nil),            // 944: mtproto.account_ResolvedBusinessChatLinks
	(*Account_ConnectedBots)(nil),                        // 945: mtproto.account_ConnectedBots
	(*Messages_QuickReplies)(nil),                        // 946: mtproto.messages_QuickReplies
	(*Messages_Messages)(nil),                            // 947: mtproto.messages_Messages
	(*Stats_BroadcastRevenueStats)(nil),                  // 948: mtproto.stats_BroadcastRevenueStats
	(*Stats_BroadcastRevenueWithdrawalUrl)(nil),          // 949: mtproto.stats_BroadcastRevenueWithdrawalUrl
	(*Stats_BroadcastRevenueTransactions)(nil),           // 950: mtproto.stats_BroadcastRevenueTransactions
	(*Messages_Chats)(nil),                               // 951: mtproto.messages_Chats
	(*Messages_AffectedMessages)(nil),                    // 952: mtproto.messages_AffectedMessages
	(*Channels_ChannelParticipants)(nil),                 // 953: mtproto.channels_ChannelParticipants
	(*Channels_ChannelParticipant)(nil),                  // 954: mtproto.channels_ChannelParticipant
	(*Messages_ChatFull)(nil),                            // 955: mtproto.messages_ChatFull
	(*Messages_InvitedUsers)(nil),                        // 956: mtproto.messages_InvitedUsers
	(*ExportedMessageLink)(nil),                          // 957: mtproto.ExportedMessageLink
	(*Channels_AdminLogResults)(nil),                     // 958: mtproto.channels_AdminLogResults
	(*Messages_InactiveChats)(nil),                       // 959: mtproto.messages_InactiveChats
	(*Messages_AffectedHistory)(nil),                     // 960: mtproto.messages_AffectedHistory
	(*ExportedChatInvite)(nil),                           // 961: mtproto.ExportedChatInvite
	(*ChatInvite)(nil),                                   // 962: mtproto.ChatInvite
	(*Messages_ExportedChatInvites)(nil),                 // 963: mtproto.messages_ExportedChatInvites
	(*Messages_ExportedChatInvite)(nil),                  // 964: mtproto.messages_ExportedChatInvite
	(*Messages_ChatAdminsWithInvites)(nil),               // 965: mtproto.messages_ChatAdminsWithInvites
	(*Messages_ChatInviteImporters)(nil),                 // 966: mtproto.messages_ChatInviteImporters
	(*Config)(nil),                                       // 967: mtproto.Config
	(*NearestDc)(nil),                                    // 968: mtproto.NearestDc
	(*Help_AppUpdate)(nil),                               // 969: mtproto.help_AppUpdate
	(*Help_InviteText)(nil),                              // 970: mtproto.help_InviteText
	(*Help_Support)(nil),                                 // 971: mtproto.help_Support
	(*Help_AppConfig)(nil),                               // 972: mtproto.help_AppConfig
	(*Help_SupportName)(nil),                             // 973: mtproto.help_SupportName
	(*Help_CountriesList)(nil),                           // 974: mtproto.help_CountriesList
	(*Contacts_Contacts)(nil),                            // 975: mtproto.contacts_Contacts
	(*Contacts_ImportedContacts)(nil),                    // 976: mtproto.contacts_ImportedContacts
	(*Contacts_Blocked)(nil),                             // 977: mtproto.contacts_Blocked
	(*Contacts_Found)(nil),                               // 978: mtproto.contacts_Found
	(*Contacts_TopPeers)(nil),                            // 979: mtproto.contacts_TopPeers
	(*Messages_AllStickers)(nil),                         // 980: mtproto.messages_AllStickers
	(*Messages_FeaturedStickers)(nil),                    // 981: mtproto.messages_FeaturedStickers
	(*Help_RecentMeUrls)(nil),                            // 982: mtproto.help_RecentMeUrls
	(*Help_DeepLinkInfo)(nil),                            // 983: mtproto.help_DeepLinkInfo
	(*Messages_Dialogs)(nil),                             // 984: mtproto.messages_Dialogs
	(*Messages_PeerSettings)(nil),                        // 985: mtproto.messages_PeerSettings
	(*Messages_PeerDialogs)(nil),                         // 986: mtproto.messages_PeerDialogs
	(*ChatOnlines)(nil),                                  // 987: mtproto.ChatOnlines
	(*EmojiKeywordsDifference)(nil),                      // 988: mtproto.EmojiKeywordsDifference
	(*EmojiURL)(nil),                                     // 989: mtproto.EmojiURL
	(*Messages_EmojiGroups)(nil),                         // 990: mtproto.messages_EmojiGroups
	(*Account_EmojiStatuses)(nil),                        // 991: mtproto.account_EmojiStatuses
	(*MessageMedia)(nil),                                 // 992: mtproto.MessageMedia
	(*EncryptedFile)(nil),                                // 993: mtproto.EncryptedFile
	(*Upload_File)(nil),                                  // 994: mtproto.upload_File
	(*Upload_WebFile)(nil),                               // 995: mtproto.upload_WebFile
	(*Upload_CdnFile)(nil),                               // 996: mtproto.upload_CdnFile
	(*CdnConfig)(nil),                                    // 997: mtproto.CdnConfig
	(*Messages_DialogFilters)(nil),                       // 998: mtproto.messages_DialogFilters
	(*Chatlists_ExportedChatlistInvite)(nil),             // 999: mtproto.chatlists_ExportedChatlistInvite
	(*ExportedChatlistInvite)(nil),                       // 1000: mtproto.ExportedChatlistInvite
	(*Chatlists_ExportedInvites)(nil),                    // 1001: mtproto.chatlists_ExportedInvites
	(*Chatlists_ChatlistInvite)(nil),                     // 1002: mtproto.chatlists_ChatlistInvite
	(*Chatlists_ChatlistUpdates)(nil),                    // 1003: mtproto.chatlists_ChatlistUpdates
	(*Messages_ForumTopics)(nil),                         // 1004: mtproto.messages_ForumTopics
	(*Fragment_CollectibleInfo)(nil),                     // 1005: mtproto.fragment_CollectibleInfo
	(*Messages_HighScores)(nil),                          // 1006: mtproto.messages_HighScores
	(*Messages_SavedGifs)(nil),                           // 1007: mtproto.messages_SavedGifs
	(*Payments_CheckedGiftCode)(nil),                     // 1008: mtproto.payments_CheckedGiftCode
	(*Payments_StarGifts)(nil),                           // 1009: mtproto.payments_StarGifts
	(*Payments_StarGiftUpgradePreview)(nil),              // 1010: mtproto.payments_StarGiftUpgradePreview
	(*Payments_UniqueStarGift)(nil),                      // 1011: mtproto.payments_UniqueStarGift
	(*Payments_SavedStarGifts)(nil),                      // 1012: mtproto.payments_SavedStarGifts
	(*Payments_StarGiftWithdrawalUrl)(nil),               // 1013: mtproto.payments_StarGiftWithdrawalUrl
	(*Payments_UserStarGifts)(nil),                       // 1014: mtproto.payments_UserStarGifts
	(*Payments_GiveawayInfo)(nil),                        // 1015: mtproto.payments_GiveawayInfo
	(*Phone_GroupCall)(nil),                              // 1016: mtproto.phone_GroupCall
	(*Phone_GroupParticipants)(nil),                      // 1017: mtproto.phone_GroupParticipants
	(*Phone_JoinAsPeers)(nil),                            // 1018: mtproto.phone_JoinAsPeers
	(*Phone_ExportedGroupCallInvite)(nil),                // 1019: mtproto.phone_ExportedGroupCallInvite
	(*Phone_GroupCallStreamChannels)(nil),                // 1020: mtproto.phone_GroupCallStreamChannels
	(*Phone_GroupCallStreamRtmpUrl)(nil),                 // 1021: mtproto.phone_GroupCallStreamRtmpUrl
	(*Messages_HistoryImportParsed)(nil),                 // 1022: mtproto.messages_HistoryImportParsed
	(*Messages_HistoryImport)(nil),                       // 1023: mtproto.messages_HistoryImport
	(*Messages_CheckedHistoryImportPeer)(nil),            // 1024: mtproto.messages_CheckedHistoryImportPeer
	(*Messages_BotResults)(nil),                          // 1025: mtproto.messages_BotResults
	(*Messages_BotCallbackAnswer)(nil),                   // 1026: mtproto.messages_BotCallbackAnswer
	(*LangPackDifference)(nil),                           // 1027: mtproto.LangPackDifference
	(*WebViewResult)(nil),                                // 1028: mtproto.WebViewResult
	(*Bots_PopularAppBots)(nil),                          // 1029: mtproto.bots_PopularAppBots
	(*Bots_PreviewInfo)(nil),                             // 1030: mtproto.bots_PreviewInfo
	(*Messages_AvailableEffects)(nil),                    // 1031: mtproto.messages_AvailableEffects
	(*Messages_DiscussionMessage)(nil),                   // 1032: mtproto.messages_DiscussionMessage
	(*Messages_MessageViews)(nil),                        // 1033: mtproto.messages_MessageViews
	(*Messages_MessageEditData)(nil),                     // 1034: mtproto.messages_MessageEditData
	(*Messages_SearchResultsCalendar)(nil),               // 1035: mtproto.messages_SearchResultsCalendar
	(*Messages_SearchResultsPositions)(nil),              // 1036: mtproto.messages_SearchResultsPositions
	(*OutboxReadDate)(nil),                               // 1037: mtproto.OutboxReadDate
	(*Channels_SendAsPeers)(nil),                         // 1038: mtproto.channels_SendAsPeers
	(*WebViewMessageSent)(nil),                           // 1039: mtproto.WebViewMessageSent
	(*Messages_BotApp)(nil),                              // 1040: mtproto.messages_BotApp
	(*SimpleWebViewResult)(nil),                          // 1041: mtproto.SimpleWebViewResult
	(*AppWebViewResult)(nil),                             // 1042: mtproto.AppWebViewResult
	(*PeerNotifySettings)(nil),                           // 1043: mtproto.PeerNotifySettings
	(*Account_ContentSettings)(nil),                      // 1044: mtproto.account_ContentSettings
	(*Account_PaidMessagesRevenue)(nil),                  // 1045: mtproto.account_PaidMessagesRevenue
	(*Account_Authorizations)(nil),                       // 1046: mtproto.account_Authorizations
	(*Account_AuthorizationForm)(nil),                    // 1047: mtproto.account_AuthorizationForm
	(*Help_PassportConfig)(nil),                          // 1048: mtproto.help_PassportConfig
	(*Account_TmpPassword)(nil),                          // 1049: mtproto.account_TmpPassword
	(*Payments_PaymentForm)(nil),                         // 1050: mtproto.payments_PaymentForm
	(*Payments_PaymentReceipt)(nil),                      // 1051: mtproto.payments_PaymentReceipt
	(*Payments_ValidatedRequestedInfo)(nil),              // 1052: mtproto.payments_ValidatedRequestedInfo
	(*Payments_PaymentResult)(nil),                       // 1053: mtproto.payments_PaymentResult
	(*Payments_SavedInfo)(nil),                           // 1054: mtproto.payments_SavedInfo
	(*Payments_BankCardData)(nil),                        // 1055: mtproto.payments_BankCardData
	(*Payments_ExportedInvoice)(nil),                     // 1056: mtproto.payments_ExportedInvoice
	(*Messages_VotesList)(nil),                           // 1057: mtproto.messages_VotesList
	(*Help_PremiumPromo)(nil),                            // 1058: mtproto.help_PremiumPromo
	(*Messages_BotPreparedInlineMessage)(nil),            // 1059: mtproto.messages_BotPreparedInlineMessage
	(*Messages_PreparedInlineMessage)(nil),               // 1060: mtproto.messages_PreparedInlineMessage
	(*Account_PrivacyRules)(nil),                         // 1061: mtproto.account_PrivacyRules
	(*DefaultHistoryTTL)(nil),                            // 1062: mtproto.DefaultHistoryTTL
	(*ExportedContactToken)(nil),                         // 1063: mtproto.ExportedContactToken
	(*Help_PromoData)(nil),                               // 1064: mtproto.help_PromoData
	(*Auth_LoginToken)(nil),                              // 1065: mtproto.auth_LoginToken
	(*Authorization)(nil),                                // 1066: mtproto.Authorization
	(*Messages_MessageReactionsList)(nil),                // 1067: mtproto.messages_MessageReactionsList
	(*Messages_AvailableReactions)(nil),                  // 1068: mtproto.messages_AvailableReactions
	(*Messages_Reactions)(nil),                           // 1069: mtproto.messages_Reactions
	(*ReportResult)(nil),                                 // 1070: mtproto.ReportResult
	(*Account_SavedRingtones)(nil),                       // 1071: mtproto.account_SavedRingtones
	(*Account_SavedRingtone)(nil),                        // 1072: mtproto.account_SavedRingtone
	(*Messages_SavedDialogs)(nil),                        // 1073: mtproto.messages_SavedDialogs
	(*Messages_SavedReactionTags)(nil),                   // 1074: mtproto.messages_SavedReactionTags
	(*Account_WebAuthorizations)(nil),                    // 1075: mtproto.account_WebAuthorizations
	(*UrlAuthResult)(nil),                                // 1076: mtproto.UrlAuthResult
	(*Messages_DhConfig)(nil),                            // 1077: mtproto.messages_DhConfig
	(*EncryptedChat)(nil),                                // 1078: mtproto.EncryptedChat
	(*Messages_SentEncryptedMessage)(nil),                // 1079: mtproto.messages_SentEncryptedMessage
	(*Smsjobs_EligibilityToJoin)(nil),                    // 1080: mtproto.smsjobs_EligibilityToJoin
	(*Smsjobs_Status)(nil),                               // 1081: mtproto.smsjobs_Status
	(*SmsJob)(nil),                                       // 1082: mtproto.SmsJob
	(*Contacts_SponsoredPeers)(nil),                      // 1083: mtproto.contacts_SponsoredPeers
	(*Channels_SponsoredMessageReportResult)(nil),        // 1084: mtproto.channels_SponsoredMessageReportResult
	(*Messages_SponsoredMessages)(nil),                   // 1085: mtproto.messages_SponsoredMessages
	(*Payments_StarsStatus)(nil),                         // 1086: mtproto.payments_StarsStatus
	(*Payments_StarsRevenueStats)(nil),                   // 1087: mtproto.payments_StarsRevenueStats
	(*Payments_StarsRevenueWithdrawalUrl)(nil),           // 1088: mtproto.payments_StarsRevenueWithdrawalUrl
	(*Payments_StarsRevenueAdsAccountUrl)(nil),           // 1089: mtproto.payments_StarsRevenueAdsAccountUrl
	(*Stats_BroadcastStats)(nil),                         // 1090: mtproto.stats_BroadcastStats
	(*StatsGraph)(nil),                                   // 1091: mtproto.StatsGraph
	(*Stats_MegagroupStats)(nil),                         // 1092: mtproto.stats_MegagroupStats
	(*Stats_PublicForwards)(nil),                         // 1093: mtproto.stats_PublicForwards
	(*Stats_MessageStats)(nil),                           // 1094: mtproto.stats_MessageStats
	(*Stats_StoryStats)(nil),                             // 1095: mtproto.stats_StoryStats
	(*Messages_Stickers)(nil),                            // 1096: mtproto.messages_Stickers
	(*Messages_StickerSet)(nil),                          // 1097: mtproto.messages_StickerSet
	(*Messages_StickerSetInstallResult)(nil),             // 1098: mtproto.messages_StickerSetInstallResult
	(*Messages_RecentStickers)(nil),                      // 1099: mtproto.messages_RecentStickers
	(*Messages_ArchivedStickers)(nil),                    // 1100: mtproto.messages_ArchivedStickers
	(*Messages_FavedStickers)(nil),                       // 1101: mtproto.messages_FavedStickers
	(*Messages_FoundStickerSets)(nil),                    // 1102: mtproto.messages_FoundStickerSets
	(*Messages_MyStickers)(nil),                          // 1103: mtproto.messages_MyStickers
	(*Messages_FoundStickers)(nil),                       // 1104: mtproto.messages_FoundStickers
	(*Stickers_SuggestedShortName)(nil),                  // 1105: mtproto.stickers_SuggestedShortName
	(*Stories_AllStories)(nil),                           // 1106: mtproto.stories_AllStories
	(*Stories_Stories)(nil),                              // 1107: mtproto.stories_Stories
	(*Stories_StoryViewsList)(nil),                       // 1108: mtproto.stories_StoryViewsList
	(*Stories_StoryViews)(nil),                           // 1109: mtproto.stories_StoryViews
	(*ExportedStoryLink)(nil),                            // 1110: mtproto.ExportedStoryLink
	(*Stories_PeerStories)(nil),                          // 1111: mtproto.stories_PeerStories
	(*Stories_StoryReactionsList)(nil),                   // 1112: mtproto.stories_StoryReactionsList
	(*Stories_FoundStories)(nil),                         // 1113: mtproto.stories_FoundStories
	(*Stories_UserStories)(nil),                          // 1114: mtproto.stories_UserStories
	(*Account_Takeout)(nil),                              // 1115: mtproto.account_Takeout
	(*Theme)(nil),                                        // 1116: mtproto.Theme
	(*Account_Themes)(nil),                               // 1117: mtproto.account_Themes
	(*Help_TimezonesList)(nil),                           // 1118: mtproto.help_TimezonesList
	(*Help_TermsOfServiceUpdate)(nil),                    // 1119: mtproto.help_TermsOfServiceUpdate
	(*Messages_TranscribedAudio)(nil),                    // 1120: mtproto.messages_TranscribedAudio
	(*Messages_TranslatedText)(nil),                      // 1121: mtproto.messages_TranslatedText
	(*Help_UserInfo)(nil),                                // 1122: mtproto.help_UserInfo
	(*Account_Password)(nil),                             // 1123: mtproto.account_Password
	(*Account_PasswordSettings)(nil),                     // 1124: mtproto.account_PasswordSettings
	(*Updates_State)(nil),                                // 1125: mtproto.updates_State
	(*Updates_Difference)(nil),                           // 1126: mtproto.updates_Difference
	(*Updates_ChannelDifference)(nil),                    // 1127: mtproto.updates_ChannelDifference
	(*Contacts_ContactBirthdays)(nil),                    // 1128: mtproto.contacts_ContactBirthdays
	(*Photos_Photo)(nil),                                 // 1129: mtproto.photos_Photo
	(*Photos_Photos)(nil),                                // 1130: mtproto.photos_Photos
	(*Contacts_ResolvedPeer)(nil),                        // 1131: mtproto.contacts_ResolvedPeer
	(*Users_UserFull)(nil),                               // 1132: mtproto.users_UserFull
	(*Messages_AffectedFoundMessages)(nil),               // 1133: mtproto.messages_AffectedFoundMessages
	(*Phone_PhoneCall)(nil),                              // 1134: mtproto.phone_PhoneCall
	(*Account_WallPapers)(nil),                           // 1135: mtproto.account_WallPapers
	(*Messages_WebPagePreview)(nil),                      // 1136: mtproto.messages_WebPagePreview
	(*Messages_WebPage)(nil),                             // 1137: mtproto.messages_WebPage
	(*WebPage)(nil),                                      // 1138: mtproto.WebPage
}
var file_schema_tl_sync_service_proto_depIdxs = []int32{
	780,  // 0: mtproto.TL_invokeAfterMsg.constructor:type_name -> mtproto.TLConstructor
	780,  // 1: mtproto.TL_invokeAfterMsgs.constructor:type_name -> mtproto.TLConstructor
	780,  // 2: mtproto.TL_initConnection.constructor:type_name -> mtproto.TLConstructor
	781,  // 3: mtproto.TL_initConnection.proxy:type_name -> mtproto.InputClientProxy
	782,  // 4: mtproto.TL_initConnection.params:type_name -> mtproto.JSONValue
	780,  // 5: mtproto.TL_invokeWithLayer.constructor:type_name -> mtproto.TLConstructor
	780,  // 6: mtproto.TL_invokeWithoutUpdates.constructor:type_name -> mtproto.TLConstructor
	780,  // 7: mtproto.TL_invokeWithMessagesRange.constructor:type_name -> mtproto.TLConstructor
	783,  // 8: mtproto.TL_invokeWithMessagesRange.range:type_name -> mtproto.MessageRange
	780,  // 9: mtproto.TL_invokeWithTakeout.constructor:type_name -> mtproto.TLConstructor
	780,  // 10: mtproto.TL_invokeWithBusinessConnection.constructor:type_name -> mtproto.TLConstructor
	780,  // 11: mtproto.TL_invokeWithGooglePlayIntegrity.constructor:type_name -> mtproto.TLConstructor
	780,  // 12: mtproto.TL_invokeWithApnsSecret.constructor:type_name -> mtproto.TLConstructor
	780,  // 13: mtproto.TL_invokeWithReCaptcha.constructor:type_name -> mtproto.TLConstructor
	780,  // 14: mtproto.TL_auth_sendCode.constructor:type_name -> mtproto.TLConstructor
	784,  // 15: mtproto.TL_auth_sendCode.settings:type_name -> mtproto.CodeSettings
	780,  // 16: mtproto.TL_auth_signUp.constructor:type_name -> mtproto.TLConstructor
	780,  // 17: mtproto.TL_auth_signIn.constructor:type_name -> mtproto.TLConstructor
	785,  // 18: mtproto.TL_auth_signIn.phone_code_FLAGSTRING:type_name -> google.protobuf.StringValue
	786,  // 19: mtproto.TL_auth_signIn.email_verification:type_name -> mtproto.EmailVerification
	780,  // 20: mtproto.TL_auth_logOut.constructor:type_name -> mtproto.TLConstructor
	780,  // 21: mtproto.TL_auth_resetAuthorizations.constructor:type_name -> mtproto.TLConstructor
	780,  // 22: mtproto.TL_auth_exportAuthorization.constructor:type_name -> mtproto.TLConstructor
	780,  // 23: mtproto.TL_auth_importAuthorization.constructor:type_name -> mtproto.TLConstructor
	780,  // 24: mtproto.TL_auth_bindTempAuthKey.constructor:type_name -> mtproto.TLConstructor
	780,  // 25: mtproto.TL_auth_importBotAuthorization.constructor:type_name -> mtproto.TLConstructor
	780,  // 26: mtproto.TL_auth_checkPassword.constructor:type_name -> mtproto.TLConstructor
	787,  // 27: mtproto.TL_auth_checkPassword.password:type_name -> mtproto.InputCheckPasswordSRP
	780,  // 28: mtproto.TL_auth_requestPasswordRecovery.constructor:type_name -> mtproto.TLConstructor
	780,  // 29: mtproto.TL_auth_recoverPassword.constructor:type_name -> mtproto.TLConstructor
	788,  // 30: mtproto.TL_auth_recoverPassword.new_settings:type_name -> mtproto.account_PasswordInputSettings
	780,  // 31: mtproto.TL_auth_resendCode.constructor:type_name -> mtproto.TLConstructor
	785,  // 32: mtproto.TL_auth_resendCode.reason:type_name -> google.protobuf.StringValue
	780,  // 33: mtproto.TL_auth_cancelCode.constructor:type_name -> mtproto.TLConstructor
	780,  // 34: mtproto.TL_auth_dropTempAuthKeys.constructor:type_name -> mtproto.TLConstructor
	780,  // 35: mtproto.TL_auth_exportLoginToken.constructor:type_name -> mtproto.TLConstructor
	780,  // 36: mtproto.TL_auth_importLoginToken.constructor:type_name -> mtproto.TLConstructor
	780,  // 37: mtproto.TL_auth_acceptLoginToken.constructor:type_name -> mtproto.TLConstructor
	780,  // 38: mtproto.TL_auth_checkRecoveryPassword.constructor:type_name -> mtproto.TLConstructor
	780,  // 39: mtproto.TL_auth_importWebTokenAuthorization.constructor:type_name -> mtproto.TLConstructor
	780,  // 40: mtproto.TL_auth_requestFirebaseSms.constructor:type_name -> mtproto.TLConstructor
	785,  // 41: mtproto.TL_auth_requestFirebaseSms.safety_net_token:type_name -> google.protobuf.StringValue
	785,  // 42: mtproto.TL_auth_requestFirebaseSms.play_integrity_token:type_name -> google.protobuf.StringValue
	785,  // 43: mtproto.TL_auth_requestFirebaseSms.ios_push_secret:type_name -> google.protobuf.StringValue
	780,  // 44: mtproto.TL_auth_resetLoginEmail.constructor:type_name -> mtproto.TLConstructor
	780,  // 45: mtproto.TL_auth_reportMissingCode.constructor:type_name -> mtproto.TLConstructor
	780,  // 46: mtproto.TL_account_registerDevice.constructor:type_name -> mtproto.TLConstructor
	789,  // 47: mtproto.TL_account_registerDevice.app_sandbox:type_name -> mtproto.Bool
	780,  // 48: mtproto.TL_account_unregisterDevice.constructor:type_name -> mtproto.TLConstructor
	780,  // 49: mtproto.TL_account_updateNotifySettings.constructor:type_name -> mtproto.TLConstructor
	790,  // 50: mtproto.TL_account_updateNotifySettings.peer:type_name -> mtproto.InputNotifyPeer
	791,  // 51: mtproto.TL_account_updateNotifySettings.settings:type_name -> mtproto.InputPeerNotifySettings
	780,  // 52: mtproto.TL_account_getNotifySettings.constructor:type_name -> mtproto.TLConstructor
	790,  // 53: mtproto.TL_account_getNotifySettings.peer:type_name -> mtproto.InputNotifyPeer
	780,  // 54: mtproto.TL_account_resetNotifySettings.constructor:type_name -> mtproto.TLConstructor
	780,  // 55: mtproto.TL_account_updateProfile.constructor:type_name -> mtproto.TLConstructor
	785,  // 56: mtproto.TL_account_updateProfile.first_name:type_name -> google.protobuf.StringValue
	785,  // 57: mtproto.TL_account_updateProfile.last_name:type_name -> google.protobuf.StringValue
	785,  // 58: mtproto.TL_account_updateProfile.about:type_name -> google.protobuf.StringValue
	780,  // 59: mtproto.TL_account_updateStatus.constructor:type_name -> mtproto.TLConstructor
	789,  // 60: mtproto.TL_account_updateStatus.offline:type_name -> mtproto.Bool
	780,  // 61: mtproto.TL_account_getWallPapers.constructor:type_name -> mtproto.TLConstructor
	780,  // 62: mtproto.TL_account_reportPeer.constructor:type_name -> mtproto.TLConstructor
	792,  // 63: mtproto.TL_account_reportPeer.peer:type_name -> mtproto.InputPeer
	793,  // 64: mtproto.TL_account_reportPeer.reason:type_name -> mtproto.ReportReason
	780,  // 65: mtproto.TL_account_checkUsername.constructor:type_name -> mtproto.TLConstructor
	780,  // 66: mtproto.TL_account_updateUsername.constructor:type_name -> mtproto.TLConstructor
	780,  // 67: mtproto.TL_account_getPrivacy.constructor:type_name -> mtproto.TLConstructor
	794,  // 68: mtproto.TL_account_getPrivacy.key:type_name -> mtproto.InputPrivacyKey
	780,  // 69: mtproto.TL_account_setPrivacy.constructor:type_name -> mtproto.TLConstructor
	794,  // 70: mtproto.TL_account_setPrivacy.key:type_name -> mtproto.InputPrivacyKey
	795,  // 71: mtproto.TL_account_setPrivacy.rules:type_name -> mtproto.InputPrivacyRule
	780,  // 72: mtproto.TL_account_deleteAccount.constructor:type_name -> mtproto.TLConstructor
	787,  // 73: mtproto.TL_account_deleteAccount.password:type_name -> mtproto.InputCheckPasswordSRP
	780,  // 74: mtproto.TL_account_getAccountTTL.constructor:type_name -> mtproto.TLConstructor
	780,  // 75: mtproto.TL_account_setAccountTTL.constructor:type_name -> mtproto.TLConstructor
	796,  // 76: mtproto.TL_account_setAccountTTL.ttl:type_name -> mtproto.AccountDaysTTL
	780,  // 77: mtproto.TL_account_sendChangePhoneCode.constructor:type_name -> mtproto.TLConstructor
	784,  // 78: mtproto.TL_account_sendChangePhoneCode.settings:type_name -> mtproto.CodeSettings
	780,  // 79: mtproto.TL_account_changePhone.constructor:type_name -> mtproto.TLConstructor
	780,  // 80: mtproto.TL_account_updateDeviceLocked.constructor:type_name -> mtproto.TLConstructor
	780,  // 81: mtproto.TL_account_getAuthorizations.constructor:type_name -> mtproto.TLConstructor
	780,  // 82: mtproto.TL_account_resetAuthorization.constructor:type_name -> mtproto.TLConstructor
	780,  // 83: mtproto.TL_account_getPassword.constructor:type_name -> mtproto.TLConstructor
	780,  // 84: mtproto.TL_account_getPasswordSettings.constructor:type_name -> mtproto.TLConstructor
	787,  // 85: mtproto.TL_account_getPasswordSettings.password:type_name -> mtproto.InputCheckPasswordSRP
	780,  // 86: mtproto.TL_account_updatePasswordSettings.constructor:type_name -> mtproto.TLConstructor
	787,  // 87: mtproto.TL_account_updatePasswordSettings.password:type_name -> mtproto.InputCheckPasswordSRP
	788,  // 88: mtproto.TL_account_updatePasswordSettings.new_settings:type_name -> mtproto.account_PasswordInputSettings
	780,  // 89: mtproto.TL_account_sendConfirmPhoneCode.constructor:type_name -> mtproto.TLConstructor
	784,  // 90: mtproto.TL_account_sendConfirmPhoneCode.settings:type_name -> mtproto.CodeSettings
	780,  // 91: mtproto.TL_account_confirmPhone.constructor:type_name -> mtproto.TLConstructor
	780,  // 92: mtproto.TL_account_getTmpPassword.constructor:type_name -> mtproto.TLConstructor
	787,  // 93: mtproto.TL_account_getTmpPassword.password:type_name -> mtproto.InputCheckPasswordSRP
	780,  // 94: mtproto.TL_account_getWebAuthorizations.constructor:type_name -> mtproto.TLConstructor
	780,  // 95: mtproto.TL_account_resetWebAuthorization.constructor:type_name -> mtproto.TLConstructor
	780,  // 96: mtproto.TL_account_resetWebAuthorizations.constructor:type_name -> mtproto.TLConstructor
	780,  // 97: mtproto.TL_account_getAllSecureValues.constructor:type_name -> mtproto.TLConstructor
	780,  // 98: mtproto.TL_account_getSecureValue.constructor:type_name -> mtproto.TLConstructor
	797,  // 99: mtproto.TL_account_getSecureValue.types:type_name -> mtproto.SecureValueType
	780,  // 100: mtproto.TL_account_saveSecureValue.constructor:type_name -> mtproto.TLConstructor
	798,  // 101: mtproto.TL_account_saveSecureValue.value:type_name -> mtproto.InputSecureValue
	780,  // 102: mtproto.TL_account_deleteSecureValue.constructor:type_name -> mtproto.TLConstructor
	797,  // 103: mtproto.TL_account_deleteSecureValue.types:type_name -> mtproto.SecureValueType
	780,  // 104: mtproto.TL_account_getAuthorizationForm.constructor:type_name -> mtproto.TLConstructor
	780,  // 105: mtproto.TL_account_acceptAuthorization.constructor:type_name -> mtproto.TLConstructor
	799,  // 106: mtproto.TL_account_acceptAuthorization.value_hashes:type_name -> mtproto.SecureValueHash
	800,  // 107: mtproto.TL_account_acceptAuthorization.credentials:type_name -> mtproto.SecureCredentialsEncrypted
	780,  // 108: mtproto.TL_account_sendVerifyPhoneCode.constructor:type_name -> mtproto.TLConstructor
	784,  // 109: mtproto.TL_account_sendVerifyPhoneCode.settings:type_name -> mtproto.CodeSettings
	780,  // 110: mtproto.TL_account_verifyPhone.constructor:type_name -> mtproto.TLConstructor
	780,  // 111: mtproto.TL_account_sendVerifyEmailCode.constructor:type_name -> mtproto.TLConstructor
	801,  // 112: mtproto.TL_account_sendVerifyEmailCode.purpose:type_name -> mtproto.EmailVerifyPurpose
	780,  // 113: mtproto.TL_account_verifyEmail32DA4CF.constructor:type_name -> mtproto.TLConstructor
	801,  // 114: mtproto.TL_account_verifyEmail32DA4CF.purpose:type_name -> mtproto.EmailVerifyPurpose
	786,  // 115: mtproto.TL_account_verifyEmail32DA4CF.verification:type_name -> mtproto.EmailVerification
	780,  // 116: mtproto.TL_account_initTakeoutSession.constructor:type_name -> mtproto.TLConstructor
	802,  // 117: mtproto.TL_account_initTakeoutSession.file_max_size_FLAGINT64:type_name -> google.protobuf.Int64Value
	803,  // 118: mtproto.TL_account_initTakeoutSession.file_max_size_FLAGINT32:type_name -> google.protobuf.Int32Value
	780,  // 119: mtproto.TL_account_finishTakeoutSession.constructor:type_name -> mtproto.TLConstructor
	780,  // 120: mtproto.TL_account_confirmPasswordEmail.constructor:type_name -> mtproto.TLConstructor
	780,  // 121: mtproto.TL_account_resendPasswordEmail.constructor:type_name -> mtproto.TLConstructor
	780,  // 122: mtproto.TL_account_cancelPasswordEmail.constructor:type_name -> mtproto.TLConstructor
	780,  // 123: mtproto.TL_account_getContactSignUpNotification.constructor:type_name -> mtproto.TLConstructor
	780,  // 124: mtproto.TL_account_setContactSignUpNotification.constructor:type_name -> mtproto.TLConstructor
	789,  // 125: mtproto.TL_account_setContactSignUpNotification.silent:type_name -> mtproto.Bool
	780,  // 126: mtproto.TL_account_getNotifyExceptions.constructor:type_name -> mtproto.TLConstructor
	790,  // 127: mtproto.TL_account_getNotifyExceptions.peer:type_name -> mtproto.InputNotifyPeer
	780,  // 128: mtproto.TL_account_getWallPaper.constructor:type_name -> mtproto.TLConstructor
	804,  // 129: mtproto.TL_account_getWallPaper.wallpaper:type_name -> mtproto.InputWallPaper
	780,  // 130: mtproto.TL_account_uploadWallPaper.constructor:type_name -> mtproto.TLConstructor
	805,  // 131: mtproto.TL_account_uploadWallPaper.file:type_name -> mtproto.InputFile
	806,  // 132: mtproto.TL_account_uploadWallPaper.settings:type_name -> mtproto.WallPaperSettings
	780,  // 133: mtproto.TL_account_saveWallPaper.constructor:type_name -> mtproto.TLConstructor
	804,  // 134: mtproto.TL_account_saveWallPaper.wallpaper:type_name -> mtproto.InputWallPaper
	789,  // 135: mtproto.TL_account_saveWallPaper.unsave:type_name -> mtproto.Bool
	806,  // 136: mtproto.TL_account_saveWallPaper.settings:type_name -> mtproto.WallPaperSettings
	780,  // 137: mtproto.TL_account_installWallPaper.constructor:type_name -> mtproto.TLConstructor
	804,  // 138: mtproto.TL_account_installWallPaper.wallpaper:type_name -> mtproto.InputWallPaper
	806,  // 139: mtproto.TL_account_installWallPaper.settings:type_name -> mtproto.WallPaperSettings
	780,  // 140: mtproto.TL_account_resetWallPapers.constructor:type_name -> mtproto.TLConstructor
	780,  // 141: mtproto.TL_account_getAutoDownloadSettings.constructor:type_name -> mtproto.TLConstructor
	780,  // 142: mtproto.TL_account_saveAutoDownloadSettings.constructor:type_name -> mtproto.TLConstructor
	807,  // 143: mtproto.TL_account_saveAutoDownloadSettings.settings:type_name -> mtproto.AutoDownloadSettings
	780,  // 144: mtproto.TL_account_uploadTheme.constructor:type_name -> mtproto.TLConstructor
	805,  // 145: mtproto.TL_account_uploadTheme.file:type_name -> mtproto.InputFile
	805,  // 146: mtproto.TL_account_uploadTheme.thumb:type_name -> mtproto.InputFile
	780,  // 147: mtproto.TL_account_createTheme.constructor:type_name -> mtproto.TLConstructor
	808,  // 148: mtproto.TL_account_createTheme.document:type_name -> mtproto.InputDocument
	809,  // 149: mtproto.TL_account_createTheme.settings:type_name -> mtproto.InputThemeSettings
	780,  // 150: mtproto.TL_account_updateTheme.constructor:type_name -> mtproto.TLConstructor
	810,  // 151: mtproto.TL_account_updateTheme.theme:type_name -> mtproto.InputTheme
	785,  // 152: mtproto.TL_account_updateTheme.slug:type_name -> google.protobuf.StringValue
	785,  // 153: mtproto.TL_account_updateTheme.title:type_name -> google.protobuf.StringValue
	808,  // 154: mtproto.TL_account_updateTheme.document:type_name -> mtproto.InputDocument
	809,  // 155: mtproto.TL_account_updateTheme.settings:type_name -> mtproto.InputThemeSettings
	780,  // 156: mtproto.TL_account_saveTheme.constructor:type_name -> mtproto.TLConstructor
	810,  // 157: mtproto.TL_account_saveTheme.theme:type_name -> mtproto.InputTheme
	789,  // 158: mtproto.TL_account_saveTheme.unsave:type_name -> mtproto.Bool
	780,  // 159: mtproto.TL_account_installTheme.constructor:type_name -> mtproto.TLConstructor
	810,  // 160: mtproto.TL_account_installTheme.theme:type_name -> mtproto.InputTheme
	785,  // 161: mtproto.TL_account_installTheme.format:type_name -> google.protobuf.StringValue
	811,  // 162: mtproto.TL_account_installTheme.base_theme:type_name -> mtproto.BaseTheme
	780,  // 163: mtproto.TL_account_getTheme.constructor:type_name -> mtproto.TLConstructor
	810,  // 164: mtproto.TL_account_getTheme.theme:type_name -> mtproto.InputTheme
	780,  // 165: mtproto.TL_account_getThemes.constructor:type_name -> mtproto.TLConstructor
	780,  // 166: mtproto.TL_account_setContentSettings.constructor:type_name -> mtproto.TLConstructor
	780,  // 167: mtproto.TL_account_getContentSettings.constructor:type_name -> mtproto.TLConstructor
	780,  // 168: mtproto.TL_account_getMultiWallPapers.constructor:type_name -> mtproto.TLConstructor
	804,  // 169: mtproto.TL_account_getMultiWallPapers.wallpapers:type_name -> mtproto.InputWallPaper
	780,  // 170: mtproto.TL_account_getGlobalPrivacySettings.constructor:type_name -> mtproto.TLConstructor
	780,  // 171: mtproto.TL_account_setGlobalPrivacySettings.constructor:type_name -> mtproto.TLConstructor
	812,  // 172: mtproto.TL_account_setGlobalPrivacySettings.settings:type_name -> mtproto.GlobalPrivacySettings
	780,  // 173: mtproto.TL_account_reportProfilePhoto.constructor:type_name -> mtproto.TLConstructor
	792,  // 174: mtproto.TL_account_reportProfilePhoto.peer:type_name -> mtproto.InputPeer
	813,  // 175: mtproto.TL_account_reportProfilePhoto.photo_id:type_name -> mtproto.InputPhoto
	793,  // 176: mtproto.TL_account_reportProfilePhoto.reason:type_name -> mtproto.ReportReason
	780,  // 177: mtproto.TL_account_resetPassword.constructor:type_name -> mtproto.TLConstructor
	780,  // 178: mtproto.TL_account_declinePasswordReset.constructor:type_name -> mtproto.TLConstructor
	780,  // 179: mtproto.TL_account_getChatThemes.constructor:type_name -> mtproto.TLConstructor
	780,  // 180: mtproto.TL_account_setAuthorizationTTL.constructor:type_name -> mtproto.TLConstructor
	780,  // 181: mtproto.TL_account_changeAuthorizationSettings.constructor:type_name -> mtproto.TLConstructor
	789,  // 182: mtproto.TL_account_changeAuthorizationSettings.encrypted_requests_disabled:type_name -> mtproto.Bool
	789,  // 183: mtproto.TL_account_changeAuthorizationSettings.call_requests_disabled:type_name -> mtproto.Bool
	780,  // 184: mtproto.TL_account_getSavedRingtones.constructor:type_name -> mtproto.TLConstructor
	780,  // 185: mtproto.TL_account_saveRingtone.constructor:type_name -> mtproto.TLConstructor
	808,  // 186: mtproto.TL_account_saveRingtone.id:type_name -> mtproto.InputDocument
	789,  // 187: mtproto.TL_account_saveRingtone.unsave:type_name -> mtproto.Bool
	780,  // 188: mtproto.TL_account_uploadRingtone.constructor:type_name -> mtproto.TLConstructor
	805,  // 189: mtproto.TL_account_uploadRingtone.file:type_name -> mtproto.InputFile
	780,  // 190: mtproto.TL_account_updateEmojiStatus.constructor:type_name -> mtproto.TLConstructor
	814,  // 191: mtproto.TL_account_updateEmojiStatus.emoji_status:type_name -> mtproto.EmojiStatus
	780,  // 192: mtproto.TL_account_getDefaultEmojiStatuses.constructor:type_name -> mtproto.TLConstructor
	780,  // 193: mtproto.TL_account_getRecentEmojiStatuses.constructor:type_name -> mtproto.TLConstructor
	780,  // 194: mtproto.TL_account_clearRecentEmojiStatuses.constructor:type_name -> mtproto.TLConstructor
	780,  // 195: mtproto.TL_account_reorderUsernames.constructor:type_name -> mtproto.TLConstructor
	780,  // 196: mtproto.TL_account_toggleUsername.constructor:type_name -> mtproto.TLConstructor
	789,  // 197: mtproto.TL_account_toggleUsername.active:type_name -> mtproto.Bool
	780,  // 198: mtproto.TL_account_getDefaultProfilePhotoEmojis.constructor:type_name -> mtproto.TLConstructor
	780,  // 199: mtproto.TL_account_getDefaultGroupPhotoEmojis.constructor:type_name -> mtproto.TLConstructor
	780,  // 200: mtproto.TL_account_getAutoSaveSettings.constructor:type_name -> mtproto.TLConstructor
	780,  // 201: mtproto.TL_account_saveAutoSaveSettings.constructor:type_name -> mtproto.TLConstructor
	792,  // 202: mtproto.TL_account_saveAutoSaveSettings.peer:type_name -> mtproto.InputPeer
	815,  // 203: mtproto.TL_account_saveAutoSaveSettings.settings:type_name -> mtproto.AutoSaveSettings
	780,  // 204: mtproto.TL_account_deleteAutoSaveExceptions.constructor:type_name -> mtproto.TLConstructor
	780,  // 205: mtproto.TL_account_invalidateSignInCodes.constructor:type_name -> mtproto.TLConstructor
	780,  // 206: mtproto.TL_account_updateColor.constructor:type_name -> mtproto.TLConstructor
	803,  // 207: mtproto.TL_account_updateColor.color_FLAGINT32:type_name -> google.protobuf.Int32Value
	802,  // 208: mtproto.TL_account_updateColor.background_emoji_id:type_name -> google.protobuf.Int64Value
	780,  // 209: mtproto.TL_account_getDefaultBackgroundEmojis.constructor:type_name -> mtproto.TLConstructor
	780,  // 210: mtproto.TL_account_getChannelDefaultEmojiStatuses.constructor:type_name -> mtproto.TLConstructor
	780,  // 211: mtproto.TL_account_getChannelRestrictedStatusEmojis.constructor:type_name -> mtproto.TLConstructor
	780,  // 212: mtproto.TL_account_updateBusinessWorkHours.constructor:type_name -> mtproto.TLConstructor
	816,  // 213: mtproto.TL_account_updateBusinessWorkHours.business_work_hours:type_name -> mtproto.BusinessWorkHours
	780,  // 214: mtproto.TL_account_updateBusinessLocation.constructor:type_name -> mtproto.TLConstructor
	817,  // 215: mtproto.TL_account_updateBusinessLocation.geo_point:type_name -> mtproto.InputGeoPoint
	785,  // 216: mtproto.TL_account_updateBusinessLocation.address:type_name -> google.protobuf.StringValue
	780,  // 217: mtproto.TL_account_updateBusinessGreetingMessage.constructor:type_name -> mtproto.TLConstructor
	818,  // 218: mtproto.TL_account_updateBusinessGreetingMessage.message:type_name -> mtproto.InputBusinessGreetingMessage
	780,  // 219: mtproto.TL_account_updateBusinessAwayMessage.constructor:type_name -> mtproto.TLConstructor
	819,  // 220: mtproto.TL_account_updateBusinessAwayMessage.message:type_name -> mtproto.InputBusinessAwayMessage
	780,  // 221: mtproto.TL_account_updateConnectedBot.constructor:type_name -> mtproto.TLConstructor
	820,  // 222: mtproto.TL_account_updateConnectedBot.rights:type_name -> mtproto.BusinessBotRights
	821,  // 223: mtproto.TL_account_updateConnectedBot.bot:type_name -> mtproto.InputUser
	822,  // 224: mtproto.TL_account_updateConnectedBot.recipients_INPUTBUSINESSBOTRECIPIENTS:type_name -> mtproto.InputBusinessBotRecipients
	823,  // 225: mtproto.TL_account_updateConnectedBot.recipients_INPUTBUSINESSRECIPIENTS:type_name -> mtproto.InputBusinessRecipients
	780,  // 226: mtproto.TL_account_getConnectedBots.constructor:type_name -> mtproto.TLConstructor
	780,  // 227: mtproto.TL_account_getBotBusinessConnection.constructor:type_name -> mtproto.TLConstructor
	780,  // 228: mtproto.TL_account_updateBusinessIntro.constructor:type_name -> mtproto.TLConstructor
	824,  // 229: mtproto.TL_account_updateBusinessIntro.intro:type_name -> mtproto.InputBusinessIntro
	780,  // 230: mtproto.TL_account_toggleConnectedBotPaused.constructor:type_name -> mtproto.TLConstructor
	792,  // 231: mtproto.TL_account_toggleConnectedBotPaused.peer:type_name -> mtproto.InputPeer
	789,  // 232: mtproto.TL_account_toggleConnectedBotPaused.paused:type_name -> mtproto.Bool
	780,  // 233: mtproto.TL_account_disablePeerConnectedBot.constructor:type_name -> mtproto.TLConstructor
	792,  // 234: mtproto.TL_account_disablePeerConnectedBot.peer:type_name -> mtproto.InputPeer
	780,  // 235: mtproto.TL_account_updateBirthday.constructor:type_name -> mtproto.TLConstructor
	825,  // 236: mtproto.TL_account_updateBirthday.birthday:type_name -> mtproto.Birthday
	780,  // 237: mtproto.TL_account_createBusinessChatLink.constructor:type_name -> mtproto.TLConstructor
	826,  // 238: mtproto.TL_account_createBusinessChatLink.link:type_name -> mtproto.InputBusinessChatLink
	780,  // 239: mtproto.TL_account_editBusinessChatLink.constructor:type_name -> mtproto.TLConstructor
	826,  // 240: mtproto.TL_account_editBusinessChatLink.link:type_name -> mtproto.InputBusinessChatLink
	780,  // 241: mtproto.TL_account_deleteBusinessChatLink.constructor:type_name -> mtproto.TLConstructor
	780,  // 242: mtproto.TL_account_getBusinessChatLinks.constructor:type_name -> mtproto.TLConstructor
	780,  // 243: mtproto.TL_account_resolveBusinessChatLink.constructor:type_name -> mtproto.TLConstructor
	780,  // 244: mtproto.TL_account_updatePersonalChannel.constructor:type_name -> mtproto.TLConstructor
	827,  // 245: mtproto.TL_account_updatePersonalChannel.channel:type_name -> mtproto.InputChannel
	780,  // 246: mtproto.TL_account_toggleSponsoredMessages.constructor:type_name -> mtproto.TLConstructor
	789,  // 247: mtproto.TL_account_toggleSponsoredMessages.enabled:type_name -> mtproto.Bool
	780,  // 248: mtproto.TL_account_getReactionsNotifySettings.constructor:type_name -> mtproto.TLConstructor
	780,  // 249: mtproto.TL_account_setReactionsNotifySettings.constructor:type_name -> mtproto.TLConstructor
	828,  // 250: mtproto.TL_account_setReactionsNotifySettings.settings:type_name -> mtproto.ReactionsNotifySettings
	780,  // 251: mtproto.TL_account_getCollectibleEmojiStatuses.constructor:type_name -> mtproto.TLConstructor
	780,  // 252: mtproto.TL_account_addNoPaidMessagesException.constructor:type_name -> mtproto.TLConstructor
	821,  // 253: mtproto.TL_account_addNoPaidMessagesException.user_id:type_name -> mtproto.InputUser
	780,  // 254: mtproto.TL_account_getPaidMessagesRevenue.constructor:type_name -> mtproto.TLConstructor
	821,  // 255: mtproto.TL_account_getPaidMessagesRevenue.user_id:type_name -> mtproto.InputUser
	780,  // 256: mtproto.TL_users_getUsers.constructor:type_name -> mtproto.TLConstructor
	821,  // 257: mtproto.TL_users_getUsers.id:type_name -> mtproto.InputUser
	780,  // 258: mtproto.TL_users_getFullUser.constructor:type_name -> mtproto.TLConstructor
	821,  // 259: mtproto.TL_users_getFullUser.id:type_name -> mtproto.InputUser
	780,  // 260: mtproto.TL_users_setSecureValueErrors.constructor:type_name -> mtproto.TLConstructor
	821,  // 261: mtproto.TL_users_setSecureValueErrors.id:type_name -> mtproto.InputUser
	829,  // 262: mtproto.TL_users_setSecureValueErrors.errors:type_name -> mtproto.SecureValueError
	780,  // 263: mtproto.TL_users_getRequirementsToContact.constructor:type_name -> mtproto.TLConstructor
	821,  // 264: mtproto.TL_users_getRequirementsToContact.id:type_name -> mtproto.InputUser
	780,  // 265: mtproto.TL_contacts_getContactIDs.constructor:type_name -> mtproto.TLConstructor
	780,  // 266: mtproto.TL_contacts_getStatuses.constructor:type_name -> mtproto.TLConstructor
	780,  // 267: mtproto.TL_contacts_getContacts.constructor:type_name -> mtproto.TLConstructor
	780,  // 268: mtproto.TL_contacts_importContacts.constructor:type_name -> mtproto.TLConstructor
	830,  // 269: mtproto.TL_contacts_importContacts.contacts:type_name -> mtproto.InputContact
	780,  // 270: mtproto.TL_contacts_deleteContacts.constructor:type_name -> mtproto.TLConstructor
	821,  // 271: mtproto.TL_contacts_deleteContacts.id:type_name -> mtproto.InputUser
	780,  // 272: mtproto.TL_contacts_deleteByPhones.constructor:type_name -> mtproto.TLConstructor
	780,  // 273: mtproto.TL_contacts_block.constructor:type_name -> mtproto.TLConstructor
	792,  // 274: mtproto.TL_contacts_block.id:type_name -> mtproto.InputPeer
	780,  // 275: mtproto.TL_contacts_unblock.constructor:type_name -> mtproto.TLConstructor
	792,  // 276: mtproto.TL_contacts_unblock.id:type_name -> mtproto.InputPeer
	780,  // 277: mtproto.TL_contacts_getBlocked.constructor:type_name -> mtproto.TLConstructor
	780,  // 278: mtproto.TL_contacts_search.constructor:type_name -> mtproto.TLConstructor
	780,  // 279: mtproto.TL_contacts_resolveUsername.constructor:type_name -> mtproto.TLConstructor
	785,  // 280: mtproto.TL_contacts_resolveUsername.referer:type_name -> google.protobuf.StringValue
	780,  // 281: mtproto.TL_contacts_getTopPeers.constructor:type_name -> mtproto.TLConstructor
	780,  // 282: mtproto.TL_contacts_resetTopPeerRating.constructor:type_name -> mtproto.TLConstructor
	831,  // 283: mtproto.TL_contacts_resetTopPeerRating.category:type_name -> mtproto.TopPeerCategory
	792,  // 284: mtproto.TL_contacts_resetTopPeerRating.peer:type_name -> mtproto.InputPeer
	780,  // 285: mtproto.TL_contacts_resetSaved.constructor:type_name -> mtproto.TLConstructor
	780,  // 286: mtproto.TL_contacts_getSaved.constructor:type_name -> mtproto.TLConstructor
	780,  // 287: mtproto.TL_contacts_toggleTopPeers.constructor:type_name -> mtproto.TLConstructor
	789,  // 288: mtproto.TL_contacts_toggleTopPeers.enabled:type_name -> mtproto.Bool
	780,  // 289: mtproto.TL_contacts_addContact.constructor:type_name -> mtproto.TLConstructor
	821,  // 290: mtproto.TL_contacts_addContact.id:type_name -> mtproto.InputUser
	780,  // 291: mtproto.TL_contacts_acceptContact.constructor:type_name -> mtproto.TLConstructor
	821,  // 292: mtproto.TL_contacts_acceptContact.id:type_name -> mtproto.InputUser
	780,  // 293: mtproto.TL_contacts_getLocated.constructor:type_name -> mtproto.TLConstructor
	817,  // 294: mtproto.TL_contacts_getLocated.geo_point:type_name -> mtproto.InputGeoPoint
	803,  // 295: mtproto.TL_contacts_getLocated.self_expires:type_name -> google.protobuf.Int32Value
	780,  // 296: mtproto.TL_contacts_blockFromReplies.constructor:type_name -> mtproto.TLConstructor
	780,  // 297: mtproto.TL_contacts_resolvePhone.constructor:type_name -> mtproto.TLConstructor
	780,  // 298: mtproto.TL_contacts_exportContactToken.constructor:type_name -> mtproto.TLConstructor
	780,  // 299: mtproto.TL_contacts_importContactToken.constructor:type_name -> mtproto.TLConstructor
	780,  // 300: mtproto.TL_contacts_editCloseFriends.constructor:type_name -> mtproto.TLConstructor
	780,  // 301: mtproto.TL_contacts_setBlocked.constructor:type_name -> mtproto.TLConstructor
	792,  // 302: mtproto.TL_contacts_setBlocked.id:type_name -> mtproto.InputPeer
	780,  // 303: mtproto.TL_contacts_getBirthdays.constructor:type_name -> mtproto.TLConstructor
	780,  // 304: mtproto.TL_contacts_getSponsoredPeers.constructor:type_name -> mtproto.TLConstructor
	780,  // 305: mtproto.TL_messages_getMessages.constructor:type_name -> mtproto.TLConstructor
	832,  // 306: mtproto.TL_messages_getMessages.id_VECTORINPUTMESSAGE:type_name -> mtproto.InputMessage
	780,  // 307: mtproto.TL_messages_getDialogs.constructor:type_name -> mtproto.TLConstructor
	803,  // 308: mtproto.TL_messages_getDialogs.folder_id:type_name -> google.protobuf.Int32Value
	792,  // 309: mtproto.TL_messages_getDialogs.offset_peer:type_name -> mtproto.InputPeer
	780,  // 310: mtproto.TL_messages_getHistory.constructor:type_name -> mtproto.TLConstructor
	792,  // 311: mtproto.TL_messages_getHistory.peer:type_name -> mtproto.InputPeer
	780,  // 312: mtproto.TL_messages_search.constructor:type_name -> mtproto.TLConstructor
	792,  // 313: mtproto.TL_messages_search.peer:type_name -> mtproto.InputPeer
	792,  // 314: mtproto.TL_messages_search.from_id:type_name -> mtproto.InputPeer
	792,  // 315: mtproto.TL_messages_search.saved_peer_id:type_name -> mtproto.InputPeer
	833,  // 316: mtproto.TL_messages_search.saved_reaction:type_name -> mtproto.Reaction
	803,  // 317: mtproto.TL_messages_search.top_msg_id:type_name -> google.protobuf.Int32Value
	834,  // 318: mtproto.TL_messages_search.filter:type_name -> mtproto.MessagesFilter
	780,  // 319: mtproto.TL_messages_readHistory.constructor:type_name -> mtproto.TLConstructor
	792,  // 320: mtproto.TL_messages_readHistory.peer:type_name -> mtproto.InputPeer
	780,  // 321: mtproto.TL_messages_deleteHistory.constructor:type_name -> mtproto.TLConstructor
	792,  // 322: mtproto.TL_messages_deleteHistory.peer:type_name -> mtproto.InputPeer
	803,  // 323: mtproto.TL_messages_deleteHistory.min_date:type_name -> google.protobuf.Int32Value
	803,  // 324: mtproto.TL_messages_deleteHistory.max_date:type_name -> google.protobuf.Int32Value
	780,  // 325: mtproto.TL_messages_deleteMessages.constructor:type_name -> mtproto.TLConstructor
	780,  // 326: mtproto.TL_messages_receivedMessages.constructor:type_name -> mtproto.TLConstructor
	780,  // 327: mtproto.TL_messages_setTyping.constructor:type_name -> mtproto.TLConstructor
	792,  // 328: mtproto.TL_messages_setTyping.peer:type_name -> mtproto.InputPeer
	803,  // 329: mtproto.TL_messages_setTyping.top_msg_id:type_name -> google.protobuf.Int32Value
	835,  // 330: mtproto.TL_messages_setTyping.action:type_name -> mtproto.SendMessageAction
	780,  // 331: mtproto.TL_messages_sendMessage.constructor:type_name -> mtproto.TLConstructor
	792,  // 332: mtproto.TL_messages_sendMessage.peer:type_name -> mtproto.InputPeer
	836,  // 333: mtproto.TL_messages_sendMessage.reply_to:type_name -> mtproto.InputReplyTo
	837,  // 334: mtproto.TL_messages_sendMessage.reply_markup:type_name -> mtproto.ReplyMarkup
	838,  // 335: mtproto.TL_messages_sendMessage.entities:type_name -> mtproto.MessageEntity
	803,  // 336: mtproto.TL_messages_sendMessage.schedule_date:type_name -> google.protobuf.Int32Value
	792,  // 337: mtproto.TL_messages_sendMessage.send_as:type_name -> mtproto.InputPeer
	839,  // 338: mtproto.TL_messages_sendMessage.quick_reply_shortcut:type_name -> mtproto.InputQuickReplyShortcut
	802,  // 339: mtproto.TL_messages_sendMessage.effect:type_name -> google.protobuf.Int64Value
	802,  // 340: mtproto.TL_messages_sendMessage.allow_paid_stars:type_name -> google.protobuf.Int64Value
	803,  // 341: mtproto.TL_messages_sendMessage.reply_to_msg_id:type_name -> google.protobuf.Int32Value
	803,  // 342: mtproto.TL_messages_sendMessage.top_msg_id:type_name -> google.protobuf.Int32Value
	780,  // 343: mtproto.TL_messages_sendMedia.constructor:type_name -> mtproto.TLConstructor
	792,  // 344: mtproto.TL_messages_sendMedia.peer:type_name -> mtproto.InputPeer
	836,  // 345: mtproto.TL_messages_sendMedia.reply_to:type_name -> mtproto.InputReplyTo
	840,  // 346: mtproto.TL_messages_sendMedia.media:type_name -> mtproto.InputMedia
	837,  // 347: mtproto.TL_messages_sendMedia.reply_markup:type_name -> mtproto.ReplyMarkup
	838,  // 348: mtproto.TL_messages_sendMedia.entities:type_name -> mtproto.MessageEntity
	803,  // 349: mtproto.TL_messages_sendMedia.schedule_date:type_name -> google.protobuf.Int32Value
	792,  // 350: mtproto.TL_messages_sendMedia.send_as:type_name -> mtproto.InputPeer
	839,  // 351: mtproto.TL_messages_sendMedia.quick_reply_shortcut:type_name -> mtproto.InputQuickReplyShortcut
	802,  // 352: mtproto.TL_messages_sendMedia.effect:type_name -> google.protobuf.Int64Value
	802,  // 353: mtproto.TL_messages_sendMedia.allow_paid_stars:type_name -> google.protobuf.Int64Value
	803,  // 354: mtproto.TL_messages_sendMedia.reply_to_msg_id:type_name -> google.protobuf.Int32Value
	803,  // 355: mtproto.TL_messages_sendMedia.top_msg_id:type_name -> google.protobuf.Int32Value
	780,  // 356: mtproto.TL_messages_forwardMessages.constructor:type_name -> mtproto.TLConstructor
	792,  // 357: mtproto.TL_messages_forwardMessages.from_peer:type_name -> mtproto.InputPeer
	792,  // 358: mtproto.TL_messages_forwardMessages.to_peer:type_name -> mtproto.InputPeer
	803,  // 359: mtproto.TL_messages_forwardMessages.top_msg_id:type_name -> google.protobuf.Int32Value
	803,  // 360: mtproto.TL_messages_forwardMessages.schedule_date:type_name -> google.protobuf.Int32Value
	792,  // 361: mtproto.TL_messages_forwardMessages.send_as:type_name -> mtproto.InputPeer
	839,  // 362: mtproto.TL_messages_forwardMessages.quick_reply_shortcut:type_name -> mtproto.InputQuickReplyShortcut
	803,  // 363: mtproto.TL_messages_forwardMessages.video_timestamp:type_name -> google.protobuf.Int32Value
	802,  // 364: mtproto.TL_messages_forwardMessages.allow_paid_stars:type_name -> google.protobuf.Int64Value
	780,  // 365: mtproto.TL_messages_reportSpam.constructor:type_name -> mtproto.TLConstructor
	792,  // 366: mtproto.TL_messages_reportSpam.peer:type_name -> mtproto.InputPeer
	780,  // 367: mtproto.TL_messages_getPeerSettings.constructor:type_name -> mtproto.TLConstructor
	792,  // 368: mtproto.TL_messages_getPeerSettings.peer:type_name -> mtproto.InputPeer
	780,  // 369: mtproto.TL_messages_reportFC78AF9B.constructor:type_name -> mtproto.TLConstructor
	792,  // 370: mtproto.TL_messages_reportFC78AF9B.peer:type_name -> mtproto.InputPeer
	780,  // 371: mtproto.TL_messages_getChats.constructor:type_name -> mtproto.TLConstructor
	780,  // 372: mtproto.TL_messages_getFullChat.constructor:type_name -> mtproto.TLConstructor
	780,  // 373: mtproto.TL_messages_editChatTitle.constructor:type_name -> mtproto.TLConstructor
	780,  // 374: mtproto.TL_messages_editChatPhoto.constructor:type_name -> mtproto.TLConstructor
	841,  // 375: mtproto.TL_messages_editChatPhoto.photo:type_name -> mtproto.InputChatPhoto
	780,  // 376: mtproto.TL_messages_addChatUserCBC6D107.constructor:type_name -> mtproto.TLConstructor
	821,  // 377: mtproto.TL_messages_addChatUserCBC6D107.user_id:type_name -> mtproto.InputUser
	780,  // 378: mtproto.TL_messages_deleteChatUser.constructor:type_name -> mtproto.TLConstructor
	821,  // 379: mtproto.TL_messages_deleteChatUser.user_id:type_name -> mtproto.InputUser
	780,  // 380: mtproto.TL_messages_createChat92CEDDD4.constructor:type_name -> mtproto.TLConstructor
	821,  // 381: mtproto.TL_messages_createChat92CEDDD4.users:type_name -> mtproto.InputUser
	803,  // 382: mtproto.TL_messages_createChat92CEDDD4.ttl_period:type_name -> google.protobuf.Int32Value
	780,  // 383: mtproto.TL_messages_getDhConfig.constructor:type_name -> mtproto.TLConstructor
	780,  // 384: mtproto.TL_messages_requestEncryption.constructor:type_name -> mtproto.TLConstructor
	821,  // 385: mtproto.TL_messages_requestEncryption.user_id:type_name -> mtproto.InputUser
	780,  // 386: mtproto.TL_messages_acceptEncryption.constructor:type_name -> mtproto.TLConstructor
	842,  // 387: mtproto.TL_messages_acceptEncryption.peer:type_name -> mtproto.InputEncryptedChat
	780,  // 388: mtproto.TL_messages_discardEncryption.constructor:type_name -> mtproto.TLConstructor
	780,  // 389: mtproto.TL_messages_setEncryptedTyping.constructor:type_name -> mtproto.TLConstructor
	842,  // 390: mtproto.TL_messages_setEncryptedTyping.peer:type_name -> mtproto.InputEncryptedChat
	789,  // 391: mtproto.TL_messages_setEncryptedTyping.typing:type_name -> mtproto.Bool
	780,  // 392: mtproto.TL_messages_readEncryptedHistory.constructor:type_name -> mtproto.TLConstructor
	842,  // 393: mtproto.TL_messages_readEncryptedHistory.peer:type_name -> mtproto.InputEncryptedChat
	780,  // 394: mtproto.TL_messages_sendEncrypted.constructor:type_name -> mtproto.TLConstructor
	842,  // 395: mtproto.TL_messages_sendEncrypted.peer:type_name -> mtproto.InputEncryptedChat
	780,  // 396: mtproto.TL_messages_sendEncryptedFile.constructor:type_name -> mtproto.TLConstructor
	842,  // 397: mtproto.TL_messages_sendEncryptedFile.peer:type_name -> mtproto.InputEncryptedChat
	843,  // 398: mtproto.TL_messages_sendEncryptedFile.file:type_name -> mtproto.InputEncryptedFile
	780,  // 399: mtproto.TL_messages_sendEncryptedService.constructor:type_name -> mtproto.TLConstructor
	842,  // 400: mtproto.TL_messages_sendEncryptedService.peer:type_name -> mtproto.InputEncryptedChat
	780,  // 401: mtproto.TL_messages_receivedQueue.constructor:type_name -> mtproto.TLConstructor
	780,  // 402: mtproto.TL_messages_reportEncryptedSpam.constructor:type_name -> mtproto.TLConstructor
	842,  // 403: mtproto.TL_messages_reportEncryptedSpam.peer:type_name -> mtproto.InputEncryptedChat
	780,  // 404: mtproto.TL_messages_readMessageContents.constructor:type_name -> mtproto.TLConstructor
	780,  // 405: mtproto.TL_messages_getStickers.constructor:type_name -> mtproto.TLConstructor
	780,  // 406: mtproto.TL_messages_getAllStickers.constructor:type_name -> mtproto.TLConstructor
	780,  // 407: mtproto.TL_messages_getWebPagePreview570D6F6F.constructor:type_name -> mtproto.TLConstructor
	838,  // 408: mtproto.TL_messages_getWebPagePreview570D6F6F.entities:type_name -> mtproto.MessageEntity
	780,  // 409: mtproto.TL_messages_exportChatInvite.constructor:type_name -> mtproto.TLConstructor
	792,  // 410: mtproto.TL_messages_exportChatInvite.peer:type_name -> mtproto.InputPeer
	803,  // 411: mtproto.TL_messages_exportChatInvite.expire_date:type_name -> google.protobuf.Int32Value
	803,  // 412: mtproto.TL_messages_exportChatInvite.usage_limit:type_name -> google.protobuf.Int32Value
	785,  // 413: mtproto.TL_messages_exportChatInvite.title:type_name -> google.protobuf.StringValue
	844,  // 414: mtproto.TL_messages_exportChatInvite.subscription_pricing:type_name -> mtproto.StarsSubscriptionPricing
	780,  // 415: mtproto.TL_messages_checkChatInvite.constructor:type_name -> mtproto.TLConstructor
	780,  // 416: mtproto.TL_messages_importChatInvite.constructor:type_name -> mtproto.TLConstructor
	780,  // 417: mtproto.TL_messages_getStickerSet.constructor:type_name -> mtproto.TLConstructor
	845,  // 418: mtproto.TL_messages_getStickerSet.stickerset:type_name -> mtproto.InputStickerSet
	780,  // 419: mtproto.TL_messages_installStickerSet.constructor:type_name -> mtproto.TLConstructor
	845,  // 420: mtproto.TL_messages_installStickerSet.stickerset:type_name -> mtproto.InputStickerSet
	789,  // 421: mtproto.TL_messages_installStickerSet.archived:type_name -> mtproto.Bool
	780,  // 422: mtproto.TL_messages_uninstallStickerSet.constructor:type_name -> mtproto.TLConstructor
	845,  // 423: mtproto.TL_messages_uninstallStickerSet.stickerset:type_name -> mtproto.InputStickerSet
	780,  // 424: mtproto.TL_messages_startBot.constructor:type_name -> mtproto.TLConstructor
	821,  // 425: mtproto.TL_messages_startBot.bot:type_name -> mtproto.InputUser
	792,  // 426: mtproto.TL_messages_startBot.peer:type_name -> mtproto.InputPeer
	780,  // 427: mtproto.TL_messages_getMessagesViews.constructor:type_name -> mtproto.TLConstructor
	792,  // 428: mtproto.TL_messages_getMessagesViews.peer:type_name -> mtproto.InputPeer
	789,  // 429: mtproto.TL_messages_getMessagesViews.increment:type_name -> mtproto.Bool
	780,  // 430: mtproto.TL_messages_editChatAdmin.constructor:type_name -> mtproto.TLConstructor
	821,  // 431: mtproto.TL_messages_editChatAdmin.user_id:type_name -> mtproto.InputUser
	789,  // 432: mtproto.TL_messages_editChatAdmin.is_admin:type_name -> mtproto.Bool
	780,  // 433: mtproto.TL_messages_migrateChat.constructor:type_name -> mtproto.TLConstructor
	780,  // 434: mtproto.TL_messages_searchGlobal.constructor:type_name -> mtproto.TLConstructor
	803,  // 435: mtproto.TL_messages_searchGlobal.folder_id:type_name -> google.protobuf.Int32Value
	834,  // 436: mtproto.TL_messages_searchGlobal.filter:type_name -> mtproto.MessagesFilter
	792,  // 437: mtproto.TL_messages_searchGlobal.offset_peer:type_name -> mtproto.InputPeer
	780,  // 438: mtproto.TL_messages_reorderStickerSets.constructor:type_name -> mtproto.TLConstructor
	780,  // 439: mtproto.TL_messages_getDocumentByHash.constructor:type_name -> mtproto.TLConstructor
	780,  // 440: mtproto.TL_messages_getSavedGifs.constructor:type_name -> mtproto.TLConstructor
	780,  // 441: mtproto.TL_messages_saveGif.constructor:type_name -> mtproto.TLConstructor
	808,  // 442: mtproto.TL_messages_saveGif.id:type_name -> mtproto.InputDocument
	789,  // 443: mtproto.TL_messages_saveGif.unsave:type_name -> mtproto.Bool
	780,  // 444: mtproto.TL_messages_getInlineBotResults.constructor:type_name -> mtproto.TLConstructor
	821,  // 445: mtproto.TL_messages_getInlineBotResults.bot:type_name -> mtproto.InputUser
	792,  // 446: mtproto.TL_messages_getInlineBotResults.peer:type_name -> mtproto.InputPeer
	817,  // 447: mtproto.TL_messages_getInlineBotResults.geo_point:type_name -> mtproto.InputGeoPoint
	780,  // 448: mtproto.TL_messages_setInlineBotResults.constructor:type_name -> mtproto.TLConstructor
	846,  // 449: mtproto.TL_messages_setInlineBotResults.results:type_name -> mtproto.InputBotInlineResult
	785,  // 450: mtproto.TL_messages_setInlineBotResults.next_offset:type_name -> google.protobuf.StringValue
	847,  // 451: mtproto.TL_messages_setInlineBotResults.switch_pm:type_name -> mtproto.InlineBotSwitchPM
	848,  // 452: mtproto.TL_messages_setInlineBotResults.switch_webview:type_name -> mtproto.InlineBotWebView
	780,  // 453: mtproto.TL_messages_sendInlineBotResult.constructor:type_name -> mtproto.TLConstructor
	792,  // 454: mtproto.TL_messages_sendInlineBotResult.peer:type_name -> mtproto.InputPeer
	836,  // 455: mtproto.TL_messages_sendInlineBotResult.reply_to:type_name -> mtproto.InputReplyTo
	803,  // 456: mtproto.TL_messages_sendInlineBotResult.schedule_date:type_name -> google.protobuf.Int32Value
	792,  // 457: mtproto.TL_messages_sendInlineBotResult.send_as:type_name -> mtproto.InputPeer
	839,  // 458: mtproto.TL_messages_sendInlineBotResult.quick_reply_shortcut:type_name -> mtproto.InputQuickReplyShortcut
	802,  // 459: mtproto.TL_messages_sendInlineBotResult.allow_paid_stars:type_name -> google.protobuf.Int64Value
	803,  // 460: mtproto.TL_messages_sendInlineBotResult.reply_to_msg_id:type_name -> google.protobuf.Int32Value
	803,  // 461: mtproto.TL_messages_sendInlineBotResult.top_msg_id:type_name -> google.protobuf.Int32Value
	780,  // 462: mtproto.TL_messages_getMessageEditData.constructor:type_name -> mtproto.TLConstructor
	792,  // 463: mtproto.TL_messages_getMessageEditData.peer:type_name -> mtproto.InputPeer
	780,  // 464: mtproto.TL_messages_editMessage.constructor:type_name -> mtproto.TLConstructor
	792,  // 465: mtproto.TL_messages_editMessage.peer:type_name -> mtproto.InputPeer
	785,  // 466: mtproto.TL_messages_editMessage.message:type_name -> google.protobuf.StringValue
	840,  // 467: mtproto.TL_messages_editMessage.media:type_name -> mtproto.InputMedia
	837,  // 468: mtproto.TL_messages_editMessage.reply_markup:type_name -> mtproto.ReplyMarkup
	838,  // 469: mtproto.TL_messages_editMessage.entities:type_name -> mtproto.MessageEntity
	803,  // 470: mtproto.TL_messages_editMessage.schedule_date:type_name -> google.protobuf.Int32Value
	803,  // 471: mtproto.TL_messages_editMessage.quick_reply_shortcut_id:type_name -> google.protobuf.Int32Value
	780,  // 472: mtproto.TL_messages_editInlineBotMessage.constructor:type_name -> mtproto.TLConstructor
	849,  // 473: mtproto.TL_messages_editInlineBotMessage.id:type_name -> mtproto.InputBotInlineMessageID
	785,  // 474: mtproto.TL_messages_editInlineBotMessage.message:type_name -> google.protobuf.StringValue
	840,  // 475: mtproto.TL_messages_editInlineBotMessage.media:type_name -> mtproto.InputMedia
	837,  // 476: mtproto.TL_messages_editInlineBotMessage.reply_markup:type_name -> mtproto.ReplyMarkup
	838,  // 477: mtproto.TL_messages_editInlineBotMessage.entities:type_name -> mtproto.MessageEntity
	780,  // 478: mtproto.TL_messages_getBotCallbackAnswer.constructor:type_name -> mtproto.TLConstructor
	792,  // 479: mtproto.TL_messages_getBotCallbackAnswer.peer:type_name -> mtproto.InputPeer
	787,  // 480: mtproto.TL_messages_getBotCallbackAnswer.password:type_name -> mtproto.InputCheckPasswordSRP
	780,  // 481: mtproto.TL_messages_setBotCallbackAnswer.constructor:type_name -> mtproto.TLConstructor
	785,  // 482: mtproto.TL_messages_setBotCallbackAnswer.message:type_name -> google.protobuf.StringValue
	785,  // 483: mtproto.TL_messages_setBotCallbackAnswer.url:type_name -> google.protobuf.StringValue
	780,  // 484: mtproto.TL_messages_getPeerDialogs.constructor:type_name -> mtproto.TLConstructor
	850,  // 485: mtproto.TL_messages_getPeerDialogs.peers:type_name -> mtproto.InputDialogPeer
	780,  // 486: mtproto.TL_messages_saveDraft.constructor:type_name -> mtproto.TLConstructor
	836,  // 487: mtproto.TL_messages_saveDraft.reply_to:type_name -> mtproto.InputReplyTo
	792,  // 488: mtproto.TL_messages_saveDraft.peer:type_name -> mtproto.InputPeer
	838,  // 489: mtproto.TL_messages_saveDraft.entities:type_name -> mtproto.MessageEntity
	840,  // 490: mtproto.TL_messages_saveDraft.media:type_name -> mtproto.InputMedia
	802,  // 491: mtproto.TL_messages_saveDraft.effect:type_name -> google.protobuf.Int64Value
	803,  // 492: mtproto.TL_messages_saveDraft.reply_to_msg_id:type_name -> google.protobuf.Int32Value
	803,  // 493: mtproto.TL_messages_saveDraft.top_msg_id:type_name -> google.protobuf.Int32Value
	780,  // 494: mtproto.TL_messages_getAllDrafts.constructor:type_name -> mtproto.TLConstructor
	780,  // 495: mtproto.TL_messages_getFeaturedStickers.constructor:type_name -> mtproto.TLConstructor
	780,  // 496: mtproto.TL_messages_readFeaturedStickers.constructor:type_name -> mtproto.TLConstructor
	780,  // 497: mtproto.TL_messages_getRecentStickers.constructor:type_name -> mtproto.TLConstructor
	780,  // 498: mtproto.TL_messages_saveRecentSticker.constructor:type_name -> mtproto.TLConstructor
	808,  // 499: mtproto.TL_messages_saveRecentSticker.id:type_name -> mtproto.InputDocument
	789,  // 500: mtproto.TL_messages_saveRecentSticker.unsave:type_name -> mtproto.Bool
	780,  // 501: mtproto.TL_messages_clearRecentStickers.constructor:type_name -> mtproto.TLConstructor
	780,  // 502: mtproto.TL_messages_getArchivedStickers.constructor:type_name -> mtproto.TLConstructor
	780,  // 503: mtproto.TL_messages_getMaskStickers.constructor:type_name -> mtproto.TLConstructor
	780,  // 504: mtproto.TL_messages_getAttachedStickers.constructor:type_name -> mtproto.TLConstructor
	851,  // 505: mtproto.TL_messages_getAttachedStickers.media:type_name -> mtproto.InputStickeredMedia
	780,  // 506: mtproto.TL_messages_setGameScore.constructor:type_name -> mtproto.TLConstructor
	792,  // 507: mtproto.TL_messages_setGameScore.peer:type_name -> mtproto.InputPeer
	821,  // 508: mtproto.TL_messages_setGameScore.user_id:type_name -> mtproto.InputUser
	780,  // 509: mtproto.TL_messages_setInlineGameScore.constructor:type_name -> mtproto.TLConstructor
	849,  // 510: mtproto.TL_messages_setInlineGameScore.id:type_name -> mtproto.InputBotInlineMessageID
	821,  // 511: mtproto.TL_messages_setInlineGameScore.user_id:type_name -> mtproto.InputUser
	780,  // 512: mtproto.TL_messages_getGameHighScores.constructor:type_name -> mtproto.TLConstructor
	792,  // 513: mtproto.TL_messages_getGameHighScores.peer:type_name -> mtproto.InputPeer
	821,  // 514: mtproto.TL_messages_getGameHighScores.user_id:type_name -> mtproto.InputUser
	780,  // 515: mtproto.TL_messages_getInlineGameHighScores.constructor:type_name -> mtproto.TLConstructor
	849,  // 516: mtproto.TL_messages_getInlineGameHighScores.id:type_name -> mtproto.InputBotInlineMessageID
	821,  // 517: mtproto.TL_messages_getInlineGameHighScores.user_id:type_name -> mtproto.InputUser
	780,  // 518: mtproto.TL_messages_getCommonChats.constructor:type_name -> mtproto.TLConstructor
	821,  // 519: mtproto.TL_messages_getCommonChats.user_id:type_name -> mtproto.InputUser
	780,  // 520: mtproto.TL_messages_getWebPage8D9692A3.constructor:type_name -> mtproto.TLConstructor
	780,  // 521: mtproto.TL_messages_toggleDialogPin.constructor:type_name -> mtproto.TLConstructor
	850,  // 522: mtproto.TL_messages_toggleDialogPin.peer:type_name -> mtproto.InputDialogPeer
	780,  // 523: mtproto.TL_messages_reorderPinnedDialogs.constructor:type_name -> mtproto.TLConstructor
	850,  // 524: mtproto.TL_messages_reorderPinnedDialogs.order:type_name -> mtproto.InputDialogPeer
	780,  // 525: mtproto.TL_messages_getPinnedDialogs.constructor:type_name -> mtproto.TLConstructor
	780,  // 526: mtproto.TL_messages_setBotShippingResults.constructor:type_name -> mtproto.TLConstructor
	785,  // 527: mtproto.TL_messages_setBotShippingResults.error:type_name -> google.protobuf.StringValue
	852,  // 528: mtproto.TL_messages_setBotShippingResults.shipping_options:type_name -> mtproto.ShippingOption
	780,  // 529: mtproto.TL_messages_setBotPrecheckoutResults.constructor:type_name -> mtproto.TLConstructor
	785,  // 530: mtproto.TL_messages_setBotPrecheckoutResults.error:type_name -> google.protobuf.StringValue
	780,  // 531: mtproto.TL_messages_uploadMedia.constructor:type_name -> mtproto.TLConstructor
	785,  // 532: mtproto.TL_messages_uploadMedia.business_connection_id:type_name -> google.protobuf.StringValue
	792,  // 533: mtproto.TL_messages_uploadMedia.peer:type_name -> mtproto.InputPeer
	840,  // 534: mtproto.TL_messages_uploadMedia.media:type_name -> mtproto.InputMedia
	780,  // 535: mtproto.TL_messages_sendScreenshotNotification.constructor:type_name -> mtproto.TLConstructor
	792,  // 536: mtproto.TL_messages_sendScreenshotNotification.peer:type_name -> mtproto.InputPeer
	836,  // 537: mtproto.TL_messages_sendScreenshotNotification.reply_to:type_name -> mtproto.InputReplyTo
	780,  // 538: mtproto.TL_messages_getFavedStickers.constructor:type_name -> mtproto.TLConstructor
	780,  // 539: mtproto.TL_messages_faveSticker.constructor:type_name -> mtproto.TLConstructor
	808,  // 540: mtproto.TL_messages_faveSticker.id:type_name -> mtproto.InputDocument
	789,  // 541: mtproto.TL_messages_faveSticker.unfave:type_name -> mtproto.Bool
	780,  // 542: mtproto.TL_messages_getUnreadMentions.constructor:type_name -> mtproto.TLConstructor
	792,  // 543: mtproto.TL_messages_getUnreadMentions.peer:type_name -> mtproto.InputPeer
	803,  // 544: mtproto.TL_messages_getUnreadMentions.top_msg_id:type_name -> google.protobuf.Int32Value
	780,  // 545: mtproto.TL_messages_readMentions.constructor:type_name -> mtproto.TLConstructor
	792,  // 546: mtproto.TL_messages_readMentions.peer:type_name -> mtproto.InputPeer
	803,  // 547: mtproto.TL_messages_readMentions.top_msg_id:type_name -> google.protobuf.Int32Value
	780,  // 548: mtproto.TL_messages_getRecentLocations.constructor:type_name -> mtproto.TLConstructor
	792,  // 549: mtproto.TL_messages_getRecentLocations.peer:type_name -> mtproto.InputPeer
	780,  // 550: mtproto.TL_messages_sendMultiMedia.constructor:type_name -> mtproto.TLConstructor
	792,  // 551: mtproto.TL_messages_sendMultiMedia.peer:type_name -> mtproto.InputPeer
	836,  // 552: mtproto.TL_messages_sendMultiMedia.reply_to:type_name -> mtproto.InputReplyTo
	853,  // 553: mtproto.TL_messages_sendMultiMedia.multi_media:type_name -> mtproto.InputSingleMedia
	803,  // 554: mtproto.TL_messages_sendMultiMedia.schedule_date:type_name -> google.protobuf.Int32Value
	792,  // 555: mtproto.TL_messages_sendMultiMedia.send_as:type_name -> mtproto.InputPeer
	839,  // 556: mtproto.TL_messages_sendMultiMedia.quick_reply_shortcut:type_name -> mtproto.InputQuickReplyShortcut
	802,  // 557: mtproto.TL_messages_sendMultiMedia.effect:type_name -> google.protobuf.Int64Value
	802,  // 558: mtproto.TL_messages_sendMultiMedia.allow_paid_stars:type_name -> google.protobuf.Int64Value
	803,  // 559: mtproto.TL_messages_sendMultiMedia.reply_to_msg_id:type_name -> google.protobuf.Int32Value
	803,  // 560: mtproto.TL_messages_sendMultiMedia.top_msg_id:type_name -> google.protobuf.Int32Value
	780,  // 561: mtproto.TL_messages_uploadEncryptedFile.constructor:type_name -> mtproto.TLConstructor
	842,  // 562: mtproto.TL_messages_uploadEncryptedFile.peer:type_name -> mtproto.InputEncryptedChat
	843,  // 563: mtproto.TL_messages_uploadEncryptedFile.file:type_name -> mtproto.InputEncryptedFile
	780,  // 564: mtproto.TL_messages_searchStickerSets.constructor:type_name -> mtproto.TLConstructor
	780,  // 565: mtproto.TL_messages_getSplitRanges.constructor:type_name -> mtproto.TLConstructor
	780,  // 566: mtproto.TL_messages_markDialogUnread.constructor:type_name -> mtproto.TLConstructor
	850,  // 567: mtproto.TL_messages_markDialogUnread.peer:type_name -> mtproto.InputDialogPeer
	780,  // 568: mtproto.TL_messages_getDialogUnreadMarks.constructor:type_name -> mtproto.TLConstructor
	780,  // 569: mtproto.TL_messages_clearAllDrafts.constructor:type_name -> mtproto.TLConstructor
	780,  // 570: mtproto.TL_messages_updatePinnedMessage.constructor:type_name -> mtproto.TLConstructor
	792,  // 571: mtproto.TL_messages_updatePinnedMessage.peer:type_name -> mtproto.InputPeer
	780,  // 572: mtproto.TL_messages_sendVote.constructor:type_name -> mtproto.TLConstructor
	792,  // 573: mtproto.TL_messages_sendVote.peer:type_name -> mtproto.InputPeer
	780,  // 574: mtproto.TL_messages_getPollResults.constructor:type_name -> mtproto.TLConstructor
	792,  // 575: mtproto.TL_messages_getPollResults.peer:type_name -> mtproto.InputPeer
	780,  // 576: mtproto.TL_messages_getOnlines.constructor:type_name -> mtproto.TLConstructor
	792,  // 577: mtproto.TL_messages_getOnlines.peer:type_name -> mtproto.InputPeer
	780,  // 578: mtproto.TL_messages_editChatAbout.constructor:type_name -> mtproto.TLConstructor
	792,  // 579: mtproto.TL_messages_editChatAbout.peer:type_name -> mtproto.InputPeer
	780,  // 580: mtproto.TL_messages_editChatDefaultBannedRights.constructor:type_name -> mtproto.TLConstructor
	792,  // 581: mtproto.TL_messages_editChatDefaultBannedRights.peer:type_name -> mtproto.InputPeer
	854,  // 582: mtproto.TL_messages_editChatDefaultBannedRights.banned_rights:type_name -> mtproto.ChatBannedRights
	780,  // 583: mtproto.TL_messages_getEmojiKeywords.constructor:type_name -> mtproto.TLConstructor
	780,  // 584: mtproto.TL_messages_getEmojiKeywordsDifference.constructor:type_name -> mtproto.TLConstructor
	780,  // 585: mtproto.TL_messages_getEmojiKeywordsLanguages.constructor:type_name -> mtproto.TLConstructor
	780,  // 586: mtproto.TL_messages_getEmojiURL.constructor:type_name -> mtproto.TLConstructor
	780,  // 587: mtproto.TL_messages_getSearchCounters.constructor:type_name -> mtproto.TLConstructor
	792,  // 588: mtproto.TL_messages_getSearchCounters.peer:type_name -> mtproto.InputPeer
	792,  // 589: mtproto.TL_messages_getSearchCounters.saved_peer_id:type_name -> mtproto.InputPeer
	803,  // 590: mtproto.TL_messages_getSearchCounters.top_msg_id:type_name -> google.protobuf.Int32Value
	834,  // 591: mtproto.TL_messages_getSearchCounters.filters:type_name -> mtproto.MessagesFilter
	780,  // 592: mtproto.TL_messages_requestUrlAuth.constructor:type_name -> mtproto.TLConstructor
	792,  // 593: mtproto.TL_messages_requestUrlAuth.peer:type_name -> mtproto.InputPeer
	803,  // 594: mtproto.TL_messages_requestUrlAuth.msg_id:type_name -> google.protobuf.Int32Value
	803,  // 595: mtproto.TL_messages_requestUrlAuth.button_id:type_name -> google.protobuf.Int32Value
	785,  // 596: mtproto.TL_messages_requestUrlAuth.url:type_name -> google.protobuf.StringValue
	780,  // 597: mtproto.TL_messages_acceptUrlAuth.constructor:type_name -> mtproto.TLConstructor
	792,  // 598: mtproto.TL_messages_acceptUrlAuth.peer:type_name -> mtproto.InputPeer
	803,  // 599: mtproto.TL_messages_acceptUrlAuth.msg_id:type_name -> google.protobuf.Int32Value
	803,  // 600: mtproto.TL_messages_acceptUrlAuth.button_id:type_name -> google.protobuf.Int32Value
	785,  // 601: mtproto.TL_messages_acceptUrlAuth.url:type_name -> google.protobuf.StringValue
	780,  // 602: mtproto.TL_messages_hidePeerSettingsBar.constructor:type_name -> mtproto.TLConstructor
	792,  // 603: mtproto.TL_messages_hidePeerSettingsBar.peer:type_name -> mtproto.InputPeer
	780,  // 604: mtproto.TL_messages_getScheduledHistory.constructor:type_name -> mtproto.TLConstructor
	792,  // 605: mtproto.TL_messages_getScheduledHistory.peer:type_name -> mtproto.InputPeer
	780,  // 606: mtproto.TL_messages_getScheduledMessages.constructor:type_name -> mtproto.TLConstructor
	792,  // 607: mtproto.TL_messages_getScheduledMessages.peer:type_name -> mtproto.InputPeer
	780,  // 608: mtproto.TL_messages_sendScheduledMessages.constructor:type_name -> mtproto.TLConstructor
	792,  // 609: mtproto.TL_messages_sendScheduledMessages.peer:type_name -> mtproto.InputPeer
	780,  // 610: mtproto.TL_messages_deleteScheduledMessages.constructor:type_name -> mtproto.TLConstructor
	792,  // 611: mtproto.TL_messages_deleteScheduledMessages.peer:type_name -> mtproto.InputPeer
	780,  // 612: mtproto.TL_messages_getPollVotes.constructor:type_name -> mtproto.TLConstructor
	792,  // 613: mtproto.TL_messages_getPollVotes.peer:type_name -> mtproto.InputPeer
	785,  // 614: mtproto.TL_messages_getPollVotes.offset:type_name -> google.protobuf.StringValue
	780,  // 615: mtproto.TL_messages_toggleStickerSets.constructor:type_name -> mtproto.TLConstructor
	845,  // 616: mtproto.TL_messages_toggleStickerSets.stickersets:type_name -> mtproto.InputStickerSet
	780,  // 617: mtproto.TL_messages_getDialogFiltersEFD48C89.constructor:type_name -> mtproto.TLConstructor
	780,  // 618: mtproto.TL_messages_getSuggestedDialogFilters.constructor:type_name -> mtproto.TLConstructor
	780,  // 619: mtproto.TL_messages_updateDialogFilter.constructor:type_name -> mtproto.TLConstructor
	855,  // 620: mtproto.TL_messages_updateDialogFilter.filter:type_name -> mtproto.DialogFilter
	780,  // 621: mtproto.TL_messages_updateDialogFiltersOrder.constructor:type_name -> mtproto.TLConstructor
	780,  // 622: mtproto.TL_messages_getOldFeaturedStickers.constructor:type_name -> mtproto.TLConstructor
	780,  // 623: mtproto.TL_messages_getReplies.constructor:type_name -> mtproto.TLConstructor
	792,  // 624: mtproto.TL_messages_getReplies.peer:type_name -> mtproto.InputPeer
	780,  // 625: mtproto.TL_messages_getDiscussionMessage.constructor:type_name -> mtproto.TLConstructor
	792,  // 626: mtproto.TL_messages_getDiscussionMessage.peer:type_name -> mtproto.InputPeer
	780,  // 627: mtproto.TL_messages_readDiscussion.constructor:type_name -> mtproto.TLConstructor
	792,  // 628: mtproto.TL_messages_readDiscussion.peer:type_name -> mtproto.InputPeer
	780,  // 629: mtproto.TL_messages_unpinAllMessages.constructor:type_name -> mtproto.TLConstructor
	792,  // 630: mtproto.TL_messages_unpinAllMessages.peer:type_name -> mtproto.InputPeer
	803,  // 631: mtproto.TL_messages_unpinAllMessages.top_msg_id:type_name -> google.protobuf.Int32Value
	780,  // 632: mtproto.TL_messages_deleteChat.constructor:type_name -> mtproto.TLConstructor
	780,  // 633: mtproto.TL_messages_deletePhoneCallHistory.constructor:type_name -> mtproto.TLConstructor
	780,  // 634: mtproto.TL_messages_checkHistoryImport.constructor:type_name -> mtproto.TLConstructor
	780,  // 635: mtproto.TL_messages_initHistoryImport.constructor:type_name -> mtproto.TLConstructor
	792,  // 636: mtproto.TL_messages_initHistoryImport.peer:type_name -> mtproto.InputPeer
	805,  // 637: mtproto.TL_messages_initHistoryImport.file:type_name -> mtproto.InputFile
	780,  // 638: mtproto.TL_messages_uploadImportedMedia.constructor:type_name -> mtproto.TLConstructor
	792,  // 639: mtproto.TL_messages_uploadImportedMedia.peer:type_name -> mtproto.InputPeer
	840,  // 640: mtproto.TL_messages_uploadImportedMedia.media:type_name -> mtproto.InputMedia
	780,  // 641: mtproto.TL_messages_startHistoryImport.constructor:type_name -> mtproto.TLConstructor
	792,  // 642: mtproto.TL_messages_startHistoryImport.peer:type_name -> mtproto.InputPeer
	780,  // 643: mtproto.TL_messages_getExportedChatInvites.constructor:type_name -> mtproto.TLConstructor
	792,  // 644: mtproto.TL_messages_getExportedChatInvites.peer:type_name -> mtproto.InputPeer
	821,  // 645: mtproto.TL_messages_getExportedChatInvites.admin_id:type_name -> mtproto.InputUser
	803,  // 646: mtproto.TL_messages_getExportedChatInvites.offset_date:type_name -> google.protobuf.Int32Value
	785,  // 647: mtproto.TL_messages_getExportedChatInvites.offset_link:type_name -> google.protobuf.StringValue
	780,  // 648: mtproto.TL_messages_getExportedChatInvite.constructor:type_name -> mtproto.TLConstructor
	792,  // 649: mtproto.TL_messages_getExportedChatInvite.peer:type_name -> mtproto.InputPeer
	780,  // 650: mtproto.TL_messages_editExportedChatInvite.constructor:type_name -> mtproto.TLConstructor
	792,  // 651: mtproto.TL_messages_editExportedChatInvite.peer:type_name -> mtproto.InputPeer
	803,  // 652: mtproto.TL_messages_editExportedChatInvite.expire_date:type_name -> google.protobuf.Int32Value
	803,  // 653: mtproto.TL_messages_editExportedChatInvite.usage_limit:type_name -> google.protobuf.Int32Value
	789,  // 654: mtproto.TL_messages_editExportedChatInvite.request_needed:type_name -> mtproto.Bool
	785,  // 655: mtproto.TL_messages_editExportedChatInvite.title:type_name -> google.protobuf.StringValue
	780,  // 656: mtproto.TL_messages_deleteRevokedExportedChatInvites.constructor:type_name -> mtproto.TLConstructor
	792,  // 657: mtproto.TL_messages_deleteRevokedExportedChatInvites.peer:type_name -> mtproto.InputPeer
	821,  // 658: mtproto.TL_messages_deleteRevokedExportedChatInvites.admin_id:type_name -> mtproto.InputUser
	780,  // 659: mtproto.TL_messages_deleteExportedChatInvite.constructor:type_name -> mtproto.TLConstructor
	792,  // 660: mtproto.TL_messages_deleteExportedChatInvite.peer:type_name -> mtproto.InputPeer
	780,  // 661: mtproto.TL_messages_getAdminsWithInvites.constructor:type_name -> mtproto.TLConstructor
	792,  // 662: mtproto.TL_messages_getAdminsWithInvites.peer:type_name -> mtproto.InputPeer
	780,  // 663: mtproto.TL_messages_getChatInviteImporters.constructor:type_name -> mtproto.TLConstructor
	792,  // 664: mtproto.TL_messages_getChatInviteImporters.peer:type_name -> mtproto.InputPeer
	785,  // 665: mtproto.TL_messages_getChatInviteImporters.link:type_name -> google.protobuf.StringValue
	785,  // 666: mtproto.TL_messages_getChatInviteImporters.q:type_name -> google.protobuf.StringValue
	821,  // 667: mtproto.TL_messages_getChatInviteImporters.offset_user:type_name -> mtproto.InputUser
	780,  // 668: mtproto.TL_messages_setHistoryTTL.constructor:type_name -> mtproto.TLConstructor
	792,  // 669: mtproto.TL_messages_setHistoryTTL.peer:type_name -> mtproto.InputPeer
	780,  // 670: mtproto.TL_messages_checkHistoryImportPeer.constructor:type_name -> mtproto.TLConstructor
	792,  // 671: mtproto.TL_messages_checkHistoryImportPeer.peer:type_name -> mtproto.InputPeer
	780,  // 672: mtproto.TL_messages_setChatTheme.constructor:type_name -> mtproto.TLConstructor
	792,  // 673: mtproto.TL_messages_setChatTheme.peer:type_name -> mtproto.InputPeer
	780,  // 674: mtproto.TL_messages_getMessageReadParticipants31C1C44F.constructor:type_name -> mtproto.TLConstructor
	792,  // 675: mtproto.TL_messages_getMessageReadParticipants31C1C44F.peer:type_name -> mtproto.InputPeer
	780,  // 676: mtproto.TL_messages_getSearchResultsCalendar.constructor:type_name -> mtproto.TLConstructor
	792,  // 677: mtproto.TL_messages_getSearchResultsCalendar.peer:type_name -> mtproto.InputPeer
	792,  // 678: mtproto.TL_messages_getSearchResultsCalendar.saved_peer_id:type_name -> mtproto.InputPeer
	834,  // 679: mtproto.TL_messages_getSearchResultsCalendar.filter:type_name -> mtproto.MessagesFilter
	780,  // 680: mtproto.TL_messages_getSearchResultsPositions.constructor:type_name -> mtproto.TLConstructor
	792,  // 681: mtproto.TL_messages_getSearchResultsPositions.peer:type_name -> mtproto.InputPeer
	792,  // 682: mtproto.TL_messages_getSearchResultsPositions.saved_peer_id:type_name -> mtproto.InputPeer
	834,  // 683: mtproto.TL_messages_getSearchResultsPositions.filter:type_name -> mtproto.MessagesFilter
	780,  // 684: mtproto.TL_messages_hideChatJoinRequest.constructor:type_name -> mtproto.TLConstructor
	792,  // 685: mtproto.TL_messages_hideChatJoinRequest.peer:type_name -> mtproto.InputPeer
	821,  // 686: mtproto.TL_messages_hideChatJoinRequest.user_id:type_name -> mtproto.InputUser
	780,  // 687: mtproto.TL_messages_hideAllChatJoinRequests.constructor:type_name -> mtproto.TLConstructor
	792,  // 688: mtproto.TL_messages_hideAllChatJoinRequests.peer:type_name -> mtproto.InputPeer
	785,  // 689: mtproto.TL_messages_hideAllChatJoinRequests.link:type_name -> google.protobuf.StringValue
	780,  // 690: mtproto.TL_messages_toggleNoForwards.constructor:type_name -> mtproto.TLConstructor
	792,  // 691: mtproto.TL_messages_toggleNoForwards.peer:type_name -> mtproto.InputPeer
	789,  // 692: mtproto.TL_messages_toggleNoForwards.enabled:type_name -> mtproto.Bool
	780,  // 693: mtproto.TL_messages_saveDefaultSendAs.constructor:type_name -> mtproto.TLConstructor
	792,  // 694: mtproto.TL_messages_saveDefaultSendAs.peer:type_name -> mtproto.InputPeer
	792,  // 695: mtproto.TL_messages_saveDefaultSendAs.send_as:type_name -> mtproto.InputPeer
	780,  // 696: mtproto.TL_messages_sendReaction.constructor:type_name -> mtproto.TLConstructor
	792,  // 697: mtproto.TL_messages_sendReaction.peer:type_name -> mtproto.InputPeer
	833,  // 698: mtproto.TL_messages_sendReaction.reaction_FLAGVECTORREACTION:type_name -> mtproto.Reaction
	785,  // 699: mtproto.TL_messages_sendReaction.reaction_FLAGSTRING:type_name -> google.protobuf.StringValue
	780,  // 700: mtproto.TL_messages_getMessagesReactions.constructor:type_name -> mtproto.TLConstructor
	792,  // 701: mtproto.TL_messages_getMessagesReactions.peer:type_name -> mtproto.InputPeer
	780,  // 702: mtproto.TL_messages_getMessageReactionsList.constructor:type_name -> mtproto.TLConstructor
	792,  // 703: mtproto.TL_messages_getMessageReactionsList.peer:type_name -> mtproto.InputPeer
	833,  // 704: mtproto.TL_messages_getMessageReactionsList.reaction_FLAGREACTION:type_name -> mtproto.Reaction
	785,  // 705: mtproto.TL_messages_getMessageReactionsList.offset:type_name -> google.protobuf.StringValue
	785,  // 706: mtproto.TL_messages_getMessageReactionsList.reaction_FLAGSTRING:type_name -> google.protobuf.StringValue
	780,  // 707: mtproto.TL_messages_setChatAvailableReactions.constructor:type_name -> mtproto.TLConstructor
	792,  // 708: mtproto.TL_messages_setChatAvailableReactions.peer:type_name -> mtproto.InputPeer
	856,  // 709: mtproto.TL_messages_setChatAvailableReactions.available_reactions_CHATREACTIONS:type_name -> mtproto.ChatReactions
	803,  // 710: mtproto.TL_messages_setChatAvailableReactions.reactions_limit:type_name -> google.protobuf.Int32Value
	789,  // 711: mtproto.TL_messages_setChatAvailableReactions.paid_enabled:type_name -> mtproto.Bool
	780,  // 712: mtproto.TL_messages_getAvailableReactions.constructor:type_name -> mtproto.TLConstructor
	780,  // 713: mtproto.TL_messages_setDefaultReaction.constructor:type_name -> mtproto.TLConstructor
	833,  // 714: mtproto.TL_messages_setDefaultReaction.reaction_REACTION:type_name -> mtproto.Reaction
	780,  // 715: mtproto.TL_messages_translateText.constructor:type_name -> mtproto.TLConstructor
	792,  // 716: mtproto.TL_messages_translateText.peer:type_name -> mtproto.InputPeer
	857,  // 717: mtproto.TL_messages_translateText.text_FLAGVECTORTEXTWITHENTITIES:type_name -> mtproto.TextWithEntities
	803,  // 718: mtproto.TL_messages_translateText.msg_id:type_name -> google.protobuf.Int32Value
	785,  // 719: mtproto.TL_messages_translateText.text_FLAGSTRING:type_name -> google.protobuf.StringValue
	785,  // 720: mtproto.TL_messages_translateText.from_lang:type_name -> google.protobuf.StringValue
	780,  // 721: mtproto.TL_messages_getUnreadReactions.constructor:type_name -> mtproto.TLConstructor
	792,  // 722: mtproto.TL_messages_getUnreadReactions.peer:type_name -> mtproto.InputPeer
	803,  // 723: mtproto.TL_messages_getUnreadReactions.top_msg_id:type_name -> google.protobuf.Int32Value
	780,  // 724: mtproto.TL_messages_readReactions.constructor:type_name -> mtproto.TLConstructor
	792,  // 725: mtproto.TL_messages_readReactions.peer:type_name -> mtproto.InputPeer
	803,  // 726: mtproto.TL_messages_readReactions.top_msg_id:type_name -> google.protobuf.Int32Value
	780,  // 727: mtproto.TL_messages_searchSentMedia.constructor:type_name -> mtproto.TLConstructor
	834,  // 728: mtproto.TL_messages_searchSentMedia.filter:type_name -> mtproto.MessagesFilter
	780,  // 729: mtproto.TL_messages_getAttachMenuBots.constructor:type_name -> mtproto.TLConstructor
	780,  // 730: mtproto.TL_messages_getAttachMenuBot.constructor:type_name -> mtproto.TLConstructor
	821,  // 731: mtproto.TL_messages_getAttachMenuBot.bot:type_name -> mtproto.InputUser
	780,  // 732: mtproto.TL_messages_toggleBotInAttachMenu.constructor:type_name -> mtproto.TLConstructor
	821,  // 733: mtproto.TL_messages_toggleBotInAttachMenu.bot:type_name -> mtproto.InputUser
	789,  // 734: mtproto.TL_messages_toggleBotInAttachMenu.enabled:type_name -> mtproto.Bool
	780,  // 735: mtproto.TL_messages_requestWebView.constructor:type_name -> mtproto.TLConstructor
	792,  // 736: mtproto.TL_messages_requestWebView.peer:type_name -> mtproto.InputPeer
	821,  // 737: mtproto.TL_messages_requestWebView.bot:type_name -> mtproto.InputUser
	785,  // 738: mtproto.TL_messages_requestWebView.url:type_name -> google.protobuf.StringValue
	785,  // 739: mtproto.TL_messages_requestWebView.start_param:type_name -> google.protobuf.StringValue
	858,  // 740: mtproto.TL_messages_requestWebView.theme_params:type_name -> mtproto.DataJSON
	836,  // 741: mtproto.TL_messages_requestWebView.reply_to:type_name -> mtproto.InputReplyTo
	792,  // 742: mtproto.TL_messages_requestWebView.send_as:type_name -> mtproto.InputPeer
	803,  // 743: mtproto.TL_messages_requestWebView.reply_to_msg_id:type_name -> google.protobuf.Int32Value
	803,  // 744: mtproto.TL_messages_requestWebView.top_msg_id:type_name -> google.protobuf.Int32Value
	780,  // 745: mtproto.TL_messages_prolongWebView.constructor:type_name -> mtproto.TLConstructor
	792,  // 746: mtproto.TL_messages_prolongWebView.peer:type_name -> mtproto.InputPeer
	821,  // 747: mtproto.TL_messages_prolongWebView.bot:type_name -> mtproto.InputUser
	836,  // 748: mtproto.TL_messages_prolongWebView.reply_to:type_name -> mtproto.InputReplyTo
	792,  // 749: mtproto.TL_messages_prolongWebView.send_as:type_name -> mtproto.InputPeer
	803,  // 750: mtproto.TL_messages_prolongWebView.reply_to_msg_id:type_name -> google.protobuf.Int32Value
	803,  // 751: mtproto.TL_messages_prolongWebView.top_msg_id:type_name -> google.protobuf.Int32Value
	780,  // 752: mtproto.TL_messages_requestSimpleWebView413A3E73.constructor:type_name -> mtproto.TLConstructor
	821,  // 753: mtproto.TL_messages_requestSimpleWebView413A3E73.bot:type_name -> mtproto.InputUser
	785,  // 754: mtproto.TL_messages_requestSimpleWebView413A3E73.url:type_name -> google.protobuf.StringValue
	785,  // 755: mtproto.TL_messages_requestSimpleWebView413A3E73.start_param:type_name -> google.protobuf.StringValue
	858,  // 756: mtproto.TL_messages_requestSimpleWebView413A3E73.theme_params:type_name -> mtproto.DataJSON
	780,  // 757: mtproto.TL_messages_sendWebViewResultMessage.constructor:type_name -> mtproto.TLConstructor
	846,  // 758: mtproto.TL_messages_sendWebViewResultMessage.result:type_name -> mtproto.InputBotInlineResult
	780,  // 759: mtproto.TL_messages_sendWebViewData.constructor:type_name -> mtproto.TLConstructor
	821,  // 760: mtproto.TL_messages_sendWebViewData.bot:type_name -> mtproto.InputUser
	780,  // 761: mtproto.TL_messages_transcribeAudio.constructor:type_name -> mtproto.TLConstructor
	792,  // 762: mtproto.TL_messages_transcribeAudio.peer:type_name -> mtproto.InputPeer
	780,  // 763: mtproto.TL_messages_rateTranscribedAudio.constructor:type_name -> mtproto.TLConstructor
	792,  // 764: mtproto.TL_messages_rateTranscribedAudio.peer:type_name -> mtproto.InputPeer
	789,  // 765: mtproto.TL_messages_rateTranscribedAudio.good:type_name -> mtproto.Bool
	780,  // 766: mtproto.TL_messages_getCustomEmojiDocuments.constructor:type_name -> mtproto.TLConstructor
	780,  // 767: mtproto.TL_messages_getEmojiStickers.constructor:type_name -> mtproto.TLConstructor
	780,  // 768: mtproto.TL_messages_getFeaturedEmojiStickers.constructor:type_name -> mtproto.TLConstructor
	780,  // 769: mtproto.TL_messages_reportReaction.constructor:type_name -> mtproto.TLConstructor
	792,  // 770: mtproto.TL_messages_reportReaction.peer:type_name -> mtproto.InputPeer
	792,  // 771: mtproto.TL_messages_reportReaction.reaction_peer:type_name -> mtproto.InputPeer
	780,  // 772: mtproto.TL_messages_getTopReactions.constructor:type_name -> mtproto.TLConstructor
	780,  // 773: mtproto.TL_messages_getRecentReactions.constructor:type_name -> mtproto.TLConstructor
	780,  // 774: mtproto.TL_messages_clearRecentReactions.constructor:type_name -> mtproto.TLConstructor
	780,  // 775: mtproto.TL_messages_getExtendedMedia.constructor:type_name -> mtproto.TLConstructor
	792,  // 776: mtproto.TL_messages_getExtendedMedia.peer:type_name -> mtproto.InputPeer
	780,  // 777: mtproto.TL_messages_setDefaultHistoryTTL.constructor:type_name -> mtproto.TLConstructor
	780,  // 778: mtproto.TL_messages_getDefaultHistoryTTL.constructor:type_name -> mtproto.TLConstructor
	780,  // 779: mtproto.TL_messages_sendBotRequestedPeer.constructor:type_name -> mtproto.TLConstructor
	792,  // 780: mtproto.TL_messages_sendBotRequestedPeer.peer:type_name -> mtproto.InputPeer
	792,  // 781: mtproto.TL_messages_sendBotRequestedPeer.requested_peers:type_name -> mtproto.InputPeer
	792,  // 782: mtproto.TL_messages_sendBotRequestedPeer.requested_peer:type_name -> mtproto.InputPeer
	780,  // 783: mtproto.TL_messages_getEmojiGroups.constructor:type_name -> mtproto.TLConstructor
	780,  // 784: mtproto.TL_messages_getEmojiStatusGroups.constructor:type_name -> mtproto.TLConstructor
	780,  // 785: mtproto.TL_messages_getEmojiProfilePhotoGroups.constructor:type_name -> mtproto.TLConstructor
	780,  // 786: mtproto.TL_messages_searchCustomEmoji.constructor:type_name -> mtproto.TLConstructor
	780,  // 787: mtproto.TL_messages_togglePeerTranslations.constructor:type_name -> mtproto.TLConstructor
	792,  // 788: mtproto.TL_messages_togglePeerTranslations.peer:type_name -> mtproto.InputPeer
	780,  // 789: mtproto.TL_messages_getBotApp.constructor:type_name -> mtproto.TLConstructor
	859,  // 790: mtproto.TL_messages_getBotApp.app:type_name -> mtproto.InputBotApp
	780,  // 791: mtproto.TL_messages_requestAppWebView53618BCE.constructor:type_name -> mtproto.TLConstructor
	792,  // 792: mtproto.TL_messages_requestAppWebView53618BCE.peer:type_name -> mtproto.InputPeer
	859,  // 793: mtproto.TL_messages_requestAppWebView53618BCE.app:type_name -> mtproto.InputBotApp
	785,  // 794: mtproto.TL_messages_requestAppWebView53618BCE.start_param:type_name -> google.protobuf.StringValue
	858,  // 795: mtproto.TL_messages_requestAppWebView53618BCE.theme_params:type_name -> mtproto.DataJSON
	780,  // 796: mtproto.TL_messages_setChatWallPaper.constructor:type_name -> mtproto.TLConstructor
	792,  // 797: mtproto.TL_messages_setChatWallPaper.peer:type_name -> mtproto.InputPeer
	804,  // 798: mtproto.TL_messages_setChatWallPaper.wallpaper:type_name -> mtproto.InputWallPaper
	806,  // 799: mtproto.TL_messages_setChatWallPaper.settings:type_name -> mtproto.WallPaperSettings
	803,  // 800: mtproto.TL_messages_setChatWallPaper.id:type_name -> google.protobuf.Int32Value
	780,  // 801: mtproto.TL_messages_searchEmojiStickerSets.constructor:type_name -> mtproto.TLConstructor
	780,  // 802: mtproto.TL_messages_getSavedDialogs.constructor:type_name -> mtproto.TLConstructor
	792,  // 803: mtproto.TL_messages_getSavedDialogs.offset_peer:type_name -> mtproto.InputPeer
	780,  // 804: mtproto.TL_messages_getSavedHistory.constructor:type_name -> mtproto.TLConstructor
	792,  // 805: mtproto.TL_messages_getSavedHistory.peer:type_name -> mtproto.InputPeer
	780,  // 806: mtproto.TL_messages_deleteSavedHistory.constructor:type_name -> mtproto.TLConstructor
	792,  // 807: mtproto.TL_messages_deleteSavedHistory.peer:type_name -> mtproto.InputPeer
	803,  // 808: mtproto.TL_messages_deleteSavedHistory.min_date:type_name -> google.protobuf.Int32Value
	803,  // 809: mtproto.TL_messages_deleteSavedHistory.max_date:type_name -> google.protobuf.Int32Value
	780,  // 810: mtproto.TL_messages_getPinnedSavedDialogs.constructor:type_name -> mtproto.TLConstructor
	780,  // 811: mtproto.TL_messages_toggleSavedDialogPin.constructor:type_name -> mtproto.TLConstructor
	850,  // 812: mtproto.TL_messages_toggleSavedDialogPin.peer:type_name -> mtproto.InputDialogPeer
	780,  // 813: mtproto.TL_messages_reorderPinnedSavedDialogs.constructor:type_name -> mtproto.TLConstructor
	850,  // 814: mtproto.TL_messages_reorderPinnedSavedDialogs.order:type_name -> mtproto.InputDialogPeer
	780,  // 815: mtproto.TL_messages_getSavedReactionTags.constructor:type_name -> mtproto.TLConstructor
	792,  // 816: mtproto.TL_messages_getSavedReactionTags.peer:type_name -> mtproto.InputPeer
	780,  // 817: mtproto.TL_messages_updateSavedReactionTag.constructor:type_name -> mtproto.TLConstructor
	833,  // 818: mtproto.TL_messages_updateSavedReactionTag.reaction:type_name -> mtproto.Reaction
	785,  // 819: mtproto.TL_messages_updateSavedReactionTag.title:type_name -> google.protobuf.StringValue
	780,  // 820: mtproto.TL_messages_getDefaultTagReactions.constructor:type_name -> mtproto.TLConstructor
	780,  // 821: mtproto.TL_messages_getOutboxReadDate.constructor:type_name -> mtproto.TLConstructor
	792,  // 822: mtproto.TL_messages_getOutboxReadDate.peer:type_name -> mtproto.InputPeer
	780,  // 823: mtproto.TL_messages_getQuickReplies.constructor:type_name -> mtproto.TLConstructor
	780,  // 824: mtproto.TL_messages_reorderQuickReplies.constructor:type_name -> mtproto.TLConstructor
	780,  // 825: mtproto.TL_messages_checkQuickReplyShortcut.constructor:type_name -> mtproto.TLConstructor
	780,  // 826: mtproto.TL_messages_editQuickReplyShortcut.constructor:type_name -> mtproto.TLConstructor
	780,  // 827: mtproto.TL_messages_deleteQuickReplyShortcut.constructor:type_name -> mtproto.TLConstructor
	780,  // 828: mtproto.TL_messages_getQuickReplyMessages.constructor:type_name -> mtproto.TLConstructor
	780,  // 829: mtproto.TL_messages_sendQuickReplyMessages.constructor:type_name -> mtproto.TLConstructor
	792,  // 830: mtproto.TL_messages_sendQuickReplyMessages.peer:type_name -> mtproto.InputPeer
	780,  // 831: mtproto.TL_messages_deleteQuickReplyMessages.constructor:type_name -> mtproto.TLConstructor
	780,  // 832: mtproto.TL_messages_toggleDialogFilterTags.constructor:type_name -> mtproto.TLConstructor
	789,  // 833: mtproto.TL_messages_toggleDialogFilterTags.enabled:type_name -> mtproto.Bool
	780,  // 834: mtproto.TL_messages_getMyStickers.constructor:type_name -> mtproto.TLConstructor
	780,  // 835: mtproto.TL_messages_getEmojiStickerGroups.constructor:type_name -> mtproto.TLConstructor
	780,  // 836: mtproto.TL_messages_getAvailableEffects.constructor:type_name -> mtproto.TLConstructor
	780,  // 837: mtproto.TL_messages_editFactCheck.constructor:type_name -> mtproto.TLConstructor
	792,  // 838: mtproto.TL_messages_editFactCheck.peer:type_name -> mtproto.InputPeer
	857,  // 839: mtproto.TL_messages_editFactCheck.text:type_name -> mtproto.TextWithEntities
	780,  // 840: mtproto.TL_messages_deleteFactCheck.constructor:type_name -> mtproto.TLConstructor
	792,  // 841: mtproto.TL_messages_deleteFactCheck.peer:type_name -> mtproto.InputPeer
	780,  // 842: mtproto.TL_messages_getFactCheck.constructor:type_name -> mtproto.TLConstructor
	792,  // 843: mtproto.TL_messages_getFactCheck.peer:type_name -> mtproto.InputPeer
	780,  // 844: mtproto.TL_messages_requestMainWebView.constructor:type_name -> mtproto.TLConstructor
	792,  // 845: mtproto.TL_messages_requestMainWebView.peer:type_name -> mtproto.InputPeer
	821,  // 846: mtproto.TL_messages_requestMainWebView.bot:type_name -> mtproto.InputUser
	785,  // 847: mtproto.TL_messages_requestMainWebView.start_param:type_name -> google.protobuf.StringValue
	858,  // 848: mtproto.TL_messages_requestMainWebView.theme_params:type_name -> mtproto.DataJSON
	780,  // 849: mtproto.TL_messages_sendPaidReaction.constructor:type_name -> mtproto.TLConstructor
	792,  // 850: mtproto.TL_messages_sendPaidReaction.peer:type_name -> mtproto.InputPeer
	860,  // 851: mtproto.TL_messages_sendPaidReaction.private_FLAGPAIDREACTIONPRIVACY:type_name -> mtproto.PaidReactionPrivacy
	789,  // 852: mtproto.TL_messages_sendPaidReaction.private_FLAGBOOL:type_name -> mtproto.Bool
	780,  // 853: mtproto.TL_messages_togglePaidReactionPrivacy.constructor:type_name -> mtproto.TLConstructor
	792,  // 854: mtproto.TL_messages_togglePaidReactionPrivacy.peer:type_name -> mtproto.InputPeer
	860,  // 855: mtproto.TL_messages_togglePaidReactionPrivacy.private_PAIDREACTIONPRIVACY:type_name -> mtproto.PaidReactionPrivacy
	789,  // 856: mtproto.TL_messages_togglePaidReactionPrivacy.private_BOOL:type_name -> mtproto.Bool
	780,  // 857: mtproto.TL_messages_getPaidReactionPrivacy.constructor:type_name -> mtproto.TLConstructor
	780,  // 858: mtproto.TL_messages_viewSponsoredMessage.constructor:type_name -> mtproto.TLConstructor
	792,  // 859: mtproto.TL_messages_viewSponsoredMessage.peer:type_name -> mtproto.InputPeer
	780,  // 860: mtproto.TL_messages_clickSponsoredMessage.constructor:type_name -> mtproto.TLConstructor
	792,  // 861: mtproto.TL_messages_clickSponsoredMessage.peer:type_name -> mtproto.InputPeer
	780,  // 862: mtproto.TL_messages_reportSponsoredMessage.constructor:type_name -> mtproto.TLConstructor
	792,  // 863: mtproto.TL_messages_reportSponsoredMessage.peer:type_name -> mtproto.InputPeer
	780,  // 864: mtproto.TL_messages_getSponsoredMessages.constructor:type_name -> mtproto.TLConstructor
	792,  // 865: mtproto.TL_messages_getSponsoredMessages.peer:type_name -> mtproto.InputPeer
	780,  // 866: mtproto.TL_messages_savePreparedInlineMessage.constructor:type_name -> mtproto.TLConstructor
	846,  // 867: mtproto.TL_messages_savePreparedInlineMessage.result:type_name -> mtproto.InputBotInlineResult
	821,  // 868: mtproto.TL_messages_savePreparedInlineMessage.user_id:type_name -> mtproto.InputUser
	861,  // 869: mtproto.TL_messages_savePreparedInlineMessage.peer_types:type_name -> mtproto.InlineQueryPeerType
	780,  // 870: mtproto.TL_messages_getPreparedInlineMessage.constructor:type_name -> mtproto.TLConstructor
	821,  // 871: mtproto.TL_messages_getPreparedInlineMessage.bot:type_name -> mtproto.InputUser
	780,  // 872: mtproto.TL_messages_searchStickers.constructor:type_name -> mtproto.TLConstructor
	780,  // 873: mtproto.TL_messages_reportMessagesDelivery.constructor:type_name -> mtproto.TLConstructor
	792,  // 874: mtproto.TL_messages_reportMessagesDelivery.peer:type_name -> mtproto.InputPeer
	780,  // 875: mtproto.TL_updates_getState.constructor:type_name -> mtproto.TLConstructor
	780,  // 876: mtproto.TL_updates_getDifference.constructor:type_name -> mtproto.TLConstructor
	803,  // 877: mtproto.TL_updates_getDifference.pts_limit:type_name -> google.protobuf.Int32Value
	803,  // 878: mtproto.TL_updates_getDifference.pts_total_limit:type_name -> google.protobuf.Int32Value
	803,  // 879: mtproto.TL_updates_getDifference.qts_limit:type_name -> google.protobuf.Int32Value
	780,  // 880: mtproto.TL_updates_getChannelDifference.constructor:type_name -> mtproto.TLConstructor
	827,  // 881: mtproto.TL_updates_getChannelDifference.channel:type_name -> mtproto.InputChannel
	862,  // 882: mtproto.TL_updates_getChannelDifference.filter:type_name -> mtproto.ChannelMessagesFilter
	780,  // 883: mtproto.TL_photos_updateProfilePhoto.constructor:type_name -> mtproto.TLConstructor
	821,  // 884: mtproto.TL_photos_updateProfilePhoto.bot:type_name -> mtproto.InputUser
	813,  // 885: mtproto.TL_photos_updateProfilePhoto.id:type_name -> mtproto.InputPhoto
	780,  // 886: mtproto.TL_photos_uploadProfilePhoto.constructor:type_name -> mtproto.TLConstructor
	821,  // 887: mtproto.TL_photos_uploadProfilePhoto.bot:type_name -> mtproto.InputUser
	805,  // 888: mtproto.TL_photos_uploadProfilePhoto.file:type_name -> mtproto.InputFile
	805,  // 889: mtproto.TL_photos_uploadProfilePhoto.video:type_name -> mtproto.InputFile
	863,  // 890: mtproto.TL_photos_uploadProfilePhoto.video_start_ts:type_name -> google.protobuf.DoubleValue
	864,  // 891: mtproto.TL_photos_uploadProfilePhoto.video_emoji_markup:type_name -> mtproto.VideoSize
	780,  // 892: mtproto.TL_photos_deletePhotos.constructor:type_name -> mtproto.TLConstructor
	813,  // 893: mtproto.TL_photos_deletePhotos.id:type_name -> mtproto.InputPhoto
	780,  // 894: mtproto.TL_photos_getUserPhotos.constructor:type_name -> mtproto.TLConstructor
	821,  // 895: mtproto.TL_photos_getUserPhotos.user_id:type_name -> mtproto.InputUser
	780,  // 896: mtproto.TL_photos_uploadContactProfilePhoto.constructor:type_name -> mtproto.TLConstructor
	821,  // 897: mtproto.TL_photos_uploadContactProfilePhoto.user_id:type_name -> mtproto.InputUser
	805,  // 898: mtproto.TL_photos_uploadContactProfilePhoto.file:type_name -> mtproto.InputFile
	805,  // 899: mtproto.TL_photos_uploadContactProfilePhoto.video:type_name -> mtproto.InputFile
	863,  // 900: mtproto.TL_photos_uploadContactProfilePhoto.video_start_ts:type_name -> google.protobuf.DoubleValue
	864,  // 901: mtproto.TL_photos_uploadContactProfilePhoto.video_emoji_markup:type_name -> mtproto.VideoSize
	780,  // 902: mtproto.TL_upload_saveFilePart.constructor:type_name -> mtproto.TLConstructor
	780,  // 903: mtproto.TL_upload_getFile.constructor:type_name -> mtproto.TLConstructor
	865,  // 904: mtproto.TL_upload_getFile.location:type_name -> mtproto.InputFileLocation
	780,  // 905: mtproto.TL_upload_saveBigFilePart.constructor:type_name -> mtproto.TLConstructor
	780,  // 906: mtproto.TL_upload_getWebFile.constructor:type_name -> mtproto.TLConstructor
	866,  // 907: mtproto.TL_upload_getWebFile.location:type_name -> mtproto.InputWebFileLocation
	780,  // 908: mtproto.TL_upload_getCdnFile.constructor:type_name -> mtproto.TLConstructor
	780,  // 909: mtproto.TL_upload_reuploadCdnFile.constructor:type_name -> mtproto.TLConstructor
	780,  // 910: mtproto.TL_upload_getCdnFileHashes.constructor:type_name -> mtproto.TLConstructor
	780,  // 911: mtproto.TL_upload_getFileHashes.constructor:type_name -> mtproto.TLConstructor
	865,  // 912: mtproto.TL_upload_getFileHashes.location:type_name -> mtproto.InputFileLocation
	780,  // 913: mtproto.TL_help_getConfig.constructor:type_name -> mtproto.TLConstructor
	780,  // 914: mtproto.TL_help_getNearestDc.constructor:type_name -> mtproto.TLConstructor
	780,  // 915: mtproto.TL_help_getAppUpdate.constructor:type_name -> mtproto.TLConstructor
	780,  // 916: mtproto.TL_help_getInviteText.constructor:type_name -> mtproto.TLConstructor
	780,  // 917: mtproto.TL_help_getSupport.constructor:type_name -> mtproto.TLConstructor
	780,  // 918: mtproto.TL_help_setBotUpdatesStatus.constructor:type_name -> mtproto.TLConstructor
	780,  // 919: mtproto.TL_help_getCdnConfig.constructor:type_name -> mtproto.TLConstructor
	780,  // 920: mtproto.TL_help_getRecentMeUrls.constructor:type_name -> mtproto.TLConstructor
	780,  // 921: mtproto.TL_help_getTermsOfServiceUpdate.constructor:type_name -> mtproto.TLConstructor
	780,  // 922: mtproto.TL_help_acceptTermsOfService.constructor:type_name -> mtproto.TLConstructor
	858,  // 923: mtproto.TL_help_acceptTermsOfService.id:type_name -> mtproto.DataJSON
	780,  // 924: mtproto.TL_help_getDeepLinkInfo.constructor:type_name -> mtproto.TLConstructor
	780,  // 925: mtproto.TL_help_getAppConfig61E3F854.constructor:type_name -> mtproto.TLConstructor
	780,  // 926: mtproto.TL_help_saveAppLog.constructor:type_name -> mtproto.TLConstructor
	867,  // 927: mtproto.TL_help_saveAppLog.events:type_name -> mtproto.InputAppEvent
	780,  // 928: mtproto.TL_help_getPassportConfig.constructor:type_name -> mtproto.TLConstructor
	780,  // 929: mtproto.TL_help_getSupportName.constructor:type_name -> mtproto.TLConstructor
	780,  // 930: mtproto.TL_help_getUserInfo.constructor:type_name -> mtproto.TLConstructor
	821,  // 931: mtproto.TL_help_getUserInfo.user_id:type_name -> mtproto.InputUser
	780,  // 932: mtproto.TL_help_editUserInfo.constructor:type_name -> mtproto.TLConstructor
	821,  // 933: mtproto.TL_help_editUserInfo.user_id:type_name -> mtproto.InputUser
	838,  // 934: mtproto.TL_help_editUserInfo.entities:type_name -> mtproto.MessageEntity
	780,  // 935: mtproto.TL_help_getPromoData.constructor:type_name -> mtproto.TLConstructor
	780,  // 936: mtproto.TL_help_hidePromoData.constructor:type_name -> mtproto.TLConstructor
	792,  // 937: mtproto.TL_help_hidePromoData.peer:type_name -> mtproto.InputPeer
	780,  // 938: mtproto.TL_help_dismissSuggestion.constructor:type_name -> mtproto.TLConstructor
	792,  // 939: mtproto.TL_help_dismissSuggestion.peer:type_name -> mtproto.InputPeer
	780,  // 940: mtproto.TL_help_getCountriesList.constructor:type_name -> mtproto.TLConstructor
	780,  // 941: mtproto.TL_help_getPremiumPromo.constructor:type_name -> mtproto.TLConstructor
	780,  // 942: mtproto.TL_help_getPeerColors.constructor:type_name -> mtproto.TLConstructor
	780,  // 943: mtproto.TL_help_getPeerProfileColors.constructor:type_name -> mtproto.TLConstructor
	780,  // 944: mtproto.TL_help_getTimezonesList.constructor:type_name -> mtproto.TLConstructor
	780,  // 945: mtproto.TL_channels_readHistory.constructor:type_name -> mtproto.TLConstructor
	827,  // 946: mtproto.TL_channels_readHistory.channel:type_name -> mtproto.InputChannel
	780,  // 947: mtproto.TL_channels_deleteMessages.constructor:type_name -> mtproto.TLConstructor
	827,  // 948: mtproto.TL_channels_deleteMessages.channel:type_name -> mtproto.InputChannel
	780,  // 949: mtproto.TL_channels_reportSpam.constructor:type_name -> mtproto.TLConstructor
	827,  // 950: mtproto.TL_channels_reportSpam.channel:type_name -> mtproto.InputChannel
	792,  // 951: mtproto.TL_channels_reportSpam.participant:type_name -> mtproto.InputPeer
	780,  // 952: mtproto.TL_channels_getMessages.constructor:type_name -> mtproto.TLConstructor
	827,  // 953: mtproto.TL_channels_getMessages.channel:type_name -> mtproto.InputChannel
	832,  // 954: mtproto.TL_channels_getMessages.id_VECTORINPUTMESSAGE:type_name -> mtproto.InputMessage
	780,  // 955: mtproto.TL_channels_getParticipants.constructor:type_name -> mtproto.TLConstructor
	827,  // 956: mtproto.TL_channels_getParticipants.channel:type_name -> mtproto.InputChannel
	868,  // 957: mtproto.TL_channels_getParticipants.filter:type_name -> mtproto.ChannelParticipantsFilter
	780,  // 958: mtproto.TL_channels_getParticipant.constructor:type_name -> mtproto.TLConstructor
	827,  // 959: mtproto.TL_channels_getParticipant.channel:type_name -> mtproto.InputChannel
	792,  // 960: mtproto.TL_channels_getParticipant.participant:type_name -> mtproto.InputPeer
	780,  // 961: mtproto.TL_channels_getChannels.constructor:type_name -> mtproto.TLConstructor
	827,  // 962: mtproto.TL_channels_getChannels.id:type_name -> mtproto.InputChannel
	780,  // 963: mtproto.TL_channels_getFullChannel.constructor:type_name -> mtproto.TLConstructor
	827,  // 964: mtproto.TL_channels_getFullChannel.channel:type_name -> mtproto.InputChannel
	780,  // 965: mtproto.TL_channels_createChannel.constructor:type_name -> mtproto.TLConstructor
	817,  // 966: mtproto.TL_channels_createChannel.geo_point:type_name -> mtproto.InputGeoPoint
	785,  // 967: mtproto.TL_channels_createChannel.address:type_name -> google.protobuf.StringValue
	803,  // 968: mtproto.TL_channels_createChannel.ttl_period:type_name -> google.protobuf.Int32Value
	780,  // 969: mtproto.TL_channels_editAdmin.constructor:type_name -> mtproto.TLConstructor
	827,  // 970: mtproto.TL_channels_editAdmin.channel:type_name -> mtproto.InputChannel
	821,  // 971: mtproto.TL_channels_editAdmin.user_id:type_name -> mtproto.InputUser
	869,  // 972: mtproto.TL_channels_editAdmin.admin_rights:type_name -> mtproto.ChatAdminRights
	780,  // 973: mtproto.TL_channels_editTitle.constructor:type_name -> mtproto.TLConstructor
	827,  // 974: mtproto.TL_channels_editTitle.channel:type_name -> mtproto.InputChannel
	780,  // 975: mtproto.TL_channels_editPhoto.constructor:type_name -> mtproto.TLConstructor
	827,  // 976: mtproto.TL_channels_editPhoto.channel:type_name -> mtproto.InputChannel
	841,  // 977: mtproto.TL_channels_editPhoto.photo:type_name -> mtproto.InputChatPhoto
	780,  // 978: mtproto.TL_channels_checkUsername.constructor:type_name -> mtproto.TLConstructor
	827,  // 979: mtproto.TL_channels_checkUsername.channel:type_name -> mtproto.InputChannel
	780,  // 980: mtproto.TL_channels_updateUsername.constructor:type_name -> mtproto.TLConstructor
	827,  // 981: mtproto.TL_channels_updateUsername.channel:type_name -> mtproto.InputChannel
	780,  // 982: mtproto.TL_channels_joinChannel.constructor:type_name -> mtproto.TLConstructor
	827,  // 983: mtproto.TL_channels_joinChannel.channel:type_name -> mtproto.InputChannel
	780,  // 984: mtproto.TL_channels_leaveChannel.constructor:type_name -> mtproto.TLConstructor
	827,  // 985: mtproto.TL_channels_leaveChannel.channel:type_name -> mtproto.InputChannel
	780,  // 986: mtproto.TL_channels_inviteToChannelC9E33D54.constructor:type_name -> mtproto.TLConstructor
	827,  // 987: mtproto.TL_channels_inviteToChannelC9E33D54.channel:type_name -> mtproto.InputChannel
	821,  // 988: mtproto.TL_channels_inviteToChannelC9E33D54.users:type_name -> mtproto.InputUser
	780,  // 989: mtproto.TL_channels_deleteChannel.constructor:type_name -> mtproto.TLConstructor
	827,  // 990: mtproto.TL_channels_deleteChannel.channel:type_name -> mtproto.InputChannel
	780,  // 991: mtproto.TL_channels_exportMessageLink.constructor:type_name -> mtproto.TLConstructor
	827,  // 992: mtproto.TL_channels_exportMessageLink.channel:type_name -> mtproto.InputChannel
	780,  // 993: mtproto.TL_channels_toggleSignatures.constructor:type_name -> mtproto.TLConstructor
	827,  // 994: mtproto.TL_channels_toggleSignatures.channel:type_name -> mtproto.InputChannel
	789,  // 995: mtproto.TL_channels_toggleSignatures.enabled:type_name -> mtproto.Bool
	780,  // 996: mtproto.TL_channels_getAdminedPublicChannels.constructor:type_name -> mtproto.TLConstructor
	780,  // 997: mtproto.TL_channels_editBanned.constructor:type_name -> mtproto.TLConstructor
	827,  // 998: mtproto.TL_channels_editBanned.channel:type_name -> mtproto.InputChannel
	792,  // 999: mtproto.TL_channels_editBanned.participant:type_name -> mtproto.InputPeer
	854,  // 1000: mtproto.TL_channels_editBanned.banned_rights:type_name -> mtproto.ChatBannedRights
	780,  // 1001: mtproto.TL_channels_getAdminLog.constructor:type_name -> mtproto.TLConstructor
	827,  // 1002: mtproto.TL_channels_getAdminLog.channel:type_name -> mtproto.InputChannel
	870,  // 1003: mtproto.TL_channels_getAdminLog.events_filter:type_name -> mtproto.ChannelAdminLogEventsFilter
	821,  // 1004: mtproto.TL_channels_getAdminLog.admins:type_name -> mtproto.InputUser
	780,  // 1005: mtproto.TL_channels_setStickers.constructor:type_name -> mtproto.TLConstructor
	827,  // 1006: mtproto.TL_channels_setStickers.channel:type_name -> mtproto.InputChannel
	845,  // 1007: mtproto.TL_channels_setStickers.stickerset:type_name -> mtproto.InputStickerSet
	780,  // 1008: mtproto.TL_channels_readMessageContents.constructor:type_name -> mtproto.TLConstructor
	827,  // 1009: mtproto.TL_channels_readMessageContents.channel:type_name -> mtproto.InputChannel
	780,  // 1010: mtproto.TL_channels_deleteHistory9BAA9647.constructor:type_name -> mtproto.TLConstructor
	827,  // 1011: mtproto.TL_channels_deleteHistory9BAA9647.channel:type_name -> mtproto.InputChannel
	780,  // 1012: mtproto.TL_channels_togglePreHistoryHidden.constructor:type_name -> mtproto.TLConstructor
	827,  // 1013: mtproto.TL_channels_togglePreHistoryHidden.channel:type_name -> mtproto.InputChannel
	789,  // 1014: mtproto.TL_channels_togglePreHistoryHidden.enabled:type_name -> mtproto.Bool
	780,  // 1015: mtproto.TL_channels_getLeftChannels.constructor:type_name -> mtproto.TLConstructor
	780,  // 1016: mtproto.TL_channels_getGroupsForDiscussion.constructor:type_name -> mtproto.TLConstructor
	780,  // 1017: mtproto.TL_channels_setDiscussionGroup.constructor:type_name -> mtproto.TLConstructor
	827,  // 1018: mtproto.TL_channels_setDiscussionGroup.broadcast:type_name -> mtproto.InputChannel
	827,  // 1019: mtproto.TL_channels_setDiscussionGroup.group:type_name -> mtproto.InputChannel
	780,  // 1020: mtproto.TL_channels_editCreator.constructor:type_name -> mtproto.TLConstructor
	827,  // 1021: mtproto.TL_channels_editCreator.channel:type_name -> mtproto.InputChannel
	821,  // 1022: mtproto.TL_channels_editCreator.user_id:type_name -> mtproto.InputUser
	787,  // 1023: mtproto.TL_channels_editCreator.password:type_name -> mtproto.InputCheckPasswordSRP
	780,  // 1024: mtproto.TL_channels_editLocation.constructor:type_name -> mtproto.TLConstructor
	827,  // 1025: mtproto.TL_channels_editLocation.channel:type_name -> mtproto.InputChannel
	817,  // 1026: mtproto.TL_channels_editLocation.geo_point:type_name -> mtproto.InputGeoPoint
	780,  // 1027: mtproto.TL_channels_toggleSlowMode.constructor:type_name -> mtproto.TLConstructor
	827,  // 1028: mtproto.TL_channels_toggleSlowMode.channel:type_name -> mtproto.InputChannel
	780,  // 1029: mtproto.TL_channels_getInactiveChannels.constructor:type_name -> mtproto.TLConstructor
	780,  // 1030: mtproto.TL_channels_convertToGigagroup.constructor:type_name -> mtproto.TLConstructor
	827,  // 1031: mtproto.TL_channels_convertToGigagroup.channel:type_name -> mtproto.InputChannel
	780,  // 1032: mtproto.TL_channels_getSendAs.constructor:type_name -> mtproto.TLConstructor
	792,  // 1033: mtproto.TL_channels_getSendAs.peer:type_name -> mtproto.InputPeer
	780,  // 1034: mtproto.TL_channels_deleteParticipantHistory.constructor:type_name -> mtproto.TLConstructor
	827,  // 1035: mtproto.TL_channels_deleteParticipantHistory.channel:type_name -> mtproto.InputChannel
	792,  // 1036: mtproto.TL_channels_deleteParticipantHistory.participant:type_name -> mtproto.InputPeer
	780,  // 1037: mtproto.TL_channels_toggleJoinToSend.constructor:type_name -> mtproto.TLConstructor
	827,  // 1038: mtproto.TL_channels_toggleJoinToSend.channel:type_name -> mtproto.InputChannel
	789,  // 1039: mtproto.TL_channels_toggleJoinToSend.enabled:type_name -> mtproto.Bool
	780,  // 1040: mtproto.TL_channels_toggleJoinRequest.constructor:type_name -> mtproto.TLConstructor
	827,  // 1041: mtproto.TL_channels_toggleJoinRequest.channel:type_name -> mtproto.InputChannel
	789,  // 1042: mtproto.TL_channels_toggleJoinRequest.enabled:type_name -> mtproto.Bool
	780,  // 1043: mtproto.TL_channels_reorderUsernames.constructor:type_name -> mtproto.TLConstructor
	827,  // 1044: mtproto.TL_channels_reorderUsernames.channel:type_name -> mtproto.InputChannel
	780,  // 1045: mtproto.TL_channels_toggleUsername.constructor:type_name -> mtproto.TLConstructor
	827,  // 1046: mtproto.TL_channels_toggleUsername.channel:type_name -> mtproto.InputChannel
	789,  // 1047: mtproto.TL_channels_toggleUsername.active:type_name -> mtproto.Bool
	780,  // 1048: mtproto.TL_channels_deactivateAllUsernames.constructor:type_name -> mtproto.TLConstructor
	827,  // 1049: mtproto.TL_channels_deactivateAllUsernames.channel:type_name -> mtproto.InputChannel
	780,  // 1050: mtproto.TL_channels_toggleForum.constructor:type_name -> mtproto.TLConstructor
	827,  // 1051: mtproto.TL_channels_toggleForum.channel:type_name -> mtproto.InputChannel
	789,  // 1052: mtproto.TL_channels_toggleForum.enabled:type_name -> mtproto.Bool
	780,  // 1053: mtproto.TL_channels_createForumTopic.constructor:type_name -> mtproto.TLConstructor
	827,  // 1054: mtproto.TL_channels_createForumTopic.channel:type_name -> mtproto.InputChannel
	803,  // 1055: mtproto.TL_channels_createForumTopic.icon_color:type_name -> google.protobuf.Int32Value
	802,  // 1056: mtproto.TL_channels_createForumTopic.icon_emoji_id:type_name -> google.protobuf.Int64Value
	792,  // 1057: mtproto.TL_channels_createForumTopic.send_as:type_name -> mtproto.InputPeer
	780,  // 1058: mtproto.TL_channels_getForumTopics.constructor:type_name -> mtproto.TLConstructor
	827,  // 1059: mtproto.TL_channels_getForumTopics.channel:type_name -> mtproto.InputChannel
	785,  // 1060: mtproto.TL_channels_getForumTopics.q:type_name -> google.protobuf.StringValue
	780,  // 1061: mtproto.TL_channels_getForumTopicsByID.constructor:type_name -> mtproto.TLConstructor
	827,  // 1062: mtproto.TL_channels_getForumTopicsByID.channel:type_name -> mtproto.InputChannel
	780,  // 1063: mtproto.TL_channels_editForumTopic.constructor:type_name -> mtproto.TLConstructor
	827,  // 1064: mtproto.TL_channels_editForumTopic.channel:type_name -> mtproto.InputChannel
	785,  // 1065: mtproto.TL_channels_editForumTopic.title:type_name -> google.protobuf.StringValue
	802,  // 1066: mtproto.TL_channels_editForumTopic.icon_emoji_id:type_name -> google.protobuf.Int64Value
	789,  // 1067: mtproto.TL_channels_editForumTopic.closed:type_name -> mtproto.Bool
	789,  // 1068: mtproto.TL_channels_editForumTopic.hidden:type_name -> mtproto.Bool
	780,  // 1069: mtproto.TL_channels_updatePinnedForumTopic.constructor:type_name -> mtproto.TLConstructor
	827,  // 1070: mtproto.TL_channels_updatePinnedForumTopic.channel:type_name -> mtproto.InputChannel
	789,  // 1071: mtproto.TL_channels_updatePinnedForumTopic.pinned:type_name -> mtproto.Bool
	780,  // 1072: mtproto.TL_channels_deleteTopicHistory.constructor:type_name -> mtproto.TLConstructor
	827,  // 1073: mtproto.TL_channels_deleteTopicHistory.channel:type_name -> mtproto.InputChannel
	780,  // 1074: mtproto.TL_channels_reorderPinnedForumTopics.constructor:type_name -> mtproto.TLConstructor
	827,  // 1075: mtproto.TL_channels_reorderPinnedForumTopics.channel:type_name -> mtproto.InputChannel
	780,  // 1076: mtproto.TL_channels_toggleAntiSpam.constructor:type_name -> mtproto.TLConstructor
	827,  // 1077: mtproto.TL_channels_toggleAntiSpam.channel:type_name -> mtproto.InputChannel
	789,  // 1078: mtproto.TL_channels_toggleAntiSpam.enabled:type_name -> mtproto.Bool
	780,  // 1079: mtproto.TL_channels_reportAntiSpamFalsePositive.constructor:type_name -> mtproto.TLConstructor
	827,  // 1080: mtproto.TL_channels_reportAntiSpamFalsePositive.channel:type_name -> mtproto.InputChannel
	780,  // 1081: mtproto.TL_channels_toggleParticipantsHidden.constructor:type_name -> mtproto.TLConstructor
	827,  // 1082: mtproto.TL_channels_toggleParticipantsHidden.channel:type_name -> mtproto.InputChannel
	789,  // 1083: mtproto.TL_channels_toggleParticipantsHidden.enabled:type_name -> mtproto.Bool
	780,  // 1084: mtproto.TL_channels_updateColor.constructor:type_name -> mtproto.TLConstructor
	827,  // 1085: mtproto.TL_channels_updateColor.channel:type_name -> mtproto.InputChannel
	803,  // 1086: mtproto.TL_channels_updateColor.color_FLAGINT32:type_name -> google.protobuf.Int32Value
	802,  // 1087: mtproto.TL_channels_updateColor.background_emoji_id:type_name -> google.protobuf.Int64Value
	780,  // 1088: mtproto.TL_channels_toggleViewForumAsMessages.constructor:type_name -> mtproto.TLConstructor
	827,  // 1089: mtproto.TL_channels_toggleViewForumAsMessages.channel:type_name -> mtproto.InputChannel
	789,  // 1090: mtproto.TL_channels_toggleViewForumAsMessages.enabled:type_name -> mtproto.Bool
	780,  // 1091: mtproto.TL_channels_getChannelRecommendations.constructor:type_name -> mtproto.TLConstructor
	827,  // 1092: mtproto.TL_channels_getChannelRecommendations.channel:type_name -> mtproto.InputChannel
	780,  // 1093: mtproto.TL_channels_updateEmojiStatus.constructor:type_name -> mtproto.TLConstructor
	827,  // 1094: mtproto.TL_channels_updateEmojiStatus.channel:type_name -> mtproto.InputChannel
	814,  // 1095: mtproto.TL_channels_updateEmojiStatus.emoji_status:type_name -> mtproto.EmojiStatus
	780,  // 1096: mtproto.TL_channels_setBoostsToUnblockRestrictions.constructor:type_name -> mtproto.TLConstructor
	827,  // 1097: mtproto.TL_channels_setBoostsToUnblockRestrictions.channel:type_name -> mtproto.InputChannel
	780,  // 1098: mtproto.TL_channels_setEmojiStickers.constructor:type_name -> mtproto.TLConstructor
	827,  // 1099: mtproto.TL_channels_setEmojiStickers.channel:type_name -> mtproto.InputChannel
	845,  // 1100: mtproto.TL_channels_setEmojiStickers.stickerset:type_name -> mtproto.InputStickerSet
	780,  // 1101: mtproto.TL_channels_restrictSponsoredMessages.constructor:type_name -> mtproto.TLConstructor
	827,  // 1102: mtproto.TL_channels_restrictSponsoredMessages.channel:type_name -> mtproto.InputChannel
	789,  // 1103: mtproto.TL_channels_restrictSponsoredMessages.restricted:type_name -> mtproto.Bool
	780,  // 1104: mtproto.TL_channels_searchPosts.constructor:type_name -> mtproto.TLConstructor
	792,  // 1105: mtproto.TL_channels_searchPosts.offset_peer:type_name -> mtproto.InputPeer
	780,  // 1106: mtproto.TL_channels_updatePaidMessagesPrice.constructor:type_name -> mtproto.TLConstructor
	827,  // 1107: mtproto.TL_channels_updatePaidMessagesPrice.channel:type_name -> mtproto.InputChannel
	780,  // 1108: mtproto.TL_bots_sendCustomRequest.constructor:type_name -> mtproto.TLConstructor
	858,  // 1109: mtproto.TL_bots_sendCustomRequest.params:type_name -> mtproto.DataJSON
	780,  // 1110: mtproto.TL_bots_answerWebhookJSONQuery.constructor:type_name -> mtproto.TLConstructor
	858,  // 1111: mtproto.TL_bots_answerWebhookJSONQuery.data:type_name -> mtproto.DataJSON
	780,  // 1112: mtproto.TL_bots_setBotCommands.constructor:type_name -> mtproto.TLConstructor
	871,  // 1113: mtproto.TL_bots_setBotCommands.scope:type_name -> mtproto.BotCommandScope
	872,  // 1114: mtproto.TL_bots_setBotCommands.commands:type_name -> mtproto.BotCommand
	780,  // 1115: mtproto.TL_bots_resetBotCommands.constructor:type_name -> mtproto.TLConstructor
	871,  // 1116: mtproto.TL_bots_resetBotCommands.scope:type_name -> mtproto.BotCommandScope
	780,  // 1117: mtproto.TL_bots_getBotCommands.constructor:type_name -> mtproto.TLConstructor
	871,  // 1118: mtproto.TL_bots_getBotCommands.scope:type_name -> mtproto.BotCommandScope
	780,  // 1119: mtproto.TL_bots_setBotMenuButton.constructor:type_name -> mtproto.TLConstructor
	821,  // 1120: mtproto.TL_bots_setBotMenuButton.user_id:type_name -> mtproto.InputUser
	873,  // 1121: mtproto.TL_bots_setBotMenuButton.button:type_name -> mtproto.BotMenuButton
	780,  // 1122: mtproto.TL_bots_getBotMenuButton.constructor:type_name -> mtproto.TLConstructor
	821,  // 1123: mtproto.TL_bots_getBotMenuButton.user_id:type_name -> mtproto.InputUser
	780,  // 1124: mtproto.TL_bots_setBotBroadcastDefaultAdminRights.constructor:type_name -> mtproto.TLConstructor
	869,  // 1125: mtproto.TL_bots_setBotBroadcastDefaultAdminRights.admin_rights:type_name -> mtproto.ChatAdminRights
	780,  // 1126: mtproto.TL_bots_setBotGroupDefaultAdminRights.constructor:type_name -> mtproto.TLConstructor
	869,  // 1127: mtproto.TL_bots_setBotGroupDefaultAdminRights.admin_rights:type_name -> mtproto.ChatAdminRights
	780,  // 1128: mtproto.TL_bots_setBotInfo.constructor:type_name -> mtproto.TLConstructor
	821,  // 1129: mtproto.TL_bots_setBotInfo.bot:type_name -> mtproto.InputUser
	785,  // 1130: mtproto.TL_bots_setBotInfo.name:type_name -> google.protobuf.StringValue
	785,  // 1131: mtproto.TL_bots_setBotInfo.about:type_name -> google.protobuf.StringValue
	785,  // 1132: mtproto.TL_bots_setBotInfo.description:type_name -> google.protobuf.StringValue
	780,  // 1133: mtproto.TL_bots_getBotInfoDCD914FD.constructor:type_name -> mtproto.TLConstructor
	821,  // 1134: mtproto.TL_bots_getBotInfoDCD914FD.bot:type_name -> mtproto.InputUser
	780,  // 1135: mtproto.TL_bots_reorderUsernames.constructor:type_name -> mtproto.TLConstructor
	821,  // 1136: mtproto.TL_bots_reorderUsernames.bot:type_name -> mtproto.InputUser
	780,  // 1137: mtproto.TL_bots_toggleUsername.constructor:type_name -> mtproto.TLConstructor
	821,  // 1138: mtproto.TL_bots_toggleUsername.bot:type_name -> mtproto.InputUser
	789,  // 1139: mtproto.TL_bots_toggleUsername.active:type_name -> mtproto.Bool
	780,  // 1140: mtproto.TL_bots_canSendMessage.constructor:type_name -> mtproto.TLConstructor
	821,  // 1141: mtproto.TL_bots_canSendMessage.bot:type_name -> mtproto.InputUser
	780,  // 1142: mtproto.TL_bots_allowSendMessage.constructor:type_name -> mtproto.TLConstructor
	821,  // 1143: mtproto.TL_bots_allowSendMessage.bot:type_name -> mtproto.InputUser
	780,  // 1144: mtproto.TL_bots_invokeWebViewCustomMethod.constructor:type_name -> mtproto.TLConstructor
	821,  // 1145: mtproto.TL_bots_invokeWebViewCustomMethod.bot:type_name -> mtproto.InputUser
	858,  // 1146: mtproto.TL_bots_invokeWebViewCustomMethod.params:type_name -> mtproto.DataJSON
	780,  // 1147: mtproto.TL_bots_getPopularAppBots.constructor:type_name -> mtproto.TLConstructor
	780,  // 1148: mtproto.TL_bots_addPreviewMedia.constructor:type_name -> mtproto.TLConstructor
	821,  // 1149: mtproto.TL_bots_addPreviewMedia.bot:type_name -> mtproto.InputUser
	840,  // 1150: mtproto.TL_bots_addPreviewMedia.media:type_name -> mtproto.InputMedia
	780,  // 1151: mtproto.TL_bots_editPreviewMedia.constructor:type_name -> mtproto.TLConstructor
	821,  // 1152: mtproto.TL_bots_editPreviewMedia.bot:type_name -> mtproto.InputUser
	840,  // 1153: mtproto.TL_bots_editPreviewMedia.media:type_name -> mtproto.InputMedia
	840,  // 1154: mtproto.TL_bots_editPreviewMedia.new_media:type_name -> mtproto.InputMedia
	780,  // 1155: mtproto.TL_bots_deletePreviewMedia.constructor:type_name -> mtproto.TLConstructor
	821,  // 1156: mtproto.TL_bots_deletePreviewMedia.bot:type_name -> mtproto.InputUser
	840,  // 1157: mtproto.TL_bots_deletePreviewMedia.media:type_name -> mtproto.InputMedia
	780,  // 1158: mtproto.TL_bots_reorderPreviewMedias.constructor:type_name -> mtproto.TLConstructor
	821,  // 1159: mtproto.TL_bots_reorderPreviewMedias.bot:type_name -> mtproto.InputUser
	840,  // 1160: mtproto.TL_bots_reorderPreviewMedias.order:type_name -> mtproto.InputMedia
	780,  // 1161: mtproto.TL_bots_getPreviewInfo.constructor:type_name -> mtproto.TLConstructor
	821,  // 1162: mtproto.TL_bots_getPreviewInfo.bot:type_name -> mtproto.InputUser
	780,  // 1163: mtproto.TL_bots_getPreviewMedias.constructor:type_name -> mtproto.TLConstructor
	821,  // 1164: mtproto.TL_bots_getPreviewMedias.bot:type_name -> mtproto.InputUser
	780,  // 1165: mtproto.TL_bots_updateUserEmojiStatus.constructor:type_name -> mtproto.TLConstructor
	821,  // 1166: mtproto.TL_bots_updateUserEmojiStatus.user_id:type_name -> mtproto.InputUser
	814,  // 1167: mtproto.TL_bots_updateUserEmojiStatus.emoji_status:type_name -> mtproto.EmojiStatus
	780,  // 1168: mtproto.TL_bots_toggleUserEmojiStatusPermission.constructor:type_name -> mtproto.TLConstructor
	821,  // 1169: mtproto.TL_bots_toggleUserEmojiStatusPermission.bot:type_name -> mtproto.InputUser
	789,  // 1170: mtproto.TL_bots_toggleUserEmojiStatusPermission.enabled:type_name -> mtproto.Bool
	780,  // 1171: mtproto.TL_bots_checkDownloadFileParams.constructor:type_name -> mtproto.TLConstructor
	821,  // 1172: mtproto.TL_bots_checkDownloadFileParams.bot:type_name -> mtproto.InputUser
	780,  // 1173: mtproto.TL_bots_getAdminedBots.constructor:type_name -> mtproto.TLConstructor
	780,  // 1174: mtproto.TL_bots_updateStarRefProgram.constructor:type_name -> mtproto.TLConstructor
	821,  // 1175: mtproto.TL_bots_updateStarRefProgram.bot:type_name -> mtproto.InputUser
	803,  // 1176: mtproto.TL_bots_updateStarRefProgram.duration_months:type_name -> google.protobuf.Int32Value
	780,  // 1177: mtproto.TL_bots_setCustomVerification.constructor:type_name -> mtproto.TLConstructor
	821,  // 1178: mtproto.TL_bots_setCustomVerification.bot:type_name -> mtproto.InputUser
	792,  // 1179: mtproto.TL_bots_setCustomVerification.peer:type_name -> mtproto.InputPeer
	785,  // 1180: mtproto.TL_bots_setCustomVerification.custom_description:type_name -> google.protobuf.StringValue
	780,  // 1181: mtproto.TL_bots_getBotRecommendations.constructor:type_name -> mtproto.TLConstructor
	821,  // 1182: mtproto.TL_bots_getBotRecommendations.bot:type_name -> mtproto.InputUser
	780,  // 1183: mtproto.TL_payments_getPaymentForm.constructor:type_name -> mtproto.TLConstructor
	874,  // 1184: mtproto.TL_payments_getPaymentForm.invoice:type_name -> mtproto.InputInvoice
	858,  // 1185: mtproto.TL_payments_getPaymentForm.theme_params:type_name -> mtproto.DataJSON
	792,  // 1186: mtproto.TL_payments_getPaymentForm.peer:type_name -> mtproto.InputPeer
	780,  // 1187: mtproto.TL_payments_getPaymentReceipt.constructor:type_name -> mtproto.TLConstructor
	792,  // 1188: mtproto.TL_payments_getPaymentReceipt.peer:type_name -> mtproto.InputPeer
	780,  // 1189: mtproto.TL_payments_validateRequestedInfo.constructor:type_name -> mtproto.TLConstructor
	874,  // 1190: mtproto.TL_payments_validateRequestedInfo.invoice:type_name -> mtproto.InputInvoice
	875,  // 1191: mtproto.TL_payments_validateRequestedInfo.info:type_name -> mtproto.PaymentRequestedInfo
	792,  // 1192: mtproto.TL_payments_validateRequestedInfo.peer:type_name -> mtproto.InputPeer
	780,  // 1193: mtproto.TL_payments_sendPaymentForm.constructor:type_name -> mtproto.TLConstructor
	874,  // 1194: mtproto.TL_payments_sendPaymentForm.invoice:type_name -> mtproto.InputInvoice
	785,  // 1195: mtproto.TL_payments_sendPaymentForm.requested_info_id:type_name -> google.protobuf.StringValue
	785,  // 1196: mtproto.TL_payments_sendPaymentForm.shipping_option_id:type_name -> google.protobuf.StringValue
	876,  // 1197: mtproto.TL_payments_sendPaymentForm.credentials:type_name -> mtproto.InputPaymentCredentials
	802,  // 1198: mtproto.TL_payments_sendPaymentForm.tip_amount:type_name -> google.protobuf.Int64Value
	792,  // 1199: mtproto.TL_payments_sendPaymentForm.peer:type_name -> mtproto.InputPeer
	780,  // 1200: mtproto.TL_payments_getSavedInfo.constructor:type_name -> mtproto.TLConstructor
	780,  // 1201: mtproto.TL_payments_clearSavedInfo.constructor:type_name -> mtproto.TLConstructor
	780,  // 1202: mtproto.TL_payments_getBankCardData.constructor:type_name -> mtproto.TLConstructor
	780,  // 1203: mtproto.TL_payments_exportInvoice.constructor:type_name -> mtproto.TLConstructor
	840,  // 1204: mtproto.TL_payments_exportInvoice.invoice_media:type_name -> mtproto.InputMedia
	821,  // 1205: mtproto.TL_payments_exportInvoice.user_id:type_name -> mtproto.InputUser
	780,  // 1206: mtproto.TL_payments_assignAppStoreTransaction.constructor:type_name -> mtproto.TLConstructor
	877,  // 1207: mtproto.TL_payments_assignAppStoreTransaction.purpose:type_name -> mtproto.InputStorePaymentPurpose
	780,  // 1208: mtproto.TL_payments_assignPlayMarketTransaction.constructor:type_name -> mtproto.TLConstructor
	858,  // 1209: mtproto.TL_payments_assignPlayMarketTransaction.receipt:type_name -> mtproto.DataJSON
	877,  // 1210: mtproto.TL_payments_assignPlayMarketTransaction.purpose:type_name -> mtproto.InputStorePaymentPurpose
	780,  // 1211: mtproto.TL_payments_getPremiumGiftCodeOptions.constructor:type_name -> mtproto.TLConstructor
	792,  // 1212: mtproto.TL_payments_getPremiumGiftCodeOptions.boost_peer:type_name -> mtproto.InputPeer
	780,  // 1213: mtproto.TL_payments_checkGiftCode.constructor:type_name -> mtproto.TLConstructor
	780,  // 1214: mtproto.TL_payments_applyGiftCode.constructor:type_name -> mtproto.TLConstructor
	780,  // 1215: mtproto.TL_payments_getGiveawayInfo.constructor:type_name -> mtproto.TLConstructor
	792,  // 1216: mtproto.TL_payments_getGiveawayInfo.peer:type_name -> mtproto.InputPeer
	780,  // 1217: mtproto.TL_payments_launchPrepaidGiveaway.constructor:type_name -> mtproto.TLConstructor
	792,  // 1218: mtproto.TL_payments_launchPrepaidGiveaway.peer:type_name -> mtproto.InputPeer
	877,  // 1219: mtproto.TL_payments_launchPrepaidGiveaway.purpose:type_name -> mtproto.InputStorePaymentPurpose
	780,  // 1220: mtproto.TL_payments_getStarsTopupOptions.constructor:type_name -> mtproto.TLConstructor
	780,  // 1221: mtproto.TL_payments_getStarsStatus.constructor:type_name -> mtproto.TLConstructor
	792,  // 1222: mtproto.TL_payments_getStarsStatus.peer:type_name -> mtproto.InputPeer
	780,  // 1223: mtproto.TL_payments_getStarsTransactions.constructor:type_name -> mtproto.TLConstructor
	785,  // 1224: mtproto.TL_payments_getStarsTransactions.subscription_id:type_name -> google.protobuf.StringValue
	792,  // 1225: mtproto.TL_payments_getStarsTransactions.peer:type_name -> mtproto.InputPeer
	780,  // 1226: mtproto.TL_payments_sendStarsForm.constructor:type_name -> mtproto.TLConstructor
	874,  // 1227: mtproto.TL_payments_sendStarsForm.invoice:type_name -> mtproto.InputInvoice
	780,  // 1228: mtproto.TL_payments_refundStarsCharge.constructor:type_name -> mtproto.TLConstructor
	821,  // 1229: mtproto.TL_payments_refundStarsCharge.user_id:type_name -> mtproto.InputUser
	780,  // 1230: mtproto.TL_payments_getStarsRevenueStats.constructor:type_name -> mtproto.TLConstructor
	792,  // 1231: mtproto.TL_payments_getStarsRevenueStats.peer:type_name -> mtproto.InputPeer
	780,  // 1232: mtproto.TL_payments_getStarsRevenueWithdrawalUrl.constructor:type_name -> mtproto.TLConstructor
	792,  // 1233: mtproto.TL_payments_getStarsRevenueWithdrawalUrl.peer:type_name -> mtproto.InputPeer
	787,  // 1234: mtproto.TL_payments_getStarsRevenueWithdrawalUrl.password:type_name -> mtproto.InputCheckPasswordSRP
	780,  // 1235: mtproto.TL_payments_getStarsRevenueAdsAccountUrl.constructor:type_name -> mtproto.TLConstructor
	792,  // 1236: mtproto.TL_payments_getStarsRevenueAdsAccountUrl.peer:type_name -> mtproto.InputPeer
	780,  // 1237: mtproto.TL_payments_getStarsTransactionsByID.constructor:type_name -> mtproto.TLConstructor
	792,  // 1238: mtproto.TL_payments_getStarsTransactionsByID.peer:type_name -> mtproto.InputPeer
	878,  // 1239: mtproto.TL_payments_getStarsTransactionsByID.id:type_name -> mtproto.InputStarsTransaction
	780,  // 1240: mtproto.TL_payments_getStarsGiftOptions.constructor:type_name -> mtproto.TLConstructor
	821,  // 1241: mtproto.TL_payments_getStarsGiftOptions.user_id:type_name -> mtproto.InputUser
	780,  // 1242: mtproto.TL_payments_getStarsSubscriptions.constructor:type_name -> mtproto.TLConstructor
	792,  // 1243: mtproto.TL_payments_getStarsSubscriptions.peer:type_name -> mtproto.InputPeer
	780,  // 1244: mtproto.TL_payments_changeStarsSubscription.constructor:type_name -> mtproto.TLConstructor
	792,  // 1245: mtproto.TL_payments_changeStarsSubscription.peer:type_name -> mtproto.InputPeer
	789,  // 1246: mtproto.TL_payments_changeStarsSubscription.canceled:type_name -> mtproto.Bool
	780,  // 1247: mtproto.TL_payments_fulfillStarsSubscription.constructor:type_name -> mtproto.TLConstructor
	792,  // 1248: mtproto.TL_payments_fulfillStarsSubscription.peer:type_name -> mtproto.InputPeer
	780,  // 1249: mtproto.TL_payments_getStarsGiveawayOptions.constructor:type_name -> mtproto.TLConstructor
	780,  // 1250: mtproto.TL_payments_getStarGifts.constructor:type_name -> mtproto.TLConstructor
	780,  // 1251: mtproto.TL_payments_saveStarGift.constructor:type_name -> mtproto.TLConstructor
	879,  // 1252: mtproto.TL_payments_saveStarGift.stargift:type_name -> mtproto.InputSavedStarGift
	821,  // 1253: mtproto.TL_payments_saveStarGift.user_id:type_name -> mtproto.InputUser
	780,  // 1254: mtproto.TL_payments_convertStarGift.constructor:type_name -> mtproto.TLConstructor
	879,  // 1255: mtproto.TL_payments_convertStarGift.stargift:type_name -> mtproto.InputSavedStarGift
	821,  // 1256: mtproto.TL_payments_convertStarGift.user_id:type_name -> mtproto.InputUser
	780,  // 1257: mtproto.TL_payments_botCancelStarsSubscription.constructor:type_name -> mtproto.TLConstructor
	821,  // 1258: mtproto.TL_payments_botCancelStarsSubscription.user_id:type_name -> mtproto.InputUser
	785,  // 1259: mtproto.TL_payments_botCancelStarsSubscription.invoice_slug:type_name -> google.protobuf.StringValue
	785,  // 1260: mtproto.TL_payments_botCancelStarsSubscription.charge_id_FLAGSTRING:type_name -> google.protobuf.StringValue
	780,  // 1261: mtproto.TL_payments_getConnectedStarRefBots.constructor:type_name -> mtproto.TLConstructor
	792,  // 1262: mtproto.TL_payments_getConnectedStarRefBots.peer:type_name -> mtproto.InputPeer
	803,  // 1263: mtproto.TL_payments_getConnectedStarRefBots.offset_date:type_name -> google.protobuf.Int32Value
	785,  // 1264: mtproto.TL_payments_getConnectedStarRefBots.offset_link:type_name -> google.protobuf.StringValue
	780,  // 1265: mtproto.TL_payments_getConnectedStarRefBot.constructor:type_name -> mtproto.TLConstructor
	792,  // 1266: mtproto.TL_payments_getConnectedStarRefBot.peer:type_name -> mtproto.InputPeer
	821,  // 1267: mtproto.TL_payments_getConnectedStarRefBot.bot:type_name -> mtproto.InputUser
	780,  // 1268: mtproto.TL_payments_getSuggestedStarRefBots.constructor:type_name -> mtproto.TLConstructor
	792,  // 1269: mtproto.TL_payments_getSuggestedStarRefBots.peer:type_name -> mtproto.InputPeer
	780,  // 1270: mtproto.TL_payments_connectStarRefBot.constructor:type_name -> mtproto.TLConstructor
	792,  // 1271: mtproto.TL_payments_connectStarRefBot.peer:type_name -> mtproto.InputPeer
	821,  // 1272: mtproto.TL_payments_connectStarRefBot.bot:type_name -> mtproto.InputUser
	780,  // 1273: mtproto.TL_payments_editConnectedStarRefBot.constructor:type_name -> mtproto.TLConstructor
	792,  // 1274: mtproto.TL_payments_editConnectedStarRefBot.peer:type_name -> mtproto.InputPeer
	780,  // 1275: mtproto.TL_payments_getStarGiftUpgradePreview.constructor:type_name -> mtproto.TLConstructor
	780,  // 1276: mtproto.TL_payments_upgradeStarGift.constructor:type_name -> mtproto.TLConstructor
	879,  // 1277: mtproto.TL_payments_upgradeStarGift.stargift:type_name -> mtproto.InputSavedStarGift
	780,  // 1278: mtproto.TL_payments_transferStarGift.constructor:type_name -> mtproto.TLConstructor
	879,  // 1279: mtproto.TL_payments_transferStarGift.stargift:type_name -> mtproto.InputSavedStarGift
	792,  // 1280: mtproto.TL_payments_transferStarGift.to_id_INPUTPEER:type_name -> mtproto.InputPeer
	821,  // 1281: mtproto.TL_payments_transferStarGift.to_id_INPUTUSER:type_name -> mtproto.InputUser
	780,  // 1282: mtproto.TL_payments_getUniqueStarGift.constructor:type_name -> mtproto.TLConstructor
	780,  // 1283: mtproto.TL_payments_getSavedStarGifts.constructor:type_name -> mtproto.TLConstructor
	792,  // 1284: mtproto.TL_payments_getSavedStarGifts.peer:type_name -> mtproto.InputPeer
	780,  // 1285: mtproto.TL_payments_getSavedStarGift.constructor:type_name -> mtproto.TLConstructor
	879,  // 1286: mtproto.TL_payments_getSavedStarGift.stargift:type_name -> mtproto.InputSavedStarGift
	780,  // 1287: mtproto.TL_payments_getStarGiftWithdrawalUrl.constructor:type_name -> mtproto.TLConstructor
	879,  // 1288: mtproto.TL_payments_getStarGiftWithdrawalUrl.stargift:type_name -> mtproto.InputSavedStarGift
	787,  // 1289: mtproto.TL_payments_getStarGiftWithdrawalUrl.password:type_name -> mtproto.InputCheckPasswordSRP
	780,  // 1290: mtproto.TL_payments_toggleChatStarGiftNotifications.constructor:type_name -> mtproto.TLConstructor
	792,  // 1291: mtproto.TL_payments_toggleChatStarGiftNotifications.peer:type_name -> mtproto.InputPeer
	780,  // 1292: mtproto.TL_payments_toggleStarGiftsPinnedToTop.constructor:type_name -> mtproto.TLConstructor
	792,  // 1293: mtproto.TL_payments_toggleStarGiftsPinnedToTop.peer:type_name -> mtproto.InputPeer
	879,  // 1294: mtproto.TL_payments_toggleStarGiftsPinnedToTop.stargift:type_name -> mtproto.InputSavedStarGift
	780,  // 1295: mtproto.TL_payments_canPurchaseStore.constructor:type_name -> mtproto.TLConstructor
	877,  // 1296: mtproto.TL_payments_canPurchaseStore.purpose:type_name -> mtproto.InputStorePaymentPurpose
	780,  // 1297: mtproto.TL_stickers_createStickerSet.constructor:type_name -> mtproto.TLConstructor
	821,  // 1298: mtproto.TL_stickers_createStickerSet.user_id:type_name -> mtproto.InputUser
	808,  // 1299: mtproto.TL_stickers_createStickerSet.thumb:type_name -> mtproto.InputDocument
	880,  // 1300: mtproto.TL_stickers_createStickerSet.stickers:type_name -> mtproto.InputStickerSetItem
	785,  // 1301: mtproto.TL_stickers_createStickerSet.software:type_name -> google.protobuf.StringValue
	780,  // 1302: mtproto.TL_stickers_removeStickerFromSet.constructor:type_name -> mtproto.TLConstructor
	808,  // 1303: mtproto.TL_stickers_removeStickerFromSet.sticker:type_name -> mtproto.InputDocument
	780,  // 1304: mtproto.TL_stickers_changeStickerPosition.constructor:type_name -> mtproto.TLConstructor
	808,  // 1305: mtproto.TL_stickers_changeStickerPosition.sticker:type_name -> mtproto.InputDocument
	780,  // 1306: mtproto.TL_stickers_addStickerToSet.constructor:type_name -> mtproto.TLConstructor
	845,  // 1307: mtproto.TL_stickers_addStickerToSet.stickerset:type_name -> mtproto.InputStickerSet
	880,  // 1308: mtproto.TL_stickers_addStickerToSet.sticker:type_name -> mtproto.InputStickerSetItem
	780,  // 1309: mtproto.TL_stickers_setStickerSetThumb.constructor:type_name -> mtproto.TLConstructor
	845,  // 1310: mtproto.TL_stickers_setStickerSetThumb.stickerset:type_name -> mtproto.InputStickerSet
	808,  // 1311: mtproto.TL_stickers_setStickerSetThumb.thumb:type_name -> mtproto.InputDocument
	802,  // 1312: mtproto.TL_stickers_setStickerSetThumb.thumb_document_id:type_name -> google.protobuf.Int64Value
	780,  // 1313: mtproto.TL_stickers_checkShortName.constructor:type_name -> mtproto.TLConstructor
	780,  // 1314: mtproto.TL_stickers_suggestShortName.constructor:type_name -> mtproto.TLConstructor
	780,  // 1315: mtproto.TL_stickers_changeSticker.constructor:type_name -> mtproto.TLConstructor
	808,  // 1316: mtproto.TL_stickers_changeSticker.sticker:type_name -> mtproto.InputDocument
	785,  // 1317: mtproto.TL_stickers_changeSticker.emoji:type_name -> google.protobuf.StringValue
	881,  // 1318: mtproto.TL_stickers_changeSticker.mask_coords:type_name -> mtproto.MaskCoords
	785,  // 1319: mtproto.TL_stickers_changeSticker.keywords:type_name -> google.protobuf.StringValue
	780,  // 1320: mtproto.TL_stickers_renameStickerSet.constructor:type_name -> mtproto.TLConstructor
	845,  // 1321: mtproto.TL_stickers_renameStickerSet.stickerset:type_name -> mtproto.InputStickerSet
	780,  // 1322: mtproto.TL_stickers_deleteStickerSet.constructor:type_name -> mtproto.TLConstructor
	845,  // 1323: mtproto.TL_stickers_deleteStickerSet.stickerset:type_name -> mtproto.InputStickerSet
	780,  // 1324: mtproto.TL_stickers_replaceSticker.constructor:type_name -> mtproto.TLConstructor
	808,  // 1325: mtproto.TL_stickers_replaceSticker.sticker:type_name -> mtproto.InputDocument
	880,  // 1326: mtproto.TL_stickers_replaceSticker.new_sticker:type_name -> mtproto.InputStickerSetItem
	780,  // 1327: mtproto.TL_phone_getCallConfig.constructor:type_name -> mtproto.TLConstructor
	780,  // 1328: mtproto.TL_phone_requestCall.constructor:type_name -> mtproto.TLConstructor
	821,  // 1329: mtproto.TL_phone_requestCall.user_id:type_name -> mtproto.InputUser
	882,  // 1330: mtproto.TL_phone_requestCall.conference_call:type_name -> mtproto.InputGroupCall
	883,  // 1331: mtproto.TL_phone_requestCall.protocol:type_name -> mtproto.PhoneCallProtocol
	780,  // 1332: mtproto.TL_phone_acceptCall.constructor:type_name -> mtproto.TLConstructor
	884,  // 1333: mtproto.TL_phone_acceptCall.peer:type_name -> mtproto.InputPhoneCall
	883,  // 1334: mtproto.TL_phone_acceptCall.protocol:type_name -> mtproto.PhoneCallProtocol
	780,  // 1335: mtproto.TL_phone_confirmCall.constructor:type_name -> mtproto.TLConstructor
	884,  // 1336: mtproto.TL_phone_confirmCall.peer:type_name -> mtproto.InputPhoneCall
	883,  // 1337: mtproto.TL_phone_confirmCall.protocol:type_name -> mtproto.PhoneCallProtocol
	780,  // 1338: mtproto.TL_phone_receivedCall.constructor:type_name -> mtproto.TLConstructor
	884,  // 1339: mtproto.TL_phone_receivedCall.peer:type_name -> mtproto.InputPhoneCall
	780,  // 1340: mtproto.TL_phone_discardCall.constructor:type_name -> mtproto.TLConstructor
	884,  // 1341: mtproto.TL_phone_discardCall.peer:type_name -> mtproto.InputPhoneCall
	885,  // 1342: mtproto.TL_phone_discardCall.reason:type_name -> mtproto.PhoneCallDiscardReason
	780,  // 1343: mtproto.TL_phone_setCallRating.constructor:type_name -> mtproto.TLConstructor
	884,  // 1344: mtproto.TL_phone_setCallRating.peer:type_name -> mtproto.InputPhoneCall
	780,  // 1345: mtproto.TL_phone_saveCallDebug.constructor:type_name -> mtproto.TLConstructor
	884,  // 1346: mtproto.TL_phone_saveCallDebug.peer:type_name -> mtproto.InputPhoneCall
	858,  // 1347: mtproto.TL_phone_saveCallDebug.debug:type_name -> mtproto.DataJSON
	780,  // 1348: mtproto.TL_phone_sendSignalingData.constructor:type_name -> mtproto.TLConstructor
	884,  // 1349: mtproto.TL_phone_sendSignalingData.peer:type_name -> mtproto.InputPhoneCall
	780,  // 1350: mtproto.TL_phone_createGroupCall.constructor:type_name -> mtproto.TLConstructor
	792,  // 1351: mtproto.TL_phone_createGroupCall.peer:type_name -> mtproto.InputPeer
	785,  // 1352: mtproto.TL_phone_createGroupCall.title:type_name -> google.protobuf.StringValue
	803,  // 1353: mtproto.TL_phone_createGroupCall.schedule_date:type_name -> google.protobuf.Int32Value
	780,  // 1354: mtproto.TL_phone_joinGroupCall.constructor:type_name -> mtproto.TLConstructor
	882,  // 1355: mtproto.TL_phone_joinGroupCall.call:type_name -> mtproto.InputGroupCall
	792,  // 1356: mtproto.TL_phone_joinGroupCall.join_as:type_name -> mtproto.InputPeer
	785,  // 1357: mtproto.TL_phone_joinGroupCall.invite_hash:type_name -> google.protobuf.StringValue
	802,  // 1358: mtproto.TL_phone_joinGroupCall.key_fingerprint:type_name -> google.protobuf.Int64Value
	858,  // 1359: mtproto.TL_phone_joinGroupCall.params:type_name -> mtproto.DataJSON
	780,  // 1360: mtproto.TL_phone_leaveGroupCall.constructor:type_name -> mtproto.TLConstructor
	882,  // 1361: mtproto.TL_phone_leaveGroupCall.call:type_name -> mtproto.InputGroupCall
	780,  // 1362: mtproto.TL_phone_inviteToGroupCall.constructor:type_name -> mtproto.TLConstructor
	882,  // 1363: mtproto.TL_phone_inviteToGroupCall.call:type_name -> mtproto.InputGroupCall
	821,  // 1364: mtproto.TL_phone_inviteToGroupCall.users:type_name -> mtproto.InputUser
	780,  // 1365: mtproto.TL_phone_discardGroupCall.constructor:type_name -> mtproto.TLConstructor
	882,  // 1366: mtproto.TL_phone_discardGroupCall.call:type_name -> mtproto.InputGroupCall
	780,  // 1367: mtproto.TL_phone_toggleGroupCallSettings.constructor:type_name -> mtproto.TLConstructor
	882,  // 1368: mtproto.TL_phone_toggleGroupCallSettings.call:type_name -> mtproto.InputGroupCall
	789,  // 1369: mtproto.TL_phone_toggleGroupCallSettings.join_muted:type_name -> mtproto.Bool
	780,  // 1370: mtproto.TL_phone_getGroupCall.constructor:type_name -> mtproto.TLConstructor
	882,  // 1371: mtproto.TL_phone_getGroupCall.call:type_name -> mtproto.InputGroupCall
	780,  // 1372: mtproto.TL_phone_getGroupParticipants.constructor:type_name -> mtproto.TLConstructor
	882,  // 1373: mtproto.TL_phone_getGroupParticipants.call:type_name -> mtproto.InputGroupCall
	792,  // 1374: mtproto.TL_phone_getGroupParticipants.ids:type_name -> mtproto.InputPeer
	780,  // 1375: mtproto.TL_phone_checkGroupCall.constructor:type_name -> mtproto.TLConstructor
	882,  // 1376: mtproto.TL_phone_checkGroupCall.call:type_name -> mtproto.InputGroupCall
	780,  // 1377: mtproto.TL_phone_toggleGroupCallRecord.constructor:type_name -> mtproto.TLConstructor
	882,  // 1378: mtproto.TL_phone_toggleGroupCallRecord.call:type_name -> mtproto.InputGroupCall
	785,  // 1379: mtproto.TL_phone_toggleGroupCallRecord.title:type_name -> google.protobuf.StringValue
	789,  // 1380: mtproto.TL_phone_toggleGroupCallRecord.video_portrait:type_name -> mtproto.Bool
	780,  // 1381: mtproto.TL_phone_editGroupCallParticipant.constructor:type_name -> mtproto.TLConstructor
	882,  // 1382: mtproto.TL_phone_editGroupCallParticipant.call:type_name -> mtproto.InputGroupCall
	792,  // 1383: mtproto.TL_phone_editGroupCallParticipant.participant:type_name -> mtproto.InputPeer
	789,  // 1384: mtproto.TL_phone_editGroupCallParticipant.muted:type_name -> mtproto.Bool
	803,  // 1385: mtproto.TL_phone_editGroupCallParticipant.volume:type_name -> google.protobuf.Int32Value
	789,  // 1386: mtproto.TL_phone_editGroupCallParticipant.raise_hand:type_name -> mtproto.Bool
	789,  // 1387: mtproto.TL_phone_editGroupCallParticipant.video_stopped:type_name -> mtproto.Bool
	789,  // 1388: mtproto.TL_phone_editGroupCallParticipant.video_paused:type_name -> mtproto.Bool
	789,  // 1389: mtproto.TL_phone_editGroupCallParticipant.presentation_paused:type_name -> mtproto.Bool
	780,  // 1390: mtproto.TL_phone_editGroupCallTitle.constructor:type_name -> mtproto.TLConstructor
	882,  // 1391: mtproto.TL_phone_editGroupCallTitle.call:type_name -> mtproto.InputGroupCall
	780,  // 1392: mtproto.TL_phone_getGroupCallJoinAs.constructor:type_name -> mtproto.TLConstructor
	792,  // 1393: mtproto.TL_phone_getGroupCallJoinAs.peer:type_name -> mtproto.InputPeer
	780,  // 1394: mtproto.TL_phone_exportGroupCallInvite.constructor:type_name -> mtproto.TLConstructor
	882,  // 1395: mtproto.TL_phone_exportGroupCallInvite.call:type_name -> mtproto.InputGroupCall
	780,  // 1396: mtproto.TL_phone_toggleGroupCallStartSubscription.constructor:type_name -> mtproto.TLConstructor
	882,  // 1397: mtproto.TL_phone_toggleGroupCallStartSubscription.call:type_name -> mtproto.InputGroupCall
	789,  // 1398: mtproto.TL_phone_toggleGroupCallStartSubscription.subscribed:type_name -> mtproto.Bool
	780,  // 1399: mtproto.TL_phone_startScheduledGroupCall.constructor:type_name -> mtproto.TLConstructor
	882,  // 1400: mtproto.TL_phone_startScheduledGroupCall.call:type_name -> mtproto.InputGroupCall
	780,  // 1401: mtproto.TL_phone_saveDefaultGroupCallJoinAs.constructor:type_name -> mtproto.TLConstructor
	792,  // 1402: mtproto.TL_phone_saveDefaultGroupCallJoinAs.peer:type_name -> mtproto.InputPeer
	792,  // 1403: mtproto.TL_phone_saveDefaultGroupCallJoinAs.join_as:type_name -> mtproto.InputPeer
	780,  // 1404: mtproto.TL_phone_joinGroupCallPresentation.constructor:type_name -> mtproto.TLConstructor
	882,  // 1405: mtproto.TL_phone_joinGroupCallPresentation.call:type_name -> mtproto.InputGroupCall
	858,  // 1406: mtproto.TL_phone_joinGroupCallPresentation.params:type_name -> mtproto.DataJSON
	780,  // 1407: mtproto.TL_phone_leaveGroupCallPresentation.constructor:type_name -> mtproto.TLConstructor
	882,  // 1408: mtproto.TL_phone_leaveGroupCallPresentation.call:type_name -> mtproto.InputGroupCall
	780,  // 1409: mtproto.TL_phone_getGroupCallStreamChannels.constructor:type_name -> mtproto.TLConstructor
	882,  // 1410: mtproto.TL_phone_getGroupCallStreamChannels.call:type_name -> mtproto.InputGroupCall
	780,  // 1411: mtproto.TL_phone_getGroupCallStreamRtmpUrl.constructor:type_name -> mtproto.TLConstructor
	792,  // 1412: mtproto.TL_phone_getGroupCallStreamRtmpUrl.peer:type_name -> mtproto.InputPeer
	789,  // 1413: mtproto.TL_phone_getGroupCallStreamRtmpUrl.revoke:type_name -> mtproto.Bool
	780,  // 1414: mtproto.TL_phone_saveCallLog.constructor:type_name -> mtproto.TLConstructor
	884,  // 1415: mtproto.TL_phone_saveCallLog.peer:type_name -> mtproto.InputPhoneCall
	805,  // 1416: mtproto.TL_phone_saveCallLog.file:type_name -> mtproto.InputFile
	780,  // 1417: mtproto.TL_phone_createConferenceCall.constructor:type_name -> mtproto.TLConstructor
	884,  // 1418: mtproto.TL_phone_createConferenceCall.peer:type_name -> mtproto.InputPhoneCall
	780,  // 1419: mtproto.TL_langpack_getLangPack.constructor:type_name -> mtproto.TLConstructor
	780,  // 1420: mtproto.TL_langpack_getStrings.constructor:type_name -> mtproto.TLConstructor
	780,  // 1421: mtproto.TL_langpack_getDifference.constructor:type_name -> mtproto.TLConstructor
	780,  // 1422: mtproto.TL_langpack_getLanguages.constructor:type_name -> mtproto.TLConstructor
	780,  // 1423: mtproto.TL_langpack_getLanguage.constructor:type_name -> mtproto.TLConstructor
	780,  // 1424: mtproto.TL_folders_editPeerFolders.constructor:type_name -> mtproto.TLConstructor
	886,  // 1425: mtproto.TL_folders_editPeerFolders.folder_peers:type_name -> mtproto.InputFolderPeer
	780,  // 1426: mtproto.TL_stats_getBroadcastStats.constructor:type_name -> mtproto.TLConstructor
	827,  // 1427: mtproto.TL_stats_getBroadcastStats.channel:type_name -> mtproto.InputChannel
	780,  // 1428: mtproto.TL_stats_loadAsyncGraph.constructor:type_name -> mtproto.TLConstructor
	802,  // 1429: mtproto.TL_stats_loadAsyncGraph.x:type_name -> google.protobuf.Int64Value
	780,  // 1430: mtproto.TL_stats_getMegagroupStats.constructor:type_name -> mtproto.TLConstructor
	827,  // 1431: mtproto.TL_stats_getMegagroupStats.channel:type_name -> mtproto.InputChannel
	780,  // 1432: mtproto.TL_stats_getMessagePublicForwards5F150144.constructor:type_name -> mtproto.TLConstructor
	827,  // 1433: mtproto.TL_stats_getMessagePublicForwards5F150144.channel:type_name -> mtproto.InputChannel
	780,  // 1434: mtproto.TL_stats_getMessageStats.constructor:type_name -> mtproto.TLConstructor
	827,  // 1435: mtproto.TL_stats_getMessageStats.channel:type_name -> mtproto.InputChannel
	780,  // 1436: mtproto.TL_stats_getStoryStats.constructor:type_name -> mtproto.TLConstructor
	792,  // 1437: mtproto.TL_stats_getStoryStats.peer:type_name -> mtproto.InputPeer
	780,  // 1438: mtproto.TL_stats_getStoryPublicForwards.constructor:type_name -> mtproto.TLConstructor
	792,  // 1439: mtproto.TL_stats_getStoryPublicForwards.peer:type_name -> mtproto.InputPeer
	780,  // 1440: mtproto.TL_stats_getBroadcastRevenueStats.constructor:type_name -> mtproto.TLConstructor
	792,  // 1441: mtproto.TL_stats_getBroadcastRevenueStats.peer:type_name -> mtproto.InputPeer
	827,  // 1442: mtproto.TL_stats_getBroadcastRevenueStats.channel:type_name -> mtproto.InputChannel
	780,  // 1443: mtproto.TL_stats_getBroadcastRevenueWithdrawalUrl.constructor:type_name -> mtproto.TLConstructor
	792,  // 1444: mtproto.TL_stats_getBroadcastRevenueWithdrawalUrl.peer:type_name -> mtproto.InputPeer
	787,  // 1445: mtproto.TL_stats_getBroadcastRevenueWithdrawalUrl.password:type_name -> mtproto.InputCheckPasswordSRP
	827,  // 1446: mtproto.TL_stats_getBroadcastRevenueWithdrawalUrl.channel:type_name -> mtproto.InputChannel
	780,  // 1447: mtproto.TL_stats_getBroadcastRevenueTransactions.constructor:type_name -> mtproto.TLConstructor
	792,  // 1448: mtproto.TL_stats_getBroadcastRevenueTransactions.peer:type_name -> mtproto.InputPeer
	827,  // 1449: mtproto.TL_stats_getBroadcastRevenueTransactions.channel:type_name -> mtproto.InputChannel
	780,  // 1450: mtproto.TL_chatlists_exportChatlistInvite.constructor:type_name -> mtproto.TLConstructor
	887,  // 1451: mtproto.TL_chatlists_exportChatlistInvite.chatlist:type_name -> mtproto.InputChatlist
	792,  // 1452: mtproto.TL_chatlists_exportChatlistInvite.peers:type_name -> mtproto.InputPeer
	780,  // 1453: mtproto.TL_chatlists_deleteExportedInvite.constructor:type_name -> mtproto.TLConstructor
	887,  // 1454: mtproto.TL_chatlists_deleteExportedInvite.chatlist:type_name -> mtproto.InputChatlist
	780,  // 1455: mtproto.TL_chatlists_editExportedInvite.constructor:type_name -> mtproto.TLConstructor
	887,  // 1456: mtproto.TL_chatlists_editExportedInvite.chatlist:type_name -> mtproto.InputChatlist
	785,  // 1457: mtproto.TL_chatlists_editExportedInvite.title:type_name -> google.protobuf.StringValue
	792,  // 1458: mtproto.TL_chatlists_editExportedInvite.peers:type_name -> mtproto.InputPeer
	780,  // 1459: mtproto.TL_chatlists_getExportedInvites.constructor:type_name -> mtproto.TLConstructor
	887,  // 1460: mtproto.TL_chatlists_getExportedInvites.chatlist:type_name -> mtproto.InputChatlist
	780,  // 1461: mtproto.TL_chatlists_checkChatlistInvite.constructor:type_name -> mtproto.TLConstructor
	780,  // 1462: mtproto.TL_chatlists_joinChatlistInvite.constructor:type_name -> mtproto.TLConstructor
	792,  // 1463: mtproto.TL_chatlists_joinChatlistInvite.peers:type_name -> mtproto.InputPeer
	780,  // 1464: mtproto.TL_chatlists_getChatlistUpdates.constructor:type_name -> mtproto.TLConstructor
	887,  // 1465: mtproto.TL_chatlists_getChatlistUpdates.chatlist:type_name -> mtproto.InputChatlist
	780,  // 1466: mtproto.TL_chatlists_joinChatlistUpdates.constructor:type_name -> mtproto.TLConstructor
	887,  // 1467: mtproto.TL_chatlists_joinChatlistUpdates.chatlist:type_name -> mtproto.InputChatlist
	792,  // 1468: mtproto.TL_chatlists_joinChatlistUpdates.peers:type_name -> mtproto.InputPeer
	780,  // 1469: mtproto.TL_chatlists_hideChatlistUpdates.constructor:type_name -> mtproto.TLConstructor
	887,  // 1470: mtproto.TL_chatlists_hideChatlistUpdates.chatlist:type_name -> mtproto.InputChatlist
	780,  // 1471: mtproto.TL_chatlists_getLeaveChatlistSuggestions.constructor:type_name -> mtproto.TLConstructor
	887,  // 1472: mtproto.TL_chatlists_getLeaveChatlistSuggestions.chatlist:type_name -> mtproto.InputChatlist
	780,  // 1473: mtproto.TL_chatlists_leaveChatlist.constructor:type_name -> mtproto.TLConstructor
	887,  // 1474: mtproto.TL_chatlists_leaveChatlist.chatlist:type_name -> mtproto.InputChatlist
	792,  // 1475: mtproto.TL_chatlists_leaveChatlist.peers:type_name -> mtproto.InputPeer
	780,  // 1476: mtproto.TL_stories_canSendStory.constructor:type_name -> mtproto.TLConstructor
	792,  // 1477: mtproto.TL_stories_canSendStory.peer:type_name -> mtproto.InputPeer
	780,  // 1478: mtproto.TL_stories_sendStory.constructor:type_name -> mtproto.TLConstructor
	792,  // 1479: mtproto.TL_stories_sendStory.peer:type_name -> mtproto.InputPeer
	840,  // 1480: mtproto.TL_stories_sendStory.media:type_name -> mtproto.InputMedia
	888,  // 1481: mtproto.TL_stories_sendStory.media_areas:type_name -> mtproto.MediaArea
	785,  // 1482: mtproto.TL_stories_sendStory.caption:type_name -> google.protobuf.StringValue
	838,  // 1483: mtproto.TL_stories_sendStory.entities:type_name -> mtproto.MessageEntity
	795,  // 1484: mtproto.TL_stories_sendStory.privacy_rules:type_name -> mtproto.InputPrivacyRule
	803,  // 1485: mtproto.TL_stories_sendStory.period:type_name -> google.protobuf.Int32Value
	792,  // 1486: mtproto.TL_stories_sendStory.fwd_from_id:type_name -> mtproto.InputPeer
	803,  // 1487: mtproto.TL_stories_sendStory.fwd_from_story:type_name -> google.protobuf.Int32Value
	780,  // 1488: mtproto.TL_stories_editStory.constructor:type_name -> mtproto.TLConstructor
	792,  // 1489: mtproto.TL_stories_editStory.peer:type_name -> mtproto.InputPeer
	840,  // 1490: mtproto.TL_stories_editStory.media:type_name -> mtproto.InputMedia
	888,  // 1491: mtproto.TL_stories_editStory.media_areas:type_name -> mtproto.MediaArea
	785,  // 1492: mtproto.TL_stories_editStory.caption:type_name -> google.protobuf.StringValue
	838,  // 1493: mtproto.TL_stories_editStory.entities:type_name -> mtproto.MessageEntity
	795,  // 1494: mtproto.TL_stories_editStory.privacy_rules:type_name -> mtproto.InputPrivacyRule
	780,  // 1495: mtproto.TL_stories_deleteStories.constructor:type_name -> mtproto.TLConstructor
	792,  // 1496: mtproto.TL_stories_deleteStories.peer:type_name -> mtproto.InputPeer
	780,  // 1497: mtproto.TL_stories_togglePinned.constructor:type_name -> mtproto.TLConstructor
	792,  // 1498: mtproto.TL_stories_togglePinned.peer:type_name -> mtproto.InputPeer
	789,  // 1499: mtproto.TL_stories_togglePinned.pinned:type_name -> mtproto.Bool
	780,  // 1500: mtproto.TL_stories_getAllStories.constructor:type_name -> mtproto.TLConstructor
	785,  // 1501: mtproto.TL_stories_getAllStories.state:type_name -> google.protobuf.StringValue
	780,  // 1502: mtproto.TL_stories_getPinnedStories.constructor:type_name -> mtproto.TLConstructor
	792,  // 1503: mtproto.TL_stories_getPinnedStories.peer:type_name -> mtproto.InputPeer
	821,  // 1504: mtproto.TL_stories_getPinnedStories.user_id:type_name -> mtproto.InputUser
	780,  // 1505: mtproto.TL_stories_getStoriesArchive.constructor:type_name -> mtproto.TLConstructor
	792,  // 1506: mtproto.TL_stories_getStoriesArchive.peer:type_name -> mtproto.InputPeer
	780,  // 1507: mtproto.TL_stories_getStoriesByID.constructor:type_name -> mtproto.TLConstructor
	792,  // 1508: mtproto.TL_stories_getStoriesByID.peer:type_name -> mtproto.InputPeer
	821,  // 1509: mtproto.TL_stories_getStoriesByID.user_id:type_name -> mtproto.InputUser
	780,  // 1510: mtproto.TL_stories_toggleAllStoriesHidden.constructor:type_name -> mtproto.TLConstructor
	789,  // 1511: mtproto.TL_stories_toggleAllStoriesHidden.hidden:type_name -> mtproto.Bool
	780,  // 1512: mtproto.TL_stories_readStories.constructor:type_name -> mtproto.TLConstructor
	792,  // 1513: mtproto.TL_stories_readStories.peer:type_name -> mtproto.InputPeer
	821,  // 1514: mtproto.TL_stories_readStories.user_id:type_name -> mtproto.InputUser
	780,  // 1515: mtproto.TL_stories_incrementStoryViews.constructor:type_name -> mtproto.TLConstructor
	792,  // 1516: mtproto.TL_stories_incrementStoryViews.peer:type_name -> mtproto.InputPeer
	821,  // 1517: mtproto.TL_stories_incrementStoryViews.user_id:type_name -> mtproto.InputUser
	780,  // 1518: mtproto.TL_stories_getStoryViewsList.constructor:type_name -> mtproto.TLConstructor
	792,  // 1519: mtproto.TL_stories_getStoryViewsList.peer:type_name -> mtproto.InputPeer
	785,  // 1520: mtproto.TL_stories_getStoryViewsList.q:type_name -> google.protobuf.StringValue
	780,  // 1521: mtproto.TL_stories_getStoriesViews.constructor:type_name -> mtproto.TLConstructor
	792,  // 1522: mtproto.TL_stories_getStoriesViews.peer:type_name -> mtproto.InputPeer
	780,  // 1523: mtproto.TL_stories_exportStoryLink.constructor:type_name -> mtproto.TLConstructor
	792,  // 1524: mtproto.TL_stories_exportStoryLink.peer:type_name -> mtproto.InputPeer
	821,  // 1525: mtproto.TL_stories_exportStoryLink.user_id:type_name -> mtproto.InputUser
	780,  // 1526: mtproto.TL_stories_report19D8EB45.constructor:type_name -> mtproto.TLConstructor
	792,  // 1527: mtproto.TL_stories_report19D8EB45.peer:type_name -> mtproto.InputPeer
	780,  // 1528: mtproto.TL_stories_activateStealthMode.constructor:type_name -> mtproto.TLConstructor
	780,  // 1529: mtproto.TL_stories_sendReaction.constructor:type_name -> mtproto.TLConstructor
	792,  // 1530: mtproto.TL_stories_sendReaction.peer:type_name -> mtproto.InputPeer
	833,  // 1531: mtproto.TL_stories_sendReaction.reaction:type_name -> mtproto.Reaction
	821,  // 1532: mtproto.TL_stories_sendReaction.user_id:type_name -> mtproto.InputUser
	780,  // 1533: mtproto.TL_stories_getPeerStories.constructor:type_name -> mtproto.TLConstructor
	792,  // 1534: mtproto.TL_stories_getPeerStories.peer:type_name -> mtproto.InputPeer
	780,  // 1535: mtproto.TL_stories_getAllReadPeerStories.constructor:type_name -> mtproto.TLConstructor
	780,  // 1536: mtproto.TL_stories_getPeerMaxIDs.constructor:type_name -> mtproto.TLConstructor
	792,  // 1537: mtproto.TL_stories_getPeerMaxIDs.id:type_name -> mtproto.InputPeer
	780,  // 1538: mtproto.TL_stories_getChatsToSend.constructor:type_name -> mtproto.TLConstructor
	780,  // 1539: mtproto.TL_stories_togglePeerStoriesHidden.constructor:type_name -> mtproto.TLConstructor
	792,  // 1540: mtproto.TL_stories_togglePeerStoriesHidden.peer:type_name -> mtproto.InputPeer
	789,  // 1541: mtproto.TL_stories_togglePeerStoriesHidden.hidden:type_name -> mtproto.Bool
	780,  // 1542: mtproto.TL_stories_getStoryReactionsList.constructor:type_name -> mtproto.TLConstructor
	792,  // 1543: mtproto.TL_stories_getStoryReactionsList.peer:type_name -> mtproto.InputPeer
	833,  // 1544: mtproto.TL_stories_getStoryReactionsList.reaction:type_name -> mtproto.Reaction
	785,  // 1545: mtproto.TL_stories_getStoryReactionsList.offset:type_name -> google.protobuf.StringValue
	780,  // 1546: mtproto.TL_stories_togglePinnedToTop.constructor:type_name -> mtproto.TLConstructor
	792,  // 1547: mtproto.TL_stories_togglePinnedToTop.peer:type_name -> mtproto.InputPeer
	780,  // 1548: mtproto.TL_stories_searchPosts.constructor:type_name -> mtproto.TLConstructor
	785,  // 1549: mtproto.TL_stories_searchPosts.hashtag:type_name -> google.protobuf.StringValue
	888,  // 1550: mtproto.TL_stories_searchPosts.area:type_name -> mtproto.MediaArea
	792,  // 1551: mtproto.TL_stories_searchPosts.peer:type_name -> mtproto.InputPeer
	780,  // 1552: mtproto.TL_premium_getBoostsList.constructor:type_name -> mtproto.TLConstructor
	792,  // 1553: mtproto.TL_premium_getBoostsList.peer:type_name -> mtproto.InputPeer
	780,  // 1554: mtproto.TL_premium_getMyBoosts.constructor:type_name -> mtproto.TLConstructor
	780,  // 1555: mtproto.TL_premium_applyBoost.constructor:type_name -> mtproto.TLConstructor
	792,  // 1556: mtproto.TL_premium_applyBoost.peer:type_name -> mtproto.InputPeer
	780,  // 1557: mtproto.TL_premium_getBoostsStatus.constructor:type_name -> mtproto.TLConstructor
	792,  // 1558: mtproto.TL_premium_getBoostsStatus.peer:type_name -> mtproto.InputPeer
	780,  // 1559: mtproto.TL_premium_getUserBoosts.constructor:type_name -> mtproto.TLConstructor
	792,  // 1560: mtproto.TL_premium_getUserBoosts.peer:type_name -> mtproto.InputPeer
	821,  // 1561: mtproto.TL_premium_getUserBoosts.user_id:type_name -> mtproto.InputUser
	780,  // 1562: mtproto.TL_smsjobs_isEligibleToJoin.constructor:type_name -> mtproto.TLConstructor
	780,  // 1563: mtproto.TL_smsjobs_join.constructor:type_name -> mtproto.TLConstructor
	780,  // 1564: mtproto.TL_smsjobs_leave.constructor:type_name -> mtproto.TLConstructor
	780,  // 1565: mtproto.TL_smsjobs_updateSettings.constructor:type_name -> mtproto.TLConstructor
	780,  // 1566: mtproto.TL_smsjobs_getStatus.constructor:type_name -> mtproto.TLConstructor
	780,  // 1567: mtproto.TL_smsjobs_getSmsJob.constructor:type_name -> mtproto.TLConstructor
	780,  // 1568: mtproto.TL_smsjobs_finishJob.constructor:type_name -> mtproto.TLConstructor
	785,  // 1569: mtproto.TL_smsjobs_finishJob.error:type_name -> google.protobuf.StringValue
	780,  // 1570: mtproto.TL_fragment_getCollectibleInfo.constructor:type_name -> mtproto.TLConstructor
	889,  // 1571: mtproto.TL_fragment_getCollectibleInfo.collectible:type_name -> mtproto.InputCollectible
	780,  // 1572: mtproto.TL_payments_canPurchasePremium.constructor:type_name -> mtproto.TLConstructor
	877,  // 1573: mtproto.TL_payments_canPurchasePremium.purpose:type_name -> mtproto.InputStorePaymentPurpose
	780,  // 1574: mtproto.TL_users_getIsPremiumRequiredToContact.constructor:type_name -> mtproto.TLConstructor
	821,  // 1575: mtproto.TL_users_getIsPremiumRequiredToContact.id:type_name -> mtproto.InputUser
	780,  // 1576: mtproto.TL_payments_getUserStarGifts.constructor:type_name -> mtproto.TLConstructor
	821,  // 1577: mtproto.TL_payments_getUserStarGifts.user_id:type_name -> mtproto.InputUser
	780,  // 1578: mtproto.TL_payments_getUserStarGift.constructor:type_name -> mtproto.TLConstructor
	780,  // 1579: mtproto.TL_messages_getWebPagePreview8B68B0CC.constructor:type_name -> mtproto.TLConstructor
	838,  // 1580: mtproto.TL_messages_getWebPagePreview8B68B0CC.entities:type_name -> mtproto.MessageEntity
	780,  // 1581: mtproto.TL_channels_viewSponsoredMessage.constructor:type_name -> mtproto.TLConstructor
	827,  // 1582: mtproto.TL_channels_viewSponsoredMessage.channel:type_name -> mtproto.InputChannel
	780,  // 1583: mtproto.TL_channels_getSponsoredMessages.constructor:type_name -> mtproto.TLConstructor
	827,  // 1584: mtproto.TL_channels_getSponsoredMessages.channel:type_name -> mtproto.InputChannel
	780,  // 1585: mtproto.TL_channels_clickSponsoredMessage.constructor:type_name -> mtproto.TLConstructor
	827,  // 1586: mtproto.TL_channels_clickSponsoredMessage.channel:type_name -> mtproto.InputChannel
	780,  // 1587: mtproto.TL_channels_reportSponsoredMessage.constructor:type_name -> mtproto.TLConstructor
	827,  // 1588: mtproto.TL_channels_reportSponsoredMessage.channel:type_name -> mtproto.InputChannel
	780,  // 1589: mtproto.TL_messages_report8953AB4E.constructor:type_name -> mtproto.TLConstructor
	792,  // 1590: mtproto.TL_messages_report8953AB4E.peer:type_name -> mtproto.InputPeer
	793,  // 1591: mtproto.TL_messages_report8953AB4E.reason:type_name -> mtproto.ReportReason
	780,  // 1592: mtproto.TL_stories_report1923FA8C.constructor:type_name -> mtproto.TLConstructor
	792,  // 1593: mtproto.TL_stories_report1923FA8C.peer:type_name -> mtproto.InputPeer
	793,  // 1594: mtproto.TL_stories_report1923FA8C.reason:type_name -> mtproto.ReportReason
	780,  // 1595: mtproto.TL_messages_requestSimpleWebView1A46500A.constructor:type_name -> mtproto.TLConstructor
	821,  // 1596: mtproto.TL_messages_requestSimpleWebView1A46500A.bot:type_name -> mtproto.InputUser
	785,  // 1597: mtproto.TL_messages_requestSimpleWebView1A46500A.url:type_name -> google.protobuf.StringValue
	785,  // 1598: mtproto.TL_messages_requestSimpleWebView1A46500A.start_param:type_name -> google.protobuf.StringValue
	858,  // 1599: mtproto.TL_messages_requestSimpleWebView1A46500A.theme_params:type_name -> mtproto.DataJSON
	780,  // 1600: mtproto.TL_messages_requestAppWebView8C5A3B3C.constructor:type_name -> mtproto.TLConstructor
	792,  // 1601: mtproto.TL_messages_requestAppWebView8C5A3B3C.peer:type_name -> mtproto.InputPeer
	859,  // 1602: mtproto.TL_messages_requestAppWebView8C5A3B3C.app:type_name -> mtproto.InputBotApp
	785,  // 1603: mtproto.TL_messages_requestAppWebView8C5A3B3C.start_param:type_name -> google.protobuf.StringValue
	858,  // 1604: mtproto.TL_messages_requestAppWebView8C5A3B3C.theme_params:type_name -> mtproto.DataJSON
	780,  // 1605: mtproto.TL_messages_addChatUserF24753E3.constructor:type_name -> mtproto.TLConstructor
	821,  // 1606: mtproto.TL_messages_addChatUserF24753E3.user_id:type_name -> mtproto.InputUser
	780,  // 1607: mtproto.TL_messages_createChat34A818.constructor:type_name -> mtproto.TLConstructor
	821,  // 1608: mtproto.TL_messages_createChat34A818.users:type_name -> mtproto.InputUser
	803,  // 1609: mtproto.TL_messages_createChat34A818.ttl_period:type_name -> google.protobuf.Int32Value
	780,  // 1610: mtproto.TL_channels_inviteToChannel199F3A6C.constructor:type_name -> mtproto.TLConstructor
	827,  // 1611: mtproto.TL_channels_inviteToChannel199F3A6C.channel:type_name -> mtproto.InputChannel
	821,  // 1612: mtproto.TL_channels_inviteToChannel199F3A6C.users:type_name -> mtproto.InputUser
	780,  // 1613: mtproto.TL_messages_getDialogFiltersF19ED96D.constructor:type_name -> mtproto.TLConstructor
	780,  // 1614: mtproto.TL_help_getAppChangelog.constructor:type_name -> mtproto.TLConstructor
	780,  // 1615: mtproto.TL_stats_getMessagePublicForwards5630281B.constructor:type_name -> mtproto.TLConstructor
	827,  // 1616: mtproto.TL_stats_getMessagePublicForwards5630281B.channel:type_name -> mtproto.InputChannel
	792,  // 1617: mtproto.TL_stats_getMessagePublicForwards5630281B.offset_peer:type_name -> mtproto.InputPeer
	780,  // 1618: mtproto.TL_stories_getBoostsStatus.constructor:type_name -> mtproto.TLConstructor
	792,  // 1619: mtproto.TL_stories_getBoostsStatus.peer:type_name -> mtproto.InputPeer
	780,  // 1620: mtproto.TL_stories_getBoostersList.constructor:type_name -> mtproto.TLConstructor
	792,  // 1621: mtproto.TL_stories_getBoostersList.peer:type_name -> mtproto.InputPeer
	780,  // 1622: mtproto.TL_stories_canApplyBoost.constructor:type_name -> mtproto.TLConstructor
	792,  // 1623: mtproto.TL_stories_canApplyBoost.peer:type_name -> mtproto.InputPeer
	780,  // 1624: mtproto.TL_stories_applyBoost.constructor:type_name -> mtproto.TLConstructor
	792,  // 1625: mtproto.TL_stories_applyBoost.peer:type_name -> mtproto.InputPeer
	780,  // 1626: mtproto.TL_messages_getWebPage32CA8F91.constructor:type_name -> mtproto.TLConstructor
	780,  // 1627: mtproto.TL_users_getStoriesMaxIDs.constructor:type_name -> mtproto.TLConstructor
	821,  // 1628: mtproto.TL_users_getStoriesMaxIDs.id:type_name -> mtproto.InputUser
	780,  // 1629: mtproto.TL_contacts_toggleStoriesHidden.constructor:type_name -> mtproto.TLConstructor
	821,  // 1630: mtproto.TL_contacts_toggleStoriesHidden.id:type_name -> mtproto.InputUser
	789,  // 1631: mtproto.TL_contacts_toggleStoriesHidden.hidden:type_name -> mtproto.Bool
	780,  // 1632: mtproto.TL_stories_getUserStories.constructor:type_name -> mtproto.TLConstructor
	821,  // 1633: mtproto.TL_stories_getUserStories.user_id:type_name -> mtproto.InputUser
	780,  // 1634: mtproto.TL_stories_getAllReadUserStories.constructor:type_name -> mtproto.TLConstructor
	780,  // 1635: mtproto.TL_stories_reportC95BE06A.constructor:type_name -> mtproto.TLConstructor
	821,  // 1636: mtproto.TL_stories_reportC95BE06A.user_id:type_name -> mtproto.InputUser
	793,  // 1637: mtproto.TL_stories_reportC95BE06A.reason:type_name -> mtproto.ReportReason
	780,  // 1638: mtproto.TL_messages_requestSimpleWebView299BEC8E.constructor:type_name -> mtproto.TLConstructor
	821,  // 1639: mtproto.TL_messages_requestSimpleWebView299BEC8E.bot:type_name -> mtproto.InputUser
	858,  // 1640: mtproto.TL_messages_requestSimpleWebView299BEC8E.theme_params:type_name -> mtproto.DataJSON
	780,  // 1641: mtproto.TL_messages_getAllChats.constructor:type_name -> mtproto.TLConstructor
	780,  // 1642: mtproto.TL_bots_getBotInfo75EC12E6.constructor:type_name -> mtproto.TLConstructor
	780,  // 1643: mtproto.TL_folders_deleteFolder.constructor:type_name -> mtproto.TLConstructor
	780,  // 1644: mtproto.TL_messages_getMessageReadParticipants2C6F97B7.constructor:type_name -> mtproto.TLConstructor
	792,  // 1645: mtproto.TL_messages_getMessageReadParticipants2C6F97B7.peer:type_name -> mtproto.InputPeer
	780,  // 1646: mtproto.TL_help_getAppConfig98914110.constructor:type_name -> mtproto.TLConstructor
	780,  // 1647: mtproto.TL_messages_createChat9CB126E.constructor:type_name -> mtproto.TLConstructor
	821,  // 1648: mtproto.TL_messages_createChat9CB126E.users:type_name -> mtproto.InputUser
	780,  // 1649: mtproto.TL_account_verifyEmailECBA39DB.constructor:type_name -> mtproto.TLConstructor
	780,  // 1650: mtproto.TL_messages_requestSimpleWebView6ABB2F73.constructor:type_name -> mtproto.TLConstructor
	821,  // 1651: mtproto.TL_messages_requestSimpleWebView6ABB2F73.bot:type_name -> mtproto.InputUser
	858,  // 1652: mtproto.TL_messages_requestSimpleWebView6ABB2F73.theme_params:type_name -> mtproto.DataJSON
	780,  // 1653: mtproto.TL_payments_requestRecurringPayment.constructor:type_name -> mtproto.TLConstructor
	821,  // 1654: mtproto.TL_payments_requestRecurringPayment.user_id:type_name -> mtproto.InputUser
	840,  // 1655: mtproto.TL_payments_requestRecurringPayment.invoice_media:type_name -> mtproto.InputMedia
	780,  // 1656: mtproto.TL_payments_restorePlayMarketReceipt.constructor:type_name -> mtproto.TLConstructor
	780,  // 1657: mtproto.TL_channels_deleteHistoryAF369D42.constructor:type_name -> mtproto.TLConstructor
	827,  // 1658: mtproto.TL_channels_deleteHistoryAF369D42.channel:type_name -> mtproto.InputChannel
	780,  // 1659: mtproto.TL_help_test.constructor:type_name -> mtproto.TLConstructor
	780,  // 1660: mtproto.TL_predefined_createPredefinedUser.constructor:type_name -> mtproto.TLConstructor
	785,  // 1661: mtproto.TL_predefined_createPredefinedUser.first_name:type_name -> google.protobuf.StringValue
	785,  // 1662: mtproto.TL_predefined_createPredefinedUser.last_name:type_name -> google.protobuf.StringValue
	785,  // 1663: mtproto.TL_predefined_createPredefinedUser.username:type_name -> google.protobuf.StringValue
	780,  // 1664: mtproto.TL_predefined_updatePredefinedUsername.constructor:type_name -> mtproto.TLConstructor
	780,  // 1665: mtproto.TL_predefined_updatePredefinedProfile.constructor:type_name -> mtproto.TLConstructor
	785,  // 1666: mtproto.TL_predefined_updatePredefinedProfile.first_name:type_name -> google.protobuf.StringValue
	785,  // 1667: mtproto.TL_predefined_updatePredefinedProfile.last_name:type_name -> google.protobuf.StringValue
	785,  // 1668: mtproto.TL_predefined_updatePredefinedProfile.about:type_name -> google.protobuf.StringValue
	780,  // 1669: mtproto.TL_predefined_updatePredefinedVerified.constructor:type_name -> mtproto.TLConstructor
	780,  // 1670: mtproto.TL_predefined_updatePredefinedCode.constructor:type_name -> mtproto.TLConstructor
	780,  // 1671: mtproto.TL_predefined_getPredefinedUser.constructor:type_name -> mtproto.TLConstructor
	780,  // 1672: mtproto.TL_predefined_getPredefinedUsers.constructor:type_name -> mtproto.TLConstructor
	780,  // 1673: mtproto.TL_users_getMe.constructor:type_name -> mtproto.TLConstructor
	780,  // 1674: mtproto.TL_account_updateVerified.constructor:type_name -> mtproto.TLConstructor
	780,  // 1675: mtproto.TL_auth_toggleBan.constructor:type_name -> mtproto.TLConstructor
	803,  // 1676: mtproto.TL_auth_toggleBan.expires:type_name -> google.protobuf.Int32Value
	785,  // 1677: mtproto.TL_auth_toggleBan.reason:type_name -> google.protobuf.StringValue
	780,  // 1678: mtproto.TL_biz_invokeBizDataRaw.constructor:type_name -> mtproto.TLConstructor
	890,  // 1679: mtproto.TL_biz_invokeBizDataRaw.biz_data:type_name -> mtproto.BizDataRaw
	891,  // 1680: mtproto.Vector_SecureValue.datas:type_name -> mtproto.SecureValue
	892,  // 1681: mtproto.Vector_WallPaper.datas:type_name -> mtproto.WallPaper
	893,  // 1682: mtproto.Vector_User.datas:type_name -> mtproto.User
	894,  // 1683: mtproto.Vector_RequirementToContact.datas:type_name -> mtproto.RequirementToContact
	895,  // 1684: mtproto.Vector_ContactStatus.datas:type_name -> mtproto.ContactStatus
	896,  // 1685: mtproto.Vector_SavedContact.datas:type_name -> mtproto.SavedContact
	897,  // 1686: mtproto.Vector_ReceivedNotifyMessage.datas:type_name -> mtproto.ReceivedNotifyMessage
	898,  // 1687: mtproto.Vector_StickerSetCovered.datas:type_name -> mtproto.StickerSetCovered
	783,  // 1688: mtproto.Vector_MessageRange.datas:type_name -> mtproto.MessageRange
	899,  // 1689: mtproto.Vector_DialogPeer.datas:type_name -> mtproto.DialogPeer
	900,  // 1690: mtproto.Vector_EmojiLanguage.datas:type_name -> mtproto.EmojiLanguage
	901,  // 1691: mtproto.Vector_Messages_SearchCounter.datas:type_name -> mtproto.messages_SearchCounter
	902,  // 1692: mtproto.Vector_DialogFilterSuggested.datas:type_name -> mtproto.DialogFilterSuggested
	903,  // 1693: mtproto.Vector_ReadParticipantDate.datas:type_name -> mtproto.ReadParticipantDate
	904,  // 1694: mtproto.Vector_Document.datas:type_name -> mtproto.Document
	905,  // 1695: mtproto.Vector_FactCheck.datas:type_name -> mtproto.FactCheck
	906,  // 1696: mtproto.Vector_FileHash.datas:type_name -> mtproto.FileHash
	872,  // 1697: mtproto.Vector_BotCommand.datas:type_name -> mtproto.BotCommand
	907,  // 1698: mtproto.Vector_BotPreviewMedia.datas:type_name -> mtproto.BotPreviewMedia
	908,  // 1699: mtproto.Vector_PremiumGiftCodeOption.datas:type_name -> mtproto.PremiumGiftCodeOption
	909,  // 1700: mtproto.Vector_StarsTopupOption.datas:type_name -> mtproto.StarsTopupOption
	910,  // 1701: mtproto.Vector_StarsGiftOption.datas:type_name -> mtproto.StarsGiftOption
	911,  // 1702: mtproto.Vector_StarsGiveawayOption.datas:type_name -> mtproto.StarsGiveawayOption
	912,  // 1703: mtproto.Vector_LangPackString.datas:type_name -> mtproto.LangPackString
	913,  // 1704: mtproto.Vector_LangPackLanguage.datas:type_name -> mtproto.LangPackLanguage
	914,  // 1705: mtproto.Vector_Peer.datas:type_name -> mtproto.Peer
	789,  // 1706: mtproto.Vector_Bool.datas:type_name -> mtproto.Bool
	855,  // 1707: mtproto.Vector_DialogFilter.datas:type_name -> mtproto.DialogFilter
	915,  // 1708: mtproto.Vector_PredefinedUser.datas:type_name -> mtproto.PredefinedUser
	122,  // 1709: mtproto.RPCAccentColors.account_updateColor:input_type -> mtproto.TL_account_updateColor
	123,  // 1710: mtproto.RPCAccentColors.account_getDefaultBackgroundEmojis:input_type -> mtproto.TL_account_getDefaultBackgroundEmojis
	443,  // 1711: mtproto.RPCAccentColors.help_getPeerColors:input_type -> mtproto.TL_help_getPeerColors
	444,  // 1712: mtproto.RPCAccentColors.help_getPeerProfileColors:input_type -> mtproto.TL_help_getPeerProfileColors
	499,  // 1713: mtproto.RPCAccentColors.channels_updateColor:input_type -> mtproto.TL_channels_updateColor
	47,   // 1714: mtproto.RPCAccount.account_deleteAccount:input_type -> mtproto.TL_account_deleteAccount
	48,   // 1715: mtproto.RPCAccount.account_getAccountTTL:input_type -> mtproto.TL_account_getAccountTTL
	49,   // 1716: mtproto.RPCAccount.account_setAccountTTL:input_type -> mtproto.TL_account_setAccountTTL
	50,   // 1717: mtproto.RPCAccount.account_sendChangePhoneCode:input_type -> mtproto.TL_account_sendChangePhoneCode
	51,   // 1718: mtproto.RPCAccount.account_changePhone:input_type -> mtproto.TL_account_changePhone
	54,   // 1719: mtproto.RPCAccount.account_resetAuthorization:input_type -> mtproto.TL_account_resetAuthorization
	58,   // 1720: mtproto.RPCAccount.account_sendConfirmPhoneCode:input_type -> mtproto.TL_account_sendConfirmPhoneCode
	59,   // 1721: mtproto.RPCAccount.account_confirmPhone:input_type -> mtproto.TL_account_confirmPhone
	535,  // 1722: mtproto.RPCAffiliatePrograms.bots_updateStarRefProgram:input_type -> mtproto.TL_bots_updateStarRefProgram
	571,  // 1723: mtproto.RPCAffiliatePrograms.payments_getConnectedStarRefBots:input_type -> mtproto.TL_payments_getConnectedStarRefBots
	572,  // 1724: mtproto.RPCAffiliatePrograms.payments_getConnectedStarRefBot:input_type -> mtproto.TL_payments_getConnectedStarRefBot
	573,  // 1725: mtproto.RPCAffiliatePrograms.payments_getSuggestedStarRefBots:input_type -> mtproto.TL_payments_getSuggestedStarRefBots
	574,  // 1726: mtproto.RPCAffiliatePrograms.payments_connectStarRefBot:input_type -> mtproto.TL_payments_connectStarRefBot
	575,  // 1727: mtproto.RPCAffiliatePrograms.payments_editConnectedStarRefBot:input_type -> mtproto.TL_payments_editConnectedStarRefBot
	496,  // 1728: mtproto.RPCAntiSpam.channels_toggleAntiSpam:input_type -> mtproto.TL_channels_toggleAntiSpam
	497,  // 1729: mtproto.RPCAntiSpam.channels_reportAntiSpamFalsePositive:input_type -> mtproto.TL_channels_reportAntiSpamFalsePositive
	11,   // 1730: mtproto.RPCAuthorization.auth_sendCode:input_type -> mtproto.TL_auth_sendCode
	12,   // 1731: mtproto.RPCAuthorization.auth_signUp:input_type -> mtproto.TL_auth_signUp
	13,   // 1732: mtproto.RPCAuthorization.auth_signIn:input_type -> mtproto.TL_auth_signIn
	14,   // 1733: mtproto.RPCAuthorization.auth_logOut:input_type -> mtproto.TL_auth_logOut
	15,   // 1734: mtproto.RPCAuthorization.auth_resetAuthorizations:input_type -> mtproto.TL_auth_resetAuthorizations
	16,   // 1735: mtproto.RPCAuthorization.auth_exportAuthorization:input_type -> mtproto.TL_auth_exportAuthorization
	17,   // 1736: mtproto.RPCAuthorization.auth_importAuthorization:input_type -> mtproto.TL_auth_importAuthorization
	18,   // 1737: mtproto.RPCAuthorization.auth_bindTempAuthKey:input_type -> mtproto.TL_auth_bindTempAuthKey
	19,   // 1738: mtproto.RPCAuthorization.auth_importBotAuthorization:input_type -> mtproto.TL_auth_importBotAuthorization
	20,   // 1739: mtproto.RPCAuthorization.auth_checkPassword:input_type -> mtproto.TL_auth_checkPassword
	21,   // 1740: mtproto.RPCAuthorization.auth_requestPasswordRecovery:input_type -> mtproto.TL_auth_requestPasswordRecovery
	22,   // 1741: mtproto.RPCAuthorization.auth_recoverPassword:input_type -> mtproto.TL_auth_recoverPassword
	23,   // 1742: mtproto.RPCAuthorization.auth_resendCode:input_type -> mtproto.TL_auth_resendCode
	24,   // 1743: mtproto.RPCAuthorization.auth_cancelCode:input_type -> mtproto.TL_auth_cancelCode
	25,   // 1744: mtproto.RPCAuthorization.auth_dropTempAuthKeys:input_type -> mtproto.TL_auth_dropTempAuthKeys
	29,   // 1745: mtproto.RPCAuthorization.auth_checkRecoveryPassword:input_type -> mtproto.TL_auth_checkRecoveryPassword
	30,   // 1746: mtproto.RPCAuthorization.auth_importWebTokenAuthorization:input_type -> mtproto.TL_auth_importWebTokenAuthorization
	31,   // 1747: mtproto.RPCAuthorization.auth_requestFirebaseSms:input_type -> mtproto.TL_auth_requestFirebaseSms
	32,   // 1748: mtproto.RPCAuthorization.auth_resetLoginEmail:input_type -> mtproto.TL_auth_resetLoginEmail
	33,   // 1749: mtproto.RPCAuthorization.auth_reportMissingCode:input_type -> mtproto.TL_auth_reportMissingCode
	72,   // 1750: mtproto.RPCAuthorization.account_sendVerifyEmailCode:input_type -> mtproto.TL_account_sendVerifyEmailCode
	73,   // 1751: mtproto.RPCAuthorization.account_verifyEmail32DA4CF:input_type -> mtproto.TL_account_verifyEmail32DA4CF
	102,  // 1752: mtproto.RPCAuthorization.account_resetPassword:input_type -> mtproto.TL_account_resetPassword
	105,  // 1753: mtproto.RPCAuthorization.account_setAuthorizationTTL:input_type -> mtproto.TL_account_setAuthorizationTTL
	106,  // 1754: mtproto.RPCAuthorization.account_changeAuthorizationSettings:input_type -> mtproto.TL_account_changeAuthorizationSettings
	121,  // 1755: mtproto.RPCAuthorization.account_invalidateSignInCodes:input_type -> mtproto.TL_account_invalidateSignInCodes
	731,  // 1756: mtproto.RPCAuthorization.account_verifyEmailECBA39DB:input_type -> mtproto.TL_account_verifyEmailECBA39DB
	746,  // 1757: mtproto.RPCAuthorization.auth_toggleBan:input_type -> mtproto.TL_auth_toggleBan
	87,   // 1758: mtproto.RPCAutoDownload.account_getAutoDownloadSettings:input_type -> mtproto.TL_account_getAutoDownloadSettings
	88,   // 1759: mtproto.RPCAutoDownload.account_saveAutoDownloadSettings:input_type -> mtproto.TL_account_saveAutoDownloadSettings
	118,  // 1760: mtproto.RPCAutosave.account_getAutoSaveSettings:input_type -> mtproto.TL_account_getAutoSaveSettings
	119,  // 1761: mtproto.RPCAutosave.account_saveAutoSaveSettings:input_type -> mtproto.TL_account_saveAutoSaveSettings
	120,  // 1762: mtproto.RPCAutosave.account_deleteAutoSaveExceptions:input_type -> mtproto.TL_account_deleteAutoSaveExceptions
	503,  // 1763: mtproto.RPCBoosts.channels_setBoostsToUnblockRestrictions:input_type -> mtproto.TL_channels_setBoostsToUnblockRestrictions
	682,  // 1764: mtproto.RPCBoosts.premium_getBoostsList:input_type -> mtproto.TL_premium_getBoostsList
	683,  // 1765: mtproto.RPCBoosts.premium_getMyBoosts:input_type -> mtproto.TL_premium_getMyBoosts
	684,  // 1766: mtproto.RPCBoosts.premium_applyBoost:input_type -> mtproto.TL_premium_applyBoost
	685,  // 1767: mtproto.RPCBoosts.premium_getBoostsStatus:input_type -> mtproto.TL_premium_getBoostsStatus
	686,  // 1768: mtproto.RPCBoosts.premium_getUserBoosts:input_type -> mtproto.TL_premium_getUserBoosts
	714,  // 1769: mtproto.RPCBoosts.stories_getBoostsStatus:input_type -> mtproto.TL_stories_getBoostsStatus
	715,  // 1770: mtproto.RPCBoosts.stories_getBoostersList:input_type -> mtproto.TL_stories_getBoostersList
	716,  // 1771: mtproto.RPCBoosts.stories_canApplyBoost:input_type -> mtproto.TL_stories_canApplyBoost
	717,  // 1772: mtproto.RPCBoosts.stories_applyBoost:input_type -> mtproto.TL_stories_applyBoost
	515,  // 1773: mtproto.RPCBotAdminRight.bots_setBotBroadcastDefaultAdminRights:input_type -> mtproto.TL_bots_setBotBroadcastDefaultAdminRights
	516,  // 1774: mtproto.RPCBotAdminRight.bots_setBotGroupDefaultAdminRights:input_type -> mtproto.TL_bots_setBotGroupDefaultAdminRights
	338,  // 1775: mtproto.RPCBotMenu.messages_getAttachMenuBots:input_type -> mtproto.TL_messages_getAttachMenuBots
	339,  // 1776: mtproto.RPCBotMenu.messages_getAttachMenuBot:input_type -> mtproto.TL_messages_getAttachMenuBot
	340,  // 1777: mtproto.RPCBotMenu.messages_toggleBotInAttachMenu:input_type -> mtproto.TL_messages_toggleBotInAttachMenu
	513,  // 1778: mtproto.RPCBotMenuButton.bots_setBotMenuButton:input_type -> mtproto.TL_bots_setBotMenuButton
	514,  // 1779: mtproto.RPCBotMenuButton.bots_getBotMenuButton:input_type -> mtproto.TL_bots_getBotMenuButton
	510,  // 1780: mtproto.RPCBots.bots_setBotCommands:input_type -> mtproto.TL_bots_setBotCommands
	511,  // 1781: mtproto.RPCBots.bots_resetBotCommands:input_type -> mtproto.TL_bots_resetBotCommands
	512,  // 1782: mtproto.RPCBots.bots_getBotCommands:input_type -> mtproto.TL_bots_getBotCommands
	517,  // 1783: mtproto.RPCBots.bots_setBotInfo:input_type -> mtproto.TL_bots_setBotInfo
	518,  // 1784: mtproto.RPCBots.bots_getBotInfoDCD914FD:input_type -> mtproto.TL_bots_getBotInfoDCD914FD
	534,  // 1785: mtproto.RPCBots.bots_getAdminedBots:input_type -> mtproto.TL_bots_getAdminedBots
	536,  // 1786: mtproto.RPCBots.bots_setCustomVerification:input_type -> mtproto.TL_bots_setCustomVerification
	537,  // 1787: mtproto.RPCBots.bots_getBotRecommendations:input_type -> mtproto.TL_bots_getBotRecommendations
	726,  // 1788: mtproto.RPCBots.bots_getBotInfo75EC12E6:input_type -> mtproto.TL_bots_getBotInfo75EC12E6
	137,  // 1789: mtproto.RPCBusinessChatLinks.account_createBusinessChatLink:input_type -> mtproto.TL_account_createBusinessChatLink
	138,  // 1790: mtproto.RPCBusinessChatLinks.account_editBusinessChatLink:input_type -> mtproto.TL_account_editBusinessChatLink
	139,  // 1791: mtproto.RPCBusinessChatLinks.account_deleteBusinessChatLink:input_type -> mtproto.TL_account_deleteBusinessChatLink
	140,  // 1792: mtproto.RPCBusinessChatLinks.account_getBusinessChatLinks:input_type -> mtproto.TL_account_getBusinessChatLinks
	141,  // 1793: mtproto.RPCBusinessChatLinks.account_resolveBusinessChatLink:input_type -> mtproto.TL_account_resolveBusinessChatLink
	130,  // 1794: mtproto.RPCBusinessConnectedBots.account_updateConnectedBot:input_type -> mtproto.TL_account_updateConnectedBot
	131,  // 1795: mtproto.RPCBusinessConnectedBots.account_getConnectedBots:input_type -> mtproto.TL_account_getConnectedBots
	132,  // 1796: mtproto.RPCBusinessConnectedBots.account_getBotBusinessConnection:input_type -> mtproto.TL_account_getBotBusinessConnection
	134,  // 1797: mtproto.RPCBusinessConnectedBots.account_toggleConnectedBotPaused:input_type -> mtproto.TL_account_toggleConnectedBotPaused
	135,  // 1798: mtproto.RPCBusinessConnectedBots.account_disablePeerConnectedBot:input_type -> mtproto.TL_account_disablePeerConnectedBot
	128,  // 1799: mtproto.RPCBusinessGreeting.account_updateBusinessGreetingMessage:input_type -> mtproto.TL_account_updateBusinessGreetingMessage
	129,  // 1800: mtproto.RPCBusinessGreeting.account_updateBusinessAwayMessage:input_type -> mtproto.TL_account_updateBusinessAwayMessage
	133,  // 1801: mtproto.RPCBusinessIntro.account_updateBusinessIntro:input_type -> mtproto.TL_account_updateBusinessIntro
	127,  // 1802: mtproto.RPCBusinessLocation.account_updateBusinessLocation:input_type -> mtproto.TL_account_updateBusinessLocation
	126,  // 1803: mtproto.RPCBusinessOpeningHours.account_updateBusinessWorkHours:input_type -> mtproto.TL_account_updateBusinessWorkHours
	378,  // 1804: mtproto.RPCBusinessQuickReply.messages_getQuickReplies:input_type -> mtproto.TL_messages_getQuickReplies
	379,  // 1805: mtproto.RPCBusinessQuickReply.messages_reorderQuickReplies:input_type -> mtproto.TL_messages_reorderQuickReplies
	380,  // 1806: mtproto.RPCBusinessQuickReply.messages_checkQuickReplyShortcut:input_type -> mtproto.TL_messages_checkQuickReplyShortcut
	381,  // 1807: mtproto.RPCBusinessQuickReply.messages_editQuickReplyShortcut:input_type -> mtproto.TL_messages_editQuickReplyShortcut
	382,  // 1808: mtproto.RPCBusinessQuickReply.messages_deleteQuickReplyShortcut:input_type -> mtproto.TL_messages_deleteQuickReplyShortcut
	383,  // 1809: mtproto.RPCBusinessQuickReply.messages_getQuickReplyMessages:input_type -> mtproto.TL_messages_getQuickReplyMessages
	384,  // 1810: mtproto.RPCBusinessQuickReply.messages_sendQuickReplyMessages:input_type -> mtproto.TL_messages_sendQuickReplyMessages
	385,  // 1811: mtproto.RPCBusinessQuickReply.messages_deleteQuickReplyMessages:input_type -> mtproto.TL_messages_deleteQuickReplyMessages
	642,  // 1812: mtproto.RPCChannelAdRevenue.stats_getBroadcastRevenueStats:input_type -> mtproto.TL_stats_getBroadcastRevenueStats
	643,  // 1813: mtproto.RPCChannelAdRevenue.stats_getBroadcastRevenueWithdrawalUrl:input_type -> mtproto.TL_stats_getBroadcastRevenueWithdrawalUrl
	644,  // 1814: mtproto.RPCChannelAdRevenue.stats_getBroadcastRevenueTransactions:input_type -> mtproto.TL_stats_getBroadcastRevenueTransactions
	501,  // 1815: mtproto.RPCChannelRecommendations.channels_getChannelRecommendations:input_type -> mtproto.TL_channels_getChannelRecommendations
	446,  // 1816: mtproto.RPCChannels.channels_readHistory:input_type -> mtproto.TL_channels_readHistory
	447,  // 1817: mtproto.RPCChannels.channels_deleteMessages:input_type -> mtproto.TL_channels_deleteMessages
	449,  // 1818: mtproto.RPCChannels.channels_getMessages:input_type -> mtproto.TL_channels_getMessages
	450,  // 1819: mtproto.RPCChannels.channels_getParticipants:input_type -> mtproto.TL_channels_getParticipants
	451,  // 1820: mtproto.RPCChannels.channels_getParticipant:input_type -> mtproto.TL_channels_getParticipant
	452,  // 1821: mtproto.RPCChannels.channels_getChannels:input_type -> mtproto.TL_channels_getChannels
	453,  // 1822: mtproto.RPCChannels.channels_getFullChannel:input_type -> mtproto.TL_channels_getFullChannel
	454,  // 1823: mtproto.RPCChannels.channels_createChannel:input_type -> mtproto.TL_channels_createChannel
	455,  // 1824: mtproto.RPCChannels.channels_editAdmin:input_type -> mtproto.TL_channels_editAdmin
	456,  // 1825: mtproto.RPCChannels.channels_editTitle:input_type -> mtproto.TL_channels_editTitle
	457,  // 1826: mtproto.RPCChannels.channels_editPhoto:input_type -> mtproto.TL_channels_editPhoto
	460,  // 1827: mtproto.RPCChannels.channels_joinChannel:input_type -> mtproto.TL_channels_joinChannel
	461,  // 1828: mtproto.RPCChannels.channels_leaveChannel:input_type -> mtproto.TL_channels_leaveChannel
	462,  // 1829: mtproto.RPCChannels.channels_inviteToChannelC9E33D54:input_type -> mtproto.TL_channels_inviteToChannelC9E33D54
	463,  // 1830: mtproto.RPCChannels.channels_deleteChannel:input_type -> mtproto.TL_channels_deleteChannel
	464,  // 1831: mtproto.RPCChannels.channels_exportMessageLink:input_type -> mtproto.TL_channels_exportMessageLink
	465,  // 1832: mtproto.RPCChannels.channels_toggleSignatures:input_type -> mtproto.TL_channels_toggleSignatures
	466,  // 1833: mtproto.RPCChannels.channels_getAdminedPublicChannels:input_type -> mtproto.TL_channels_getAdminedPublicChannels
	467,  // 1834: mtproto.RPCChannels.channels_editBanned:input_type -> mtproto.TL_channels_editBanned
	468,  // 1835: mtproto.RPCChannels.channels_getAdminLog:input_type -> mtproto.TL_channels_getAdminLog
	469,  // 1836: mtproto.RPCChannels.channels_setStickers:input_type -> mtproto.TL_channels_setStickers
	470,  // 1837: mtproto.RPCChannels.channels_readMessageContents:input_type -> mtproto.TL_channels_readMessageContents
	471,  // 1838: mtproto.RPCChannels.channels_deleteHistory9BAA9647:input_type -> mtproto.TL_channels_deleteHistory9BAA9647
	472,  // 1839: mtproto.RPCChannels.channels_togglePreHistoryHidden:input_type -> mtproto.TL_channels_togglePreHistoryHidden
	474,  // 1840: mtproto.RPCChannels.channels_getGroupsForDiscussion:input_type -> mtproto.TL_channels_getGroupsForDiscussion
	475,  // 1841: mtproto.RPCChannels.channels_setDiscussionGroup:input_type -> mtproto.TL_channels_setDiscussionGroup
	476,  // 1842: mtproto.RPCChannels.channels_editCreator:input_type -> mtproto.TL_channels_editCreator
	477,  // 1843: mtproto.RPCChannels.channels_editLocation:input_type -> mtproto.TL_channels_editLocation
	478,  // 1844: mtproto.RPCChannels.channels_toggleSlowMode:input_type -> mtproto.TL_channels_toggleSlowMode
	479,  // 1845: mtproto.RPCChannels.channels_getInactiveChannels:input_type -> mtproto.TL_channels_getInactiveChannels
	482,  // 1846: mtproto.RPCChannels.channels_deleteParticipantHistory:input_type -> mtproto.TL_channels_deleteParticipantHistory
	498,  // 1847: mtproto.RPCChannels.channels_toggleParticipantsHidden:input_type -> mtproto.TL_channels_toggleParticipantsHidden
	710,  // 1848: mtproto.RPCChannels.channels_inviteToChannel199F3A6C:input_type -> mtproto.TL_channels_inviteToChannel199F3A6C
	735,  // 1849: mtproto.RPCChannels.channels_deleteHistoryAF369D42:input_type -> mtproto.TL_channels_deleteHistoryAF369D42
	217,  // 1850: mtproto.RPCChatInvites.messages_exportChatInvite:input_type -> mtproto.TL_messages_exportChatInvite
	218,  // 1851: mtproto.RPCChatInvites.messages_checkChatInvite:input_type -> mtproto.TL_messages_checkChatInvite
	219,  // 1852: mtproto.RPCChatInvites.messages_importChatInvite:input_type -> mtproto.TL_messages_importChatInvite
	311,  // 1853: mtproto.RPCChatInvites.messages_getExportedChatInvites:input_type -> mtproto.TL_messages_getExportedChatInvites
	312,  // 1854: mtproto.RPCChatInvites.messages_getExportedChatInvite:input_type -> mtproto.TL_messages_getExportedChatInvite
	313,  // 1855: mtproto.RPCChatInvites.messages_editExportedChatInvite:input_type -> mtproto.TL_messages_editExportedChatInvite
	314,  // 1856: mtproto.RPCChatInvites.messages_deleteRevokedExportedChatInvites:input_type -> mtproto.TL_messages_deleteRevokedExportedChatInvites
	315,  // 1857: mtproto.RPCChatInvites.messages_deleteExportedChatInvite:input_type -> mtproto.TL_messages_deleteExportedChatInvite
	316,  // 1858: mtproto.RPCChatInvites.messages_getAdminsWithInvites:input_type -> mtproto.TL_messages_getAdminsWithInvites
	317,  // 1859: mtproto.RPCChatInvites.messages_getChatInviteImporters:input_type -> mtproto.TL_messages_getChatInviteImporters
	324,  // 1860: mtproto.RPCChatInvites.messages_hideChatJoinRequest:input_type -> mtproto.TL_messages_hideChatJoinRequest
	325,  // 1861: mtproto.RPCChatInvites.messages_hideAllChatJoinRequests:input_type -> mtproto.TL_messages_hideAllChatJoinRequests
	483,  // 1862: mtproto.RPCChatInvites.channels_toggleJoinToSend:input_type -> mtproto.TL_channels_toggleJoinToSend
	484,  // 1863: mtproto.RPCChatInvites.channels_toggleJoinRequest:input_type -> mtproto.TL_channels_toggleJoinRequest
	195,  // 1864: mtproto.RPCChats.messages_getChats:input_type -> mtproto.TL_messages_getChats
	196,  // 1865: mtproto.RPCChats.messages_getFullChat:input_type -> mtproto.TL_messages_getFullChat
	197,  // 1866: mtproto.RPCChats.messages_editChatTitle:input_type -> mtproto.TL_messages_editChatTitle
	198,  // 1867: mtproto.RPCChats.messages_editChatPhoto:input_type -> mtproto.TL_messages_editChatPhoto
	199,  // 1868: mtproto.RPCChats.messages_addChatUserCBC6D107:input_type -> mtproto.TL_messages_addChatUserCBC6D107
	200,  // 1869: mtproto.RPCChats.messages_deleteChatUser:input_type -> mtproto.TL_messages_deleteChatUser
	201,  // 1870: mtproto.RPCChats.messages_createChat92CEDDD4:input_type -> mtproto.TL_messages_createChat92CEDDD4
	225,  // 1871: mtproto.RPCChats.messages_editChatAdmin:input_type -> mtproto.TL_messages_editChatAdmin
	226,  // 1872: mtproto.RPCChats.messages_migrateChat:input_type -> mtproto.TL_messages_migrateChat
	255,  // 1873: mtproto.RPCChats.messages_getCommonChats:input_type -> mtproto.TL_messages_getCommonChats
	280,  // 1874: mtproto.RPCChats.messages_editChatAbout:input_type -> mtproto.TL_messages_editChatAbout
	281,  // 1875: mtproto.RPCChats.messages_editChatDefaultBannedRights:input_type -> mtproto.TL_messages_editChatDefaultBannedRights
	305,  // 1876: mtproto.RPCChats.messages_deleteChat:input_type -> mtproto.TL_messages_deleteChat
	321,  // 1877: mtproto.RPCChats.messages_getMessageReadParticipants31C1C44F:input_type -> mtproto.TL_messages_getMessageReadParticipants31C1C44F
	480,  // 1878: mtproto.RPCChats.channels_convertToGigagroup:input_type -> mtproto.TL_channels_convertToGigagroup
	504,  // 1879: mtproto.RPCChats.channels_setEmojiStickers:input_type -> mtproto.TL_channels_setEmojiStickers
	708,  // 1880: mtproto.RPCChats.messages_addChatUserF24753E3:input_type -> mtproto.TL_messages_addChatUserF24753E3
	709,  // 1881: mtproto.RPCChats.messages_createChat34A818:input_type -> mtproto.TL_messages_createChat34A818
	725,  // 1882: mtproto.RPCChats.messages_getAllChats:input_type -> mtproto.TL_messages_getAllChats
	728,  // 1883: mtproto.RPCChats.messages_getMessageReadParticipants2C6F97B7:input_type -> mtproto.TL_messages_getMessageReadParticipants2C6F97B7
	730,  // 1884: mtproto.RPCChats.messages_createChat9CB126E:input_type -> mtproto.TL_messages_createChat9CB126E
	421,  // 1885: mtproto.RPCConfiguration.help_getConfig:input_type -> mtproto.TL_help_getConfig
	422,  // 1886: mtproto.RPCConfiguration.help_getNearestDc:input_type -> mtproto.TL_help_getNearestDc
	423,  // 1887: mtproto.RPCConfiguration.help_getAppUpdate:input_type -> mtproto.TL_help_getAppUpdate
	424,  // 1888: mtproto.RPCConfiguration.help_getInviteText:input_type -> mtproto.TL_help_getInviteText
	425,  // 1889: mtproto.RPCConfiguration.help_getSupport:input_type -> mtproto.TL_help_getSupport
	432,  // 1890: mtproto.RPCConfiguration.help_getAppConfig61E3F854:input_type -> mtproto.TL_help_getAppConfig61E3F854
	435,  // 1891: mtproto.RPCConfiguration.help_getSupportName:input_type -> mtproto.TL_help_getSupportName
	440,  // 1892: mtproto.RPCConfiguration.help_dismissSuggestion:input_type -> mtproto.TL_help_dismissSuggestion
	441,  // 1893: mtproto.RPCConfiguration.help_getCountriesList:input_type -> mtproto.TL_help_getCountriesList
	712,  // 1894: mtproto.RPCConfiguration.help_getAppChangelog:input_type -> mtproto.TL_help_getAppChangelog
	729,  // 1895: mtproto.RPCConfiguration.help_getAppConfig98914110:input_type -> mtproto.TL_help_getAppConfig98914110
	79,   // 1896: mtproto.RPCContacts.account_getContactSignUpNotification:input_type -> mtproto.TL_account_getContactSignUpNotification
	80,   // 1897: mtproto.RPCContacts.account_setContactSignUpNotification:input_type -> mtproto.TL_account_setContactSignUpNotification
	153,  // 1898: mtproto.RPCContacts.contacts_getContactIDs:input_type -> mtproto.TL_contacts_getContactIDs
	154,  // 1899: mtproto.RPCContacts.contacts_getStatuses:input_type -> mtproto.TL_contacts_getStatuses
	155,  // 1900: mtproto.RPCContacts.contacts_getContacts:input_type -> mtproto.TL_contacts_getContacts
	156,  // 1901: mtproto.RPCContacts.contacts_importContacts:input_type -> mtproto.TL_contacts_importContacts
	157,  // 1902: mtproto.RPCContacts.contacts_deleteContacts:input_type -> mtproto.TL_contacts_deleteContacts
	158,  // 1903: mtproto.RPCContacts.contacts_deleteByPhones:input_type -> mtproto.TL_contacts_deleteByPhones
	159,  // 1904: mtproto.RPCContacts.contacts_block:input_type -> mtproto.TL_contacts_block
	160,  // 1905: mtproto.RPCContacts.contacts_unblock:input_type -> mtproto.TL_contacts_unblock
	161,  // 1906: mtproto.RPCContacts.contacts_getBlocked:input_type -> mtproto.TL_contacts_getBlocked
	162,  // 1907: mtproto.RPCContacts.contacts_search:input_type -> mtproto.TL_contacts_search
	164,  // 1908: mtproto.RPCContacts.contacts_getTopPeers:input_type -> mtproto.TL_contacts_getTopPeers
	165,  // 1909: mtproto.RPCContacts.contacts_resetTopPeerRating:input_type -> mtproto.TL_contacts_resetTopPeerRating
	166,  // 1910: mtproto.RPCContacts.contacts_resetSaved:input_type -> mtproto.TL_contacts_resetSaved
	167,  // 1911: mtproto.RPCContacts.contacts_getSaved:input_type -> mtproto.TL_contacts_getSaved
	168,  // 1912: mtproto.RPCContacts.contacts_toggleTopPeers:input_type -> mtproto.TL_contacts_toggleTopPeers
	169,  // 1913: mtproto.RPCContacts.contacts_addContact:input_type -> mtproto.TL_contacts_addContact
	170,  // 1914: mtproto.RPCContacts.contacts_acceptContact:input_type -> mtproto.TL_contacts_acceptContact
	171,  // 1915: mtproto.RPCContacts.contacts_getLocated:input_type -> mtproto.TL_contacts_getLocated
	176,  // 1916: mtproto.RPCContacts.contacts_editCloseFriends:input_type -> mtproto.TL_contacts_editCloseFriends
	177,  // 1917: mtproto.RPCContacts.contacts_setBlocked:input_type -> mtproto.TL_contacts_setBlocked
	116,  // 1918: mtproto.RPCCustomEmojis.account_getDefaultProfilePhotoEmojis:input_type -> mtproto.TL_account_getDefaultProfilePhotoEmojis
	117,  // 1919: mtproto.RPCCustomEmojis.account_getDefaultGroupPhotoEmojis:input_type -> mtproto.TL_account_getDefaultGroupPhotoEmojis
	348,  // 1920: mtproto.RPCCustomEmojis.messages_getCustomEmojiDocuments:input_type -> mtproto.TL_messages_getCustomEmojiDocuments
	349,  // 1921: mtproto.RPCCustomEmojis.messages_getEmojiStickers:input_type -> mtproto.TL_messages_getEmojiStickers
	350,  // 1922: mtproto.RPCCustomEmojis.messages_getFeaturedEmojiStickers:input_type -> mtproto.TL_messages_getFeaturedEmojiStickers
	362,  // 1923: mtproto.RPCCustomEmojis.messages_searchCustomEmoji:input_type -> mtproto.TL_messages_searchCustomEmoji
	223,  // 1924: mtproto.RPCDeepLinks.messages_startBot:input_type -> mtproto.TL_messages_startBot
	428,  // 1925: mtproto.RPCDeepLinks.help_getRecentMeUrls:input_type -> mtproto.TL_help_getRecentMeUrls
	431,  // 1926: mtproto.RPCDeepLinks.help_getDeepLinkInfo:input_type -> mtproto.TL_help_getDeepLinkInfo
	181,  // 1927: mtproto.RPCDialogs.messages_getDialogs:input_type -> mtproto.TL_messages_getDialogs
	188,  // 1928: mtproto.RPCDialogs.messages_setTyping:input_type -> mtproto.TL_messages_setTyping
	193,  // 1929: mtproto.RPCDialogs.messages_getPeerSettings:input_type -> mtproto.TL_messages_getPeerSettings
	240,  // 1930: mtproto.RPCDialogs.messages_getPeerDialogs:input_type -> mtproto.TL_messages_getPeerDialogs
	257,  // 1931: mtproto.RPCDialogs.messages_toggleDialogPin:input_type -> mtproto.TL_messages_toggleDialogPin
	258,  // 1932: mtproto.RPCDialogs.messages_reorderPinnedDialogs:input_type -> mtproto.TL_messages_reorderPinnedDialogs
	259,  // 1933: mtproto.RPCDialogs.messages_getPinnedDialogs:input_type -> mtproto.TL_messages_getPinnedDialogs
	263,  // 1934: mtproto.RPCDialogs.messages_sendScreenshotNotification:input_type -> mtproto.TL_messages_sendScreenshotNotification
	273,  // 1935: mtproto.RPCDialogs.messages_markDialogUnread:input_type -> mtproto.TL_messages_markDialogUnread
	274,  // 1936: mtproto.RPCDialogs.messages_getDialogUnreadMarks:input_type -> mtproto.TL_messages_getDialogUnreadMarks
	279,  // 1937: mtproto.RPCDialogs.messages_getOnlines:input_type -> mtproto.TL_messages_getOnlines
	289,  // 1938: mtproto.RPCDialogs.messages_hidePeerSettingsBar:input_type -> mtproto.TL_messages_hidePeerSettingsBar
	318,  // 1939: mtproto.RPCDialogs.messages_setHistoryTTL:input_type -> mtproto.TL_messages_setHistoryTTL
	241,  // 1940: mtproto.RPCDrafts.messages_saveDraft:input_type -> mtproto.TL_messages_saveDraft
	242,  // 1941: mtproto.RPCDrafts.messages_getAllDrafts:input_type -> mtproto.TL_messages_getAllDrafts
	275,  // 1942: mtproto.RPCDrafts.messages_clearAllDrafts:input_type -> mtproto.TL_messages_clearAllDrafts
	282,  // 1943: mtproto.RPCEmoji.messages_getEmojiKeywords:input_type -> mtproto.TL_messages_getEmojiKeywords
	283,  // 1944: mtproto.RPCEmoji.messages_getEmojiKeywordsDifference:input_type -> mtproto.TL_messages_getEmojiKeywordsDifference
	284,  // 1945: mtproto.RPCEmoji.messages_getEmojiKeywordsLanguages:input_type -> mtproto.TL_messages_getEmojiKeywordsLanguages
	285,  // 1946: mtproto.RPCEmoji.messages_getEmojiURL:input_type -> mtproto.TL_messages_getEmojiURL
	359,  // 1947: mtproto.RPCEmojiCategories.messages_getEmojiGroups:input_type -> mtproto.TL_messages_getEmojiGroups
	360,  // 1948: mtproto.RPCEmojiCategories.messages_getEmojiStatusGroups:input_type -> mtproto.TL_messages_getEmojiStatusGroups
	361,  // 1949: mtproto.RPCEmojiCategories.messages_getEmojiProfilePhotoGroups:input_type -> mtproto.TL_messages_getEmojiProfilePhotoGroups
	388,  // 1950: mtproto.RPCEmojiCategories.messages_getEmojiStickerGroups:input_type -> mtproto.TL_messages_getEmojiStickerGroups
	110,  // 1951: mtproto.RPCEmojiStatus.account_updateEmojiStatus:input_type -> mtproto.TL_account_updateEmojiStatus
	111,  // 1952: mtproto.RPCEmojiStatus.account_getDefaultEmojiStatuses:input_type -> mtproto.TL_account_getDefaultEmojiStatuses
	112,  // 1953: mtproto.RPCEmojiStatus.account_getRecentEmojiStatuses:input_type -> mtproto.TL_account_getRecentEmojiStatuses
	113,  // 1954: mtproto.RPCEmojiStatus.account_clearRecentEmojiStatuses:input_type -> mtproto.TL_account_clearRecentEmojiStatuses
	124,  // 1955: mtproto.RPCEmojiStatus.account_getChannelDefaultEmojiStatuses:input_type -> mtproto.TL_account_getChannelDefaultEmojiStatuses
	125,  // 1956: mtproto.RPCEmojiStatus.account_getChannelRestrictedStatusEmojis:input_type -> mtproto.TL_account_getChannelRestrictedStatusEmojis
	146,  // 1957: mtproto.RPCEmojiStatus.account_getCollectibleEmojiStatuses:input_type -> mtproto.TL_account_getCollectibleEmojiStatuses
	502,  // 1958: mtproto.RPCEmojiStatus.channels_updateEmojiStatus:input_type -> mtproto.TL_channels_updateEmojiStatus
	531,  // 1959: mtproto.RPCEmojiStatus.bots_updateUserEmojiStatus:input_type -> mtproto.TL_bots_updateUserEmojiStatus
	532,  // 1960: mtproto.RPCEmojiStatus.bots_toggleUserEmojiStatusPermission:input_type -> mtproto.TL_bots_toggleUserEmojiStatusPermission
	390,  // 1961: mtproto.RPCFactChecks.messages_editFactCheck:input_type -> mtproto.TL_messages_editFactCheck
	391,  // 1962: mtproto.RPCFactChecks.messages_deleteFactCheck:input_type -> mtproto.TL_messages_deleteFactCheck
	392,  // 1963: mtproto.RPCFactChecks.messages_getFactCheck:input_type -> mtproto.TL_messages_getFactCheck
	229,  // 1964: mtproto.RPCFiles.messages_getDocumentByHash:input_type -> mtproto.TL_messages_getDocumentByHash
	262,  // 1965: mtproto.RPCFiles.messages_uploadMedia:input_type -> mtproto.TL_messages_uploadMedia
	270,  // 1966: mtproto.RPCFiles.messages_uploadEncryptedFile:input_type -> mtproto.TL_messages_uploadEncryptedFile
	413,  // 1967: mtproto.RPCFiles.upload_saveFilePart:input_type -> mtproto.TL_upload_saveFilePart
	414,  // 1968: mtproto.RPCFiles.upload_getFile:input_type -> mtproto.TL_upload_getFile
	415,  // 1969: mtproto.RPCFiles.upload_saveBigFilePart:input_type -> mtproto.TL_upload_saveBigFilePart
	416,  // 1970: mtproto.RPCFiles.upload_getWebFile:input_type -> mtproto.TL_upload_getWebFile
	417,  // 1971: mtproto.RPCFiles.upload_getCdnFile:input_type -> mtproto.TL_upload_getCdnFile
	418,  // 1972: mtproto.RPCFiles.upload_reuploadCdnFile:input_type -> mtproto.TL_upload_reuploadCdnFile
	419,  // 1973: mtproto.RPCFiles.upload_getCdnFileHashes:input_type -> mtproto.TL_upload_getCdnFileHashes
	420,  // 1974: mtproto.RPCFiles.upload_getFileHashes:input_type -> mtproto.TL_upload_getFileHashes
	427,  // 1975: mtproto.RPCFiles.help_getCdnConfig:input_type -> mtproto.TL_help_getCdnConfig
	386,  // 1976: mtproto.RPCFolderTags.messages_toggleDialogFilterTags:input_type -> mtproto.TL_messages_toggleDialogFilterTags
	296,  // 1977: mtproto.RPCFolders.messages_getDialogFiltersEFD48C89:input_type -> mtproto.TL_messages_getDialogFiltersEFD48C89
	297,  // 1978: mtproto.RPCFolders.messages_getSuggestedDialogFilters:input_type -> mtproto.TL_messages_getSuggestedDialogFilters
	298,  // 1979: mtproto.RPCFolders.messages_updateDialogFilter:input_type -> mtproto.TL_messages_updateDialogFilter
	299,  // 1980: mtproto.RPCFolders.messages_updateDialogFiltersOrder:input_type -> mtproto.TL_messages_updateDialogFiltersOrder
	634,  // 1981: mtproto.RPCFolders.folders_editPeerFolders:input_type -> mtproto.TL_folders_editPeerFolders
	645,  // 1982: mtproto.RPCFolders.chatlists_exportChatlistInvite:input_type -> mtproto.TL_chatlists_exportChatlistInvite
	646,  // 1983: mtproto.RPCFolders.chatlists_deleteExportedInvite:input_type -> mtproto.TL_chatlists_deleteExportedInvite
	647,  // 1984: mtproto.RPCFolders.chatlists_editExportedInvite:input_type -> mtproto.TL_chatlists_editExportedInvite
	648,  // 1985: mtproto.RPCFolders.chatlists_getExportedInvites:input_type -> mtproto.TL_chatlists_getExportedInvites
	649,  // 1986: mtproto.RPCFolders.chatlists_checkChatlistInvite:input_type -> mtproto.TL_chatlists_checkChatlistInvite
	650,  // 1987: mtproto.RPCFolders.chatlists_joinChatlistInvite:input_type -> mtproto.TL_chatlists_joinChatlistInvite
	651,  // 1988: mtproto.RPCFolders.chatlists_getChatlistUpdates:input_type -> mtproto.TL_chatlists_getChatlistUpdates
	652,  // 1989: mtproto.RPCFolders.chatlists_joinChatlistUpdates:input_type -> mtproto.TL_chatlists_joinChatlistUpdates
	653,  // 1990: mtproto.RPCFolders.chatlists_hideChatlistUpdates:input_type -> mtproto.TL_chatlists_hideChatlistUpdates
	654,  // 1991: mtproto.RPCFolders.chatlists_getLeaveChatlistSuggestions:input_type -> mtproto.TL_chatlists_getLeaveChatlistSuggestions
	655,  // 1992: mtproto.RPCFolders.chatlists_leaveChatlist:input_type -> mtproto.TL_chatlists_leaveChatlist
	711,  // 1993: mtproto.RPCFolders.messages_getDialogFiltersF19ED96D:input_type -> mtproto.TL_messages_getDialogFiltersF19ED96D
	727,  // 1994: mtproto.RPCFolders.folders_deleteFolder:input_type -> mtproto.TL_folders_deleteFolder
	488,  // 1995: mtproto.RPCForums.channels_toggleForum:input_type -> mtproto.TL_channels_toggleForum
	489,  // 1996: mtproto.RPCForums.channels_createForumTopic:input_type -> mtproto.TL_channels_createForumTopic
	490,  // 1997: mtproto.RPCForums.channels_getForumTopics:input_type -> mtproto.TL_channels_getForumTopics
	491,  // 1998: mtproto.RPCForums.channels_getForumTopicsByID:input_type -> mtproto.TL_channels_getForumTopicsByID
	492,  // 1999: mtproto.RPCForums.channels_editForumTopic:input_type -> mtproto.TL_channels_editForumTopic
	493,  // 2000: mtproto.RPCForums.channels_updatePinnedForumTopic:input_type -> mtproto.TL_channels_updatePinnedForumTopic
	494,  // 2001: mtproto.RPCForums.channels_deleteTopicHistory:input_type -> mtproto.TL_channels_deleteTopicHistory
	495,  // 2002: mtproto.RPCForums.channels_reorderPinnedForumTopics:input_type -> mtproto.TL_channels_reorderPinnedForumTopics
	500,  // 2003: mtproto.RPCForums.channels_toggleViewForumAsMessages:input_type -> mtproto.TL_channels_toggleViewForumAsMessages
	114,  // 2004: mtproto.RPCFragment.account_reorderUsernames:input_type -> mtproto.TL_account_reorderUsernames
	115,  // 2005: mtproto.RPCFragment.account_toggleUsername:input_type -> mtproto.TL_account_toggleUsername
	485,  // 2006: mtproto.RPCFragment.channels_reorderUsernames:input_type -> mtproto.TL_channels_reorderUsernames
	486,  // 2007: mtproto.RPCFragment.channels_toggleUsername:input_type -> mtproto.TL_channels_toggleUsername
	487,  // 2008: mtproto.RPCFragment.channels_deactivateAllUsernames:input_type -> mtproto.TL_channels_deactivateAllUsernames
	519,  // 2009: mtproto.RPCFragment.bots_reorderUsernames:input_type -> mtproto.TL_bots_reorderUsernames
	520,  // 2010: mtproto.RPCFragment.bots_toggleUsername:input_type -> mtproto.TL_bots_toggleUsername
	694,  // 2011: mtproto.RPCFragmentCollectibles.fragment_getCollectibleInfo:input_type -> mtproto.TL_fragment_getCollectibleInfo
	251,  // 2012: mtproto.RPCGames.messages_setGameScore:input_type -> mtproto.TL_messages_setGameScore
	252,  // 2013: mtproto.RPCGames.messages_setInlineGameScore:input_type -> mtproto.TL_messages_setInlineGameScore
	253,  // 2014: mtproto.RPCGames.messages_getGameHighScores:input_type -> mtproto.TL_messages_getGameHighScores
	254,  // 2015: mtproto.RPCGames.messages_getInlineGameHighScores:input_type -> mtproto.TL_messages_getInlineGameHighScores
	230,  // 2016: mtproto.RPCGifs.messages_getSavedGifs:input_type -> mtproto.TL_messages_getSavedGifs
	231,  // 2017: mtproto.RPCGifs.messages_saveGif:input_type -> mtproto.TL_messages_saveGif
	549,  // 2018: mtproto.RPCGiftCodes.payments_checkGiftCode:input_type -> mtproto.TL_payments_checkGiftCode
	550,  // 2019: mtproto.RPCGiftCodes.payments_applyGiftCode:input_type -> mtproto.TL_payments_applyGiftCode
	567,  // 2020: mtproto.RPCGifts.payments_getStarGifts:input_type -> mtproto.TL_payments_getStarGifts
	568,  // 2021: mtproto.RPCGifts.payments_saveStarGift:input_type -> mtproto.TL_payments_saveStarGift
	569,  // 2022: mtproto.RPCGifts.payments_convertStarGift:input_type -> mtproto.TL_payments_convertStarGift
	576,  // 2023: mtproto.RPCGifts.payments_getStarGiftUpgradePreview:input_type -> mtproto.TL_payments_getStarGiftUpgradePreview
	577,  // 2024: mtproto.RPCGifts.payments_upgradeStarGift:input_type -> mtproto.TL_payments_upgradeStarGift
	578,  // 2025: mtproto.RPCGifts.payments_transferStarGift:input_type -> mtproto.TL_payments_transferStarGift
	579,  // 2026: mtproto.RPCGifts.payments_getUniqueStarGift:input_type -> mtproto.TL_payments_getUniqueStarGift
	580,  // 2027: mtproto.RPCGifts.payments_getSavedStarGifts:input_type -> mtproto.TL_payments_getSavedStarGifts
	581,  // 2028: mtproto.RPCGifts.payments_getSavedStarGift:input_type -> mtproto.TL_payments_getSavedStarGift
	582,  // 2029: mtproto.RPCGifts.payments_getStarGiftWithdrawalUrl:input_type -> mtproto.TL_payments_getStarGiftWithdrawalUrl
	583,  // 2030: mtproto.RPCGifts.payments_toggleChatStarGiftNotifications:input_type -> mtproto.TL_payments_toggleChatStarGiftNotifications
	584,  // 2031: mtproto.RPCGifts.payments_toggleStarGiftsPinnedToTop:input_type -> mtproto.TL_payments_toggleStarGiftsPinnedToTop
	697,  // 2032: mtproto.RPCGifts.payments_getUserStarGifts:input_type -> mtproto.TL_payments_getUserStarGifts
	698,  // 2033: mtproto.RPCGifts.payments_getUserStarGift:input_type -> mtproto.TL_payments_getUserStarGift
	548,  // 2034: mtproto.RPCGiveaways.payments_getPremiumGiftCodeOptions:input_type -> mtproto.TL_payments_getPremiumGiftCodeOptions
	551,  // 2035: mtproto.RPCGiveaways.payments_getGiveawayInfo:input_type -> mtproto.TL_payments_getGiveawayInfo
	552,  // 2036: mtproto.RPCGiveaways.payments_launchPrepaidGiveaway:input_type -> mtproto.TL_payments_launchPrepaidGiveaway
	566,  // 2037: mtproto.RPCGiveaways.payments_getStarsGiveawayOptions:input_type -> mtproto.TL_payments_getStarsGiveawayOptions
	606,  // 2038: mtproto.RPCGroupCalls.phone_createGroupCall:input_type -> mtproto.TL_phone_createGroupCall
	607,  // 2039: mtproto.RPCGroupCalls.phone_joinGroupCall:input_type -> mtproto.TL_phone_joinGroupCall
	608,  // 2040: mtproto.RPCGroupCalls.phone_leaveGroupCall:input_type -> mtproto.TL_phone_leaveGroupCall
	609,  // 2041: mtproto.RPCGroupCalls.phone_inviteToGroupCall:input_type -> mtproto.TL_phone_inviteToGroupCall
	610,  // 2042: mtproto.RPCGroupCalls.phone_discardGroupCall:input_type -> mtproto.TL_phone_discardGroupCall
	611,  // 2043: mtproto.RPCGroupCalls.phone_toggleGroupCallSettings:input_type -> mtproto.TL_phone_toggleGroupCallSettings
	612,  // 2044: mtproto.RPCGroupCalls.phone_getGroupCall:input_type -> mtproto.TL_phone_getGroupCall
	613,  // 2045: mtproto.RPCGroupCalls.phone_getGroupParticipants:input_type -> mtproto.TL_phone_getGroupParticipants
	614,  // 2046: mtproto.RPCGroupCalls.phone_checkGroupCall:input_type -> mtproto.TL_phone_checkGroupCall
	615,  // 2047: mtproto.RPCGroupCalls.phone_toggleGroupCallRecord:input_type -> mtproto.TL_phone_toggleGroupCallRecord
	616,  // 2048: mtproto.RPCGroupCalls.phone_editGroupCallParticipant:input_type -> mtproto.TL_phone_editGroupCallParticipant
	617,  // 2049: mtproto.RPCGroupCalls.phone_editGroupCallTitle:input_type -> mtproto.TL_phone_editGroupCallTitle
	618,  // 2050: mtproto.RPCGroupCalls.phone_getGroupCallJoinAs:input_type -> mtproto.TL_phone_getGroupCallJoinAs
	619,  // 2051: mtproto.RPCGroupCalls.phone_exportGroupCallInvite:input_type -> mtproto.TL_phone_exportGroupCallInvite
	620,  // 2052: mtproto.RPCGroupCalls.phone_toggleGroupCallStartSubscription:input_type -> mtproto.TL_phone_toggleGroupCallStartSubscription
	621,  // 2053: mtproto.RPCGroupCalls.phone_startScheduledGroupCall:input_type -> mtproto.TL_phone_startScheduledGroupCall
	622,  // 2054: mtproto.RPCGroupCalls.phone_saveDefaultGroupCallJoinAs:input_type -> mtproto.TL_phone_saveDefaultGroupCallJoinAs
	623,  // 2055: mtproto.RPCGroupCalls.phone_joinGroupCallPresentation:input_type -> mtproto.TL_phone_joinGroupCallPresentation
	624,  // 2056: mtproto.RPCGroupCalls.phone_leaveGroupCallPresentation:input_type -> mtproto.TL_phone_leaveGroupCallPresentation
	625,  // 2057: mtproto.RPCGroupCalls.phone_getGroupCallStreamChannels:input_type -> mtproto.TL_phone_getGroupCallStreamChannels
	626,  // 2058: mtproto.RPCGroupCalls.phone_getGroupCallStreamRtmpUrl:input_type -> mtproto.TL_phone_getGroupCallStreamRtmpUrl
	307,  // 2059: mtproto.RPCImportedChats.messages_checkHistoryImport:input_type -> mtproto.TL_messages_checkHistoryImport
	308,  // 2060: mtproto.RPCImportedChats.messages_initHistoryImport:input_type -> mtproto.TL_messages_initHistoryImport
	309,  // 2061: mtproto.RPCImportedChats.messages_uploadImportedMedia:input_type -> mtproto.TL_messages_uploadImportedMedia
	310,  // 2062: mtproto.RPCImportedChats.messages_startHistoryImport:input_type -> mtproto.TL_messages_startHistoryImport
	319,  // 2063: mtproto.RPCImportedChats.messages_checkHistoryImportPeer:input_type -> mtproto.TL_messages_checkHistoryImportPeer
	232,  // 2064: mtproto.RPCInlineBot.messages_getInlineBotResults:input_type -> mtproto.TL_messages_getInlineBotResults
	233,  // 2065: mtproto.RPCInlineBot.messages_setInlineBotResults:input_type -> mtproto.TL_messages_setInlineBotResults
	234,  // 2066: mtproto.RPCInlineBot.messages_sendInlineBotResult:input_type -> mtproto.TL_messages_sendInlineBotResult
	237,  // 2067: mtproto.RPCInlineBot.messages_editInlineBotMessage:input_type -> mtproto.TL_messages_editInlineBotMessage
	238,  // 2068: mtproto.RPCInlineBot.messages_getBotCallbackAnswer:input_type -> mtproto.TL_messages_getBotCallbackAnswer
	239,  // 2069: mtproto.RPCInlineBot.messages_setBotCallbackAnswer:input_type -> mtproto.TL_messages_setBotCallbackAnswer
	358,  // 2070: mtproto.RPCInlineBot.messages_sendBotRequestedPeer:input_type -> mtproto.TL_messages_sendBotRequestedPeer
	426,  // 2071: mtproto.RPCInternalBot.help_setBotUpdatesStatus:input_type -> mtproto.TL_help_setBotUpdatesStatus
	508,  // 2072: mtproto.RPCInternalBot.bots_sendCustomRequest:input_type -> mtproto.TL_bots_sendCustomRequest
	509,  // 2073: mtproto.RPCInternalBot.bots_answerWebhookJSONQuery:input_type -> mtproto.TL_bots_answerWebhookJSONQuery
	629,  // 2074: mtproto.RPCLangpack.langpack_getLangPack:input_type -> mtproto.TL_langpack_getLangPack
	630,  // 2075: mtproto.RPCLangpack.langpack_getStrings:input_type -> mtproto.TL_langpack_getStrings
	631,  // 2076: mtproto.RPCLangpack.langpack_getDifference:input_type -> mtproto.TL_langpack_getDifference
	632,  // 2077: mtproto.RPCLangpack.langpack_getLanguages:input_type -> mtproto.TL_langpack_getLanguages
	633,  // 2078: mtproto.RPCLangpack.langpack_getLanguage:input_type -> mtproto.TL_langpack_getLanguage
	393,  // 2079: mtproto.RPCMainMiniBotApps.messages_requestMainWebView:input_type -> mtproto.TL_messages_requestMainWebView
	524,  // 2080: mtproto.RPCMainMiniBotApps.bots_getPopularAppBots:input_type -> mtproto.TL_bots_getPopularAppBots
	525,  // 2081: mtproto.RPCMainMiniBotApps.bots_addPreviewMedia:input_type -> mtproto.TL_bots_addPreviewMedia
	526,  // 2082: mtproto.RPCMainMiniBotApps.bots_editPreviewMedia:input_type -> mtproto.TL_bots_editPreviewMedia
	527,  // 2083: mtproto.RPCMainMiniBotApps.bots_deletePreviewMedia:input_type -> mtproto.TL_bots_deletePreviewMedia
	528,  // 2084: mtproto.RPCMainMiniBotApps.bots_reorderPreviewMedias:input_type -> mtproto.TL_bots_reorderPreviewMedias
	529,  // 2085: mtproto.RPCMainMiniBotApps.bots_getPreviewInfo:input_type -> mtproto.TL_bots_getPreviewInfo
	530,  // 2086: mtproto.RPCMainMiniBotApps.bots_getPreviewMedias:input_type -> mtproto.TL_bots_getPreviewMedias
	389,  // 2087: mtproto.RPCMessageEffects.messages_getAvailableEffects:input_type -> mtproto.TL_messages_getAvailableEffects
	172,  // 2088: mtproto.RPCMessageThreads.contacts_blockFromReplies:input_type -> mtproto.TL_contacts_blockFromReplies
	301,  // 2089: mtproto.RPCMessageThreads.messages_getReplies:input_type -> mtproto.TL_messages_getReplies
	302,  // 2090: mtproto.RPCMessageThreads.messages_getDiscussionMessage:input_type -> mtproto.TL_messages_getDiscussionMessage
	303,  // 2091: mtproto.RPCMessageThreads.messages_readDiscussion:input_type -> mtproto.TL_messages_readDiscussion
	180,  // 2092: mtproto.RPCMessages.messages_getMessages:input_type -> mtproto.TL_messages_getMessages
	182,  // 2093: mtproto.RPCMessages.messages_getHistory:input_type -> mtproto.TL_messages_getHistory
	183,  // 2094: mtproto.RPCMessages.messages_search:input_type -> mtproto.TL_messages_search
	184,  // 2095: mtproto.RPCMessages.messages_readHistory:input_type -> mtproto.TL_messages_readHistory
	185,  // 2096: mtproto.RPCMessages.messages_deleteHistory:input_type -> mtproto.TL_messages_deleteHistory
	186,  // 2097: mtproto.RPCMessages.messages_deleteMessages:input_type -> mtproto.TL_messages_deleteMessages
	187,  // 2098: mtproto.RPCMessages.messages_receivedMessages:input_type -> mtproto.TL_messages_receivedMessages
	189,  // 2099: mtproto.RPCMessages.messages_sendMessage:input_type -> mtproto.TL_messages_sendMessage
	190,  // 2100: mtproto.RPCMessages.messages_sendMedia:input_type -> mtproto.TL_messages_sendMedia
	191,  // 2101: mtproto.RPCMessages.messages_forwardMessages:input_type -> mtproto.TL_messages_forwardMessages
	213,  // 2102: mtproto.RPCMessages.messages_readMessageContents:input_type -> mtproto.TL_messages_readMessageContents
	224,  // 2103: mtproto.RPCMessages.messages_getMessagesViews:input_type -> mtproto.TL_messages_getMessagesViews
	227,  // 2104: mtproto.RPCMessages.messages_searchGlobal:input_type -> mtproto.TL_messages_searchGlobal
	235,  // 2105: mtproto.RPCMessages.messages_getMessageEditData:input_type -> mtproto.TL_messages_getMessageEditData
	236,  // 2106: mtproto.RPCMessages.messages_editMessage:input_type -> mtproto.TL_messages_editMessage
	266,  // 2107: mtproto.RPCMessages.messages_getUnreadMentions:input_type -> mtproto.TL_messages_getUnreadMentions
	267,  // 2108: mtproto.RPCMessages.messages_readMentions:input_type -> mtproto.TL_messages_readMentions
	268,  // 2109: mtproto.RPCMessages.messages_getRecentLocations:input_type -> mtproto.TL_messages_getRecentLocations
	269,  // 2110: mtproto.RPCMessages.messages_sendMultiMedia:input_type -> mtproto.TL_messages_sendMultiMedia
	276,  // 2111: mtproto.RPCMessages.messages_updatePinnedMessage:input_type -> mtproto.TL_messages_updatePinnedMessage
	286,  // 2112: mtproto.RPCMessages.messages_getSearchCounters:input_type -> mtproto.TL_messages_getSearchCounters
	304,  // 2113: mtproto.RPCMessages.messages_unpinAllMessages:input_type -> mtproto.TL_messages_unpinAllMessages
	322,  // 2114: mtproto.RPCMessages.messages_getSearchResultsCalendar:input_type -> mtproto.TL_messages_getSearchResultsCalendar
	323,  // 2115: mtproto.RPCMessages.messages_getSearchResultsPositions:input_type -> mtproto.TL_messages_getSearchResultsPositions
	326,  // 2116: mtproto.RPCMessages.messages_toggleNoForwards:input_type -> mtproto.TL_messages_toggleNoForwards
	327,  // 2117: mtproto.RPCMessages.messages_saveDefaultSendAs:input_type -> mtproto.TL_messages_saveDefaultSendAs
	337,  // 2118: mtproto.RPCMessages.messages_searchSentMedia:input_type -> mtproto.TL_messages_searchSentMedia
	377,  // 2119: mtproto.RPCMessages.messages_getOutboxReadDate:input_type -> mtproto.TL_messages_getOutboxReadDate
	404,  // 2120: mtproto.RPCMessages.messages_reportMessagesDelivery:input_type -> mtproto.TL_messages_reportMessagesDelivery
	481,  // 2121: mtproto.RPCMessages.channels_getSendAs:input_type -> mtproto.TL_channels_getSendAs
	506,  // 2122: mtproto.RPCMessages.channels_searchPosts:input_type -> mtproto.TL_channels_searchPosts
	341,  // 2123: mtproto.RPCMiniBotApps.messages_requestWebView:input_type -> mtproto.TL_messages_requestWebView
	342,  // 2124: mtproto.RPCMiniBotApps.messages_prolongWebView:input_type -> mtproto.TL_messages_prolongWebView
	343,  // 2125: mtproto.RPCMiniBotApps.messages_requestSimpleWebView413A3E73:input_type -> mtproto.TL_messages_requestSimpleWebView413A3E73
	344,  // 2126: mtproto.RPCMiniBotApps.messages_sendWebViewResultMessage:input_type -> mtproto.TL_messages_sendWebViewResultMessage
	345,  // 2127: mtproto.RPCMiniBotApps.messages_sendWebViewData:input_type -> mtproto.TL_messages_sendWebViewData
	364,  // 2128: mtproto.RPCMiniBotApps.messages_getBotApp:input_type -> mtproto.TL_messages_getBotApp
	365,  // 2129: mtproto.RPCMiniBotApps.messages_requestAppWebView53618BCE:input_type -> mtproto.TL_messages_requestAppWebView53618BCE
	521,  // 2130: mtproto.RPCMiniBotApps.bots_canSendMessage:input_type -> mtproto.TL_bots_canSendMessage
	522,  // 2131: mtproto.RPCMiniBotApps.bots_allowSendMessage:input_type -> mtproto.TL_bots_allowSendMessage
	523,  // 2132: mtproto.RPCMiniBotApps.bots_invokeWebViewCustomMethod:input_type -> mtproto.TL_bots_invokeWebViewCustomMethod
	533,  // 2133: mtproto.RPCMiniBotApps.bots_checkDownloadFileParams:input_type -> mtproto.TL_bots_checkDownloadFileParams
	706,  // 2134: mtproto.RPCMiniBotApps.messages_requestSimpleWebView1A46500A:input_type -> mtproto.TL_messages_requestSimpleWebView1A46500A
	707,  // 2135: mtproto.RPCMiniBotApps.messages_requestAppWebView8C5A3B3C:input_type -> mtproto.TL_messages_requestAppWebView8C5A3B3C
	724,  // 2136: mtproto.RPCMiniBotApps.messages_requestSimpleWebView299BEC8E:input_type -> mtproto.TL_messages_requestSimpleWebView299BEC8E
	732,  // 2137: mtproto.RPCMiniBotApps.messages_requestSimpleWebView6ABB2F73:input_type -> mtproto.TL_messages_requestSimpleWebView6ABB2F73
	433,  // 2138: mtproto.RPCMiscellaneous.help_saveAppLog:input_type -> mtproto.TL_help_saveAppLog
	736,  // 2139: mtproto.RPCMiscellaneous.help_test:input_type -> mtproto.TL_help_test
	34,   // 2140: mtproto.RPCNotification.account_registerDevice:input_type -> mtproto.TL_account_registerDevice
	35,   // 2141: mtproto.RPCNotification.account_unregisterDevice:input_type -> mtproto.TL_account_unregisterDevice
	36,   // 2142: mtproto.RPCNotification.account_updateNotifySettings:input_type -> mtproto.TL_account_updateNotifySettings
	37,   // 2143: mtproto.RPCNotification.account_getNotifySettings:input_type -> mtproto.TL_account_getNotifySettings
	38,   // 2144: mtproto.RPCNotification.account_resetNotifySettings:input_type -> mtproto.TL_account_resetNotifySettings
	52,   // 2145: mtproto.RPCNotification.account_updateDeviceLocked:input_type -> mtproto.TL_account_updateDeviceLocked
	81,   // 2146: mtproto.RPCNotification.account_getNotifyExceptions:input_type -> mtproto.TL_account_getNotifyExceptions
	96,   // 2147: mtproto.RPCNsfw.account_setContentSettings:input_type -> mtproto.TL_account_setContentSettings
	97,   // 2148: mtproto.RPCNsfw.account_getContentSettings:input_type -> mtproto.TL_account_getContentSettings
	355,  // 2149: mtproto.RPCPaidMedia.messages_getExtendedMedia:input_type -> mtproto.TL_messages_getExtendedMedia
	147,  // 2150: mtproto.RPCPaidMessage.account_addNoPaidMessagesException:input_type -> mtproto.TL_account_addNoPaidMessagesException
	148,  // 2151: mtproto.RPCPaidMessage.account_getPaidMessagesRevenue:input_type -> mtproto.TL_account_getPaidMessagesRevenue
	507,  // 2152: mtproto.RPCPaidMessage.channels_updatePaidMessagesPrice:input_type -> mtproto.TL_channels_updatePaidMessagesPrice
	53,   // 2153: mtproto.RPCPassport.account_getAuthorizations:input_type -> mtproto.TL_account_getAuthorizations
	64,   // 2154: mtproto.RPCPassport.account_getAllSecureValues:input_type -> mtproto.TL_account_getAllSecureValues
	65,   // 2155: mtproto.RPCPassport.account_getSecureValue:input_type -> mtproto.TL_account_getSecureValue
	66,   // 2156: mtproto.RPCPassport.account_saveSecureValue:input_type -> mtproto.TL_account_saveSecureValue
	67,   // 2157: mtproto.RPCPassport.account_deleteSecureValue:input_type -> mtproto.TL_account_deleteSecureValue
	68,   // 2158: mtproto.RPCPassport.account_getAuthorizationForm:input_type -> mtproto.TL_account_getAuthorizationForm
	69,   // 2159: mtproto.RPCPassport.account_acceptAuthorization:input_type -> mtproto.TL_account_acceptAuthorization
	70,   // 2160: mtproto.RPCPassport.account_sendVerifyPhoneCode:input_type -> mtproto.TL_account_sendVerifyPhoneCode
	71,   // 2161: mtproto.RPCPassport.account_verifyPhone:input_type -> mtproto.TL_account_verifyPhone
	151,  // 2162: mtproto.RPCPassport.users_setSecureValueErrors:input_type -> mtproto.TL_users_setSecureValueErrors
	434,  // 2163: mtproto.RPCPassport.help_getPassportConfig:input_type -> mtproto.TL_help_getPassportConfig
	60,   // 2164: mtproto.RPCPayments.account_getTmpPassword:input_type -> mtproto.TL_account_getTmpPassword
	260,  // 2165: mtproto.RPCPayments.messages_setBotShippingResults:input_type -> mtproto.TL_messages_setBotShippingResults
	261,  // 2166: mtproto.RPCPayments.messages_setBotPrecheckoutResults:input_type -> mtproto.TL_messages_setBotPrecheckoutResults
	538,  // 2167: mtproto.RPCPayments.payments_getPaymentForm:input_type -> mtproto.TL_payments_getPaymentForm
	539,  // 2168: mtproto.RPCPayments.payments_getPaymentReceipt:input_type -> mtproto.TL_payments_getPaymentReceipt
	540,  // 2169: mtproto.RPCPayments.payments_validateRequestedInfo:input_type -> mtproto.TL_payments_validateRequestedInfo
	541,  // 2170: mtproto.RPCPayments.payments_sendPaymentForm:input_type -> mtproto.TL_payments_sendPaymentForm
	542,  // 2171: mtproto.RPCPayments.payments_getSavedInfo:input_type -> mtproto.TL_payments_getSavedInfo
	543,  // 2172: mtproto.RPCPayments.payments_clearSavedInfo:input_type -> mtproto.TL_payments_clearSavedInfo
	544,  // 2173: mtproto.RPCPayments.payments_getBankCardData:input_type -> mtproto.TL_payments_getBankCardData
	545,  // 2174: mtproto.RPCPayments.payments_exportInvoice:input_type -> mtproto.TL_payments_exportInvoice
	733,  // 2175: mtproto.RPCPayments.payments_requestRecurringPayment:input_type -> mtproto.TL_payments_requestRecurringPayment
	734,  // 2176: mtproto.RPCPayments.payments_restorePlayMarketReceipt:input_type -> mtproto.TL_payments_restorePlayMarketReceipt
	277,  // 2177: mtproto.RPCPolls.messages_sendVote:input_type -> mtproto.TL_messages_sendVote
	278,  // 2178: mtproto.RPCPolls.messages_getPollResults:input_type -> mtproto.TL_messages_getPollResults
	294,  // 2179: mtproto.RPCPolls.messages_getPollVotes:input_type -> mtproto.TL_messages_getPollVotes
	737,  // 2180: mtproto.RPCPredefined.predefined_createPredefinedUser:input_type -> mtproto.TL_predefined_createPredefinedUser
	738,  // 2181: mtproto.RPCPredefined.predefined_updatePredefinedUsername:input_type -> mtproto.TL_predefined_updatePredefinedUsername
	739,  // 2182: mtproto.RPCPredefined.predefined_updatePredefinedProfile:input_type -> mtproto.TL_predefined_updatePredefinedProfile
	740,  // 2183: mtproto.RPCPredefined.predefined_updatePredefinedVerified:input_type -> mtproto.TL_predefined_updatePredefinedVerified
	741,  // 2184: mtproto.RPCPredefined.predefined_updatePredefinedCode:input_type -> mtproto.TL_predefined_updatePredefinedCode
	742,  // 2185: mtproto.RPCPredefined.predefined_getPredefinedUser:input_type -> mtproto.TL_predefined_getPredefinedUser
	743,  // 2186: mtproto.RPCPredefined.predefined_getPredefinedUsers:input_type -> mtproto.TL_predefined_getPredefinedUsers
	442,  // 2187: mtproto.RPCPremium.help_getPremiumPromo:input_type -> mtproto.TL_help_getPremiumPromo
	546,  // 2188: mtproto.RPCPremium.payments_assignAppStoreTransaction:input_type -> mtproto.TL_payments_assignAppStoreTransaction
	547,  // 2189: mtproto.RPCPremium.payments_assignPlayMarketTransaction:input_type -> mtproto.TL_payments_assignPlayMarketTransaction
	585,  // 2190: mtproto.RPCPremium.payments_canPurchaseStore:input_type -> mtproto.TL_payments_canPurchaseStore
	695,  // 2191: mtproto.RPCPremium.payments_canPurchasePremium:input_type -> mtproto.TL_payments_canPurchasePremium
	401,  // 2192: mtproto.RPCPreparedInlineMessages.messages_savePreparedInlineMessage:input_type -> mtproto.TL_messages_savePreparedInlineMessage
	402,  // 2193: mtproto.RPCPreparedInlineMessages.messages_getPreparedInlineMessage:input_type -> mtproto.TL_messages_getPreparedInlineMessage
	45,   // 2194: mtproto.RPCPrivacySettings.account_getPrivacy:input_type -> mtproto.TL_account_getPrivacy
	46,   // 2195: mtproto.RPCPrivacySettings.account_setPrivacy:input_type -> mtproto.TL_account_setPrivacy
	99,   // 2196: mtproto.RPCPrivacySettings.account_getGlobalPrivacySettings:input_type -> mtproto.TL_account_getGlobalPrivacySettings
	100,  // 2197: mtproto.RPCPrivacySettings.account_setGlobalPrivacySettings:input_type -> mtproto.TL_account_setGlobalPrivacySettings
	152,  // 2198: mtproto.RPCPrivacySettings.users_getRequirementsToContact:input_type -> mtproto.TL_users_getRequirementsToContact
	356,  // 2199: mtproto.RPCPrivacySettings.messages_setDefaultHistoryTTL:input_type -> mtproto.TL_messages_setDefaultHistoryTTL
	357,  // 2200: mtproto.RPCPrivacySettings.messages_getDefaultHistoryTTL:input_type -> mtproto.TL_messages_getDefaultHistoryTTL
	696,  // 2201: mtproto.RPCPrivacySettings.users_getIsPremiumRequiredToContact:input_type -> mtproto.TL_users_getIsPremiumRequiredToContact
	174,  // 2202: mtproto.RPCProfileLinks.contacts_exportContactToken:input_type -> mtproto.TL_contacts_exportContactToken
	175,  // 2203: mtproto.RPCProfileLinks.contacts_importContactToken:input_type -> mtproto.TL_contacts_importContactToken
	438,  // 2204: mtproto.RPCPromoData.help_getPromoData:input_type -> mtproto.TL_help_getPromoData
	439,  // 2205: mtproto.RPCPromoData.help_hidePromoData:input_type -> mtproto.TL_help_hidePromoData
	26,   // 2206: mtproto.RPCQrCode.auth_exportLoginToken:input_type -> mtproto.TL_auth_exportLoginToken
	27,   // 2207: mtproto.RPCQrCode.auth_importLoginToken:input_type -> mtproto.TL_auth_importLoginToken
	28,   // 2208: mtproto.RPCQrCode.auth_acceptLoginToken:input_type -> mtproto.TL_auth_acceptLoginToken
	144,  // 2209: mtproto.RPCReactionNotification.account_getReactionsNotifySettings:input_type -> mtproto.TL_account_getReactionsNotifySettings
	145,  // 2210: mtproto.RPCReactionNotification.account_setReactionsNotifySettings:input_type -> mtproto.TL_account_setReactionsNotifySettings
	328,  // 2211: mtproto.RPCReactions.messages_sendReaction:input_type -> mtproto.TL_messages_sendReaction
	329,  // 2212: mtproto.RPCReactions.messages_getMessagesReactions:input_type -> mtproto.TL_messages_getMessagesReactions
	330,  // 2213: mtproto.RPCReactions.messages_getMessageReactionsList:input_type -> mtproto.TL_messages_getMessageReactionsList
	331,  // 2214: mtproto.RPCReactions.messages_setChatAvailableReactions:input_type -> mtproto.TL_messages_setChatAvailableReactions
	332,  // 2215: mtproto.RPCReactions.messages_getAvailableReactions:input_type -> mtproto.TL_messages_getAvailableReactions
	333,  // 2216: mtproto.RPCReactions.messages_setDefaultReaction:input_type -> mtproto.TL_messages_setDefaultReaction
	335,  // 2217: mtproto.RPCReactions.messages_getUnreadReactions:input_type -> mtproto.TL_messages_getUnreadReactions
	336,  // 2218: mtproto.RPCReactions.messages_readReactions:input_type -> mtproto.TL_messages_readReactions
	351,  // 2219: mtproto.RPCReactions.messages_reportReaction:input_type -> mtproto.TL_messages_reportReaction
	352,  // 2220: mtproto.RPCReactions.messages_getTopReactions:input_type -> mtproto.TL_messages_getTopReactions
	353,  // 2221: mtproto.RPCReactions.messages_getRecentReactions:input_type -> mtproto.TL_messages_getRecentReactions
	354,  // 2222: mtproto.RPCReactions.messages_clearRecentReactions:input_type -> mtproto.TL_messages_clearRecentReactions
	394,  // 2223: mtproto.RPCReactions.messages_sendPaidReaction:input_type -> mtproto.TL_messages_sendPaidReaction
	395,  // 2224: mtproto.RPCReactions.messages_togglePaidReactionPrivacy:input_type -> mtproto.TL_messages_togglePaidReactionPrivacy
	396,  // 2225: mtproto.RPCReactions.messages_getPaidReactionPrivacy:input_type -> mtproto.TL_messages_getPaidReactionPrivacy
	42,   // 2226: mtproto.RPCReports.account_reportPeer:input_type -> mtproto.TL_account_reportPeer
	101,  // 2227: mtproto.RPCReports.account_reportProfilePhoto:input_type -> mtproto.TL_account_reportProfilePhoto
	192,  // 2228: mtproto.RPCReports.messages_reportSpam:input_type -> mtproto.TL_messages_reportSpam
	194,  // 2229: mtproto.RPCReports.messages_reportFC78AF9B:input_type -> mtproto.TL_messages_reportFC78AF9B
	212,  // 2230: mtproto.RPCReports.messages_reportEncryptedSpam:input_type -> mtproto.TL_messages_reportEncryptedSpam
	448,  // 2231: mtproto.RPCReports.channels_reportSpam:input_type -> mtproto.TL_channels_reportSpam
	704,  // 2232: mtproto.RPCReports.messages_report8953AB4E:input_type -> mtproto.TL_messages_report8953AB4E
	107,  // 2233: mtproto.RPCRingtone.account_getSavedRingtones:input_type -> mtproto.TL_account_getSavedRingtones
	108,  // 2234: mtproto.RPCRingtone.account_saveRingtone:input_type -> mtproto.TL_account_saveRingtone
	109,  // 2235: mtproto.RPCRingtone.account_uploadRingtone:input_type -> mtproto.TL_account_uploadRingtone
	368,  // 2236: mtproto.RPCSavedMessageDialogs.messages_getSavedDialogs:input_type -> mtproto.TL_messages_getSavedDialogs
	369,  // 2237: mtproto.RPCSavedMessageDialogs.messages_getSavedHistory:input_type -> mtproto.TL_messages_getSavedHistory
	370,  // 2238: mtproto.RPCSavedMessageDialogs.messages_deleteSavedHistory:input_type -> mtproto.TL_messages_deleteSavedHistory
	371,  // 2239: mtproto.RPCSavedMessageDialogs.messages_getPinnedSavedDialogs:input_type -> mtproto.TL_messages_getPinnedSavedDialogs
	372,  // 2240: mtproto.RPCSavedMessageDialogs.messages_toggleSavedDialogPin:input_type -> mtproto.TL_messages_toggleSavedDialogPin
	373,  // 2241: mtproto.RPCSavedMessageDialogs.messages_reorderPinnedSavedDialogs:input_type -> mtproto.TL_messages_reorderPinnedSavedDialogs
	374,  // 2242: mtproto.RPCSavedMessageTags.messages_getSavedReactionTags:input_type -> mtproto.TL_messages_getSavedReactionTags
	375,  // 2243: mtproto.RPCSavedMessageTags.messages_updateSavedReactionTag:input_type -> mtproto.TL_messages_updateSavedReactionTag
	376,  // 2244: mtproto.RPCSavedMessageTags.messages_getDefaultTagReactions:input_type -> mtproto.TL_messages_getDefaultTagReactions
	290,  // 2245: mtproto.RPCScheduledMessages.messages_getScheduledHistory:input_type -> mtproto.TL_messages_getScheduledHistory
	291,  // 2246: mtproto.RPCScheduledMessages.messages_getScheduledMessages:input_type -> mtproto.TL_messages_getScheduledMessages
	292,  // 2247: mtproto.RPCScheduledMessages.messages_sendScheduledMessages:input_type -> mtproto.TL_messages_sendScheduledMessages
	293,  // 2248: mtproto.RPCScheduledMessages.messages_deleteScheduledMessages:input_type -> mtproto.TL_messages_deleteScheduledMessages
	61,   // 2249: mtproto.RPCSeamless.account_getWebAuthorizations:input_type -> mtproto.TL_account_getWebAuthorizations
	62,   // 2250: mtproto.RPCSeamless.account_resetWebAuthorization:input_type -> mtproto.TL_account_resetWebAuthorization
	63,   // 2251: mtproto.RPCSeamless.account_resetWebAuthorizations:input_type -> mtproto.TL_account_resetWebAuthorizations
	287,  // 2252: mtproto.RPCSeamless.messages_requestUrlAuth:input_type -> mtproto.TL_messages_requestUrlAuth
	288,  // 2253: mtproto.RPCSeamless.messages_acceptUrlAuth:input_type -> mtproto.TL_messages_acceptUrlAuth
	202,  // 2254: mtproto.RPCSecretChats.messages_getDhConfig:input_type -> mtproto.TL_messages_getDhConfig
	203,  // 2255: mtproto.RPCSecretChats.messages_requestEncryption:input_type -> mtproto.TL_messages_requestEncryption
	204,  // 2256: mtproto.RPCSecretChats.messages_acceptEncryption:input_type -> mtproto.TL_messages_acceptEncryption
	205,  // 2257: mtproto.RPCSecretChats.messages_discardEncryption:input_type -> mtproto.TL_messages_discardEncryption
	206,  // 2258: mtproto.RPCSecretChats.messages_setEncryptedTyping:input_type -> mtproto.TL_messages_setEncryptedTyping
	207,  // 2259: mtproto.RPCSecretChats.messages_readEncryptedHistory:input_type -> mtproto.TL_messages_readEncryptedHistory
	208,  // 2260: mtproto.RPCSecretChats.messages_sendEncrypted:input_type -> mtproto.TL_messages_sendEncrypted
	209,  // 2261: mtproto.RPCSecretChats.messages_sendEncryptedFile:input_type -> mtproto.TL_messages_sendEncryptedFile
	210,  // 2262: mtproto.RPCSecretChats.messages_sendEncryptedService:input_type -> mtproto.TL_messages_sendEncryptedService
	211,  // 2263: mtproto.RPCSecretChats.messages_receivedQueue:input_type -> mtproto.TL_messages_receivedQueue
	687,  // 2264: mtproto.RPCSmsjobs.smsjobs_isEligibleToJoin:input_type -> mtproto.TL_smsjobs_isEligibleToJoin
	688,  // 2265: mtproto.RPCSmsjobs.smsjobs_join:input_type -> mtproto.TL_smsjobs_join
	689,  // 2266: mtproto.RPCSmsjobs.smsjobs_leave:input_type -> mtproto.TL_smsjobs_leave
	690,  // 2267: mtproto.RPCSmsjobs.smsjobs_updateSettings:input_type -> mtproto.TL_smsjobs_updateSettings
	691,  // 2268: mtproto.RPCSmsjobs.smsjobs_getStatus:input_type -> mtproto.TL_smsjobs_getStatus
	692,  // 2269: mtproto.RPCSmsjobs.smsjobs_getSmsJob:input_type -> mtproto.TL_smsjobs_getSmsJob
	693,  // 2270: mtproto.RPCSmsjobs.smsjobs_finishJob:input_type -> mtproto.TL_smsjobs_finishJob
	143,  // 2271: mtproto.RPCSponsoredMessages.account_toggleSponsoredMessages:input_type -> mtproto.TL_account_toggleSponsoredMessages
	179,  // 2272: mtproto.RPCSponsoredMessages.contacts_getSponsoredPeers:input_type -> mtproto.TL_contacts_getSponsoredPeers
	397,  // 2273: mtproto.RPCSponsoredMessages.messages_viewSponsoredMessage:input_type -> mtproto.TL_messages_viewSponsoredMessage
	398,  // 2274: mtproto.RPCSponsoredMessages.messages_clickSponsoredMessage:input_type -> mtproto.TL_messages_clickSponsoredMessage
	399,  // 2275: mtproto.RPCSponsoredMessages.messages_reportSponsoredMessage:input_type -> mtproto.TL_messages_reportSponsoredMessage
	400,  // 2276: mtproto.RPCSponsoredMessages.messages_getSponsoredMessages:input_type -> mtproto.TL_messages_getSponsoredMessages
	505,  // 2277: mtproto.RPCSponsoredMessages.channels_restrictSponsoredMessages:input_type -> mtproto.TL_channels_restrictSponsoredMessages
	700,  // 2278: mtproto.RPCSponsoredMessages.channels_viewSponsoredMessage:input_type -> mtproto.TL_channels_viewSponsoredMessage
	701,  // 2279: mtproto.RPCSponsoredMessages.channels_getSponsoredMessages:input_type -> mtproto.TL_channels_getSponsoredMessages
	702,  // 2280: mtproto.RPCSponsoredMessages.channels_clickSponsoredMessage:input_type -> mtproto.TL_channels_clickSponsoredMessage
	703,  // 2281: mtproto.RPCSponsoredMessages.channels_reportSponsoredMessage:input_type -> mtproto.TL_channels_reportSponsoredMessage
	563,  // 2282: mtproto.RPCStarSubscriptions.payments_getStarsSubscriptions:input_type -> mtproto.TL_payments_getStarsSubscriptions
	564,  // 2283: mtproto.RPCStarSubscriptions.payments_changeStarsSubscription:input_type -> mtproto.TL_payments_changeStarsSubscription
	565,  // 2284: mtproto.RPCStarSubscriptions.payments_fulfillStarsSubscription:input_type -> mtproto.TL_payments_fulfillStarsSubscription
	570,  // 2285: mtproto.RPCStarSubscriptions.payments_botCancelStarsSubscription:input_type -> mtproto.TL_payments_botCancelStarsSubscription
	553,  // 2286: mtproto.RPCStars.payments_getStarsTopupOptions:input_type -> mtproto.TL_payments_getStarsTopupOptions
	554,  // 2287: mtproto.RPCStars.payments_getStarsStatus:input_type -> mtproto.TL_payments_getStarsStatus
	555,  // 2288: mtproto.RPCStars.payments_getStarsTransactions:input_type -> mtproto.TL_payments_getStarsTransactions
	556,  // 2289: mtproto.RPCStars.payments_sendStarsForm:input_type -> mtproto.TL_payments_sendStarsForm
	557,  // 2290: mtproto.RPCStars.payments_refundStarsCharge:input_type -> mtproto.TL_payments_refundStarsCharge
	558,  // 2291: mtproto.RPCStars.payments_getStarsRevenueStats:input_type -> mtproto.TL_payments_getStarsRevenueStats
	559,  // 2292: mtproto.RPCStars.payments_getStarsRevenueWithdrawalUrl:input_type -> mtproto.TL_payments_getStarsRevenueWithdrawalUrl
	560,  // 2293: mtproto.RPCStars.payments_getStarsRevenueAdsAccountUrl:input_type -> mtproto.TL_payments_getStarsRevenueAdsAccountUrl
	561,  // 2294: mtproto.RPCStars.payments_getStarsTransactionsByID:input_type -> mtproto.TL_payments_getStarsTransactionsByID
	562,  // 2295: mtproto.RPCStars.payments_getStarsGiftOptions:input_type -> mtproto.TL_payments_getStarsGiftOptions
	635,  // 2296: mtproto.RPCStatistics.stats_getBroadcastStats:input_type -> mtproto.TL_stats_getBroadcastStats
	636,  // 2297: mtproto.RPCStatistics.stats_loadAsyncGraph:input_type -> mtproto.TL_stats_loadAsyncGraph
	637,  // 2298: mtproto.RPCStatistics.stats_getMegagroupStats:input_type -> mtproto.TL_stats_getMegagroupStats
	638,  // 2299: mtproto.RPCStatistics.stats_getMessagePublicForwards5F150144:input_type -> mtproto.TL_stats_getMessagePublicForwards5F150144
	639,  // 2300: mtproto.RPCStatistics.stats_getMessageStats:input_type -> mtproto.TL_stats_getMessageStats
	640,  // 2301: mtproto.RPCStatistics.stats_getStoryStats:input_type -> mtproto.TL_stats_getStoryStats
	641,  // 2302: mtproto.RPCStatistics.stats_getStoryPublicForwards:input_type -> mtproto.TL_stats_getStoryPublicForwards
	713,  // 2303: mtproto.RPCStatistics.stats_getMessagePublicForwards5630281B:input_type -> mtproto.TL_stats_getMessagePublicForwards5630281B
	214,  // 2304: mtproto.RPCStickers.messages_getStickers:input_type -> mtproto.TL_messages_getStickers
	215,  // 2305: mtproto.RPCStickers.messages_getAllStickers:input_type -> mtproto.TL_messages_getAllStickers
	220,  // 2306: mtproto.RPCStickers.messages_getStickerSet:input_type -> mtproto.TL_messages_getStickerSet
	221,  // 2307: mtproto.RPCStickers.messages_installStickerSet:input_type -> mtproto.TL_messages_installStickerSet
	222,  // 2308: mtproto.RPCStickers.messages_uninstallStickerSet:input_type -> mtproto.TL_messages_uninstallStickerSet
	228,  // 2309: mtproto.RPCStickers.messages_reorderStickerSets:input_type -> mtproto.TL_messages_reorderStickerSets
	243,  // 2310: mtproto.RPCStickers.messages_getFeaturedStickers:input_type -> mtproto.TL_messages_getFeaturedStickers
	244,  // 2311: mtproto.RPCStickers.messages_readFeaturedStickers:input_type -> mtproto.TL_messages_readFeaturedStickers
	245,  // 2312: mtproto.RPCStickers.messages_getRecentStickers:input_type -> mtproto.TL_messages_getRecentStickers
	246,  // 2313: mtproto.RPCStickers.messages_saveRecentSticker:input_type -> mtproto.TL_messages_saveRecentSticker
	247,  // 2314: mtproto.RPCStickers.messages_clearRecentStickers:input_type -> mtproto.TL_messages_clearRecentStickers
	248,  // 2315: mtproto.RPCStickers.messages_getArchivedStickers:input_type -> mtproto.TL_messages_getArchivedStickers
	249,  // 2316: mtproto.RPCStickers.messages_getMaskStickers:input_type -> mtproto.TL_messages_getMaskStickers
	250,  // 2317: mtproto.RPCStickers.messages_getAttachedStickers:input_type -> mtproto.TL_messages_getAttachedStickers
	264,  // 2318: mtproto.RPCStickers.messages_getFavedStickers:input_type -> mtproto.TL_messages_getFavedStickers
	265,  // 2319: mtproto.RPCStickers.messages_faveSticker:input_type -> mtproto.TL_messages_faveSticker
	271,  // 2320: mtproto.RPCStickers.messages_searchStickerSets:input_type -> mtproto.TL_messages_searchStickerSets
	295,  // 2321: mtproto.RPCStickers.messages_toggleStickerSets:input_type -> mtproto.TL_messages_toggleStickerSets
	300,  // 2322: mtproto.RPCStickers.messages_getOldFeaturedStickers:input_type -> mtproto.TL_messages_getOldFeaturedStickers
	367,  // 2323: mtproto.RPCStickers.messages_searchEmojiStickerSets:input_type -> mtproto.TL_messages_searchEmojiStickerSets
	387,  // 2324: mtproto.RPCStickers.messages_getMyStickers:input_type -> mtproto.TL_messages_getMyStickers
	403,  // 2325: mtproto.RPCStickers.messages_searchStickers:input_type -> mtproto.TL_messages_searchStickers
	586,  // 2326: mtproto.RPCStickers.stickers_createStickerSet:input_type -> mtproto.TL_stickers_createStickerSet
	587,  // 2327: mtproto.RPCStickers.stickers_removeStickerFromSet:input_type -> mtproto.TL_stickers_removeStickerFromSet
	588,  // 2328: mtproto.RPCStickers.stickers_changeStickerPosition:input_type -> mtproto.TL_stickers_changeStickerPosition
	589,  // 2329: mtproto.RPCStickers.stickers_addStickerToSet:input_type -> mtproto.TL_stickers_addStickerToSet
	590,  // 2330: mtproto.RPCStickers.stickers_setStickerSetThumb:input_type -> mtproto.TL_stickers_setStickerSetThumb
	591,  // 2331: mtproto.RPCStickers.stickers_checkShortName:input_type -> mtproto.TL_stickers_checkShortName
	592,  // 2332: mtproto.RPCStickers.stickers_suggestShortName:input_type -> mtproto.TL_stickers_suggestShortName
	593,  // 2333: mtproto.RPCStickers.stickers_changeSticker:input_type -> mtproto.TL_stickers_changeSticker
	594,  // 2334: mtproto.RPCStickers.stickers_renameStickerSet:input_type -> mtproto.TL_stickers_renameStickerSet
	595,  // 2335: mtproto.RPCStickers.stickers_deleteStickerSet:input_type -> mtproto.TL_stickers_deleteStickerSet
	596,  // 2336: mtproto.RPCStickers.stickers_replaceSticker:input_type -> mtproto.TL_stickers_replaceSticker
	656,  // 2337: mtproto.RPCStories.stories_canSendStory:input_type -> mtproto.TL_stories_canSendStory
	657,  // 2338: mtproto.RPCStories.stories_sendStory:input_type -> mtproto.TL_stories_sendStory
	658,  // 2339: mtproto.RPCStories.stories_editStory:input_type -> mtproto.TL_stories_editStory
	659,  // 2340: mtproto.RPCStories.stories_deleteStories:input_type -> mtproto.TL_stories_deleteStories
	660,  // 2341: mtproto.RPCStories.stories_togglePinned:input_type -> mtproto.TL_stories_togglePinned
	661,  // 2342: mtproto.RPCStories.stories_getAllStories:input_type -> mtproto.TL_stories_getAllStories
	662,  // 2343: mtproto.RPCStories.stories_getPinnedStories:input_type -> mtproto.TL_stories_getPinnedStories
	663,  // 2344: mtproto.RPCStories.stories_getStoriesArchive:input_type -> mtproto.TL_stories_getStoriesArchive
	664,  // 2345: mtproto.RPCStories.stories_getStoriesByID:input_type -> mtproto.TL_stories_getStoriesByID
	665,  // 2346: mtproto.RPCStories.stories_toggleAllStoriesHidden:input_type -> mtproto.TL_stories_toggleAllStoriesHidden
	666,  // 2347: mtproto.RPCStories.stories_readStories:input_type -> mtproto.TL_stories_readStories
	667,  // 2348: mtproto.RPCStories.stories_incrementStoryViews:input_type -> mtproto.TL_stories_incrementStoryViews
	668,  // 2349: mtproto.RPCStories.stories_getStoryViewsList:input_type -> mtproto.TL_stories_getStoryViewsList
	669,  // 2350: mtproto.RPCStories.stories_getStoriesViews:input_type -> mtproto.TL_stories_getStoriesViews
	670,  // 2351: mtproto.RPCStories.stories_exportStoryLink:input_type -> mtproto.TL_stories_exportStoryLink
	671,  // 2352: mtproto.RPCStories.stories_report19D8EB45:input_type -> mtproto.TL_stories_report19D8EB45
	672,  // 2353: mtproto.RPCStories.stories_activateStealthMode:input_type -> mtproto.TL_stories_activateStealthMode
	673,  // 2354: mtproto.RPCStories.stories_sendReaction:input_type -> mtproto.TL_stories_sendReaction
	674,  // 2355: mtproto.RPCStories.stories_getPeerStories:input_type -> mtproto.TL_stories_getPeerStories
	675,  // 2356: mtproto.RPCStories.stories_getAllReadPeerStories:input_type -> mtproto.TL_stories_getAllReadPeerStories
	676,  // 2357: mtproto.RPCStories.stories_getPeerMaxIDs:input_type -> mtproto.TL_stories_getPeerMaxIDs
	677,  // 2358: mtproto.RPCStories.stories_getChatsToSend:input_type -> mtproto.TL_stories_getChatsToSend
	678,  // 2359: mtproto.RPCStories.stories_togglePeerStoriesHidden:input_type -> mtproto.TL_stories_togglePeerStoriesHidden
	679,  // 2360: mtproto.RPCStories.stories_getStoryReactionsList:input_type -> mtproto.TL_stories_getStoryReactionsList
	680,  // 2361: mtproto.RPCStories.stories_togglePinnedToTop:input_type -> mtproto.TL_stories_togglePinnedToTop
	681,  // 2362: mtproto.RPCStories.stories_searchPosts:input_type -> mtproto.TL_stories_searchPosts
	705,  // 2363: mtproto.RPCStories.stories_report1923FA8C:input_type -> mtproto.TL_stories_report1923FA8C
	719,  // 2364: mtproto.RPCStories.users_getStoriesMaxIDs:input_type -> mtproto.TL_users_getStoriesMaxIDs
	720,  // 2365: mtproto.RPCStories.contacts_toggleStoriesHidden:input_type -> mtproto.TL_contacts_toggleStoriesHidden
	721,  // 2366: mtproto.RPCStories.stories_getUserStories:input_type -> mtproto.TL_stories_getUserStories
	722,  // 2367: mtproto.RPCStories.stories_getAllReadUserStories:input_type -> mtproto.TL_stories_getAllReadUserStories
	723,  // 2368: mtproto.RPCStories.stories_reportC95BE06A:input_type -> mtproto.TL_stories_reportC95BE06A
	74,   // 2369: mtproto.RPCTakeout.account_initTakeoutSession:input_type -> mtproto.TL_account_initTakeoutSession
	75,   // 2370: mtproto.RPCTakeout.account_finishTakeoutSession:input_type -> mtproto.TL_account_finishTakeoutSession
	272,  // 2371: mtproto.RPCTakeout.messages_getSplitRanges:input_type -> mtproto.TL_messages_getSplitRanges
	473,  // 2372: mtproto.RPCTakeout.channels_getLeftChannels:input_type -> mtproto.TL_channels_getLeftChannels
	89,   // 2373: mtproto.RPCThemes.account_uploadTheme:input_type -> mtproto.TL_account_uploadTheme
	90,   // 2374: mtproto.RPCThemes.account_createTheme:input_type -> mtproto.TL_account_createTheme
	91,   // 2375: mtproto.RPCThemes.account_updateTheme:input_type -> mtproto.TL_account_updateTheme
	92,   // 2376: mtproto.RPCThemes.account_saveTheme:input_type -> mtproto.TL_account_saveTheme
	93,   // 2377: mtproto.RPCThemes.account_installTheme:input_type -> mtproto.TL_account_installTheme
	94,   // 2378: mtproto.RPCThemes.account_getTheme:input_type -> mtproto.TL_account_getTheme
	95,   // 2379: mtproto.RPCThemes.account_getThemes:input_type -> mtproto.TL_account_getThemes
	104,  // 2380: mtproto.RPCThemes.account_getChatThemes:input_type -> mtproto.TL_account_getChatThemes
	320,  // 2381: mtproto.RPCThemes.messages_setChatTheme:input_type -> mtproto.TL_messages_setChatTheme
	445,  // 2382: mtproto.RPCTimezones.help_getTimezonesList:input_type -> mtproto.TL_help_getTimezonesList
	429,  // 2383: mtproto.RPCTos.help_getTermsOfServiceUpdate:input_type -> mtproto.TL_help_getTermsOfServiceUpdate
	430,  // 2384: mtproto.RPCTos.help_acceptTermsOfService:input_type -> mtproto.TL_help_acceptTermsOfService
	346,  // 2385: mtproto.RPCTranscription.messages_transcribeAudio:input_type -> mtproto.TL_messages_transcribeAudio
	347,  // 2386: mtproto.RPCTranscription.messages_rateTranscribedAudio:input_type -> mtproto.TL_messages_rateTranscribedAudio
	334,  // 2387: mtproto.RPCTranslation.messages_translateText:input_type -> mtproto.TL_messages_translateText
	363,  // 2388: mtproto.RPCTranslation.messages_togglePeerTranslations:input_type -> mtproto.TL_messages_togglePeerTranslations
	436,  // 2389: mtproto.RPCTsf.help_getUserInfo:input_type -> mtproto.TL_help_getUserInfo
	437,  // 2390: mtproto.RPCTsf.help_editUserInfo:input_type -> mtproto.TL_help_editUserInfo
	55,   // 2391: mtproto.RPCTwoFa.account_getPassword:input_type -> mtproto.TL_account_getPassword
	56,   // 2392: mtproto.RPCTwoFa.account_getPasswordSettings:input_type -> mtproto.TL_account_getPasswordSettings
	57,   // 2393: mtproto.RPCTwoFa.account_updatePasswordSettings:input_type -> mtproto.TL_account_updatePasswordSettings
	76,   // 2394: mtproto.RPCTwoFa.account_confirmPasswordEmail:input_type -> mtproto.TL_account_confirmPasswordEmail
	77,   // 2395: mtproto.RPCTwoFa.account_resendPasswordEmail:input_type -> mtproto.TL_account_resendPasswordEmail
	78,   // 2396: mtproto.RPCTwoFa.account_cancelPasswordEmail:input_type -> mtproto.TL_account_cancelPasswordEmail
	103,  // 2397: mtproto.RPCTwoFa.account_declinePasswordReset:input_type -> mtproto.TL_account_declinePasswordReset
	405,  // 2398: mtproto.RPCUpdates.updates_getState:input_type -> mtproto.TL_updates_getState
	406,  // 2399: mtproto.RPCUpdates.updates_getDifference:input_type -> mtproto.TL_updates_getDifference
	407,  // 2400: mtproto.RPCUpdates.updates_getChannelDifference:input_type -> mtproto.TL_updates_getChannelDifference
	39,   // 2401: mtproto.RPCUserProfile.account_updateProfile:input_type -> mtproto.TL_account_updateProfile
	40,   // 2402: mtproto.RPCUserProfile.account_updateStatus:input_type -> mtproto.TL_account_updateStatus
	136,  // 2403: mtproto.RPCUserProfile.account_updateBirthday:input_type -> mtproto.TL_account_updateBirthday
	142,  // 2404: mtproto.RPCUserProfile.account_updatePersonalChannel:input_type -> mtproto.TL_account_updatePersonalChannel
	178,  // 2405: mtproto.RPCUserProfile.contacts_getBirthdays:input_type -> mtproto.TL_contacts_getBirthdays
	408,  // 2406: mtproto.RPCUserProfile.photos_updateProfilePhoto:input_type -> mtproto.TL_photos_updateProfilePhoto
	409,  // 2407: mtproto.RPCUserProfile.photos_uploadProfilePhoto:input_type -> mtproto.TL_photos_uploadProfilePhoto
	410,  // 2408: mtproto.RPCUserProfile.photos_deletePhotos:input_type -> mtproto.TL_photos_deletePhotos
	411,  // 2409: mtproto.RPCUserProfile.photos_getUserPhotos:input_type -> mtproto.TL_photos_getUserPhotos
	412,  // 2410: mtproto.RPCUserProfile.photos_uploadContactProfilePhoto:input_type -> mtproto.TL_photos_uploadContactProfilePhoto
	745,  // 2411: mtproto.RPCUserProfile.account_updateVerified:input_type -> mtproto.TL_account_updateVerified
	43,   // 2412: mtproto.RPCUsernames.account_checkUsername:input_type -> mtproto.TL_account_checkUsername
	44,   // 2413: mtproto.RPCUsernames.account_updateUsername:input_type -> mtproto.TL_account_updateUsername
	163,  // 2414: mtproto.RPCUsernames.contacts_resolveUsername:input_type -> mtproto.TL_contacts_resolveUsername
	458,  // 2415: mtproto.RPCUsernames.channels_checkUsername:input_type -> mtproto.TL_channels_checkUsername
	459,  // 2416: mtproto.RPCUsernames.channels_updateUsername:input_type -> mtproto.TL_channels_updateUsername
	149,  // 2417: mtproto.RPCUsers.users_getUsers:input_type -> mtproto.TL_users_getUsers
	150,  // 2418: mtproto.RPCUsers.users_getFullUser:input_type -> mtproto.TL_users_getFullUser
	173,  // 2419: mtproto.RPCUsers.contacts_resolvePhone:input_type -> mtproto.TL_contacts_resolvePhone
	744,  // 2420: mtproto.RPCUsers.users_getMe:input_type -> mtproto.TL_users_getMe
	306,  // 2421: mtproto.RPCVoipCalls.messages_deletePhoneCallHistory:input_type -> mtproto.TL_messages_deletePhoneCallHistory
	597,  // 2422: mtproto.RPCVoipCalls.phone_getCallConfig:input_type -> mtproto.TL_phone_getCallConfig
	598,  // 2423: mtproto.RPCVoipCalls.phone_requestCall:input_type -> mtproto.TL_phone_requestCall
	599,  // 2424: mtproto.RPCVoipCalls.phone_acceptCall:input_type -> mtproto.TL_phone_acceptCall
	600,  // 2425: mtproto.RPCVoipCalls.phone_confirmCall:input_type -> mtproto.TL_phone_confirmCall
	601,  // 2426: mtproto.RPCVoipCalls.phone_receivedCall:input_type -> mtproto.TL_phone_receivedCall
	602,  // 2427: mtproto.RPCVoipCalls.phone_discardCall:input_type -> mtproto.TL_phone_discardCall
	603,  // 2428: mtproto.RPCVoipCalls.phone_setCallRating:input_type -> mtproto.TL_phone_setCallRating
	604,  // 2429: mtproto.RPCVoipCalls.phone_saveCallDebug:input_type -> mtproto.TL_phone_saveCallDebug
	605,  // 2430: mtproto.RPCVoipCalls.phone_sendSignalingData:input_type -> mtproto.TL_phone_sendSignalingData
	627,  // 2431: mtproto.RPCVoipCalls.phone_saveCallLog:input_type -> mtproto.TL_phone_saveCallLog
	628,  // 2432: mtproto.RPCVoipCalls.phone_createConferenceCall:input_type -> mtproto.TL_phone_createConferenceCall
	41,   // 2433: mtproto.RPCWallpapers.account_getWallPapers:input_type -> mtproto.TL_account_getWallPapers
	82,   // 2434: mtproto.RPCWallpapers.account_getWallPaper:input_type -> mtproto.TL_account_getWallPaper
	83,   // 2435: mtproto.RPCWallpapers.account_uploadWallPaper:input_type -> mtproto.TL_account_uploadWallPaper
	84,   // 2436: mtproto.RPCWallpapers.account_saveWallPaper:input_type -> mtproto.TL_account_saveWallPaper
	85,   // 2437: mtproto.RPCWallpapers.account_installWallPaper:input_type -> mtproto.TL_account_installWallPaper
	86,   // 2438: mtproto.RPCWallpapers.account_resetWallPapers:input_type -> mtproto.TL_account_resetWallPapers
	98,   // 2439: mtproto.RPCWallpapers.account_getMultiWallPapers:input_type -> mtproto.TL_account_getMultiWallPapers
	366,  // 2440: mtproto.RPCWallpapers.messages_setChatWallPaper:input_type -> mtproto.TL_messages_setChatWallPaper
	216,  // 2441: mtproto.RPCWebPage.messages_getWebPagePreview570D6F6F:input_type -> mtproto.TL_messages_getWebPagePreview570D6F6F
	256,  // 2442: mtproto.RPCWebPage.messages_getWebPage8D9692A3:input_type -> mtproto.TL_messages_getWebPage8D9692A3
	699,  // 2443: mtproto.RPCWebPage.messages_getWebPagePreview8B68B0CC:input_type -> mtproto.TL_messages_getWebPagePreview8B68B0CC
	718,  // 2444: mtproto.RPCWebPage.messages_getWebPage32CA8F91:input_type -> mtproto.TL_messages_getWebPage32CA8F91
	747,  // 2445: mtproto.RPCBiz.biz_invokeBizDataRaw:input_type -> mtproto.TL_biz_invokeBizDataRaw
	789,  // 2446: mtproto.RPCAccentColors.account_updateColor:output_type -> mtproto.Bool
	916,  // 2447: mtproto.RPCAccentColors.account_getDefaultBackgroundEmojis:output_type -> mtproto.EmojiList
	917,  // 2448: mtproto.RPCAccentColors.help_getPeerColors:output_type -> mtproto.help_PeerColors
	917,  // 2449: mtproto.RPCAccentColors.help_getPeerProfileColors:output_type -> mtproto.help_PeerColors
	918,  // 2450: mtproto.RPCAccentColors.channels_updateColor:output_type -> mtproto.Updates
	789,  // 2451: mtproto.RPCAccount.account_deleteAccount:output_type -> mtproto.Bool
	796,  // 2452: mtproto.RPCAccount.account_getAccountTTL:output_type -> mtproto.AccountDaysTTL
	789,  // 2453: mtproto.RPCAccount.account_setAccountTTL:output_type -> mtproto.Bool
	919,  // 2454: mtproto.RPCAccount.account_sendChangePhoneCode:output_type -> mtproto.auth_SentCode
	893,  // 2455: mtproto.RPCAccount.account_changePhone:output_type -> mtproto.User
	789,  // 2456: mtproto.RPCAccount.account_resetAuthorization:output_type -> mtproto.Bool
	919,  // 2457: mtproto.RPCAccount.account_sendConfirmPhoneCode:output_type -> mtproto.auth_SentCode
	789,  // 2458: mtproto.RPCAccount.account_confirmPhone:output_type -> mtproto.Bool
	920,  // 2459: mtproto.RPCAffiliatePrograms.bots_updateStarRefProgram:output_type -> mtproto.StarRefProgram
	921,  // 2460: mtproto.RPCAffiliatePrograms.payments_getConnectedStarRefBots:output_type -> mtproto.payments_ConnectedStarRefBots
	921,  // 2461: mtproto.RPCAffiliatePrograms.payments_getConnectedStarRefBot:output_type -> mtproto.payments_ConnectedStarRefBots
	922,  // 2462: mtproto.RPCAffiliatePrograms.payments_getSuggestedStarRefBots:output_type -> mtproto.payments_SuggestedStarRefBots
	921,  // 2463: mtproto.RPCAffiliatePrograms.payments_connectStarRefBot:output_type -> mtproto.payments_ConnectedStarRefBots
	921,  // 2464: mtproto.RPCAffiliatePrograms.payments_editConnectedStarRefBot:output_type -> mtproto.payments_ConnectedStarRefBots
	918,  // 2465: mtproto.RPCAntiSpam.channels_toggleAntiSpam:output_type -> mtproto.Updates
	789,  // 2466: mtproto.RPCAntiSpam.channels_reportAntiSpamFalsePositive:output_type -> mtproto.Bool
	919,  // 2467: mtproto.RPCAuthorization.auth_sendCode:output_type -> mtproto.auth_SentCode
	923,  // 2468: mtproto.RPCAuthorization.auth_signUp:output_type -> mtproto.auth_Authorization
	923,  // 2469: mtproto.RPCAuthorization.auth_signIn:output_type -> mtproto.auth_Authorization
	924,  // 2470: mtproto.RPCAuthorization.auth_logOut:output_type -> mtproto.auth_LoggedOut
	789,  // 2471: mtproto.RPCAuthorization.auth_resetAuthorizations:output_type -> mtproto.Bool
	925,  // 2472: mtproto.RPCAuthorization.auth_exportAuthorization:output_type -> mtproto.auth_ExportedAuthorization
	923,  // 2473: mtproto.RPCAuthorization.auth_importAuthorization:output_type -> mtproto.auth_Authorization
	789,  // 2474: mtproto.RPCAuthorization.auth_bindTempAuthKey:output_type -> mtproto.Bool
	923,  // 2475: mtproto.RPCAuthorization.auth_importBotAuthorization:output_type -> mtproto.auth_Authorization
	923,  // 2476: mtproto.RPCAuthorization.auth_checkPassword:output_type -> mtproto.auth_Authorization
	926,  // 2477: mtproto.RPCAuthorization.auth_requestPasswordRecovery:output_type -> mtproto.auth_PasswordRecovery
	923,  // 2478: mtproto.RPCAuthorization.auth_recoverPassword:output_type -> mtproto.auth_Authorization
	919,  // 2479: mtproto.RPCAuthorization.auth_resendCode:output_type -> mtproto.auth_SentCode
	789,  // 2480: mtproto.RPCAuthorization.auth_cancelCode:output_type -> mtproto.Bool
	789,  // 2481: mtproto.RPCAuthorization.auth_dropTempAuthKeys:output_type -> mtproto.Bool
	789,  // 2482: mtproto.RPCAuthorization.auth_checkRecoveryPassword:output_type -> mtproto.Bool
	923,  // 2483: mtproto.RPCAuthorization.auth_importWebTokenAuthorization:output_type -> mtproto.auth_Authorization
	789,  // 2484: mtproto.RPCAuthorization.auth_requestFirebaseSms:output_type -> mtproto.Bool
	919,  // 2485: mtproto.RPCAuthorization.auth_resetLoginEmail:output_type -> mtproto.auth_SentCode
	789,  // 2486: mtproto.RPCAuthorization.auth_reportMissingCode:output_type -> mtproto.Bool
	927,  // 2487: mtproto.RPCAuthorization.account_sendVerifyEmailCode:output_type -> mtproto.account_SentEmailCode
	928,  // 2488: mtproto.RPCAuthorization.account_verifyEmail32DA4CF:output_type -> mtproto.account_EmailVerified
	929,  // 2489: mtproto.RPCAuthorization.account_resetPassword:output_type -> mtproto.account_ResetPasswordResult
	789,  // 2490: mtproto.RPCAuthorization.account_setAuthorizationTTL:output_type -> mtproto.Bool
	789,  // 2491: mtproto.RPCAuthorization.account_changeAuthorizationSettings:output_type -> mtproto.Bool
	789,  // 2492: mtproto.RPCAuthorization.account_invalidateSignInCodes:output_type -> mtproto.Bool
	789,  // 2493: mtproto.RPCAuthorization.account_verifyEmailECBA39DB:output_type -> mtproto.Bool
	915,  // 2494: mtproto.RPCAuthorization.auth_toggleBan:output_type -> mtproto.PredefinedUser
	930,  // 2495: mtproto.RPCAutoDownload.account_getAutoDownloadSettings:output_type -> mtproto.account_AutoDownloadSettings
	789,  // 2496: mtproto.RPCAutoDownload.account_saveAutoDownloadSettings:output_type -> mtproto.Bool
	931,  // 2497: mtproto.RPCAutosave.account_getAutoSaveSettings:output_type -> mtproto.account_AutoSaveSettings
	789,  // 2498: mtproto.RPCAutosave.account_saveAutoSaveSettings:output_type -> mtproto.Bool
	789,  // 2499: mtproto.RPCAutosave.account_deleteAutoSaveExceptions:output_type -> mtproto.Bool
	918,  // 2500: mtproto.RPCBoosts.channels_setBoostsToUnblockRestrictions:output_type -> mtproto.Updates
	932,  // 2501: mtproto.RPCBoosts.premium_getBoostsList:output_type -> mtproto.premium_BoostsList
	933,  // 2502: mtproto.RPCBoosts.premium_getMyBoosts:output_type -> mtproto.premium_MyBoosts
	933,  // 2503: mtproto.RPCBoosts.premium_applyBoost:output_type -> mtproto.premium_MyBoosts
	934,  // 2504: mtproto.RPCBoosts.premium_getBoostsStatus:output_type -> mtproto.premium_BoostsStatus
	932,  // 2505: mtproto.RPCBoosts.premium_getUserBoosts:output_type -> mtproto.premium_BoostsList
	935,  // 2506: mtproto.RPCBoosts.stories_getBoostsStatus:output_type -> mtproto.stories_BoostsStatus
	936,  // 2507: mtproto.RPCBoosts.stories_getBoostersList:output_type -> mtproto.stories_BoostersList
	937,  // 2508: mtproto.RPCBoosts.stories_canApplyBoost:output_type -> mtproto.stories_CanApplyBoostResult
	789,  // 2509: mtproto.RPCBoosts.stories_applyBoost:output_type -> mtproto.Bool
	789,  // 2510: mtproto.RPCBotAdminRight.bots_setBotBroadcastDefaultAdminRights:output_type -> mtproto.Bool
	789,  // 2511: mtproto.RPCBotAdminRight.bots_setBotGroupDefaultAdminRights:output_type -> mtproto.Bool
	938,  // 2512: mtproto.RPCBotMenu.messages_getAttachMenuBots:output_type -> mtproto.AttachMenuBots
	939,  // 2513: mtproto.RPCBotMenu.messages_getAttachMenuBot:output_type -> mtproto.AttachMenuBotsBot
	789,  // 2514: mtproto.RPCBotMenu.messages_toggleBotInAttachMenu:output_type -> mtproto.Bool
	789,  // 2515: mtproto.RPCBotMenuButton.bots_setBotMenuButton:output_type -> mtproto.Bool
	873,  // 2516: mtproto.RPCBotMenuButton.bots_getBotMenuButton:output_type -> mtproto.BotMenuButton
	789,  // 2517: mtproto.RPCBots.bots_setBotCommands:output_type -> mtproto.Bool
	789,  // 2518: mtproto.RPCBots.bots_resetBotCommands:output_type -> mtproto.Bool
	767,  // 2519: mtproto.RPCBots.bots_getBotCommands:output_type -> mtproto.Vector_BotCommand
	789,  // 2520: mtproto.RPCBots.bots_setBotInfo:output_type -> mtproto.Bool
	940,  // 2521: mtproto.RPCBots.bots_getBotInfoDCD914FD:output_type -> mtproto.bots_BotInfo
	750,  // 2522: mtproto.RPCBots.bots_getAdminedBots:output_type -> mtproto.Vector_User
	789,  // 2523: mtproto.RPCBots.bots_setCustomVerification:output_type -> mtproto.Bool
	941,  // 2524: mtproto.RPCBots.bots_getBotRecommendations:output_type -> mtproto.users_Users
	778,  // 2525: mtproto.RPCBots.bots_getBotInfo75EC12E6:output_type -> mtproto.Vector_String
	942,  // 2526: mtproto.RPCBusinessChatLinks.account_createBusinessChatLink:output_type -> mtproto.BusinessChatLink
	942,  // 2527: mtproto.RPCBusinessChatLinks.account_editBusinessChatLink:output_type -> mtproto.BusinessChatLink
	789,  // 2528: mtproto.RPCBusinessChatLinks.account_deleteBusinessChatLink:output_type -> mtproto.Bool
	943,  // 2529: mtproto.RPCBusinessChatLinks.account_getBusinessChatLinks:output_type -> mtproto.account_BusinessChatLinks
	944,  // 2530: mtproto.RPCBusinessChatLinks.account_resolveBusinessChatLink:output_type -> mtproto.account_ResolvedBusinessChatLinks
	918,  // 2531: mtproto.RPCBusinessConnectedBots.account_updateConnectedBot:output_type -> mtproto.Updates
	945,  // 2532: mtproto.RPCBusinessConnectedBots.account_getConnectedBots:output_type -> mtproto.account_ConnectedBots
	918,  // 2533: mtproto.RPCBusinessConnectedBots.account_getBotBusinessConnection:output_type -> mtproto.Updates
	789,  // 2534: mtproto.RPCBusinessConnectedBots.account_toggleConnectedBotPaused:output_type -> mtproto.Bool
	789,  // 2535: mtproto.RPCBusinessConnectedBots.account_disablePeerConnectedBot:output_type -> mtproto.Bool
	789,  // 2536: mtproto.RPCBusinessGreeting.account_updateBusinessGreetingMessage:output_type -> mtproto.Bool
	789,  // 2537: mtproto.RPCBusinessGreeting.account_updateBusinessAwayMessage:output_type -> mtproto.Bool
	789,  // 2538: mtproto.RPCBusinessIntro.account_updateBusinessIntro:output_type -> mtproto.Bool
	789,  // 2539: mtproto.RPCBusinessLocation.account_updateBusinessLocation:output_type -> mtproto.Bool
	789,  // 2540: mtproto.RPCBusinessOpeningHours.account_updateBusinessWorkHours:output_type -> mtproto.Bool
	946,  // 2541: mtproto.RPCBusinessQuickReply.messages_getQuickReplies:output_type -> mtproto.messages_QuickReplies
	789,  // 2542: mtproto.RPCBusinessQuickReply.messages_reorderQuickReplies:output_type -> mtproto.Bool
	789,  // 2543: mtproto.RPCBusinessQuickReply.messages_checkQuickReplyShortcut:output_type -> mtproto.Bool
	789,  // 2544: mtproto.RPCBusinessQuickReply.messages_editQuickReplyShortcut:output_type -> mtproto.Bool
	789,  // 2545: mtproto.RPCBusinessQuickReply.messages_deleteQuickReplyShortcut:output_type -> mtproto.Bool
	947,  // 2546: mtproto.RPCBusinessQuickReply.messages_getQuickReplyMessages:output_type -> mtproto.messages_Messages
	918,  // 2547: mtproto.RPCBusinessQuickReply.messages_sendQuickReplyMessages:output_type -> mtproto.Updates
	918,  // 2548: mtproto.RPCBusinessQuickReply.messages_deleteQuickReplyMessages:output_type -> mtproto.Updates
	948,  // 2549: mtproto.RPCChannelAdRevenue.stats_getBroadcastRevenueStats:output_type -> mtproto.stats_BroadcastRevenueStats
	949,  // 2550: mtproto.RPCChannelAdRevenue.stats_getBroadcastRevenueWithdrawalUrl:output_type -> mtproto.stats_BroadcastRevenueWithdrawalUrl
	950,  // 2551: mtproto.RPCChannelAdRevenue.stats_getBroadcastRevenueTransactions:output_type -> mtproto.stats_BroadcastRevenueTransactions
	951,  // 2552: mtproto.RPCChannelRecommendations.channels_getChannelRecommendations:output_type -> mtproto.messages_Chats
	789,  // 2553: mtproto.RPCChannels.channels_readHistory:output_type -> mtproto.Bool
	952,  // 2554: mtproto.RPCChannels.channels_deleteMessages:output_type -> mtproto.messages_AffectedMessages
	947,  // 2555: mtproto.RPCChannels.channels_getMessages:output_type -> mtproto.messages_Messages
	953,  // 2556: mtproto.RPCChannels.channels_getParticipants:output_type -> mtproto.channels_ChannelParticipants
	954,  // 2557: mtproto.RPCChannels.channels_getParticipant:output_type -> mtproto.channels_ChannelParticipant
	951,  // 2558: mtproto.RPCChannels.channels_getChannels:output_type -> mtproto.messages_Chats
	955,  // 2559: mtproto.RPCChannels.channels_getFullChannel:output_type -> mtproto.messages_ChatFull
	918,  // 2560: mtproto.RPCChannels.channels_createChannel:output_type -> mtproto.Updates
	918,  // 2561: mtproto.RPCChannels.channels_editAdmin:output_type -> mtproto.Updates
	918,  // 2562: mtproto.RPCChannels.channels_editTitle:output_type -> mtproto.Updates
	918,  // 2563: mtproto.RPCChannels.channels_editPhoto:output_type -> mtproto.Updates
	918,  // 2564: mtproto.RPCChannels.channels_joinChannel:output_type -> mtproto.Updates
	918,  // 2565: mtproto.RPCChannels.channels_leaveChannel:output_type -> mtproto.Updates
	956,  // 2566: mtproto.RPCChannels.channels_inviteToChannelC9E33D54:output_type -> mtproto.messages_InvitedUsers
	918,  // 2567: mtproto.RPCChannels.channels_deleteChannel:output_type -> mtproto.Updates
	957,  // 2568: mtproto.RPCChannels.channels_exportMessageLink:output_type -> mtproto.ExportedMessageLink
	918,  // 2569: mtproto.RPCChannels.channels_toggleSignatures:output_type -> mtproto.Updates
	951,  // 2570: mtproto.RPCChannels.channels_getAdminedPublicChannels:output_type -> mtproto.messages_Chats
	918,  // 2571: mtproto.RPCChannels.channels_editBanned:output_type -> mtproto.Updates
	958,  // 2572: mtproto.RPCChannels.channels_getAdminLog:output_type -> mtproto.channels_AdminLogResults
	789,  // 2573: mtproto.RPCChannels.channels_setStickers:output_type -> mtproto.Bool
	789,  // 2574: mtproto.RPCChannels.channels_readMessageContents:output_type -> mtproto.Bool
	918,  // 2575: mtproto.RPCChannels.channels_deleteHistory9BAA9647:output_type -> mtproto.Updates
	918,  // 2576: mtproto.RPCChannels.channels_togglePreHistoryHidden:output_type -> mtproto.Updates
	951,  // 2577: mtproto.RPCChannels.channels_getGroupsForDiscussion:output_type -> mtproto.messages_Chats
	789,  // 2578: mtproto.RPCChannels.channels_setDiscussionGroup:output_type -> mtproto.Bool
	918,  // 2579: mtproto.RPCChannels.channels_editCreator:output_type -> mtproto.Updates
	789,  // 2580: mtproto.RPCChannels.channels_editLocation:output_type -> mtproto.Bool
	918,  // 2581: mtproto.RPCChannels.channels_toggleSlowMode:output_type -> mtproto.Updates
	959,  // 2582: mtproto.RPCChannels.channels_getInactiveChannels:output_type -> mtproto.messages_InactiveChats
	960,  // 2583: mtproto.RPCChannels.channels_deleteParticipantHistory:output_type -> mtproto.messages_AffectedHistory
	918,  // 2584: mtproto.RPCChannels.channels_toggleParticipantsHidden:output_type -> mtproto.Updates
	918,  // 2585: mtproto.RPCChannels.channels_inviteToChannel199F3A6C:output_type -> mtproto.Updates
	789,  // 2586: mtproto.RPCChannels.channels_deleteHistoryAF369D42:output_type -> mtproto.Bool
	961,  // 2587: mtproto.RPCChatInvites.messages_exportChatInvite:output_type -> mtproto.ExportedChatInvite
	962,  // 2588: mtproto.RPCChatInvites.messages_checkChatInvite:output_type -> mtproto.ChatInvite
	918,  // 2589: mtproto.RPCChatInvites.messages_importChatInvite:output_type -> mtproto.Updates
	963,  // 2590: mtproto.RPCChatInvites.messages_getExportedChatInvites:output_type -> mtproto.messages_ExportedChatInvites
	964,  // 2591: mtproto.RPCChatInvites.messages_getExportedChatInvite:output_type -> mtproto.messages_ExportedChatInvite
	964,  // 2592: mtproto.RPCChatInvites.messages_editExportedChatInvite:output_type -> mtproto.messages_ExportedChatInvite
	789,  // 2593: mtproto.RPCChatInvites.messages_deleteRevokedExportedChatInvites:output_type -> mtproto.Bool
	789,  // 2594: mtproto.RPCChatInvites.messages_deleteExportedChatInvite:output_type -> mtproto.Bool
	965,  // 2595: mtproto.RPCChatInvites.messages_getAdminsWithInvites:output_type -> mtproto.messages_ChatAdminsWithInvites
	966,  // 2596: mtproto.RPCChatInvites.messages_getChatInviteImporters:output_type -> mtproto.messages_ChatInviteImporters
	918,  // 2597: mtproto.RPCChatInvites.messages_hideChatJoinRequest:output_type -> mtproto.Updates
	918,  // 2598: mtproto.RPCChatInvites.messages_hideAllChatJoinRequests:output_type -> mtproto.Updates
	918,  // 2599: mtproto.RPCChatInvites.channels_toggleJoinToSend:output_type -> mtproto.Updates
	918,  // 2600: mtproto.RPCChatInvites.channels_toggleJoinRequest:output_type -> mtproto.Updates
	951,  // 2601: mtproto.RPCChats.messages_getChats:output_type -> mtproto.messages_Chats
	955,  // 2602: mtproto.RPCChats.messages_getFullChat:output_type -> mtproto.messages_ChatFull
	918,  // 2603: mtproto.RPCChats.messages_editChatTitle:output_type -> mtproto.Updates
	918,  // 2604: mtproto.RPCChats.messages_editChatPhoto:output_type -> mtproto.Updates
	956,  // 2605: mtproto.RPCChats.messages_addChatUserCBC6D107:output_type -> mtproto.messages_InvitedUsers
	918,  // 2606: mtproto.RPCChats.messages_deleteChatUser:output_type -> mtproto.Updates
	956,  // 2607: mtproto.RPCChats.messages_createChat92CEDDD4:output_type -> mtproto.messages_InvitedUsers
	789,  // 2608: mtproto.RPCChats.messages_editChatAdmin:output_type -> mtproto.Bool
	918,  // 2609: mtproto.RPCChats.messages_migrateChat:output_type -> mtproto.Updates
	951,  // 2610: mtproto.RPCChats.messages_getCommonChats:output_type -> mtproto.messages_Chats
	789,  // 2611: mtproto.RPCChats.messages_editChatAbout:output_type -> mtproto.Bool
	918,  // 2612: mtproto.RPCChats.messages_editChatDefaultBannedRights:output_type -> mtproto.Updates
	789,  // 2613: mtproto.RPCChats.messages_deleteChat:output_type -> mtproto.Bool
	763,  // 2614: mtproto.RPCChats.messages_getMessageReadParticipants31C1C44F:output_type -> mtproto.Vector_ReadParticipantDate
	918,  // 2615: mtproto.RPCChats.channels_convertToGigagroup:output_type -> mtproto.Updates
	789,  // 2616: mtproto.RPCChats.channels_setEmojiStickers:output_type -> mtproto.Bool
	918,  // 2617: mtproto.RPCChats.messages_addChatUserF24753E3:output_type -> mtproto.Updates
	918,  // 2618: mtproto.RPCChats.messages_createChat34A818:output_type -> mtproto.Updates
	951,  // 2619: mtproto.RPCChats.messages_getAllChats:output_type -> mtproto.messages_Chats
	756,  // 2620: mtproto.RPCChats.messages_getMessageReadParticipants2C6F97B7:output_type -> mtproto.Vector_Long
	918,  // 2621: mtproto.RPCChats.messages_createChat9CB126E:output_type -> mtproto.Updates
	967,  // 2622: mtproto.RPCConfiguration.help_getConfig:output_type -> mtproto.Config
	968,  // 2623: mtproto.RPCConfiguration.help_getNearestDc:output_type -> mtproto.NearestDc
	969,  // 2624: mtproto.RPCConfiguration.help_getAppUpdate:output_type -> mtproto.help_AppUpdate
	970,  // 2625: mtproto.RPCConfiguration.help_getInviteText:output_type -> mtproto.help_InviteText
	971,  // 2626: mtproto.RPCConfiguration.help_getSupport:output_type -> mtproto.help_Support
	972,  // 2627: mtproto.RPCConfiguration.help_getAppConfig61E3F854:output_type -> mtproto.help_AppConfig
	973,  // 2628: mtproto.RPCConfiguration.help_getSupportName:output_type -> mtproto.help_SupportName
	789,  // 2629: mtproto.RPCConfiguration.help_dismissSuggestion:output_type -> mtproto.Bool
	974,  // 2630: mtproto.RPCConfiguration.help_getCountriesList:output_type -> mtproto.help_CountriesList
	918,  // 2631: mtproto.RPCConfiguration.help_getAppChangelog:output_type -> mtproto.Updates
	782,  // 2632: mtproto.RPCConfiguration.help_getAppConfig98914110:output_type -> mtproto.JSONValue
	789,  // 2633: mtproto.RPCContacts.account_getContactSignUpNotification:output_type -> mtproto.Bool
	789,  // 2634: mtproto.RPCContacts.account_setContactSignUpNotification:output_type -> mtproto.Bool
	752,  // 2635: mtproto.RPCContacts.contacts_getContactIDs:output_type -> mtproto.Vector_Int
	753,  // 2636: mtproto.RPCContacts.contacts_getStatuses:output_type -> mtproto.Vector_ContactStatus
	975,  // 2637: mtproto.RPCContacts.contacts_getContacts:output_type -> mtproto.contacts_Contacts
	976,  // 2638: mtproto.RPCContacts.contacts_importContacts:output_type -> mtproto.contacts_ImportedContacts
	918,  // 2639: mtproto.RPCContacts.contacts_deleteContacts:output_type -> mtproto.Updates
	789,  // 2640: mtproto.RPCContacts.contacts_deleteByPhones:output_type -> mtproto.Bool
	789,  // 2641: mtproto.RPCContacts.contacts_block:output_type -> mtproto.Bool
	789,  // 2642: mtproto.RPCContacts.contacts_unblock:output_type -> mtproto.Bool
	977,  // 2643: mtproto.RPCContacts.contacts_getBlocked:output_type -> mtproto.contacts_Blocked
	978,  // 2644: mtproto.RPCContacts.contacts_search:output_type -> mtproto.contacts_Found
	979,  // 2645: mtproto.RPCContacts.contacts_getTopPeers:output_type -> mtproto.contacts_TopPeers
	789,  // 2646: mtproto.RPCContacts.contacts_resetTopPeerRating:output_type -> mtproto.Bool
	789,  // 2647: mtproto.RPCContacts.contacts_resetSaved:output_type -> mtproto.Bool
	754,  // 2648: mtproto.RPCContacts.contacts_getSaved:output_type -> mtproto.Vector_SavedContact
	789,  // 2649: mtproto.RPCContacts.contacts_toggleTopPeers:output_type -> mtproto.Bool
	918,  // 2650: mtproto.RPCContacts.contacts_addContact:output_type -> mtproto.Updates
	918,  // 2651: mtproto.RPCContacts.contacts_acceptContact:output_type -> mtproto.Updates
	918,  // 2652: mtproto.RPCContacts.contacts_getLocated:output_type -> mtproto.Updates
	789,  // 2653: mtproto.RPCContacts.contacts_editCloseFriends:output_type -> mtproto.Bool
	789,  // 2654: mtproto.RPCContacts.contacts_setBlocked:output_type -> mtproto.Bool
	916,  // 2655: mtproto.RPCCustomEmojis.account_getDefaultProfilePhotoEmojis:output_type -> mtproto.EmojiList
	916,  // 2656: mtproto.RPCCustomEmojis.account_getDefaultGroupPhotoEmojis:output_type -> mtproto.EmojiList
	764,  // 2657: mtproto.RPCCustomEmojis.messages_getCustomEmojiDocuments:output_type -> mtproto.Vector_Document
	980,  // 2658: mtproto.RPCCustomEmojis.messages_getEmojiStickers:output_type -> mtproto.messages_AllStickers
	981,  // 2659: mtproto.RPCCustomEmojis.messages_getFeaturedEmojiStickers:output_type -> mtproto.messages_FeaturedStickers
	916,  // 2660: mtproto.RPCCustomEmojis.messages_searchCustomEmoji:output_type -> mtproto.EmojiList
	918,  // 2661: mtproto.RPCDeepLinks.messages_startBot:output_type -> mtproto.Updates
	982,  // 2662: mtproto.RPCDeepLinks.help_getRecentMeUrls:output_type -> mtproto.help_RecentMeUrls
	983,  // 2663: mtproto.RPCDeepLinks.help_getDeepLinkInfo:output_type -> mtproto.help_DeepLinkInfo
	984,  // 2664: mtproto.RPCDialogs.messages_getDialogs:output_type -> mtproto.messages_Dialogs
	789,  // 2665: mtproto.RPCDialogs.messages_setTyping:output_type -> mtproto.Bool
	985,  // 2666: mtproto.RPCDialogs.messages_getPeerSettings:output_type -> mtproto.messages_PeerSettings
	986,  // 2667: mtproto.RPCDialogs.messages_getPeerDialogs:output_type -> mtproto.messages_PeerDialogs
	789,  // 2668: mtproto.RPCDialogs.messages_toggleDialogPin:output_type -> mtproto.Bool
	789,  // 2669: mtproto.RPCDialogs.messages_reorderPinnedDialogs:output_type -> mtproto.Bool
	986,  // 2670: mtproto.RPCDialogs.messages_getPinnedDialogs:output_type -> mtproto.messages_PeerDialogs
	918,  // 2671: mtproto.RPCDialogs.messages_sendScreenshotNotification:output_type -> mtproto.Updates
	789,  // 2672: mtproto.RPCDialogs.messages_markDialogUnread:output_type -> mtproto.Bool
	759,  // 2673: mtproto.RPCDialogs.messages_getDialogUnreadMarks:output_type -> mtproto.Vector_DialogPeer
	987,  // 2674: mtproto.RPCDialogs.messages_getOnlines:output_type -> mtproto.ChatOnlines
	789,  // 2675: mtproto.RPCDialogs.messages_hidePeerSettingsBar:output_type -> mtproto.Bool
	918,  // 2676: mtproto.RPCDialogs.messages_setHistoryTTL:output_type -> mtproto.Updates
	789,  // 2677: mtproto.RPCDrafts.messages_saveDraft:output_type -> mtproto.Bool
	918,  // 2678: mtproto.RPCDrafts.messages_getAllDrafts:output_type -> mtproto.Updates
	789,  // 2679: mtproto.RPCDrafts.messages_clearAllDrafts:output_type -> mtproto.Bool
	988,  // 2680: mtproto.RPCEmoji.messages_getEmojiKeywords:output_type -> mtproto.EmojiKeywordsDifference
	988,  // 2681: mtproto.RPCEmoji.messages_getEmojiKeywordsDifference:output_type -> mtproto.EmojiKeywordsDifference
	760,  // 2682: mtproto.RPCEmoji.messages_getEmojiKeywordsLanguages:output_type -> mtproto.Vector_EmojiLanguage
	989,  // 2683: mtproto.RPCEmoji.messages_getEmojiURL:output_type -> mtproto.EmojiURL
	990,  // 2684: mtproto.RPCEmojiCategories.messages_getEmojiGroups:output_type -> mtproto.messages_EmojiGroups
	990,  // 2685: mtproto.RPCEmojiCategories.messages_getEmojiStatusGroups:output_type -> mtproto.messages_EmojiGroups
	990,  // 2686: mtproto.RPCEmojiCategories.messages_getEmojiProfilePhotoGroups:output_type -> mtproto.messages_EmojiGroups
	990,  // 2687: mtproto.RPCEmojiCategories.messages_getEmojiStickerGroups:output_type -> mtproto.messages_EmojiGroups
	789,  // 2688: mtproto.RPCEmojiStatus.account_updateEmojiStatus:output_type -> mtproto.Bool
	991,  // 2689: mtproto.RPCEmojiStatus.account_getDefaultEmojiStatuses:output_type -> mtproto.account_EmojiStatuses
	991,  // 2690: mtproto.RPCEmojiStatus.account_getRecentEmojiStatuses:output_type -> mtproto.account_EmojiStatuses
	789,  // 2691: mtproto.RPCEmojiStatus.account_clearRecentEmojiStatuses:output_type -> mtproto.Bool
	991,  // 2692: mtproto.RPCEmojiStatus.account_getChannelDefaultEmojiStatuses:output_type -> mtproto.account_EmojiStatuses
	916,  // 2693: mtproto.RPCEmojiStatus.account_getChannelRestrictedStatusEmojis:output_type -> mtproto.EmojiList
	991,  // 2694: mtproto.RPCEmojiStatus.account_getCollectibleEmojiStatuses:output_type -> mtproto.account_EmojiStatuses
	918,  // 2695: mtproto.RPCEmojiStatus.channels_updateEmojiStatus:output_type -> mtproto.Updates
	789,  // 2696: mtproto.RPCEmojiStatus.bots_updateUserEmojiStatus:output_type -> mtproto.Bool
	789,  // 2697: mtproto.RPCEmojiStatus.bots_toggleUserEmojiStatusPermission:output_type -> mtproto.Bool
	918,  // 2698: mtproto.RPCFactChecks.messages_editFactCheck:output_type -> mtproto.Updates
	918,  // 2699: mtproto.RPCFactChecks.messages_deleteFactCheck:output_type -> mtproto.Updates
	765,  // 2700: mtproto.RPCFactChecks.messages_getFactCheck:output_type -> mtproto.Vector_FactCheck
	904,  // 2701: mtproto.RPCFiles.messages_getDocumentByHash:output_type -> mtproto.Document
	992,  // 2702: mtproto.RPCFiles.messages_uploadMedia:output_type -> mtproto.MessageMedia
	993,  // 2703: mtproto.RPCFiles.messages_uploadEncryptedFile:output_type -> mtproto.EncryptedFile
	789,  // 2704: mtproto.RPCFiles.upload_saveFilePart:output_type -> mtproto.Bool
	994,  // 2705: mtproto.RPCFiles.upload_getFile:output_type -> mtproto.upload_File
	789,  // 2706: mtproto.RPCFiles.upload_saveBigFilePart:output_type -> mtproto.Bool
	995,  // 2707: mtproto.RPCFiles.upload_getWebFile:output_type -> mtproto.upload_WebFile
	996,  // 2708: mtproto.RPCFiles.upload_getCdnFile:output_type -> mtproto.upload_CdnFile
	766,  // 2709: mtproto.RPCFiles.upload_reuploadCdnFile:output_type -> mtproto.Vector_FileHash
	766,  // 2710: mtproto.RPCFiles.upload_getCdnFileHashes:output_type -> mtproto.Vector_FileHash
	766,  // 2711: mtproto.RPCFiles.upload_getFileHashes:output_type -> mtproto.Vector_FileHash
	997,  // 2712: mtproto.RPCFiles.help_getCdnConfig:output_type -> mtproto.CdnConfig
	789,  // 2713: mtproto.RPCFolderTags.messages_toggleDialogFilterTags:output_type -> mtproto.Bool
	998,  // 2714: mtproto.RPCFolders.messages_getDialogFiltersEFD48C89:output_type -> mtproto.messages_DialogFilters
	762,  // 2715: mtproto.RPCFolders.messages_getSuggestedDialogFilters:output_type -> mtproto.Vector_DialogFilterSuggested
	789,  // 2716: mtproto.RPCFolders.messages_updateDialogFilter:output_type -> mtproto.Bool
	789,  // 2717: mtproto.RPCFolders.messages_updateDialogFiltersOrder:output_type -> mtproto.Bool
	918,  // 2718: mtproto.RPCFolders.folders_editPeerFolders:output_type -> mtproto.Updates
	999,  // 2719: mtproto.RPCFolders.chatlists_exportChatlistInvite:output_type -> mtproto.chatlists_ExportedChatlistInvite
	789,  // 2720: mtproto.RPCFolders.chatlists_deleteExportedInvite:output_type -> mtproto.Bool
	1000, // 2721: mtproto.RPCFolders.chatlists_editExportedInvite:output_type -> mtproto.ExportedChatlistInvite
	1001, // 2722: mtproto.RPCFolders.chatlists_getExportedInvites:output_type -> mtproto.chatlists_ExportedInvites
	1002, // 2723: mtproto.RPCFolders.chatlists_checkChatlistInvite:output_type -> mtproto.chatlists_ChatlistInvite
	918,  // 2724: mtproto.RPCFolders.chatlists_joinChatlistInvite:output_type -> mtproto.Updates
	1003, // 2725: mtproto.RPCFolders.chatlists_getChatlistUpdates:output_type -> mtproto.chatlists_ChatlistUpdates
	918,  // 2726: mtproto.RPCFolders.chatlists_joinChatlistUpdates:output_type -> mtproto.Updates
	789,  // 2727: mtproto.RPCFolders.chatlists_hideChatlistUpdates:output_type -> mtproto.Bool
	775,  // 2728: mtproto.RPCFolders.chatlists_getLeaveChatlistSuggestions:output_type -> mtproto.Vector_Peer
	918,  // 2729: mtproto.RPCFolders.chatlists_leaveChatlist:output_type -> mtproto.Updates
	777,  // 2730: mtproto.RPCFolders.messages_getDialogFiltersF19ED96D:output_type -> mtproto.Vector_DialogFilter
	918,  // 2731: mtproto.RPCFolders.folders_deleteFolder:output_type -> mtproto.Updates
	918,  // 2732: mtproto.RPCForums.channels_toggleForum:output_type -> mtproto.Updates
	918,  // 2733: mtproto.RPCForums.channels_createForumTopic:output_type -> mtproto.Updates
	1004, // 2734: mtproto.RPCForums.channels_getForumTopics:output_type -> mtproto.messages_ForumTopics
	1004, // 2735: mtproto.RPCForums.channels_getForumTopicsByID:output_type -> mtproto.messages_ForumTopics
	918,  // 2736: mtproto.RPCForums.channels_editForumTopic:output_type -> mtproto.Updates
	918,  // 2737: mtproto.RPCForums.channels_updatePinnedForumTopic:output_type -> mtproto.Updates
	960,  // 2738: mtproto.RPCForums.channels_deleteTopicHistory:output_type -> mtproto.messages_AffectedHistory
	918,  // 2739: mtproto.RPCForums.channels_reorderPinnedForumTopics:output_type -> mtproto.Updates
	918,  // 2740: mtproto.RPCForums.channels_toggleViewForumAsMessages:output_type -> mtproto.Updates
	789,  // 2741: mtproto.RPCFragment.account_reorderUsernames:output_type -> mtproto.Bool
	789,  // 2742: mtproto.RPCFragment.account_toggleUsername:output_type -> mtproto.Bool
	789,  // 2743: mtproto.RPCFragment.channels_reorderUsernames:output_type -> mtproto.Bool
	789,  // 2744: mtproto.RPCFragment.channels_toggleUsername:output_type -> mtproto.Bool
	789,  // 2745: mtproto.RPCFragment.channels_deactivateAllUsernames:output_type -> mtproto.Bool
	789,  // 2746: mtproto.RPCFragment.bots_reorderUsernames:output_type -> mtproto.Bool
	789,  // 2747: mtproto.RPCFragment.bots_toggleUsername:output_type -> mtproto.Bool
	1005, // 2748: mtproto.RPCFragmentCollectibles.fragment_getCollectibleInfo:output_type -> mtproto.fragment_CollectibleInfo
	918,  // 2749: mtproto.RPCGames.messages_setGameScore:output_type -> mtproto.Updates
	789,  // 2750: mtproto.RPCGames.messages_setInlineGameScore:output_type -> mtproto.Bool
	1006, // 2751: mtproto.RPCGames.messages_getGameHighScores:output_type -> mtproto.messages_HighScores
	1006, // 2752: mtproto.RPCGames.messages_getInlineGameHighScores:output_type -> mtproto.messages_HighScores
	1007, // 2753: mtproto.RPCGifs.messages_getSavedGifs:output_type -> mtproto.messages_SavedGifs
	789,  // 2754: mtproto.RPCGifs.messages_saveGif:output_type -> mtproto.Bool
	1008, // 2755: mtproto.RPCGiftCodes.payments_checkGiftCode:output_type -> mtproto.payments_CheckedGiftCode
	918,  // 2756: mtproto.RPCGiftCodes.payments_applyGiftCode:output_type -> mtproto.Updates
	1009, // 2757: mtproto.RPCGifts.payments_getStarGifts:output_type -> mtproto.payments_StarGifts
	789,  // 2758: mtproto.RPCGifts.payments_saveStarGift:output_type -> mtproto.Bool
	789,  // 2759: mtproto.RPCGifts.payments_convertStarGift:output_type -> mtproto.Bool
	1010, // 2760: mtproto.RPCGifts.payments_getStarGiftUpgradePreview:output_type -> mtproto.payments_StarGiftUpgradePreview
	918,  // 2761: mtproto.RPCGifts.payments_upgradeStarGift:output_type -> mtproto.Updates
	918,  // 2762: mtproto.RPCGifts.payments_transferStarGift:output_type -> mtproto.Updates
	1011, // 2763: mtproto.RPCGifts.payments_getUniqueStarGift:output_type -> mtproto.payments_UniqueStarGift
	1012, // 2764: mtproto.RPCGifts.payments_getSavedStarGifts:output_type -> mtproto.payments_SavedStarGifts
	1012, // 2765: mtproto.RPCGifts.payments_getSavedStarGift:output_type -> mtproto.payments_SavedStarGifts
	1013, // 2766: mtproto.RPCGifts.payments_getStarGiftWithdrawalUrl:output_type -> mtproto.payments_StarGiftWithdrawalUrl
	789,  // 2767: mtproto.RPCGifts.payments_toggleChatStarGiftNotifications:output_type -> mtproto.Bool
	789,  // 2768: mtproto.RPCGifts.payments_toggleStarGiftsPinnedToTop:output_type -> mtproto.Bool
	1014, // 2769: mtproto.RPCGifts.payments_getUserStarGifts:output_type -> mtproto.payments_UserStarGifts
	1014, // 2770: mtproto.RPCGifts.payments_getUserStarGift:output_type -> mtproto.payments_UserStarGifts
	769,  // 2771: mtproto.RPCGiveaways.payments_getPremiumGiftCodeOptions:output_type -> mtproto.Vector_PremiumGiftCodeOption
	1015, // 2772: mtproto.RPCGiveaways.payments_getGiveawayInfo:output_type -> mtproto.payments_GiveawayInfo
	918,  // 2773: mtproto.RPCGiveaways.payments_launchPrepaidGiveaway:output_type -> mtproto.Updates
	772,  // 2774: mtproto.RPCGiveaways.payments_getStarsGiveawayOptions:output_type -> mtproto.Vector_StarsGiveawayOption
	918,  // 2775: mtproto.RPCGroupCalls.phone_createGroupCall:output_type -> mtproto.Updates
	918,  // 2776: mtproto.RPCGroupCalls.phone_joinGroupCall:output_type -> mtproto.Updates
	918,  // 2777: mtproto.RPCGroupCalls.phone_leaveGroupCall:output_type -> mtproto.Updates
	918,  // 2778: mtproto.RPCGroupCalls.phone_inviteToGroupCall:output_type -> mtproto.Updates
	918,  // 2779: mtproto.RPCGroupCalls.phone_discardGroupCall:output_type -> mtproto.Updates
	918,  // 2780: mtproto.RPCGroupCalls.phone_toggleGroupCallSettings:output_type -> mtproto.Updates
	1016, // 2781: mtproto.RPCGroupCalls.phone_getGroupCall:output_type -> mtproto.phone_GroupCall
	1017, // 2782: mtproto.RPCGroupCalls.phone_getGroupParticipants:output_type -> mtproto.phone_GroupParticipants
	752,  // 2783: mtproto.RPCGroupCalls.phone_checkGroupCall:output_type -> mtproto.Vector_Int
	918,  // 2784: mtproto.RPCGroupCalls.phone_toggleGroupCallRecord:output_type -> mtproto.Updates
	918,  // 2785: mtproto.RPCGroupCalls.phone_editGroupCallParticipant:output_type -> mtproto.Updates
	918,  // 2786: mtproto.RPCGroupCalls.phone_editGroupCallTitle:output_type -> mtproto.Updates
	1018, // 2787: mtproto.RPCGroupCalls.phone_getGroupCallJoinAs:output_type -> mtproto.phone_JoinAsPeers
	1019, // 2788: mtproto.RPCGroupCalls.phone_exportGroupCallInvite:output_type -> mtproto.phone_ExportedGroupCallInvite
	918,  // 2789: mtproto.RPCGroupCalls.phone_toggleGroupCallStartSubscription:output_type -> mtproto.Updates
	918,  // 2790: mtproto.RPCGroupCalls.phone_startScheduledGroupCall:output_type -> mtproto.Updates
	789,  // 2791: mtproto.RPCGroupCalls.phone_saveDefaultGroupCallJoinAs:output_type -> mtproto.Bool
	918,  // 2792: mtproto.RPCGroupCalls.phone_joinGroupCallPresentation:output_type -> mtproto.Updates
	918,  // 2793: mtproto.RPCGroupCalls.phone_leaveGroupCallPresentation:output_type -> mtproto.Updates
	1020, // 2794: mtproto.RPCGroupCalls.phone_getGroupCallStreamChannels:output_type -> mtproto.phone_GroupCallStreamChannels
	1021, // 2795: mtproto.RPCGroupCalls.phone_getGroupCallStreamRtmpUrl:output_type -> mtproto.phone_GroupCallStreamRtmpUrl
	1022, // 2796: mtproto.RPCImportedChats.messages_checkHistoryImport:output_type -> mtproto.messages_HistoryImportParsed
	1023, // 2797: mtproto.RPCImportedChats.messages_initHistoryImport:output_type -> mtproto.messages_HistoryImport
	992,  // 2798: mtproto.RPCImportedChats.messages_uploadImportedMedia:output_type -> mtproto.MessageMedia
	789,  // 2799: mtproto.RPCImportedChats.messages_startHistoryImport:output_type -> mtproto.Bool
	1024, // 2800: mtproto.RPCImportedChats.messages_checkHistoryImportPeer:output_type -> mtproto.messages_CheckedHistoryImportPeer
	1025, // 2801: mtproto.RPCInlineBot.messages_getInlineBotResults:output_type -> mtproto.messages_BotResults
	789,  // 2802: mtproto.RPCInlineBot.messages_setInlineBotResults:output_type -> mtproto.Bool
	918,  // 2803: mtproto.RPCInlineBot.messages_sendInlineBotResult:output_type -> mtproto.Updates
	789,  // 2804: mtproto.RPCInlineBot.messages_editInlineBotMessage:output_type -> mtproto.Bool
	1026, // 2805: mtproto.RPCInlineBot.messages_getBotCallbackAnswer:output_type -> mtproto.messages_BotCallbackAnswer
	789,  // 2806: mtproto.RPCInlineBot.messages_setBotCallbackAnswer:output_type -> mtproto.Bool
	918,  // 2807: mtproto.RPCInlineBot.messages_sendBotRequestedPeer:output_type -> mtproto.Updates
	789,  // 2808: mtproto.RPCInternalBot.help_setBotUpdatesStatus:output_type -> mtproto.Bool
	858,  // 2809: mtproto.RPCInternalBot.bots_sendCustomRequest:output_type -> mtproto.DataJSON
	789,  // 2810: mtproto.RPCInternalBot.bots_answerWebhookJSONQuery:output_type -> mtproto.Bool
	1027, // 2811: mtproto.RPCLangpack.langpack_getLangPack:output_type -> mtproto.LangPackDifference
	773,  // 2812: mtproto.RPCLangpack.langpack_getStrings:output_type -> mtproto.Vector_LangPackString
	1027, // 2813: mtproto.RPCLangpack.langpack_getDifference:output_type -> mtproto.LangPackDifference
	774,  // 2814: mtproto.RPCLangpack.langpack_getLanguages:output_type -> mtproto.Vector_LangPackLanguage
	913,  // 2815: mtproto.RPCLangpack.langpack_getLanguage:output_type -> mtproto.LangPackLanguage
	1028, // 2816: mtproto.RPCMainMiniBotApps.messages_requestMainWebView:output_type -> mtproto.WebViewResult
	1029, // 2817: mtproto.RPCMainMiniBotApps.bots_getPopularAppBots:output_type -> mtproto.bots_PopularAppBots
	907,  // 2818: mtproto.RPCMainMiniBotApps.bots_addPreviewMedia:output_type -> mtproto.BotPreviewMedia
	907,  // 2819: mtproto.RPCMainMiniBotApps.bots_editPreviewMedia:output_type -> mtproto.BotPreviewMedia
	789,  // 2820: mtproto.RPCMainMiniBotApps.bots_deletePreviewMedia:output_type -> mtproto.Bool
	789,  // 2821: mtproto.RPCMainMiniBotApps.bots_reorderPreviewMedias:output_type -> mtproto.Bool
	1030, // 2822: mtproto.RPCMainMiniBotApps.bots_getPreviewInfo:output_type -> mtproto.bots_PreviewInfo
	768,  // 2823: mtproto.RPCMainMiniBotApps.bots_getPreviewMedias:output_type -> mtproto.Vector_BotPreviewMedia
	1031, // 2824: mtproto.RPCMessageEffects.messages_getAvailableEffects:output_type -> mtproto.messages_AvailableEffects
	918,  // 2825: mtproto.RPCMessageThreads.contacts_blockFromReplies:output_type -> mtproto.Updates
	947,  // 2826: mtproto.RPCMessageThreads.messages_getReplies:output_type -> mtproto.messages_Messages
	1032, // 2827: mtproto.RPCMessageThreads.messages_getDiscussionMessage:output_type -> mtproto.messages_DiscussionMessage
	789,  // 2828: mtproto.RPCMessageThreads.messages_readDiscussion:output_type -> mtproto.Bool
	947,  // 2829: mtproto.RPCMessages.messages_getMessages:output_type -> mtproto.messages_Messages
	947,  // 2830: mtproto.RPCMessages.messages_getHistory:output_type -> mtproto.messages_Messages
	947,  // 2831: mtproto.RPCMessages.messages_search:output_type -> mtproto.messages_Messages
	952,  // 2832: mtproto.RPCMessages.messages_readHistory:output_type -> mtproto.messages_AffectedMessages
	960,  // 2833: mtproto.RPCMessages.messages_deleteHistory:output_type -> mtproto.messages_AffectedHistory
	952,  // 2834: mtproto.RPCMessages.messages_deleteMessages:output_type -> mtproto.messages_AffectedMessages
	755,  // 2835: mtproto.RPCMessages.messages_receivedMessages:output_type -> mtproto.Vector_ReceivedNotifyMessage
	918,  // 2836: mtproto.RPCMessages.messages_sendMessage:output_type -> mtproto.Updates
	918,  // 2837: mtproto.RPCMessages.messages_sendMedia:output_type -> mtproto.Updates
	918,  // 2838: mtproto.RPCMessages.messages_forwardMessages:output_type -> mtproto.Updates
	952,  // 2839: mtproto.RPCMessages.messages_readMessageContents:output_type -> mtproto.messages_AffectedMessages
	1033, // 2840: mtproto.RPCMessages.messages_getMessagesViews:output_type -> mtproto.messages_MessageViews
	947,  // 2841: mtproto.RPCMessages.messages_searchGlobal:output_type -> mtproto.messages_Messages
	1034, // 2842: mtproto.RPCMessages.messages_getMessageEditData:output_type -> mtproto.messages_MessageEditData
	918,  // 2843: mtproto.RPCMessages.messages_editMessage:output_type -> mtproto.Updates
	947,  // 2844: mtproto.RPCMessages.messages_getUnreadMentions:output_type -> mtproto.messages_Messages
	960,  // 2845: mtproto.RPCMessages.messages_readMentions:output_type -> mtproto.messages_AffectedHistory
	947,  // 2846: mtproto.RPCMessages.messages_getRecentLocations:output_type -> mtproto.messages_Messages
	918,  // 2847: mtproto.RPCMessages.messages_sendMultiMedia:output_type -> mtproto.Updates
	918,  // 2848: mtproto.RPCMessages.messages_updatePinnedMessage:output_type -> mtproto.Updates
	761,  // 2849: mtproto.RPCMessages.messages_getSearchCounters:output_type -> mtproto.Vector_Messages_SearchCounter
	960,  // 2850: mtproto.RPCMessages.messages_unpinAllMessages:output_type -> mtproto.messages_AffectedHistory
	1035, // 2851: mtproto.RPCMessages.messages_getSearchResultsCalendar:output_type -> mtproto.messages_SearchResultsCalendar
	1036, // 2852: mtproto.RPCMessages.messages_getSearchResultsPositions:output_type -> mtproto.messages_SearchResultsPositions
	918,  // 2853: mtproto.RPCMessages.messages_toggleNoForwards:output_type -> mtproto.Updates
	789,  // 2854: mtproto.RPCMessages.messages_saveDefaultSendAs:output_type -> mtproto.Bool
	947,  // 2855: mtproto.RPCMessages.messages_searchSentMedia:output_type -> mtproto.messages_Messages
	1037, // 2856: mtproto.RPCMessages.messages_getOutboxReadDate:output_type -> mtproto.OutboxReadDate
	789,  // 2857: mtproto.RPCMessages.messages_reportMessagesDelivery:output_type -> mtproto.Bool
	1038, // 2858: mtproto.RPCMessages.channels_getSendAs:output_type -> mtproto.channels_SendAsPeers
	947,  // 2859: mtproto.RPCMessages.channels_searchPosts:output_type -> mtproto.messages_Messages
	1028, // 2860: mtproto.RPCMiniBotApps.messages_requestWebView:output_type -> mtproto.WebViewResult
	789,  // 2861: mtproto.RPCMiniBotApps.messages_prolongWebView:output_type -> mtproto.Bool
	1028, // 2862: mtproto.RPCMiniBotApps.messages_requestSimpleWebView413A3E73:output_type -> mtproto.WebViewResult
	1039, // 2863: mtproto.RPCMiniBotApps.messages_sendWebViewResultMessage:output_type -> mtproto.WebViewMessageSent
	918,  // 2864: mtproto.RPCMiniBotApps.messages_sendWebViewData:output_type -> mtproto.Updates
	1040, // 2865: mtproto.RPCMiniBotApps.messages_getBotApp:output_type -> mtproto.messages_BotApp
	1028, // 2866: mtproto.RPCMiniBotApps.messages_requestAppWebView53618BCE:output_type -> mtproto.WebViewResult
	789,  // 2867: mtproto.RPCMiniBotApps.bots_canSendMessage:output_type -> mtproto.Bool
	918,  // 2868: mtproto.RPCMiniBotApps.bots_allowSendMessage:output_type -> mtproto.Updates
	858,  // 2869: mtproto.RPCMiniBotApps.bots_invokeWebViewCustomMethod:output_type -> mtproto.DataJSON
	789,  // 2870: mtproto.RPCMiniBotApps.bots_checkDownloadFileParams:output_type -> mtproto.Bool
	1041, // 2871: mtproto.RPCMiniBotApps.messages_requestSimpleWebView1A46500A:output_type -> mtproto.SimpleWebViewResult
	1042, // 2872: mtproto.RPCMiniBotApps.messages_requestAppWebView8C5A3B3C:output_type -> mtproto.AppWebViewResult
	1041, // 2873: mtproto.RPCMiniBotApps.messages_requestSimpleWebView299BEC8E:output_type -> mtproto.SimpleWebViewResult
	1041, // 2874: mtproto.RPCMiniBotApps.messages_requestSimpleWebView6ABB2F73:output_type -> mtproto.SimpleWebViewResult
	789,  // 2875: mtproto.RPCMiscellaneous.help_saveAppLog:output_type -> mtproto.Bool
	789,  // 2876: mtproto.RPCMiscellaneous.help_test:output_type -> mtproto.Bool
	789,  // 2877: mtproto.RPCNotification.account_registerDevice:output_type -> mtproto.Bool
	789,  // 2878: mtproto.RPCNotification.account_unregisterDevice:output_type -> mtproto.Bool
	789,  // 2879: mtproto.RPCNotification.account_updateNotifySettings:output_type -> mtproto.Bool
	1043, // 2880: mtproto.RPCNotification.account_getNotifySettings:output_type -> mtproto.PeerNotifySettings
	789,  // 2881: mtproto.RPCNotification.account_resetNotifySettings:output_type -> mtproto.Bool
	789,  // 2882: mtproto.RPCNotification.account_updateDeviceLocked:output_type -> mtproto.Bool
	918,  // 2883: mtproto.RPCNotification.account_getNotifyExceptions:output_type -> mtproto.Updates
	789,  // 2884: mtproto.RPCNsfw.account_setContentSettings:output_type -> mtproto.Bool
	1044, // 2885: mtproto.RPCNsfw.account_getContentSettings:output_type -> mtproto.account_ContentSettings
	918,  // 2886: mtproto.RPCPaidMedia.messages_getExtendedMedia:output_type -> mtproto.Updates
	789,  // 2887: mtproto.RPCPaidMessage.account_addNoPaidMessagesException:output_type -> mtproto.Bool
	1045, // 2888: mtproto.RPCPaidMessage.account_getPaidMessagesRevenue:output_type -> mtproto.account_PaidMessagesRevenue
	918,  // 2889: mtproto.RPCPaidMessage.channels_updatePaidMessagesPrice:output_type -> mtproto.Updates
	1046, // 2890: mtproto.RPCPassport.account_getAuthorizations:output_type -> mtproto.account_Authorizations
	748,  // 2891: mtproto.RPCPassport.account_getAllSecureValues:output_type -> mtproto.Vector_SecureValue
	748,  // 2892: mtproto.RPCPassport.account_getSecureValue:output_type -> mtproto.Vector_SecureValue
	891,  // 2893: mtproto.RPCPassport.account_saveSecureValue:output_type -> mtproto.SecureValue
	789,  // 2894: mtproto.RPCPassport.account_deleteSecureValue:output_type -> mtproto.Bool
	1047, // 2895: mtproto.RPCPassport.account_getAuthorizationForm:output_type -> mtproto.account_AuthorizationForm
	789,  // 2896: mtproto.RPCPassport.account_acceptAuthorization:output_type -> mtproto.Bool
	919,  // 2897: mtproto.RPCPassport.account_sendVerifyPhoneCode:output_type -> mtproto.auth_SentCode
	789,  // 2898: mtproto.RPCPassport.account_verifyPhone:output_type -> mtproto.Bool
	789,  // 2899: mtproto.RPCPassport.users_setSecureValueErrors:output_type -> mtproto.Bool
	1048, // 2900: mtproto.RPCPassport.help_getPassportConfig:output_type -> mtproto.help_PassportConfig
	1049, // 2901: mtproto.RPCPayments.account_getTmpPassword:output_type -> mtproto.account_TmpPassword
	789,  // 2902: mtproto.RPCPayments.messages_setBotShippingResults:output_type -> mtproto.Bool
	789,  // 2903: mtproto.RPCPayments.messages_setBotPrecheckoutResults:output_type -> mtproto.Bool
	1050, // 2904: mtproto.RPCPayments.payments_getPaymentForm:output_type -> mtproto.payments_PaymentForm
	1051, // 2905: mtproto.RPCPayments.payments_getPaymentReceipt:output_type -> mtproto.payments_PaymentReceipt
	1052, // 2906: mtproto.RPCPayments.payments_validateRequestedInfo:output_type -> mtproto.payments_ValidatedRequestedInfo
	1053, // 2907: mtproto.RPCPayments.payments_sendPaymentForm:output_type -> mtproto.payments_PaymentResult
	1054, // 2908: mtproto.RPCPayments.payments_getSavedInfo:output_type -> mtproto.payments_SavedInfo
	789,  // 2909: mtproto.RPCPayments.payments_clearSavedInfo:output_type -> mtproto.Bool
	1055, // 2910: mtproto.RPCPayments.payments_getBankCardData:output_type -> mtproto.payments_BankCardData
	1056, // 2911: mtproto.RPCPayments.payments_exportInvoice:output_type -> mtproto.payments_ExportedInvoice
	918,  // 2912: mtproto.RPCPayments.payments_requestRecurringPayment:output_type -> mtproto.Updates
	918,  // 2913: mtproto.RPCPayments.payments_restorePlayMarketReceipt:output_type -> mtproto.Updates
	918,  // 2914: mtproto.RPCPolls.messages_sendVote:output_type -> mtproto.Updates
	918,  // 2915: mtproto.RPCPolls.messages_getPollResults:output_type -> mtproto.Updates
	1057, // 2916: mtproto.RPCPolls.messages_getPollVotes:output_type -> mtproto.messages_VotesList
	915,  // 2917: mtproto.RPCPredefined.predefined_createPredefinedUser:output_type -> mtproto.PredefinedUser
	915,  // 2918: mtproto.RPCPredefined.predefined_updatePredefinedUsername:output_type -> mtproto.PredefinedUser
	915,  // 2919: mtproto.RPCPredefined.predefined_updatePredefinedProfile:output_type -> mtproto.PredefinedUser
	915,  // 2920: mtproto.RPCPredefined.predefined_updatePredefinedVerified:output_type -> mtproto.PredefinedUser
	915,  // 2921: mtproto.RPCPredefined.predefined_updatePredefinedCode:output_type -> mtproto.PredefinedUser
	915,  // 2922: mtproto.RPCPredefined.predefined_getPredefinedUser:output_type -> mtproto.PredefinedUser
	779,  // 2923: mtproto.RPCPredefined.predefined_getPredefinedUsers:output_type -> mtproto.Vector_PredefinedUser
	1058, // 2924: mtproto.RPCPremium.help_getPremiumPromo:output_type -> mtproto.help_PremiumPromo
	918,  // 2925: mtproto.RPCPremium.payments_assignAppStoreTransaction:output_type -> mtproto.Updates
	918,  // 2926: mtproto.RPCPremium.payments_assignPlayMarketTransaction:output_type -> mtproto.Updates
	789,  // 2927: mtproto.RPCPremium.payments_canPurchaseStore:output_type -> mtproto.Bool
	789,  // 2928: mtproto.RPCPremium.payments_canPurchasePremium:output_type -> mtproto.Bool
	1059, // 2929: mtproto.RPCPreparedInlineMessages.messages_savePreparedInlineMessage:output_type -> mtproto.messages_BotPreparedInlineMessage
	1060, // 2930: mtproto.RPCPreparedInlineMessages.messages_getPreparedInlineMessage:output_type -> mtproto.messages_PreparedInlineMessage
	1061, // 2931: mtproto.RPCPrivacySettings.account_getPrivacy:output_type -> mtproto.account_PrivacyRules
	1061, // 2932: mtproto.RPCPrivacySettings.account_setPrivacy:output_type -> mtproto.account_PrivacyRules
	812,  // 2933: mtproto.RPCPrivacySettings.account_getGlobalPrivacySettings:output_type -> mtproto.GlobalPrivacySettings
	812,  // 2934: mtproto.RPCPrivacySettings.account_setGlobalPrivacySettings:output_type -> mtproto.GlobalPrivacySettings
	751,  // 2935: mtproto.RPCPrivacySettings.users_getRequirementsToContact:output_type -> mtproto.Vector_RequirementToContact
	789,  // 2936: mtproto.RPCPrivacySettings.messages_setDefaultHistoryTTL:output_type -> mtproto.Bool
	1062, // 2937: mtproto.RPCPrivacySettings.messages_getDefaultHistoryTTL:output_type -> mtproto.DefaultHistoryTTL
	776,  // 2938: mtproto.RPCPrivacySettings.users_getIsPremiumRequiredToContact:output_type -> mtproto.Vector_Bool
	1063, // 2939: mtproto.RPCProfileLinks.contacts_exportContactToken:output_type -> mtproto.ExportedContactToken
	893,  // 2940: mtproto.RPCProfileLinks.contacts_importContactToken:output_type -> mtproto.User
	1064, // 2941: mtproto.RPCPromoData.help_getPromoData:output_type -> mtproto.help_PromoData
	789,  // 2942: mtproto.RPCPromoData.help_hidePromoData:output_type -> mtproto.Bool
	1065, // 2943: mtproto.RPCQrCode.auth_exportLoginToken:output_type -> mtproto.auth_LoginToken
	1065, // 2944: mtproto.RPCQrCode.auth_importLoginToken:output_type -> mtproto.auth_LoginToken
	1066, // 2945: mtproto.RPCQrCode.auth_acceptLoginToken:output_type -> mtproto.Authorization
	828,  // 2946: mtproto.RPCReactionNotification.account_getReactionsNotifySettings:output_type -> mtproto.ReactionsNotifySettings
	828,  // 2947: mtproto.RPCReactionNotification.account_setReactionsNotifySettings:output_type -> mtproto.ReactionsNotifySettings
	918,  // 2948: mtproto.RPCReactions.messages_sendReaction:output_type -> mtproto.Updates
	918,  // 2949: mtproto.RPCReactions.messages_getMessagesReactions:output_type -> mtproto.Updates
	1067, // 2950: mtproto.RPCReactions.messages_getMessageReactionsList:output_type -> mtproto.messages_MessageReactionsList
	918,  // 2951: mtproto.RPCReactions.messages_setChatAvailableReactions:output_type -> mtproto.Updates
	1068, // 2952: mtproto.RPCReactions.messages_getAvailableReactions:output_type -> mtproto.messages_AvailableReactions
	789,  // 2953: mtproto.RPCReactions.messages_setDefaultReaction:output_type -> mtproto.Bool
	947,  // 2954: mtproto.RPCReactions.messages_getUnreadReactions:output_type -> mtproto.messages_Messages
	960,  // 2955: mtproto.RPCReactions.messages_readReactions:output_type -> mtproto.messages_AffectedHistory
	789,  // 2956: mtproto.RPCReactions.messages_reportReaction:output_type -> mtproto.Bool
	1069, // 2957: mtproto.RPCReactions.messages_getTopReactions:output_type -> mtproto.messages_Reactions
	1069, // 2958: mtproto.RPCReactions.messages_getRecentReactions:output_type -> mtproto.messages_Reactions
	789,  // 2959: mtproto.RPCReactions.messages_clearRecentReactions:output_type -> mtproto.Bool
	918,  // 2960: mtproto.RPCReactions.messages_sendPaidReaction:output_type -> mtproto.Updates
	789,  // 2961: mtproto.RPCReactions.messages_togglePaidReactionPrivacy:output_type -> mtproto.Bool
	918,  // 2962: mtproto.RPCReactions.messages_getPaidReactionPrivacy:output_type -> mtproto.Updates
	789,  // 2963: mtproto.RPCReports.account_reportPeer:output_type -> mtproto.Bool
	789,  // 2964: mtproto.RPCReports.account_reportProfilePhoto:output_type -> mtproto.Bool
	789,  // 2965: mtproto.RPCReports.messages_reportSpam:output_type -> mtproto.Bool
	1070, // 2966: mtproto.RPCReports.messages_reportFC78AF9B:output_type -> mtproto.ReportResult
	789,  // 2967: mtproto.RPCReports.messages_reportEncryptedSpam:output_type -> mtproto.Bool
	789,  // 2968: mtproto.RPCReports.channels_reportSpam:output_type -> mtproto.Bool
	789,  // 2969: mtproto.RPCReports.messages_report8953AB4E:output_type -> mtproto.Bool
	1071, // 2970: mtproto.RPCRingtone.account_getSavedRingtones:output_type -> mtproto.account_SavedRingtones
	1072, // 2971: mtproto.RPCRingtone.account_saveRingtone:output_type -> mtproto.account_SavedRingtone
	904,  // 2972: mtproto.RPCRingtone.account_uploadRingtone:output_type -> mtproto.Document
	1073, // 2973: mtproto.RPCSavedMessageDialogs.messages_getSavedDialogs:output_type -> mtproto.messages_SavedDialogs
	947,  // 2974: mtproto.RPCSavedMessageDialogs.messages_getSavedHistory:output_type -> mtproto.messages_Messages
	960,  // 2975: mtproto.RPCSavedMessageDialogs.messages_deleteSavedHistory:output_type -> mtproto.messages_AffectedHistory
	1073, // 2976: mtproto.RPCSavedMessageDialogs.messages_getPinnedSavedDialogs:output_type -> mtproto.messages_SavedDialogs
	789,  // 2977: mtproto.RPCSavedMessageDialogs.messages_toggleSavedDialogPin:output_type -> mtproto.Bool
	789,  // 2978: mtproto.RPCSavedMessageDialogs.messages_reorderPinnedSavedDialogs:output_type -> mtproto.Bool
	1074, // 2979: mtproto.RPCSavedMessageTags.messages_getSavedReactionTags:output_type -> mtproto.messages_SavedReactionTags
	789,  // 2980: mtproto.RPCSavedMessageTags.messages_updateSavedReactionTag:output_type -> mtproto.Bool
	1069, // 2981: mtproto.RPCSavedMessageTags.messages_getDefaultTagReactions:output_type -> mtproto.messages_Reactions
	947,  // 2982: mtproto.RPCScheduledMessages.messages_getScheduledHistory:output_type -> mtproto.messages_Messages
	947,  // 2983: mtproto.RPCScheduledMessages.messages_getScheduledMessages:output_type -> mtproto.messages_Messages
	918,  // 2984: mtproto.RPCScheduledMessages.messages_sendScheduledMessages:output_type -> mtproto.Updates
	918,  // 2985: mtproto.RPCScheduledMessages.messages_deleteScheduledMessages:output_type -> mtproto.Updates
	1075, // 2986: mtproto.RPCSeamless.account_getWebAuthorizations:output_type -> mtproto.account_WebAuthorizations
	789,  // 2987: mtproto.RPCSeamless.account_resetWebAuthorization:output_type -> mtproto.Bool
	789,  // 2988: mtproto.RPCSeamless.account_resetWebAuthorizations:output_type -> mtproto.Bool
	1076, // 2989: mtproto.RPCSeamless.messages_requestUrlAuth:output_type -> mtproto.UrlAuthResult
	1076, // 2990: mtproto.RPCSeamless.messages_acceptUrlAuth:output_type -> mtproto.UrlAuthResult
	1077, // 2991: mtproto.RPCSecretChats.messages_getDhConfig:output_type -> mtproto.messages_DhConfig
	1078, // 2992: mtproto.RPCSecretChats.messages_requestEncryption:output_type -> mtproto.EncryptedChat
	1078, // 2993: mtproto.RPCSecretChats.messages_acceptEncryption:output_type -> mtproto.EncryptedChat
	789,  // 2994: mtproto.RPCSecretChats.messages_discardEncryption:output_type -> mtproto.Bool
	789,  // 2995: mtproto.RPCSecretChats.messages_setEncryptedTyping:output_type -> mtproto.Bool
	789,  // 2996: mtproto.RPCSecretChats.messages_readEncryptedHistory:output_type -> mtproto.Bool
	1079, // 2997: mtproto.RPCSecretChats.messages_sendEncrypted:output_type -> mtproto.messages_SentEncryptedMessage
	1079, // 2998: mtproto.RPCSecretChats.messages_sendEncryptedFile:output_type -> mtproto.messages_SentEncryptedMessage
	1079, // 2999: mtproto.RPCSecretChats.messages_sendEncryptedService:output_type -> mtproto.messages_SentEncryptedMessage
	756,  // 3000: mtproto.RPCSecretChats.messages_receivedQueue:output_type -> mtproto.Vector_Long
	1080, // 3001: mtproto.RPCSmsjobs.smsjobs_isEligibleToJoin:output_type -> mtproto.smsjobs_EligibilityToJoin
	789,  // 3002: mtproto.RPCSmsjobs.smsjobs_join:output_type -> mtproto.Bool
	789,  // 3003: mtproto.RPCSmsjobs.smsjobs_leave:output_type -> mtproto.Bool
	789,  // 3004: mtproto.RPCSmsjobs.smsjobs_updateSettings:output_type -> mtproto.Bool
	1081, // 3005: mtproto.RPCSmsjobs.smsjobs_getStatus:output_type -> mtproto.smsjobs_Status
	1082, // 3006: mtproto.RPCSmsjobs.smsjobs_getSmsJob:output_type -> mtproto.SmsJob
	789,  // 3007: mtproto.RPCSmsjobs.smsjobs_finishJob:output_type -> mtproto.Bool
	789,  // 3008: mtproto.RPCSponsoredMessages.account_toggleSponsoredMessages:output_type -> mtproto.Bool
	1083, // 3009: mtproto.RPCSponsoredMessages.contacts_getSponsoredPeers:output_type -> mtproto.contacts_SponsoredPeers
	789,  // 3010: mtproto.RPCSponsoredMessages.messages_viewSponsoredMessage:output_type -> mtproto.Bool
	789,  // 3011: mtproto.RPCSponsoredMessages.messages_clickSponsoredMessage:output_type -> mtproto.Bool
	1084, // 3012: mtproto.RPCSponsoredMessages.messages_reportSponsoredMessage:output_type -> mtproto.channels_SponsoredMessageReportResult
	1085, // 3013: mtproto.RPCSponsoredMessages.messages_getSponsoredMessages:output_type -> mtproto.messages_SponsoredMessages
	918,  // 3014: mtproto.RPCSponsoredMessages.channels_restrictSponsoredMessages:output_type -> mtproto.Updates
	789,  // 3015: mtproto.RPCSponsoredMessages.channels_viewSponsoredMessage:output_type -> mtproto.Bool
	1085, // 3016: mtproto.RPCSponsoredMessages.channels_getSponsoredMessages:output_type -> mtproto.messages_SponsoredMessages
	789,  // 3017: mtproto.RPCSponsoredMessages.channels_clickSponsoredMessage:output_type -> mtproto.Bool
	1084, // 3018: mtproto.RPCSponsoredMessages.channels_reportSponsoredMessage:output_type -> mtproto.channels_SponsoredMessageReportResult
	1086, // 3019: mtproto.RPCStarSubscriptions.payments_getStarsSubscriptions:output_type -> mtproto.payments_StarsStatus
	789,  // 3020: mtproto.RPCStarSubscriptions.payments_changeStarsSubscription:output_type -> mtproto.Bool
	789,  // 3021: mtproto.RPCStarSubscriptions.payments_fulfillStarsSubscription:output_type -> mtproto.Bool
	789,  // 3022: mtproto.RPCStarSubscriptions.payments_botCancelStarsSubscription:output_type -> mtproto.Bool
	770,  // 3023: mtproto.RPCStars.payments_getStarsTopupOptions:output_type -> mtproto.Vector_StarsTopupOption
	1086, // 3024: mtproto.RPCStars.payments_getStarsStatus:output_type -> mtproto.payments_StarsStatus
	1086, // 3025: mtproto.RPCStars.payments_getStarsTransactions:output_type -> mtproto.payments_StarsStatus
	1053, // 3026: mtproto.RPCStars.payments_sendStarsForm:output_type -> mtproto.payments_PaymentResult
	918,  // 3027: mtproto.RPCStars.payments_refundStarsCharge:output_type -> mtproto.Updates
	1087, // 3028: mtproto.RPCStars.payments_getStarsRevenueStats:output_type -> mtproto.payments_StarsRevenueStats
	1088, // 3029: mtproto.RPCStars.payments_getStarsRevenueWithdrawalUrl:output_type -> mtproto.payments_StarsRevenueWithdrawalUrl
	1089, // 3030: mtproto.RPCStars.payments_getStarsRevenueAdsAccountUrl:output_type -> mtproto.payments_StarsRevenueAdsAccountUrl
	1086, // 3031: mtproto.RPCStars.payments_getStarsTransactionsByID:output_type -> mtproto.payments_StarsStatus
	771,  // 3032: mtproto.RPCStars.payments_getStarsGiftOptions:output_type -> mtproto.Vector_StarsGiftOption
	1090, // 3033: mtproto.RPCStatistics.stats_getBroadcastStats:output_type -> mtproto.stats_BroadcastStats
	1091, // 3034: mtproto.RPCStatistics.stats_loadAsyncGraph:output_type -> mtproto.StatsGraph
	1092, // 3035: mtproto.RPCStatistics.stats_getMegagroupStats:output_type -> mtproto.stats_MegagroupStats
	1093, // 3036: mtproto.RPCStatistics.stats_getMessagePublicForwards5F150144:output_type -> mtproto.stats_PublicForwards
	1094, // 3037: mtproto.RPCStatistics.stats_getMessageStats:output_type -> mtproto.stats_MessageStats
	1095, // 3038: mtproto.RPCStatistics.stats_getStoryStats:output_type -> mtproto.stats_StoryStats
	1093, // 3039: mtproto.RPCStatistics.stats_getStoryPublicForwards:output_type -> mtproto.stats_PublicForwards
	947,  // 3040: mtproto.RPCStatistics.stats_getMessagePublicForwards5630281B:output_type -> mtproto.messages_Messages
	1096, // 3041: mtproto.RPCStickers.messages_getStickers:output_type -> mtproto.messages_Stickers
	980,  // 3042: mtproto.RPCStickers.messages_getAllStickers:output_type -> mtproto.messages_AllStickers
	1097, // 3043: mtproto.RPCStickers.messages_getStickerSet:output_type -> mtproto.messages_StickerSet
	1098, // 3044: mtproto.RPCStickers.messages_installStickerSet:output_type -> mtproto.messages_StickerSetInstallResult
	789,  // 3045: mtproto.RPCStickers.messages_uninstallStickerSet:output_type -> mtproto.Bool
	789,  // 3046: mtproto.RPCStickers.messages_reorderStickerSets:output_type -> mtproto.Bool
	981,  // 3047: mtproto.RPCStickers.messages_getFeaturedStickers:output_type -> mtproto.messages_FeaturedStickers
	789,  // 3048: mtproto.RPCStickers.messages_readFeaturedStickers:output_type -> mtproto.Bool
	1099, // 3049: mtproto.RPCStickers.messages_getRecentStickers:output_type -> mtproto.messages_RecentStickers
	789,  // 3050: mtproto.RPCStickers.messages_saveRecentSticker:output_type -> mtproto.Bool
	789,  // 3051: mtproto.RPCStickers.messages_clearRecentStickers:output_type -> mtproto.Bool
	1100, // 3052: mtproto.RPCStickers.messages_getArchivedStickers:output_type -> mtproto.messages_ArchivedStickers
	980,  // 3053: mtproto.RPCStickers.messages_getMaskStickers:output_type -> mtproto.messages_AllStickers
	757,  // 3054: mtproto.RPCStickers.messages_getAttachedStickers:output_type -> mtproto.Vector_StickerSetCovered
	1101, // 3055: mtproto.RPCStickers.messages_getFavedStickers:output_type -> mtproto.messages_FavedStickers
	789,  // 3056: mtproto.RPCStickers.messages_faveSticker:output_type -> mtproto.Bool
	1102, // 3057: mtproto.RPCStickers.messages_searchStickerSets:output_type -> mtproto.messages_FoundStickerSets
	789,  // 3058: mtproto.RPCStickers.messages_toggleStickerSets:output_type -> mtproto.Bool
	981,  // 3059: mtproto.RPCStickers.messages_getOldFeaturedStickers:output_type -> mtproto.messages_FeaturedStickers
	1102, // 3060: mtproto.RPCStickers.messages_searchEmojiStickerSets:output_type -> mtproto.messages_FoundStickerSets
	1103, // 3061: mtproto.RPCStickers.messages_getMyStickers:output_type -> mtproto.messages_MyStickers
	1104, // 3062: mtproto.RPCStickers.messages_searchStickers:output_type -> mtproto.messages_FoundStickers
	1097, // 3063: mtproto.RPCStickers.stickers_createStickerSet:output_type -> mtproto.messages_StickerSet
	1097, // 3064: mtproto.RPCStickers.stickers_removeStickerFromSet:output_type -> mtproto.messages_StickerSet
	1097, // 3065: mtproto.RPCStickers.stickers_changeStickerPosition:output_type -> mtproto.messages_StickerSet
	1097, // 3066: mtproto.RPCStickers.stickers_addStickerToSet:output_type -> mtproto.messages_StickerSet
	1097, // 3067: mtproto.RPCStickers.stickers_setStickerSetThumb:output_type -> mtproto.messages_StickerSet
	789,  // 3068: mtproto.RPCStickers.stickers_checkShortName:output_type -> mtproto.Bool
	1105, // 3069: mtproto.RPCStickers.stickers_suggestShortName:output_type -> mtproto.stickers_SuggestedShortName
	1097, // 3070: mtproto.RPCStickers.stickers_changeSticker:output_type -> mtproto.messages_StickerSet
	1097, // 3071: mtproto.RPCStickers.stickers_renameStickerSet:output_type -> mtproto.messages_StickerSet
	789,  // 3072: mtproto.RPCStickers.stickers_deleteStickerSet:output_type -> mtproto.Bool
	1097, // 3073: mtproto.RPCStickers.stickers_replaceSticker:output_type -> mtproto.messages_StickerSet
	789,  // 3074: mtproto.RPCStories.stories_canSendStory:output_type -> mtproto.Bool
	918,  // 3075: mtproto.RPCStories.stories_sendStory:output_type -> mtproto.Updates
	918,  // 3076: mtproto.RPCStories.stories_editStory:output_type -> mtproto.Updates
	752,  // 3077: mtproto.RPCStories.stories_deleteStories:output_type -> mtproto.Vector_Int
	752,  // 3078: mtproto.RPCStories.stories_togglePinned:output_type -> mtproto.Vector_Int
	1106, // 3079: mtproto.RPCStories.stories_getAllStories:output_type -> mtproto.stories_AllStories
	1107, // 3080: mtproto.RPCStories.stories_getPinnedStories:output_type -> mtproto.stories_Stories
	1107, // 3081: mtproto.RPCStories.stories_getStoriesArchive:output_type -> mtproto.stories_Stories
	1107, // 3082: mtproto.RPCStories.stories_getStoriesByID:output_type -> mtproto.stories_Stories
	789,  // 3083: mtproto.RPCStories.stories_toggleAllStoriesHidden:output_type -> mtproto.Bool
	752,  // 3084: mtproto.RPCStories.stories_readStories:output_type -> mtproto.Vector_Int
	789,  // 3085: mtproto.RPCStories.stories_incrementStoryViews:output_type -> mtproto.Bool
	1108, // 3086: mtproto.RPCStories.stories_getStoryViewsList:output_type -> mtproto.stories_StoryViewsList
	1109, // 3087: mtproto.RPCStories.stories_getStoriesViews:output_type -> mtproto.stories_StoryViews
	1110, // 3088: mtproto.RPCStories.stories_exportStoryLink:output_type -> mtproto.ExportedStoryLink
	1070, // 3089: mtproto.RPCStories.stories_report19D8EB45:output_type -> mtproto.ReportResult
	918,  // 3090: mtproto.RPCStories.stories_activateStealthMode:output_type -> mtproto.Updates
	918,  // 3091: mtproto.RPCStories.stories_sendReaction:output_type -> mtproto.Updates
	1111, // 3092: mtproto.RPCStories.stories_getPeerStories:output_type -> mtproto.stories_PeerStories
	918,  // 3093: mtproto.RPCStories.stories_getAllReadPeerStories:output_type -> mtproto.Updates
	752,  // 3094: mtproto.RPCStories.stories_getPeerMaxIDs:output_type -> mtproto.Vector_Int
	951,  // 3095: mtproto.RPCStories.stories_getChatsToSend:output_type -> mtproto.messages_Chats
	789,  // 3096: mtproto.RPCStories.stories_togglePeerStoriesHidden:output_type -> mtproto.Bool
	1112, // 3097: mtproto.RPCStories.stories_getStoryReactionsList:output_type -> mtproto.stories_StoryReactionsList
	789,  // 3098: mtproto.RPCStories.stories_togglePinnedToTop:output_type -> mtproto.Bool
	1113, // 3099: mtproto.RPCStories.stories_searchPosts:output_type -> mtproto.stories_FoundStories
	789,  // 3100: mtproto.RPCStories.stories_report1923FA8C:output_type -> mtproto.Bool
	752,  // 3101: mtproto.RPCStories.users_getStoriesMaxIDs:output_type -> mtproto.Vector_Int
	789,  // 3102: mtproto.RPCStories.contacts_toggleStoriesHidden:output_type -> mtproto.Bool
	1114, // 3103: mtproto.RPCStories.stories_getUserStories:output_type -> mtproto.stories_UserStories
	918,  // 3104: mtproto.RPCStories.stories_getAllReadUserStories:output_type -> mtproto.Updates
	789,  // 3105: mtproto.RPCStories.stories_reportC95BE06A:output_type -> mtproto.Bool
	1115, // 3106: mtproto.RPCTakeout.account_initTakeoutSession:output_type -> mtproto.account_Takeout
	789,  // 3107: mtproto.RPCTakeout.account_finishTakeoutSession:output_type -> mtproto.Bool
	758,  // 3108: mtproto.RPCTakeout.messages_getSplitRanges:output_type -> mtproto.Vector_MessageRange
	951,  // 3109: mtproto.RPCTakeout.channels_getLeftChannels:output_type -> mtproto.messages_Chats
	904,  // 3110: mtproto.RPCThemes.account_uploadTheme:output_type -> mtproto.Document
	1116, // 3111: mtproto.RPCThemes.account_createTheme:output_type -> mtproto.Theme
	1116, // 3112: mtproto.RPCThemes.account_updateTheme:output_type -> mtproto.Theme
	789,  // 3113: mtproto.RPCThemes.account_saveTheme:output_type -> mtproto.Bool
	789,  // 3114: mtproto.RPCThemes.account_installTheme:output_type -> mtproto.Bool
	1116, // 3115: mtproto.RPCThemes.account_getTheme:output_type -> mtproto.Theme
	1117, // 3116: mtproto.RPCThemes.account_getThemes:output_type -> mtproto.account_Themes
	1117, // 3117: mtproto.RPCThemes.account_getChatThemes:output_type -> mtproto.account_Themes
	918,  // 3118: mtproto.RPCThemes.messages_setChatTheme:output_type -> mtproto.Updates
	1118, // 3119: mtproto.RPCTimezones.help_getTimezonesList:output_type -> mtproto.help_TimezonesList
	1119, // 3120: mtproto.RPCTos.help_getTermsOfServiceUpdate:output_type -> mtproto.help_TermsOfServiceUpdate
	789,  // 3121: mtproto.RPCTos.help_acceptTermsOfService:output_type -> mtproto.Bool
	1120, // 3122: mtproto.RPCTranscription.messages_transcribeAudio:output_type -> mtproto.messages_TranscribedAudio
	789,  // 3123: mtproto.RPCTranscription.messages_rateTranscribedAudio:output_type -> mtproto.Bool
	1121, // 3124: mtproto.RPCTranslation.messages_translateText:output_type -> mtproto.messages_TranslatedText
	789,  // 3125: mtproto.RPCTranslation.messages_togglePeerTranslations:output_type -> mtproto.Bool
	1122, // 3126: mtproto.RPCTsf.help_getUserInfo:output_type -> mtproto.help_UserInfo
	1122, // 3127: mtproto.RPCTsf.help_editUserInfo:output_type -> mtproto.help_UserInfo
	1123, // 3128: mtproto.RPCTwoFa.account_getPassword:output_type -> mtproto.account_Password
	1124, // 3129: mtproto.RPCTwoFa.account_getPasswordSettings:output_type -> mtproto.account_PasswordSettings
	789,  // 3130: mtproto.RPCTwoFa.account_updatePasswordSettings:output_type -> mtproto.Bool
	789,  // 3131: mtproto.RPCTwoFa.account_confirmPasswordEmail:output_type -> mtproto.Bool
	789,  // 3132: mtproto.RPCTwoFa.account_resendPasswordEmail:output_type -> mtproto.Bool
	789,  // 3133: mtproto.RPCTwoFa.account_cancelPasswordEmail:output_type -> mtproto.Bool
	789,  // 3134: mtproto.RPCTwoFa.account_declinePasswordReset:output_type -> mtproto.Bool
	1125, // 3135: mtproto.RPCUpdates.updates_getState:output_type -> mtproto.updates_State
	1126, // 3136: mtproto.RPCUpdates.updates_getDifference:output_type -> mtproto.updates_Difference
	1127, // 3137: mtproto.RPCUpdates.updates_getChannelDifference:output_type -> mtproto.updates_ChannelDifference
	893,  // 3138: mtproto.RPCUserProfile.account_updateProfile:output_type -> mtproto.User
	789,  // 3139: mtproto.RPCUserProfile.account_updateStatus:output_type -> mtproto.Bool
	789,  // 3140: mtproto.RPCUserProfile.account_updateBirthday:output_type -> mtproto.Bool
	789,  // 3141: mtproto.RPCUserProfile.account_updatePersonalChannel:output_type -> mtproto.Bool
	1128, // 3142: mtproto.RPCUserProfile.contacts_getBirthdays:output_type -> mtproto.contacts_ContactBirthdays
	1129, // 3143: mtproto.RPCUserProfile.photos_updateProfilePhoto:output_type -> mtproto.photos_Photo
	1129, // 3144: mtproto.RPCUserProfile.photos_uploadProfilePhoto:output_type -> mtproto.photos_Photo
	756,  // 3145: mtproto.RPCUserProfile.photos_deletePhotos:output_type -> mtproto.Vector_Long
	1130, // 3146: mtproto.RPCUserProfile.photos_getUserPhotos:output_type -> mtproto.photos_Photos
	1129, // 3147: mtproto.RPCUserProfile.photos_uploadContactProfilePhoto:output_type -> mtproto.photos_Photo
	893,  // 3148: mtproto.RPCUserProfile.account_updateVerified:output_type -> mtproto.User
	789,  // 3149: mtproto.RPCUsernames.account_checkUsername:output_type -> mtproto.Bool
	893,  // 3150: mtproto.RPCUsernames.account_updateUsername:output_type -> mtproto.User
	1131, // 3151: mtproto.RPCUsernames.contacts_resolveUsername:output_type -> mtproto.contacts_ResolvedPeer
	789,  // 3152: mtproto.RPCUsernames.channels_checkUsername:output_type -> mtproto.Bool
	789,  // 3153: mtproto.RPCUsernames.channels_updateUsername:output_type -> mtproto.Bool
	750,  // 3154: mtproto.RPCUsers.users_getUsers:output_type -> mtproto.Vector_User
	1132, // 3155: mtproto.RPCUsers.users_getFullUser:output_type -> mtproto.users_UserFull
	1131, // 3156: mtproto.RPCUsers.contacts_resolvePhone:output_type -> mtproto.contacts_ResolvedPeer
	893,  // 3157: mtproto.RPCUsers.users_getMe:output_type -> mtproto.User
	1133, // 3158: mtproto.RPCVoipCalls.messages_deletePhoneCallHistory:output_type -> mtproto.messages_AffectedFoundMessages
	858,  // 3159: mtproto.RPCVoipCalls.phone_getCallConfig:output_type -> mtproto.DataJSON
	1134, // 3160: mtproto.RPCVoipCalls.phone_requestCall:output_type -> mtproto.phone_PhoneCall
	1134, // 3161: mtproto.RPCVoipCalls.phone_acceptCall:output_type -> mtproto.phone_PhoneCall
	1134, // 3162: mtproto.RPCVoipCalls.phone_confirmCall:output_type -> mtproto.phone_PhoneCall
	789,  // 3163: mtproto.RPCVoipCalls.phone_receivedCall:output_type -> mtproto.Bool
	918,  // 3164: mtproto.RPCVoipCalls.phone_discardCall:output_type -> mtproto.Updates
	918,  // 3165: mtproto.RPCVoipCalls.phone_setCallRating:output_type -> mtproto.Updates
	789,  // 3166: mtproto.RPCVoipCalls.phone_saveCallDebug:output_type -> mtproto.Bool
	789,  // 3167: mtproto.RPCVoipCalls.phone_sendSignalingData:output_type -> mtproto.Bool
	789,  // 3168: mtproto.RPCVoipCalls.phone_saveCallLog:output_type -> mtproto.Bool
	1134, // 3169: mtproto.RPCVoipCalls.phone_createConferenceCall:output_type -> mtproto.phone_PhoneCall
	1135, // 3170: mtproto.RPCWallpapers.account_getWallPapers:output_type -> mtproto.account_WallPapers
	892,  // 3171: mtproto.RPCWallpapers.account_getWallPaper:output_type -> mtproto.WallPaper
	892,  // 3172: mtproto.RPCWallpapers.account_uploadWallPaper:output_type -> mtproto.WallPaper
	789,  // 3173: mtproto.RPCWallpapers.account_saveWallPaper:output_type -> mtproto.Bool
	789,  // 3174: mtproto.RPCWallpapers.account_installWallPaper:output_type -> mtproto.Bool
	789,  // 3175: mtproto.RPCWallpapers.account_resetWallPapers:output_type -> mtproto.Bool
	749,  // 3176: mtproto.RPCWallpapers.account_getMultiWallPapers:output_type -> mtproto.Vector_WallPaper
	918,  // 3177: mtproto.RPCWallpapers.messages_setChatWallPaper:output_type -> mtproto.Updates
	1136, // 3178: mtproto.RPCWebPage.messages_getWebPagePreview570D6F6F:output_type -> mtproto.messages_WebPagePreview
	1137, // 3179: mtproto.RPCWebPage.messages_getWebPage8D9692A3:output_type -> mtproto.messages_WebPage
	992,  // 3180: mtproto.RPCWebPage.messages_getWebPagePreview8B68B0CC:output_type -> mtproto.MessageMedia
	1138, // 3181: mtproto.RPCWebPage.messages_getWebPage32CA8F91:output_type -> mtproto.WebPage
	890,  // 3182: mtproto.RPCBiz.biz_invokeBizDataRaw:output_type -> mtproto.BizDataRaw
	2446, // [2446:3183] is the sub-list for method output_type
	1709, // [1709:2446] is the sub-list for method input_type
	1709, // [1709:1709] is the sub-list for extension type_name
	1709, // [1709:1709] is the sub-list for extension extendee
	0,    // [0:1709] is the sub-list for field type_name
}

func init() { file_schema_tl_sync_service_proto_init() }
func file_schema_tl_sync_service_proto_init() {
	if File_schema_tl_sync_service_proto != nil {
		return
	}
	file_schema_tl_core_types_proto_init()
	file_schema_tl_crc32_proto_init()
	file_schema_tl_sync_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_schema_tl_sync_service_proto_rawDesc), len(file_schema_tl_sync_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   780,
			NumExtensions: 0,
			NumServices:   102,
		},
		GoTypes:           file_schema_tl_sync_service_proto_goTypes,
		DependencyIndexes: file_schema_tl_sync_service_proto_depIdxs,
		MessageInfos:      file_schema_tl_sync_service_proto_msgTypes,
	}.Build()
	File_schema_tl_sync_service_proto = out.File
	file_schema_tl_sync_service_proto_goTypes = nil
	file_schema_tl_sync_service_proto_depIdxs = nil
}
